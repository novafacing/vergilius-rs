// 0x0 bytes (sizeof)
typedef struct _LDRP_LOAD_CONTEXT {
} _LDRP_LOAD_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct _VERIFIER_SHARED_EXPORT_THUNK {
} _VERIFIER_SHARED_EXPORT_THUNK;

// 0x10 bytes (sizeof)
typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS {
  struct _VERIFIER_SHARED_EXPORT_THUNK
      *SharedExportThunks; // offset: 0x0 ordinal: 0x0
  struct _VERIFIER_SHARED_EXPORT_THUNK
      *PoolSharedExportThunks; // offset: 0x4 ordinal: 0x1
  struct _VERIFIER_SHARED_EXPORT_THUNK
      *OrderDependentSharedExportThunks; // offset: 0x8 ordinal: 0x2
  struct _VERIFIER_SHARED_EXPORT_THUNK
      *XdvSharedExportThunks; // offset: 0xc ordinal: 0x3
} _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;

// 0x0 bytes (sizeof)
typedef struct _ACTIVATION_CONTEXT_DATA {
} _ACTIVATION_CONTEXT_DATA;

// 0x0 bytes (sizeof)
typedef struct __WIL__WNF_USER_SUBSCRIPTION {
} __WIL__WNF_USER_SUBSCRIPTION;

// 0x0 bytes (sizeof)
typedef struct _IOMMU_DMA_DOMAIN {
} _IOMMU_DMA_DOMAIN;

// 0x0 bytes (sizeof)
typedef struct _ADAPTER_OBJECT {
} _ADAPTER_OBJECT;

// 0x0 bytes (sizeof)
typedef struct _CALLBACK_OBJECT {
} _CALLBACK_OBJECT;

// 0x4 bytes (sizeof)
typedef struct __anon_1945 {
  struct _SHARED_CACHE_MAP *SharedCacheMap; // offset: 0x0 ordinal: 0x0
} __anon_1945;

typedef unsigned char UCHAR;

typedef unsigned long long ULONGLONG;

typedef void VOID;

// 0x0 bytes (sizeof)
typedef struct _PCW_INSTANCE {
} _PCW_INSTANCE;

// 0x0 bytes (sizeof)
typedef struct _PCW_BUFFER {
} _PCW_BUFFER;

// 0x0 bytes (sizeof)
typedef struct _PCW_REGISTRATION {
} _PCW_REGISTRATION;

// 0x0 bytes (sizeof)
typedef struct _KTMNOTIFICATION_PACKET {
} _KTMNOTIFICATION_PACKET;

// 0x0 bytes (sizeof)
typedef struct _MI_SLAB_ALLOCATOR_ENTRY {
} _MI_SLAB_ALLOCATOR_ENTRY;

// 0x0 bytes (sizeof)
typedef struct _MI_ZERO_THREAD_CONTEXT {
} _MI_ZERO_THREAD_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct wil_StagingConfig {
} wil_StagingConfig;

typedef unsigned short USHORT;

typedef unsigned long ULONG;

// 0x4 bytes (sizeof)
typedef struct _EXT_IOMMU_DEVICE_ID_GIC {
  ULONG LineNumber; // offset: 0x0 ordinal: 0x0
} _EXT_IOMMU_DEVICE_ID_GIC;

// 0x8 bytes (sizeof)
typedef struct wil_details_StagingConfigWnfStateName {
  ULONG Data[2]; // offset: 0x0 ordinal: 0x0
} wil_details_StagingConfigWnfStateName;

// 0x4 bytes (sizeof)
typedef struct wil_details_StagingConfigHeaderProperties {
  ULONG ignoreServiceState : 1; // offset: 0x0 ordinal: 0x0
  ULONG ignoreUserState : 1;    // offset: 0x0 ordinal: 0x1
  ULONG ignoreTestState : 1;    // offset: 0x0 ordinal: 0x2
  ULONG ignoreVariants : 1;     // offset: 0x0 ordinal: 0x3
  ULONG unused : 28;            // offset: 0x0 ordinal: 0x4
} wil_details_StagingConfigHeaderProperties;

// 0x10 bytes (sizeof)
typedef struct wil_details_StagingConfigUsageTrigger {
  ULONG featureId; // offset: 0x0 ordinal: 0x0
  struct wil_details_StagingConfigWnfStateName
      trigger;                     // offset: 0x4 ordinal: 0x1
  ULONG serviceReportingKind : 16; // offset: 0xc ordinal: 0x2
  ULONG isVariantConfig : 1;       // offset: 0xc ordinal: 0x3
  ULONG unused : 15;               // offset: 0xc ordinal: 0x4
} wil_details_StagingConfigUsageTrigger;

// 0xc bytes (sizeof)
typedef struct wil_details_StagingConfigFeature {
  ULONG featureId;            // offset: 0x0 ordinal: 0x0
  ULONG changedInSession : 1; // offset: 0x4 ordinal: 0x1
  ULONG isVariantConfig : 1;  // offset: 0x4 ordinal: 0x2
  ULONG unused1 : 6;          // offset: 0x4 ordinal: 0x3
  ULONG serviceState : 2;     // offset: 0x4 ordinal: 0x4
  ULONG userState : 2;        // offset: 0x4 ordinal: 0x5
  ULONG testState : 2;        // offset: 0x4 ordinal: 0x6
  ULONG unused2 : 2;          // offset: 0x4 ordinal: 0x7
  ULONG unused3 : 8;          // offset: 0x4 ordinal: 0x8
  ULONG variant : 6;          // offset: 0x4 ordinal: 0x9
  ULONG payloadKind : 2;      // offset: 0x4 ordinal: 0xa
  ULONG payload;              // offset: 0x8 ordinal: 0xb
} wil_details_StagingConfigFeature;

// 0x4 bytes (sizeof)
typedef struct wil_details_VariantProperties {
  ULONG enabledState : 2;         // offset: 0x0 ordinal: 0x0
  ULONG isVariant : 1;            // offset: 0x0 ordinal: 0x1
  ULONG queuedForReporting : 1;   // offset: 0x0 ordinal: 0x2
  ULONG hasNotificationState : 2; // offset: 0x0 ordinal: 0x3
  ULONG recordedDeviceUsage : 1;  // offset: 0x0 ordinal: 0x4
  ULONG variant : 6;              // offset: 0x0 ordinal: 0x5
  ULONG unused : 19;              // offset: 0x0 ordinal: 0x6
} wil_details_VariantProperties;

// 0x4 bytes (sizeof)
typedef struct wil_details_FeatureProperties {
  ULONG enabledState : 2;                        // offset: 0x0 ordinal: 0x0
  ULONG isVariant : 1;                           // offset: 0x0 ordinal: 0x1
  ULONG queuedForReporting : 1;                  // offset: 0x0 ordinal: 0x2
  ULONG hasNotificationState : 2;                // offset: 0x0 ordinal: 0x3
  ULONG usageCount : 9;                          // offset: 0x0 ordinal: 0x4
  ULONG usageCountRepresentsPotential : 1;       // offset: 0x0 ordinal: 0x5
  ULONG reportedDeviceUsage : 1;                 // offset: 0x0 ordinal: 0x6
  ULONG reportedDevicePotential : 1;             // offset: 0x0 ordinal: 0x7
  ULONG reportedDeviceOpportunity : 1;           // offset: 0x0 ordinal: 0x8
  ULONG reportedDevicePotentialOpportunity : 1;  // offset: 0x0 ordinal: 0x9
  ULONG recordedDeviceUsage : 1;                 // offset: 0x0 ordinal: 0xa
  ULONG recordedDevicePotential : 1;             // offset: 0x0 ordinal: 0xb
  ULONG recordedDeviceOpportunity : 1;           // offset: 0x0 ordinal: 0xc
  ULONG recordedDevicePotentialOpportunity : 1;  // offset: 0x0 ordinal: 0xd
  ULONG opportunityCount : 7;                    // offset: 0x0 ordinal: 0xe
  ULONG opportunityCountRepresentsPotential : 1; // offset: 0x0 ordinal: 0xf
} wil_details_FeatureProperties;

// 0x0 bytes (sizeof)
typedef struct _HAL_PMC_COUNTERS {
} _HAL_PMC_COUNTERS;

// 0x0 bytes (sizeof)
typedef struct _ETW_EVENT_CALLBACK_CONTEXT {
} _ETW_EVENT_CALLBACK_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct _ETW_SOFT_RESTART_CONTEXT {
} _ETW_SOFT_RESTART_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct _EX_TIMER {
} _EX_TIMER;

// 0x0 bytes (sizeof)
typedef struct _ETW_STACK_CACHE {
} _ETW_STACK_CACHE;

// 0x0 bytes (sizeof)
typedef struct _ETW_PERFECT_HASH_FUNCTION {
} _ETW_PERFECT_HASH_FUNCTION;

// 0x0 bytes (sizeof)
typedef struct _EX_WNF_SUBSCRIPTION {
} _EX_WNF_SUBSCRIPTION;

// 0x0 bytes (sizeof)
typedef struct _DBGKP_ERROR_PORT {
} _DBGKP_ERROR_PORT;

// 0x0 bytes (sizeof)
typedef struct _CI_NGEN_PATHS {
} _CI_NGEN_PATHS;

// 0x0 bytes (sizeof)
typedef struct _SCSI_REQUEST_BLOCK {
} _SCSI_REQUEST_BLOCK;

// 0x0 bytes (sizeof)
typedef struct _JOB_NET_RATE_CONTROL {
} _JOB_NET_RATE_CONTROL;

// 0x0 bytes (sizeof)
typedef struct _PSP_STORAGE {
} _PSP_STORAGE;

// 0x0 bytes (sizeof)
typedef struct _JOB_CPU_RATE_CONTROL {
} _JOB_CPU_RATE_CONTROL;

// 0x0 bytes (sizeof)
typedef struct _JOB_NOTIFICATION_INFORMATION {
} _JOB_NOTIFICATION_INFORMATION;

// 0x0 bytes (sizeof)
typedef struct _JOB_ACCESS_STATE {
} _JOB_ACCESS_STATE;

// 0x4 bytes (sizeof)
typedef struct __anon_818 {
  struct _SCSI_REQUEST_BLOCK *Srb; // offset: 0x0 ordinal: 0x0
} __anon_818;

// 0x0 bytes (sizeof)
typedef struct _PO_PROCESS_ENERGY_CONTEXT {
} _PO_PROCESS_ENERGY_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct _EPROCESS_QUOTA_BLOCK {
} _EPROCESS_QUOTA_BLOCK;

// 0x0 bytes (sizeof)
typedef struct _PAGEFAULT_HISTORY {
} _PAGEFAULT_HISTORY;

// 0x8 bytes (sizeof)
typedef struct _HIVE_WRITE_WAIT_QUEUE {
  struct _ETHREAD *ActiveThread;      // offset: 0x0 ordinal: 0x0
  struct _HIVE_WAIT_PACKET *WaitList; // offset: 0x4 ordinal: 0x1
} _HIVE_WRITE_WAIT_QUEUE;

// 0x0 bytes (sizeof)
typedef struct _DEVICE_NODE_IOMMU_EXTENSION {
} _DEVICE_NODE_IOMMU_EXTENSION;

// 0x4 bytes (sizeof)
typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
  struct _DEVICE_OBJECT *ReserveDevice; // offset: 0x0 ordinal: 0x0
} _ARBITER_ADD_RESERVED_PARAMETERS;

// 0x4 bytes (sizeof)
typedef union __anon_523 {
  struct _DEVICE_NODE *NextResourceDeviceNode; // offset: 0x0 ordinal: 0x0
} __anon_523;

typedef long long LONGLONG;

typedef short SHORT;

// 0x10 bytes (sizeof)
typedef struct _TIME_FIELDS {
  SHORT Year;         // offset: 0x0 ordinal: 0x0
  SHORT Month;        // offset: 0x2 ordinal: 0x1
  SHORT Day;          // offset: 0x4 ordinal: 0x2
  SHORT Hour;         // offset: 0x6 ordinal: 0x3
  SHORT Minute;       // offset: 0x8 ordinal: 0x4
  SHORT Second;       // offset: 0xa ordinal: 0x5
  SHORT Milliseconds; // offset: 0xc ordinal: 0x6
  SHORT Weekday;      // offset: 0xe ordinal: 0x7
} _TIME_FIELDS;

// 0x4 bytes (sizeof)
typedef struct __anon_2069 {
  SHORT Type;           // offset: 0x0 ordinal: 0x0
  SHORT DataInfoOffset; // offset: 0x2 ordinal: 0x1
} __anon_2069;

// 0x4 bytes (sizeof)
typedef struct __anon_2067 {
  SHORT DataLength;  // offset: 0x0 ordinal: 0x0
  SHORT TotalLength; // offset: 0x2 ordinal: 0x1
} __anon_2067;

// 0x4 bytes (sizeof)
typedef struct _RTL_AVL_TREE {
  struct _RTL_BALANCED_NODE *Root; // offset: 0x0 ordinal: 0x0
} _RTL_AVL_TREE;

typedef unsigned short WCHAR;

// 0xc bytes (sizeof)
typedef struct _RTL_SPLAY_LINKS {
  struct _RTL_SPLAY_LINKS *Parent;     // offset: 0x0 ordinal: 0x0
  struct _RTL_SPLAY_LINKS *LeftChild;  // offset: 0x4 ordinal: 0x1
  struct _RTL_SPLAY_LINKS *RightChild; // offset: 0x8 ordinal: 0x2
} _RTL_SPLAY_LINKS;

typedef char CHAR;

// 0x4 bytes (sizeof)
typedef struct _LDRP_CSLIST {
  struct _SINGLE_LIST_ENTRY *Tail; // offset: 0x0 ordinal: 0x0
} _LDRP_CSLIST;

// 0x4 bytes (sizeof)
typedef struct _SINGLE_LIST_ENTRY {
  struct _SINGLE_LIST_ENTRY *Next; // offset: 0x0 ordinal: 0x0
} _SINGLE_LIST_ENTRY;

// 0x4 bytes (sizeof)
typedef struct _EXT_IOMMU_DEVICE_ID_ACPI {
  CHAR *ObjectName; // offset: 0x0 ordinal: 0x0
} _EXT_IOMMU_DEVICE_ID_ACPI;

// 0x8 bytes (sizeof)
typedef struct _ETW_BUFFER_QUEUE {
  struct _SINGLE_LIST_ENTRY *QueueTail; // offset: 0x0 ordinal: 0x0
  struct _SINGLE_LIST_ENTRY QueueEntry; // offset: 0x4 ordinal: 0x1
} _ETW_BUFFER_QUEUE;

// 0x8 bytes (sizeof)
typedef struct _KDPC_LIST {
  struct _SINGLE_LIST_ENTRY ListHead;   // offset: 0x0 ordinal: 0x0
  struct _SINGLE_LIST_ENTRY *LastEntry; // offset: 0x4 ordinal: 0x1
} _KDPC_LIST;

// 0x0 bytes (sizeof)
typedef struct _ASSEMBLY_STORAGE_MAP {
} _ASSEMBLY_STORAGE_MAP;

// 0x4 bytes (sizeof)
typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
  struct _LIST_ENTRY *ArbitrationList; // offset: 0x0 ordinal: 0x0
} _ARBITER_QUERY_ARBITRATE_PARAMETERS;

// 0x4 bytes (sizeof)
typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
  struct _LIST_ENTRY *ArbitrationList; // offset: 0x0 ordinal: 0x0
} _ARBITER_BOOT_ALLOCATION_PARAMETERS;

// 0x8 bytes (sizeof)
typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink; // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY *Blink; // offset: 0x4 ordinal: 0x1
} _LIST_ENTRY;

// 0x8 bytes (sizeof)
typedef struct __anon_3230 {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
} __anon_3230;

// 0xc bytes (sizeof)
typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST {
  struct _LIST_ENTRY ListEntry;           // offset: 0x0 ordinal: 0x0
  struct _TRIAGE_DEVICE_NODE *DeviceNode; // offset: 0x8 ordinal: 0x1
} _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;

// 0x8 bytes (sizeof)
typedef struct _ARC_DISK_INFORMATION {
  struct _LIST_ENTRY DiskSignatures; // offset: 0x0 ordinal: 0x0
} _ARC_DISK_INFORMATION;

// 0xc bytes (sizeof)
typedef struct _DELAY_ACK_FO {
  struct _LIST_ENTRY Links;                // offset: 0x0 ordinal: 0x0
  struct _FILE_OBJECT *OriginalFileObject; // offset: 0x8 ordinal: 0x1
} _DELAY_ACK_FO;

// 0x8 bytes (sizeof)
typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE {
  struct _LIST_ENTRY DispatchedList; // offset: 0x0 ordinal: 0x0
} _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;

// 0x18 bytes (sizeof)
typedef struct _CM_KCB_LAYER_INFO {
  struct _LIST_ENTRY LayerListEntry;     // offset: 0x0 ordinal: 0x0
  struct _CM_KEY_CONTROL_BLOCK *Kcb;     // offset: 0x8 ordinal: 0x1
  struct _CM_KCB_LAYER_INFO *LowerLayer; // offset: 0xc ordinal: 0x2
  struct _LIST_ENTRY UpperLayerListHead; // offset: 0x10 ordinal: 0x3
} _CM_KCB_LAYER_INFO;

// 0x8 bytes (sizeof)
typedef struct _MMWORKING_SET_EXPANSION_HEAD {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
} _MMWORKING_SET_EXPANSION_HEAD;

typedef VOID (*__anon_2491)(struct _HAL_PMC_COUNTERS *);

typedef VOID (*__anon_711)(struct _DEVICE_OBJECT *, struct _DEVICE_OBJECT *);

typedef VOID (*__anon_710)(struct _FILE_OBJECT *);

typedef VOID (*__anon_115)();

// 0x8 bytes (sizeof)
typedef struct __anon_3229 {
  VOID *UserData; // offset: 0x0 ordinal: 0x0
  VOID *Owner;    // offset: 0x4 ordinal: 0x1
} __anon_3229;

// 0x4 bytes (sizeof)
typedef struct _KWAIT_CHAIN {
  VOID *Head; // offset: 0x0 ordinal: 0x0
} _KWAIT_CHAIN;

// 0x8 bytes (sizeof)
typedef struct _MI_DLL_OVERFLOW_AREA {
  VOID *RangeStart; // offset: 0x0 ordinal: 0x0
  VOID *NextVa;     // offset: 0x4 ordinal: 0x1
} _MI_DLL_OVERFLOW_AREA;

// 0xc bytes (sizeof)
typedef struct _NLS_DATA_BLOCK {
  VOID *AnsiCodePageData;     // offset: 0x0 ordinal: 0x0
  VOID *OemCodePageData;      // offset: 0x4 ordinal: 0x1
  VOID *UnicodeCaseTableData; // offset: 0x8 ordinal: 0x2
} _NLS_DATA_BLOCK;

// 0xc bytes (sizeof)
typedef struct _HAL_LBR_ENTRY {
  VOID *FromAddress; // offset: 0x0 ordinal: 0x0
  VOID *ToAddress;   // offset: 0x4 ordinal: 0x1
  VOID *Reserved;    // offset: 0x8 ordinal: 0x2
} _HAL_LBR_ENTRY;

typedef VOID *(*__anon_2504)();

// 0x24 bytes (sizeof)
typedef struct _VI_FAULT_TRACE {
  struct _ETHREAD *Thread; // offset: 0x0 ordinal: 0x0
  VOID *StackTrace[8];     // offset: 0x4 ordinal: 0x1
} _VI_FAULT_TRACE;

// 0x20 bytes (sizeof)
typedef struct _VF_KE_CRITICAL_REGION_TRACE {
  struct _ETHREAD *Thread; // offset: 0x0 ordinal: 0x0
  VOID *StackTrace[7];     // offset: 0x4 ordinal: 0x1
} _VF_KE_CRITICAL_REGION_TRACE;

// 0x8 bytes (sizeof)
typedef struct _OB_EXTENDED_USER_INFO {
  VOID *Context1; // offset: 0x0 ordinal: 0x0
  VOID *Context2; // offset: 0x4 ordinal: 0x1
} _OB_EXTENDED_USER_INFO;

// 0x4 bytes (sizeof)
typedef struct _ALPC_HANDLE_ENTRY {
  VOID *Object; // offset: 0x0 ordinal: 0x0
} _ALPC_HANDLE_ENTRY;

// 0x8 bytes (sizeof)
typedef struct __anon_1944 {
  struct _FILE_OBJECT *FileObject; // offset: 0x0 ordinal: 0x0
  VOID *DiskIoAttribution;         // offset: 0x4 ordinal: 0x1
} __anon_1944;

// 0x4 bytes (sizeof)
typedef struct __anon_1726 {
  VOID *CheckStack; // offset: 0x0 ordinal: 0x0
} __anon_1726;

// 0x8 bytes (sizeof)
typedef struct _CMSI_PROCESS_TUPLE {
  VOID *ProcessHandle;    // offset: 0x0 ordinal: 0x0
  VOID *ProcessReference; // offset: 0x4 ordinal: 0x1
} _CMSI_PROCESS_TUPLE;

// 0x4 bytes (sizeof)
typedef struct _CMSI_RW_LOCK {
  VOID *Reserved; // offset: 0x0 ordinal: 0x0
} _CMSI_RW_LOCK;

// 0xc bytes (sizeof)
typedef struct _CMP_VOLUME_MANAGER {
  struct _CMSI_RW_LOCK VolumeContextListLock; // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY VolumeContextListHead;   // offset: 0x4 ordinal: 0x1
} _CMP_VOLUME_MANAGER;

// 0x14 bytes (sizeof)
typedef struct __anon_1046 {
  VOID *Argument1; // offset: 0x0 ordinal: 0x0
  VOID *Argument2; // offset: 0x4 ordinal: 0x1
  VOID *Argument3; // offset: 0x8 ordinal: 0x2
  VOID *Argument4; // offset: 0xc ordinal: 0x3
  VOID *Argument5; // offset: 0x10 ordinal: 0x4
} __anon_1046;

// 0x4 bytes (sizeof)
typedef struct __anon_916 {
  VOID *Notification; // offset: 0x0 ordinal: 0x0
} __anon_916;

// 0x8 bytes (sizeof)
typedef struct _IO_COMPLETION_CONTEXT {
  VOID *Port; // offset: 0x0 ordinal: 0x0
  VOID *Key;  // offset: 0x4 ordinal: 0x1
} _IO_COMPLETION_CONTEXT;

// 0xc bytes (sizeof)
typedef struct _SECTION_OBJECT_POINTERS {
  VOID *DataSectionObject;  // offset: 0x0 ordinal: 0x0
  VOID *SharedCacheMap;     // offset: 0x4 ordinal: 0x1
  VOID *ImageSectionObject; // offset: 0x8 ordinal: 0x2
} _SECTION_OBJECT_POINTERS;

// 0x10 bytes (sizeof)
typedef struct __anon_834 {
  VOID *Argument1; // offset: 0x0 ordinal: 0x0
  VOID *Argument2; // offset: 0x4 ordinal: 0x1
  VOID *Argument3; // offset: 0x8 ordinal: 0x2
  VOID *Argument4; // offset: 0xc ordinal: 0x3
} __anon_834;

// 0x8 bytes (sizeof)
typedef struct _TERMINATION_PORT {
  struct _TERMINATION_PORT *Next; // offset: 0x0 ordinal: 0x0
  VOID *Port;                     // offset: 0x4 ordinal: 0x1
} _TERMINATION_PORT;

// 0x8 bytes (sizeof)
typedef struct _IO_CLIENT_EXTENSION {
  struct _IO_CLIENT_EXTENSION *NextExtension; // offset: 0x0 ordinal: 0x0
  VOID *ClientIdentificationAddress;          // offset: 0x4 ordinal: 0x1
} _IO_CLIENT_EXTENSION;

typedef VOID (*__anon_690)(struct _DEVICE_OBJECT *, VOID *);

// 0x18 bytes (sizeof)
typedef struct _IO_TIMER {
  SHORT Type;                   // offset: 0x0 ordinal: 0x0
  SHORT TimerFlag;              // offset: 0x2 ordinal: 0x1
  struct _LIST_ENTRY TimerList; // offset: 0x4 ordinal: 0x2
  VOID(*TimerRoutine)
  (struct _DEVICE_OBJECT *, VOID *);   // offset: 0xc ordinal: 0x3
  VOID *Context;                       // offset: 0x10 ordinal: 0x4
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x14 ordinal: 0x5
} _IO_TIMER;

typedef VOID (*__anon_427)(VOID *, VOID *, VOID *);

typedef VOID (*__anon_349)(VOID *);

// 0x10 bytes (sizeof)
typedef struct _WORK_QUEUE_ITEM {
  struct _LIST_ENTRY List;       // offset: 0x0 ordinal: 0x0
  VOID (*WorkerRoutine)(VOID *); // offset: 0x8 ordinal: 0x1
  VOID *Parameter;               // offset: 0xc ordinal: 0x2
} _WORK_QUEUE_ITEM;

// 0x14 bytes (sizeof)
typedef struct _MI_COMBINE_WORKITEM {
  VOID *NextEntry;                  // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x4 ordinal: 0x1
} _MI_COMBINE_WORKITEM;

typedef VOID (*__anon_233)(VOID *, VOID *, VOID *, VOID *);

// 0x10 bytes (sizeof)
typedef struct _KREQUEST_PACKET {
  VOID *CurrentPacket[3]; // offset: 0x0 ordinal: 0x0
  VOID(*WorkerRoutine)
  (VOID *, VOID *, VOID *, VOID *); // offset: 0xc ordinal: 0x1
} _KREQUEST_PACKET;

// 0x24 bytes (sizeof)
typedef struct _FAST_OWNER_ENTRY {
  VOID *Reserved[9]; // offset: 0x0 ordinal: 0x0
} _FAST_OWNER_ENTRY;

// 0x34 bytes (sizeof)
typedef struct _VF_BTS_DATA_MANAGEMENT_AREA {
  VOID *BTSBufferBase;          // offset: 0x0 ordinal: 0x0
  VOID *BTSIndex;               // offset: 0x4 ordinal: 0x1
  VOID *BTSMax;                 // offset: 0x8 ordinal: 0x2
  VOID *BTSInterruptThreshold;  // offset: 0xc ordinal: 0x3
  VOID *PEBSBufferBase;         // offset: 0x10 ordinal: 0x4
  VOID *PEBSIndex;              // offset: 0x14 ordinal: 0x5
  VOID *PEBSMax;                // offset: 0x18 ordinal: 0x6
  VOID *PEBSInterruptThreshold; // offset: 0x1c ordinal: 0x7
  VOID *PEBSCounterReset[2];    // offset: 0x20 ordinal: 0x8
  CHAR Reserved[12];            // offset: 0x28 ordinal: 0x9
} _VF_BTS_DATA_MANAGEMENT_AREA;

// 0x8 bytes (sizeof)
typedef struct RTL_HP_ENV_HANDLE {
  VOID *h[2]; // offset: 0x0 ordinal: 0x0
} RTL_HP_ENV_HANDLE;

// 0x40 bytes (sizeof)
typedef struct _OBJECT_REF_TRACE {
  VOID *StackTrace[16]; // offset: 0x0 ordinal: 0x0
} _OBJECT_REF_TRACE;

// 0x8 bytes (sizeof)
typedef struct _CLIENT_ID {
  VOID *UniqueProcess; // offset: 0x0 ordinal: 0x0
  VOID *UniqueThread;  // offset: 0x4 ordinal: 0x1
} _CLIENT_ID;

typedef VOID (*__anon_52)(VOID *, VOID *);

// 0x0 bytes (sizeof)
typedef struct _TP_CALLBACK_INSTANCE {
} _TP_CALLBACK_INSTANCE;

typedef VOID (*__anon_54)(struct _TP_CALLBACK_INSTANCE *, VOID *);

// 0x0 bytes (sizeof)
typedef struct _ACTIVATION_CONTEXT {
} _ACTIVATION_CONTEXT;

// 0x0 bytes (sizeof)
typedef struct _TP_CLEANUP_GROUP {
} _TP_CLEANUP_GROUP;

// 0x0 bytes (sizeof)
typedef struct _TP_POOL {
} _TP_POOL;

typedef long LONG;

typedef enum _CM_SHARE_DISPOSITION {
  CmResourceShareUndetermined = 0,    // ordinal: 0x0
  CmResourceShareDeviceExclusive = 1, // ordinal: 0x1
  CmResourceShareDriverExclusive = 2, // ordinal: 0x2
  CmResourceShareShared = 3,          // ordinal: 0x3
} _CM_SHARE_DISPOSITION;

typedef enum _ETW_HEADER_TYPE {
  EtwHeaderTypeNative = 0, // ordinal: 0x0
  EtwHeaderTypeMax = 1,    // ordinal: 0x1
} _ETW_HEADER_TYPE;

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES {
  AvailablePagesWaitLow = 0,      // ordinal: 0x0
  AvailablePagesWaitHigh = 1,     // ordinal: 0x1
  AvailablePagesWaitVeryHigh = 2, // ordinal: 0x2
  AvailablePagesWaitMaximum = 3,  // ordinal: 0x3
} _MI_AVAILABLE_PAGE_WAIT_TYPES;

typedef enum _PO_MODERN_SLEEP_ACTION {
  PoModernSleepActionGlobalActivatorsVeto = 0,               // ordinal: 0x0
  PoModernSleepActionNonBlockingPhases = 1,                  // ordinal: 0x1
  PoModernSleepActionForceIdle = 2,                          // ordinal: 0x2
  PoModernSleepActionMinimalBlockingNotificationClients = 3, // ordinal: 0x3
  PoModernSleepActionMax = 4,                                // ordinal: 0x4
} _PO_MODERN_SLEEP_ACTION;

typedef enum _MI_MIRROR_BITMAP_TYPES {
  MirrorBitmapTypeNormal = 0,      // ordinal: 0x0
  MirrorBitmapTypeInterlocked = 1, // ordinal: 0x1
  MirrorBitmapTypeMaximum = 2,     // ordinal: 0x2
} _MI_MIRROR_BITMAP_TYPES;

typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,        // ordinal: 0x0
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2, // ordinal: 0x1
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,      // ordinal: 0x2
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,   // ordinal: 0x3
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;

typedef enum PDC_ACTIVITY_TYPE {
  PdcNetwork = 0,         // ordinal: 0x0
  PdcSystem = 1,          // ordinal: 0x1
  PdcTimer = 2,           // ordinal: 0x2
  PdcAllNetworks = 3,     // ordinal: 0x3
  PdcAnyNetwork = 4,      // ordinal: 0x4
  PdcInvalidActivity = 5, // ordinal: 0x5
  PdcMaxActivity = 5,     // ordinal: 0x6
} PDC_ACTIVITY_TYPE;

typedef enum ReplacesCorHdrNumericDefines {
  COMIMAGE_FLAGS_ILONLY = 1,                      // ordinal: 0x0
  COMIMAGE_FLAGS_32BITREQUIRED = 2,               // ordinal: 0x1
  COMIMAGE_FLAGS_IL_LIBRARY = 4,                  // ordinal: 0x2
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,            // ordinal: 0x3
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,          // ordinal: 0x4
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,          // ordinal: 0x5
  COMIMAGE_FLAGS_32BITPREFERRED = 131072,         // ordinal: 0x6
  COR_VERSION_MAJOR_V2 = 2,                       // ordinal: 0x7
  COR_VERSION_MAJOR = 2,                          // ordinal: 0x8
  COR_VERSION_MINOR = 5,                          // ordinal: 0x9
  COR_DELETED_NAME_LENGTH = 8,                    // ordinal: 0xa
  COR_VTABLEGAP_NAME_LENGTH = 8,                  // ordinal: 0xb
  NATIVE_TYPE_MAX_CB = 1,                         // ordinal: 0xc
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,     // ordinal: 0xd
  IMAGE_COR_MIH_METHODRVA = 1,                    // ordinal: 0xe
  IMAGE_COR_MIH_EHRVA = 2,                        // ordinal: 0xf
  IMAGE_COR_MIH_BASICBLOCK = 8,                   // ordinal: 0x10
  COR_VTABLE_32BIT = 1,                           // ordinal: 0x11
  COR_VTABLE_64BIT = 2,                           // ordinal: 0x12
  COR_VTABLE_FROM_UNMANAGED = 4,                  // ordinal: 0x13
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8, // ordinal: 0x14
  COR_VTABLE_CALL_MOST_DERIVED = 16,              // ordinal: 0x15
  IMAGE_COR_EATJ_THUNK_SIZE = 32,                 // ordinal: 0x16
  MAX_CLASS_NAME = 1024,                          // ordinal: 0x17
  MAX_PACKAGE_NAME = 1024,                        // ordinal: 0x18
} ReplacesCorHdrNumericDefines;

typedef enum _VRF_TRIAGE_CONTEXT {
  VRF_TRIAGE_CONTEXT_NONE = 0,               // ordinal: 0x0
  VRF_TRIAGE_CONTEXT_DEFAULT = 1,            // ordinal: 0x1
  VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,        // ordinal: 0x2
  VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,      // ordinal: 0x3
  VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 3,    // ordinal: 0x4
  VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 4, // ordinal: 0x5
  VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 5,  // ordinal: 0x6
  NUM_VRF_TRIAGE_CONTEXTS = 6,               // ordinal: 0x7
} _VRF_TRIAGE_CONTEXT;

typedef enum _PROCESS_TERMINATE_REQUEST_REASON {
  ProcessTerminateRequestReasonNone = 0,            // ordinal: 0x0
  ProcessTerminateCommitFail = 1,                   // ordinal: 0x1
  ProcessTerminateWriteToExecuteMemory = 2,         // ordinal: 0x2
  ProcessTerminateAttachedWriteToExecuteMemory = 3, // ordinal: 0x3
  ProcessTerminateRequestReasonMax = 4,             // ordinal: 0x4
} _PROCESS_TERMINATE_REQUEST_REASON;

typedef enum _ConnectionResourceConsumerDesc {
  ConnectionResourceConsumerDescIsUndefined = 0, // ordinal: 0x0
  ConnectionResourceConsumerDescIsDevice = 1,    // ordinal: 0x1
  ConnectionResourceConsumerDescIsOpregion = 2,  // ordinal: 0x2
  ConnectionResourceConsumerDescMax = 3,         // ordinal: 0x3
} _ConnectionResourceConsumerDesc;

typedef enum _MI_VAD_ALLOCATION_CELL_TYPE {
  MiVadBottomUp = 0,              // ordinal: 0x0
  MiVadStackPebTeb = 1,           // ordinal: 0x1
  MiVadAllocationCellMaximum = 2, // ordinal: 0x2
} _MI_VAD_ALLOCATION_CELL_TYPE;

typedef enum _PPM_PERF_QOS_DISABLE_REASON {
  PpmPerfQosDisableInternal = 0,           // ordinal: 0x0
  PpmPerfQosDisableNoProfile = 1,          // ordinal: 0x1
  PpmPerfQosDisableNoPolicy = 2,           // ordinal: 0x2
  PpmPerfQosDisableInsufficientPolicy = 3, // ordinal: 0x3
  PpmPerfQosDisableMaxOverride = 4,        // ordinal: 0x4
  PpmPerfQosDisableLowLatency = 5,         // ordinal: 0x5
  PpmPerfQosDisableSmtScheduler = 6,       // ordinal: 0x6
  PpmPerfQosDisableNoHardwareSupport = 7,  // ordinal: 0x7
  PpmPerfQosDisableGroupPolicy = 8,        // ordinal: 0x8
  PpmPerfQosDisableMax = 9,                // ordinal: 0x9
} _PPM_PERF_QOS_DISABLE_REASON;

typedef enum _HV_EXT_EPF_MODE {
  HvExtEpfModeMin = 0, // ordinal: 0x0
  HvExtEpfModeNt = 0,  // ordinal: 0x1
  HvExtEpfModeMax = 1, // ordinal: 0x2
} _HV_EXT_EPF_MODE;

typedef enum _MI_CROSS_PARTITION_CHARGE_TYPE {
  MiCrossPartitionSectionResAvailCharge = 0,     // ordinal: 0x0
  MiCrossPartitionSectionCommitCharge = 1,       // ordinal: 0x1
  MiCrossPartitionPageCombineResAvailCharge = 2, // ordinal: 0x2
  MiCrossPartitionPageCombineCommitCharge = 3,   // ordinal: 0x3
  MiCrossPartitionLargePageResAvailCharge = 4,   // ordinal: 0x4
  MiCrossPartitionLargePageCommitCharge = 5,     // ordinal: 0x5
  MiCrossPartitionPageCloneResAvailCharge = 6,   // ordinal: 0x6
  MiCrossPartitionMaximumCharge = 7,             // ordinal: 0x7
} _MI_CROSS_PARTITION_CHARGE_TYPE;

typedef enum _THREAD_WORKLOAD_CLASS {
  ThreadWorkloadClassDefault = 0,  // ordinal: 0x0
  ThreadWorkloadClassGraphics = 1, // ordinal: 0x1
  MaxThreadWorkloadClass = 2,      // ordinal: 0x2
} _THREAD_WORKLOAD_CLASS;

typedef enum LSA_FOREST_TRUST_RECORD_TYPE {
  ForestTrustTopLevelName = 0,   // ordinal: 0x0
  ForestTrustTopLevelNameEx = 1, // ordinal: 0x1
  ForestTrustDomainInfo = 2,     // ordinal: 0x2
  ForestTrustRecordTypeLast = 2, // ordinal: 0x3
} LSA_FOREST_TRUST_RECORD_TYPE;

typedef enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT {
  SpmScenarioStopReasonUnspecified = 16, // ordinal: 0x0
  SpmScenarioStopReasonCsExit = 17,      // ordinal: 0x1
  SpmScenarioStopReasonMax = 18,         // ordinal: 0x2
} SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;

typedef enum PDCCLIENTID {
  PDC_INVALID_CLIENT = 0,                             // ordinal: 0x0
  PDC_PLM_CLIENT = 1,                                 // ordinal: 0x1
  PDC_NQM_CLIENT = 2,                                 // ordinal: 0x2
  PDC_WNS_CLIENT = 3,                                 // ordinal: 0x3
  PDC_DAM_CLIENT = 4,                                 // ordinal: 0x4
  PDC_WCM_CLIENT = 5,                                 // ordinal: 0x5
  PDC_NCSI_CLIENT = 7,                                // ordinal: 0x6
  PDC_DHCP_CLIENT = 8,                                // ordinal: 0x7
  PDC_TCPIP_CLIENT = 9,                               // ordinal: 0x8
  PDC_WU_CLIENT = 11,                                 // ordinal: 0x9
  PDC_GP_CLIENT = 12,                                 // ordinal: 0xa
  PDC_NCA_CLIENT = 14,                                // ordinal: 0xb
  PDC_BI_CLIENT = 15,                                 // ordinal: 0xc
  PDC_MSCHED_CLIENT = 16,                             // ordinal: 0xd
  PDC_SUSPENDRESUME_CLIENT = 17,                      // ordinal: 0xe
  PDC_INTERNAL_CLIENT = 18,                           // ordinal: 0xf
  PDC_ACTIVATION_TEST_CLIENT = 19,                    // ordinal: 0x10
  PDC_PLM_PHASE_TEST_CLIENT = 20,                     // ordinal: 0x11
  PDC_DAM_PHASE_TEST_CLIENT = 21,                     // ordinal: 0x12
  PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,               // ordinal: 0x13
  PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23, // ordinal: 0x14
  PDC_NQM_RESILIENCY_TEST_CLIENT = 24,                // ordinal: 0x15
  PDC_DAM_RESILIENCY_TEST_CLIENT = 25,                // ordinal: 0x16
  PDC_DAM_KM_TEST_CLIENT = 26,                        // ordinal: 0x17
  PDC_DAM_UM_TEST_CLIENT = 27,                        // ordinal: 0x18
  PDC_SINGLETON_TEST_CLIENT = 28,                     // ordinal: 0x19
  PDC_NETWORK_SERVICE_TEST_CLIENT = 29,               // ordinal: 0x1a
  PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,              // ordinal: 0x1b
  PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,                // ordinal: 0x1c
  PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,         // ordinal: 0x1d
  PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,         // ordinal: 0x1e
  PDC_SHELL_CLIENT = 34,                              // ordinal: 0x1f
  PDC_MAINTENANCE_CLIENT = 35,                        // ordinal: 0x20
  PDC_SYNC_CLIENT = 36,                               // ordinal: 0x21
  PDC_IDM_CLIENT = 37,                                // ordinal: 0x22
  PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,           // ordinal: 0x23
  PDC_TETHERING_CLIENT = 39,                          // ordinal: 0x24
  PDC_AUDIO_CLIENT = 40,                              // ordinal: 0x25
  PDC_LOCK_SCREEN = 41,                               // ordinal: 0x26
  PDC_LREC_CLIENT = 42,                               // ordinal: 0x27
  PDC_WP_BW_CLIENT = 43,                              // ordinal: 0x28
  PDC_WP_MEDIA_STREAMING_CLIENT = 44,                 // ordinal: 0x29
  PDC_WP_MAPS_CLIENT = 46,                            // ordinal: 0x2a
  PDC_WP_SYNC_CLIENT = 47,                            // ordinal: 0x2b
  PDC_SETTING_SYNC_CLIENT = 48,                       // ordinal: 0x2c
  PDC_WP_EDM_CLIENT = 49,                             // ordinal: 0x2d
  PDC_WP_WALLET_CLIENT = 50,                          // ordinal: 0x2e
  PDC_WP_LOCATION_CLIENT = 51,                        // ordinal: 0x2f
  PDC_WP_CM_CLIENT = 53,                              // ordinal: 0x30
  PDC_WP_DCP_CLIENT = 54,                             // ordinal: 0x31
  PDC_WP_WIFIAUTO_CLIENT = 55,                        // ordinal: 0x32
  PDC_BITLOCKER_CLIENT = 56,                          // ordinal: 0x33
  PDC_MDM_CERTINSTALLER_CLIENT = 57,                  // ordinal: 0x34
  PDC_WP_IM_CLIENT = 58,                              // ordinal: 0x35
  PDC_WP_MMS_CLIENT = 59,                             // ordinal: 0x36
  PDC_DEVICEENROLLER_CLIENT = 60,                     // ordinal: 0x37
  PDC_WP_WIFI_SCANNING_CLIENT = 61,                   // ordinal: 0x38
  PDC_WP_OMADM_CLIENT = 62,                           // ordinal: 0x39
  PDC_WP_TELEMETRY_CHECK_CLIENT = 63,                 // ordinal: 0x3a
  PDC_WP_DIS_CLIENT = 64,                             // ordinal: 0x3b
  PDC_BITS_CLIENT = 65,                               // ordinal: 0x3c
  PDC_WP_VOIP_EXECUTION_CLIENT = 66,                  // ordinal: 0x3d
  PDC_WP_RESERVED_CLIENT3 = 67,                       // ordinal: 0x3e
  PDC_SLEEP_STUDY_CLIENT = 68,                        // ordinal: 0x3f
  PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,                  // ordinal: 0x40
  PDC_HYPERV_CLIENT = 70,                             // ordinal: 0x41
  PDC_KM_SIGNAL_CLIENT = 71,                          // ordinal: 0x42
  PDC_UM_SIGNAL_CLIENT = 72,                          // ordinal: 0x43
  PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,          // ordinal: 0x44
  PDC_XB_SYSTEM_CLIENT = 74,                          // ordinal: 0x45
  PDC_XB_HOST_CLIENT = 75,                            // ordinal: 0x46
  PDC_PRINT_JOB_MANAGER_CLIENT = 76,                  // ordinal: 0x47
  PDC_TELEMETRY_CLIENT = 77,                          // ordinal: 0x48
  PDC_ERROR_REPORTING_CLIENT = 78,                    // ordinal: 0x49
  PDC_XBOX_NTM = 79,                                  // ordinal: 0x4a
  PDC_CBE_CLIENT = 80,                                // ordinal: 0x4b
  PDC_FIND_MY_PHONE_CLIENT = 81,                      // ordinal: 0x4c
  PDC_COMMAND_CHANNEL_CLIENT = 82,                    // ordinal: 0x4d
  PDC_PPM_PROFILES_CLIENT = 83,                       // ordinal: 0x4e
  PDC_WIFI_CALLING_CLIENT = 84,                       // ordinal: 0x4f
  PDC_WU_REBOOT_CLIENT = 85,                          // ordinal: 0x50
  PDC_SYSMAIN_CLIENT = 86,                            // ordinal: 0x51
  PDC_XBOX_UPDATE_CLIENT = 87,                        // ordinal: 0x52
  PDC_CHAT_SERVICE_CLIENT = 88,                       // ordinal: 0x53
  PDC_FIND_MY_DEVICE_CLIENT = 89,                     // ordinal: 0x54
  PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90, // ordinal: 0x55
  PDC_INSTALL_AGENT_CLIENT = 91,                      // ordinal: 0x56
  PDC_XBOX_WAKE_ON_VOICE = 92,                        // ordinal: 0x57
  PDC_PLM_AUDIO_CLIENT = 93,                          // ordinal: 0x58
  PDC_WP_BCKAUDIO_CLIENT = 94,                        // ordinal: 0x59
  PDC_WAKE_ON_LAN_CLIENT = 95,                        // ordinal: 0x5a
  PDC_WP_CLOUD_MESSAGING_CLIENT = 96,                 // ordinal: 0x5b
  PDC_DATA_MIGRATION_MANAGER = 97,                    // ordinal: 0x5c
  PDC_EVENT_SOUND_MANAGER_CLIENT = 98,                // ordinal: 0x5d
  PDC_WWAN_DORMANCY_HINT_CLIENT = 99,                 // ordinal: 0x5e
  PDC_HAM_CLIENT = 100,                               // ordinal: 0x5f
  PDC_FILESHARINGSERVER_CLIENT = 101,                 // ordinal: 0x60
  PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,               // ordinal: 0x61
  PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,                // ordinal: 0x62
  PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,                // ordinal: 0x63
  PDC_HTTPSDATASOURCE_CLIENT = 105,                   // ordinal: 0x64
  PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,         // ordinal: 0x65
  PDC_TERMINALSERVER_SESSION_CLIENT = 107,            // ordinal: 0x66
  PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,             // ordinal: 0x67
  PDC_XBOX_NUI_CLIENT = 110,                          // ordinal: 0x68
  PDC_WIFI_CALLING_IMS_CLIENT = 111,                  // ordinal: 0x69
  PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,            // ordinal: 0x6a
  PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,          // ordinal: 0x6b
  PDC_NUMBER_OF_CLIENTS = 114,                        // ordinal: 0x6c
} PDCCLIENTID;

typedef enum _PERFINFO_MM_STAT {
  PerfInfoMMStatNotUsed = 0,              // ordinal: 0x0
  PerfInfoMMStatAggregatePageCombine = 1, // ordinal: 0x1
  PerfInfoMMStatIterationPageCombine = 2, // ordinal: 0x2
  PerfInfoMMStatMax = 3,                  // ordinal: 0x3
} _PERFINFO_MM_STAT;

typedef enum _MI_PARTITION_THREAD {
  MiZeroPageThreadSlot = 0,             // ordinal: 0x0
  MiPartitionWorkingSetManagerSlot = 1, // ordinal: 0x1
  MiDereferenceSegmentThreadSlot = 2,   // ordinal: 0x2
  MiModifiedPageWriterSlot = 3,         // ordinal: 0x3
  MiMappedPageWriterSlot = 4,           // ordinal: 0x4
  MiNumberOfPartitionThreads = 5,       // ordinal: 0x5
} _MI_PARTITION_THREAD;

typedef enum _TRACE_INFORMATION_CLASS {
  TraceIdClass = 0,                    // ordinal: 0x0
  TraceHandleClass = 1,                // ordinal: 0x1
  TraceEnableFlagsClass = 2,           // ordinal: 0x2
  TraceEnableLevelClass = 3,           // ordinal: 0x3
  GlobalLoggerHandleClass = 4,         // ordinal: 0x4
  EventLoggerHandleClass = 5,          // ordinal: 0x5
  AllLoggerHandlesClass = 6,           // ordinal: 0x6
  TraceHandleByNameClass = 7,          // ordinal: 0x7
  LoggerEventsLostClass = 8,           // ordinal: 0x8
  TraceSessionSettingsClass = 9,       // ordinal: 0x9
  LoggerEventsLoggedClass = 10,        // ordinal: 0xa
  DiskIoNotifyRoutinesClass = 11,      // ordinal: 0xb
  TraceInformationClassReserved1 = 12, // ordinal: 0xc
  AllPossibleNotifyRoutinesClass = 12, // ordinal: 0xd
  FltIoNotifyRoutinesClass = 13,       // ordinal: 0xe
  TraceInformationClassReserved2 = 14, // ordinal: 0xf
  WdfNotifyRoutinesClass = 15,         // ordinal: 0x10
  MaxTraceInformationClass = 16,       // ordinal: 0x11
} _TRACE_INFORMATION_CLASS;

typedef enum _MI_IO_PFN_TYPE {
  MiIoPfnProbes = 0,      // ordinal: 0x0
  MiIoPfnMaps = 1,        // ordinal: 0x1
  MiIoPfnUnmapped = 2,    // ordinal: 0x2
  MiMaximumIoPfnType = 3, // ordinal: 0x3
} _MI_IO_PFN_TYPE;

typedef enum TlgOut_t {
  TlgOutNULL = 0,                  // ordinal: 0x0
  TlgOutNOPRINT = 1,               // ordinal: 0x1
  TlgOutSTRING = 2,                // ordinal: 0x2
  TlgOutBOOLEAN = 3,               // ordinal: 0x3
  TlgOutHEX = 4,                   // ordinal: 0x4
  TlgOutPID = 5,                   // ordinal: 0x5
  TlgOutTID = 6,                   // ordinal: 0x6
  TlgOutPORT = 7,                  // ordinal: 0x7
  TlgOutIPV4 = 8,                  // ordinal: 0x8
  TlgOutIPV6 = 9,                  // ordinal: 0x9
  TlgOutSOCKETADDRESS = 10,        // ordinal: 0xa
  TlgOutXML = 11,                  // ordinal: 0xb
  TlgOutJSON = 12,                 // ordinal: 0xc
  TlgOutWIN32ERROR = 13,           // ordinal: 0xd
  TlgOutNTSTATUS = 14,             // ordinal: 0xe
  TlgOutHRESULT = 15,              // ordinal: 0xf
  TlgOutFILETIME = 16,             // ordinal: 0x10
  TlgOutSIGNED = 17,               // ordinal: 0x11
  TlgOutUNSIGNED = 18,             // ordinal: 0x12
  TlgOutUTF8 = 35,                 // ordinal: 0x13
  TlgOutPKCS7_WITH_TYPE_INFO = 36, // ordinal: 0x14
  TlgOutCODE_POINTER = 37,         // ordinal: 0x15
  TlgOutDATETIME_UTC = 38,         // ordinal: 0x16
  _TlgOutMax = 39,                 // ordinal: 0x17
  _TlgOutChain = 128,              // ordinal: 0x18
  _TlgOutTypeMask = 127,           // ordinal: 0x19
} TlgOut_t;

typedef enum _ADD_DRIVER_STAGE {
  ClassConfigFilters = 0, // ordinal: 0x0
  LowerDeviceFilters = 1, // ordinal: 0x1
  LowerClassFilters = 2,  // ordinal: 0x2
  DeviceService = 3,      // ordinal: 0x3
  UpperDeviceFilters = 4, // ordinal: 0x4
  UpperClassFilters = 5,  // ordinal: 0x5
  MaximumAddStage = 6,    // ordinal: 0x6
} _ADD_DRIVER_STAGE;

typedef enum _KPROCESS_STATE {
  ProcessInMemory = 0,      // ordinal: 0x0
  ProcessOutOfMemory = 1,   // ordinal: 0x1
  ProcessInTransition = 2,  // ordinal: 0x2
  ProcessOutTransition = 3, // ordinal: 0x3
  ProcessInSwap = 4,        // ordinal: 0x4
  ProcessOutSwap = 5,       // ordinal: 0x5
  ProcessRetryOutSwap = 6,  // ordinal: 0x6
  ProcessAllSwapStates = 7, // ordinal: 0x7
} _KPROCESS_STATE;

typedef enum _MI_VAD_64K_TYPES {
  MiVad64KPrivate = 0, // ordinal: 0x0
  MiVad64KShared = 1,  // ordinal: 0x1
  MiVad64KTypes = 2,   // ordinal: 0x2
} _MI_VAD_64K_TYPES;

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE {
  PoCsDeviceNotificationStorage = 0,  // ordinal: 0x0
  PoCsDeviceNotificationWiFi = 1,     // ordinal: 0x1
  PoCsDeviceNotificationMbn = 2,      // ordinal: 0x2
  PoCsDeviceNotificationAudio = 3,    // ordinal: 0x3
  PoCsDeviceNotificationEthernet = 4, // ordinal: 0x4
  PoCsDeviceNotificationMaximum = 5,  // ordinal: 0x5
} _PO_CS_DEVICE_NOTIFICATION_TYPE;

typedef enum _USER_ACTIVITY_PRESENCE {
  PowerUserPresent = 0,    // ordinal: 0x0
  PowerUserNotPresent = 1, // ordinal: 0x1
  PowerUserInactive = 2,   // ordinal: 0x2
  PowerUserMaximum = 3,    // ordinal: 0x3
  PowerUserInvalid = 3,    // ordinal: 0x4
} _USER_ACTIVITY_PRESENCE;

typedef enum _POLICY_AUDIT_EVENT_TYPE {
  AuditCategorySystem = 0,                 // ordinal: 0x0
  AuditCategoryLogon = 1,                  // ordinal: 0x1
  AuditCategoryObjectAccess = 2,           // ordinal: 0x2
  AuditCategoryPrivilegeUse = 3,           // ordinal: 0x3
  AuditCategoryDetailedTracking = 4,       // ordinal: 0x4
  AuditCategoryPolicyChange = 5,           // ordinal: 0x5
  AuditCategoryAccountManagement = 6,      // ordinal: 0x6
  AuditCategoryDirectoryServiceAccess = 7, // ordinal: 0x7
  AuditCategoryAccountLogon = 8,           // ordinal: 0x8
} _POLICY_AUDIT_EVENT_TYPE;

typedef enum _MI_SUBVAD_LISTS {
  MiSubVadPebTebAny = 0, // ordinal: 0x0
  MiSubVadMaximum = 1,   // ordinal: 0x1
} _MI_SUBVAD_LISTS;

typedef enum _KWAIT_STATE {
  WaitInProgress = 0,        // ordinal: 0x0
  WaitCommitted = 1,         // ordinal: 0x1
  WaitAborted = 2,           // ordinal: 0x2
  WaitSuspendInProgress = 3, // ordinal: 0x3
  WaitSuspended = 4,         // ordinal: 0x4
  WaitResumeInProgress = 5,  // ordinal: 0x5
  WaitResumeAborted = 6,     // ordinal: 0x6
  WaitFirstSuspendState = 3, // ordinal: 0x7
  WaitLastSuspendState = 6,  // ordinal: 0x8
  MaximumWaitState = 7,      // ordinal: 0x9
} _KWAIT_STATE;

typedef enum _POP_DEEP_SLEEP_DISENGAGE_REASON {
  PopDeepSleepDisengageReasonInactive = 0,                // ordinal: 0x0
  PopDeepSleepDisengageReasonNonAoAc = 1,                 // ordinal: 0x1
  PopDeepSleepDisengageReasonPendingIrps = 2,             // ordinal: 0x2
  PopDeepSleepDisengageReasonPowerSettings = 3,           // ordinal: 0x3
  PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,      // ordinal: 0x4
  PopDeepSleepDisengageReasonSystemPowerTransition = 5,   // ordinal: 0x5
  PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,     // ordinal: 0x6
  PopDeepSleepDisengageReasonAcpi = 7,                    // ordinal: 0x7
  PopDeepSleepDisengageReasonDirectedDripsTransition = 8, // ordinal: 0x8
  PopDeepSleepDisengageReasonPepPreVeto = 9,              // ordinal: 0x9
  PopDeepSleepDisengageReasonMax = 10,                    // ordinal: 0xa
} _POP_DEEP_SLEEP_DISENGAGE_REASON;

typedef enum _ETW_GUID_TYPE {
  EtwTraceGuidType = 0,        // ordinal: 0x0
  EtwNotificationGuidType = 1, // ordinal: 0x1
  EtwGroupGuidType = 2,        // ordinal: 0x2
  EtwGuidTypeMax = 3,          // ordinal: 0x3
} _ETW_GUID_TYPE;

typedef enum _MI_KSTACK_TYPE {
  MiRegularKstack = 0,    // ordinal: 0x0
  MiShortLivedKstack = 1, // ordinal: 0x1
  MiMaximumKstack = 2,    // ordinal: 0x2
} _MI_KSTACK_TYPE;

typedef enum _WOW64_SHARED_INFORMATION {
  SharedNtdll32LdrInitializeThunk = 0,                  // ordinal: 0x0
  SharedNtdll32KiUserExceptionDispatcher = 1,           // ordinal: 0x1
  SharedNtdll32KiUserApcDispatcher = 2,                 // ordinal: 0x2
  SharedNtdll32KiUserCallbackDispatcher = 3,            // ordinal: 0x3
  SharedNtdll32RtlUserThreadStart = 4,                  // ordinal: 0x4
  SharedNtdll32pQueryProcessDebugInformationRemote = 5, // ordinal: 0x5
  SharedNtdll32BaseAddress = 6,                         // ordinal: 0x6
  SharedNtdll32LdrSystemDllInitBlock = 7,               // ordinal: 0x7
  SharedNtdll32RtlpFreezeTimeBias = 8,                  // ordinal: 0x8
  Wow64SharedPageEntriesCount = 9,                      // ordinal: 0x9
} _WOW64_SHARED_INFORMATION;

typedef enum _PO_HIBER_FORCE_DISABLE_REASON {
  PoHiberForceDisableReasonPolicy = 0,      // ordinal: 0x0
  PoHiberForceDisableReasonGuardedHost = 1, // ordinal: 0x1
  PoHiberForceDisableReasonMax = 2,         // ordinal: 0x2
} _PO_HIBER_FORCE_DISABLE_REASON;

typedef enum _SYSTEM_PROCESS_CLASSIFICATION {
  SystemProcessClassificationNormal = 0,         // ordinal: 0x0
  SystemProcessClassificationSystem = 1,         // ordinal: 0x1
  SystemProcessClassificationSecureSystem = 2,   // ordinal: 0x2
  SystemProcessClassificationMemCompression = 3, // ordinal: 0x3
  SystemProcessClassificationRegistry = 4,       // ordinal: 0x4
  SystemProcessClassificationMaximum = 5,        // ordinal: 0x5
} _SYSTEM_PROCESS_CLASSIFICATION;

typedef enum _KTHREAD_STATE {
  Initialized = 0,             // ordinal: 0x0
  Ready = 1,                   // ordinal: 0x1
  Running = 2,                 // ordinal: 0x2
  Standby = 3,                 // ordinal: 0x3
  Terminated = 4,              // ordinal: 0x4
  Waiting = 5,                 // ordinal: 0x5
  Transition = 6,              // ordinal: 0x6
  DeferredReady = 7,           // ordinal: 0x7
  GateWaitObsolete = 8,        // ordinal: 0x8
  WaitingForProcessInSwap = 9, // ordinal: 0x9
} _KTHREAD_STATE;

typedef enum _TlgBlob_t {
  _TlgBlobNone = 0,      // ordinal: 0x0
  _TlgBlobEnd = 1,       // ordinal: 0x1
  _TlgBlobProvider = 2,  // ordinal: 0x2
  _TlgBlobEvent3 = 3,    // ordinal: 0x3
  _TlgBlobProvider3 = 4, // ordinal: 0x4
  _TlgBlobEvent2 = 5,    // ordinal: 0x5
  _TlgBlobEvent4 = 6,    // ordinal: 0x6
  _TlgBlobMax = 7,       // ordinal: 0x7
} _TlgBlob_t;

typedef enum _MI_SHARED_USER_PAGE_TYPES {
  MiSharedUserPageKernel = 0,     // ordinal: 0x0
  MiSharedUserPageHypervisor = 1, // ordinal: 0x1
  MiSharedUserPageMaximum = 2,    // ordinal: 0x2
} _MI_SHARED_USER_PAGE_TYPES;

typedef enum _MEMORY_CACHING_TYPE_ORIG {
  MmFrameBufferCached = 2, // ordinal: 0x0
} _MEMORY_CACHING_TYPE_ORIG;

typedef enum _KPROCESS_PPM_POLICY {
  ProcessPpmDefault = 0,         // ordinal: 0x0
  ProcessPpmThrottle = 1,        // ordinal: 0x1
  ProcessPpmSemiThrottle = 2,    // ordinal: 0x2
  ProcessPpmNoThrottle = 3,      // ordinal: 0x3
  ProcessPpmWindowMinimized = 4, // ordinal: 0x4
  ProcessPpmWindowOccluded = 5,  // ordinal: 0x5
  ProcessPpmWindowVisible = 6,   // ordinal: 0x6
  ProcessPpmWindowInFocus = 7,   // ordinal: 0x7
  MaxProcessPpmPolicy = 8,       // ordinal: 0x8
} _KPROCESS_PPM_POLICY;

typedef enum _VRF_RULE_CLASS_ID {
  VrfSpecialPoolRuleClass = 0,             // ordinal: 0x0
  VrfForceIrqlRuleClass = 1,               // ordinal: 0x1
  VrfAllocationFailuresRuleClass = 2,      // ordinal: 0x2
  VrfTrackingPoolAllocationsRuleClass = 3, // ordinal: 0x3
  VrfIORuleClass = 4,                      // ordinal: 0x4
  VrfDeadlockPreventionRuleClass = 5,      // ordinal: 0x5
  VrfEnhancedIORuleClass = 6,              // ordinal: 0x6
  VrfDMARuleClass = 7,                     // ordinal: 0x7
  VrfSecurityRuleClass = 8,                // ordinal: 0x8
  VrfForcePendingIORequestRuleClass = 9,   // ordinal: 0x9
  VrfIRPTrackingRuleClass = 10,            // ordinal: 0xa
  VrfMiscellaneousRuleClass = 11,          // ordinal: 0xb
  VrfMoreDebuggingRuleClass = 12,          // ordinal: 0xc
  VrfMDLInvariantStackRuleClass = 13,      // ordinal: 0xd
  VrfMDLInvariantDriverRuleClass = 14,     // ordinal: 0xe
  VrfPowerDelayFuzzingRuleClass = 15,      // ordinal: 0xf
  VrfPortMiniportRuleClass = 16,           // ordinal: 0x10
  VrfStandardDDIRuleClass = 17,            // ordinal: 0x11
  VrfAutoFailRuleClass = 18,               // ordinal: 0x12
  VrfAdditionalDDIRuleClass = 19,          // ordinal: 0x13
  VrfRuleClassBase = 20,                   // ordinal: 0x14
  VrfNdisWifiRuleClass = 21,               // ordinal: 0x15
  VrfDriverLoggingRuleClass = 22,          // ordinal: 0x16
  VrfSyncDelayFuzzingRuleClass = 23,       // ordinal: 0x17
  VrfVMSwitchingRuleClass = 24,            // ordinal: 0x18
  VrfCodeIntegrityRuleClass = 25,          // ordinal: 0x19
  VrfBelow4GBAllocationRuleClass = 26,     // ordinal: 0x1a
  VrfProcessorBranchTraceRuleClass = 27,   // ordinal: 0x1b
  VrfAdvancedMMRuleClass = 28,             // ordinal: 0x1c
  VrfExtendingXDVTimeLimit = 29,           // ordinal: 0x1d
  VrfSystemBIOSRuleClass = 30,             // ordinal: 0x1e
  VrfHardwareRuleClass = 31,               // ordinal: 0x1f
  VrfStateSepRuleClass = 32,               // ordinal: 0x20
  VrfWDFRuleClass = 33,                    // ordinal: 0x21
  VrfMoreIrqlRuleClass = 34,               // ordinal: 0x22
  VrfXDVPlatformMode = 35,                 // ordinal: 0x23
  VrfStandalonePlatformMode = 36,          // ordinal: 0x24
  VrfPlatformModeTest = 37,                // ordinal: 0x25
  ReservedForDVRF38 = 38,                  // ordinal: 0x26
  ReservedForDVRF39 = 39,                  // ordinal: 0x27
  ReservedForDVRF40 = 40,                  // ordinal: 0x28
  ReservedForDVRF41 = 41,                  // ordinal: 0x29
  ReservedForDVRF42 = 42,                  // ordinal: 0x2a
  ReservedForDVRF43 = 43,                  // ordinal: 0x2b
  ReservedForDVRF44 = 44,                  // ordinal: 0x2c
  ReservedForDVRF45 = 45,                  // ordinal: 0x2d
  ReservedForDVRF46 = 46,                  // ordinal: 0x2e
  ReservedForDVRF47 = 47,                  // ordinal: 0x2f
  ReservedForDVRF48 = 48,                  // ordinal: 0x30
  ReservedForDVRF49 = 49,                  // ordinal: 0x31
  ReservedForDVRF50 = 50,                  // ordinal: 0x32
  ReservedForDVRF51 = 51,                  // ordinal: 0x33
  ReservedForDVRF52 = 52,                  // ordinal: 0x34
  ReservedForDVRF53 = 53,                  // ordinal: 0x35
  ReservedForDVRF54 = 54,                  // ordinal: 0x36
  ReservedForDVRF55 = 55,                  // ordinal: 0x37
  ReservedForDVRF56 = 56,                  // ordinal: 0x38
  ReservedForDVRF57 = 57,                  // ordinal: 0x39
  ReservedForDVRF58 = 58,                  // ordinal: 0x3a
  ReservedForDVRF59 = 59,                  // ordinal: 0x3b
  ReservedForDVRF60 = 60,                  // ordinal: 0x3c
  ReservedForDVRF61 = 61,                  // ordinal: 0x3d
  ReservedForDVRF62 = 62,                  // ordinal: 0x3e
  ReservedForDVRF63 = 63,                  // ordinal: 0x3f
  VrfRuleClassSizeMax = 64,                // ordinal: 0x40
} _VRF_RULE_CLASS_ID;

typedef enum _KTHREAD_PPM_POLICY {
  ThreadPpmDefault = 0,      // ordinal: 0x0
  ThreadPpmThrottle = 1,     // ordinal: 0x1
  ThreadPpmSemiThrottle = 2, // ordinal: 0x2
  ThreadPpmNoThrottle = 3,   // ordinal: 0x3
  MaxThreadPpmPolicy = 4,    // ordinal: 0x4
} _KTHREAD_PPM_POLICY;

typedef enum _MI_DYNAMICBASE_BITMAP {
  DynamicBaseBitMapNative = 0,  // ordinal: 0x0
  DynamicBaseBitMapInvalid = 1, // ordinal: 0x1
  DynamicBaseBitMapMax = 1,     // ordinal: 0x2
} _MI_DYNAMICBASE_BITMAP;

typedef enum _POP_SYSTEM_IDLE_EVENT_TYPE {
  PopSystemIdleEventTypeMonitorOffUserInput = 0,          // ordinal: 0x0
  PopSystemIdleEventTypeMonitorOnUserInput = 1,           // ordinal: 0x1
  PopSystemIdleEventTypeUserPresence = 2,                 // ordinal: 0x2
  PopSystemIdleEventTypeResumeFromSxSystemPowerState = 3, // ordinal: 0x3
  PopSystemIdleEventTypeMax = 4,                          // ordinal: 0x4
  PopSystemIdleEventTypeInvalid = 4,                      // ordinal: 0x5
} _POP_SYSTEM_IDLE_EVENT_TYPE;

typedef enum _MODE {
  KernelMode = 0,  // ordinal: 0x0
  UserMode = 1,    // ordinal: 0x1
  MaximumMode = 2, // ordinal: 0x2
} _MODE;

typedef enum _ETW_STRING_TOKEN_TYPE {
  ETW_STRING_TOKEN_EXE = 0,        // ordinal: 0x0
  ETW_STRING_TOKEN_PACKAGE_ID = 1, // ordinal: 0x1
  ETW_STRING_TOKEN_PKG_APP_ID = 2, // ordinal: 0x2
  ETW_STRING_TOKEN_MAX_COUNT = 3,  // ordinal: 0x3
} _ETW_STRING_TOKEN_TYPE;

typedef enum _WORKING_SET_TYPE {
  WorkingSetTypeUser = 0,           // ordinal: 0x0
  WorkingSetTypeSession = 1,        // ordinal: 0x1
  WorkingSetTypeSystemTypes = 2,    // ordinal: 0x2
  WorkingSetTypeSystemCache = 2,    // ordinal: 0x3
  WorkingSetTypePagedPool = 3,      // ordinal: 0x4
  WorkingSetTypeSystemViews = 4,    // ordinal: 0x5
  WorkingSetTypePagableMaximum = 4, // ordinal: 0x6
  WorkingSetTypeSystemPtes = 5,     // ordinal: 0x7
  WorkingSetTypeKernelStacks = 6,   // ordinal: 0x8
  WorkingSetTypeNonPagedPool = 7,   // ordinal: 0x9
  WorkingSetTypeMaximum = 8,        // ordinal: 0xa
} _WORKING_SET_TYPE;

typedef enum _PS_PROTECTED_SIGNER {
  PsProtectedSignerNone = 0,         // ordinal: 0x0
  PsProtectedSignerAuthenticode = 1, // ordinal: 0x1
  PsProtectedSignerCodeGen = 2,      // ordinal: 0x2
  PsProtectedSignerAntimalware = 3,  // ordinal: 0x3
  PsProtectedSignerLsa = 4,          // ordinal: 0x4
  PsProtectedSignerWindows = 5,      // ordinal: 0x5
  PsProtectedSignerWinTcb = 6,       // ordinal: 0x6
  PsProtectedSignerWinSystem = 7,    // ordinal: 0x7
  PsProtectedSignerApp = 8,          // ordinal: 0x8
  PsProtectedSignerMax = 9,          // ordinal: 0x9
} _PS_PROTECTED_SIGNER;

typedef enum _MI_MEMORY_HIGHLOW {
  MiMemoryHigh = 0,    // ordinal: 0x0
  MiMemoryLow = 1,     // ordinal: 0x1
  MiMemoryHighLow = 2, // ordinal: 0x2
} _MI_MEMORY_HIGHLOW;

typedef enum FEATURE_ENABLED_STATE {
  FEATURE_ENABLED_STATE_DEFAULT = 0,                    // ordinal: 0x0
  FEATURE_ENABLED_STATE_DISABLED = 1,                   // ordinal: 0x1
  FEATURE_ENABLED_STATE_ENABLED = 2,                    // ordinal: 0x2
  FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,         // ordinal: 0x3
  FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64, // ordinal: 0x4
} FEATURE_ENABLED_STATE;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE {
  PerfInfoMemUsagePfnMetadata = 0, // ordinal: 0x0
  PerfInfoMemUsageMax = 1,         // ordinal: 0x1
} _PERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _HEAP_SEGMGR_LARGE_PAGE_POLICY {
  HeapSegMgrNoLargePages = 0,       // ordinal: 0x0
  HeapSegMgrEnableLargePages = 1,   // ordinal: 0x1
  HeapSegMgrNormalPolicy = 1,       // ordinal: 0x2
  HeapSegMgrForceSmall = 2,         // ordinal: 0x3
  HeapSegMgrForceLarge = 3,         // ordinal: 0x4
  HeapSegMgrForceRandom = 4,        // ordinal: 0x5
  HeapSegMgrLargePagePolicyMax = 5, // ordinal: 0x6
} _HEAP_SEGMGR_LARGE_PAGE_POLICY;

typedef enum _PS_RESOURCE_TYPE {
  PsResourceNonPagedPool = 0, // ordinal: 0x0
  PsResourcePagedPool = 1,    // ordinal: 0x1
  PsResourcePageFile = 2,     // ordinal: 0x2
  PsResourceWorkingSet = 3,   // ordinal: 0x3
  PsResourceMax = 4,          // ordinal: 0x4
} _PS_RESOURCE_TYPE;

typedef enum _PROCESS_VA_TYPE {
  ProcessVAImage = 0,   // ordinal: 0x0
  ProcessVASection = 1, // ordinal: 0x1
  ProcessVAPrivate = 2, // ordinal: 0x2
  ProcessVAMax = 3,     // ordinal: 0x3
} _PROCESS_VA_TYPE;

typedef enum _MI_CFG_BITMAP_TYPE {
  CfgBitMapNative = 0, // ordinal: 0x0
  CfgBitMapMax = 1,    // ordinal: 0x1
} _MI_CFG_BITMAP_TYPE;

typedef enum CPU_VENDORS {
  CPU_NONE = 0,      // ordinal: 0x0
  CPU_INTEL = 1,     // ordinal: 0x1
  CPU_AMD = 2,       // ordinal: 0x2
  CPU_CYRIX = 3,     // ordinal: 0x3
  CPU_TRANSMETA = 4, // ordinal: 0x4
  CPU_VIA = 5,       // ordinal: 0x5
  CPU_CENTAUR = 5,   // ordinal: 0x6
  CPU_RISE = 6,      // ordinal: 0x7
  CPU_UNKNOWN = 7,   // ordinal: 0x8
} CPU_VENDORS;

typedef enum _KTIMER2_COLLECTION_INDEX {
  KTimer2CollectionNoWake = 0,       // ordinal: 0x0
  KTimer2CollectionHr = 1,           // ordinal: 0x1
  KTimer2CollectionFinite = 2,       // ordinal: 0x2
  KTimer2CollectionIr = 3,           // ordinal: 0x3
  KTimer2CollectionNotInserted = 16, // ordinal: 0x4
  KTimer2CollectionInvalid = 20,     // ordinal: 0x5
  KTimer2CollectionOptional = 32,    // ordinal: 0x6
  KTimer2CollectionMin = 0,          // ordinal: 0x7
  KTimer2CollectionMax = 4,          // ordinal: 0x8
  KTimer2CollectionNode1 = 2,        // ordinal: 0x9
} _KTIMER2_COLLECTION_INDEX;

typedef enum _MI_WORKING_SET_TYPE {
  MiWorkingSetTypeSystemCache = 0,      // ordinal: 0x0
  MiWorkingSetTypeSystemViews = 1,      // ordinal: 0x1
  MiWorkingSetTypePartitionMaximum = 1, // ordinal: 0x2
  MiWorkingSetTypePagedPool = 2,        // ordinal: 0x3
  MiWorkingSetTypePagableMaximum = 2,   // ordinal: 0x4
  MiWorkingSetTypeSystemPtes = 3,       // ordinal: 0x5
  MiWorkingSetTypeKernelStacks = 4,     // ordinal: 0x6
  MiWorkingSetTypeNonPagedPool = 5,     // ordinal: 0x7
  MiWorkingSetTypeMaximum = 6,          // ordinal: 0x8
} _MI_WORKING_SET_TYPE;

typedef enum _KE_WAKE_SOURCE_TYPE {
  KeWakeSourceTypeSpuriousWake = 0,      // ordinal: 0x0
  KeWakeSourceTypeSpuriousClock = 1,     // ordinal: 0x1
  KeWakeSourceTypeSpuriousInterrupt = 2, // ordinal: 0x2
  KeWakeSourceTypeQueryFailure = 3,      // ordinal: 0x3
  KeWakeSourceTypeAccountingFailure = 4, // ordinal: 0x4
  KeWakeSourceTypeStaticSourceMax = 4,   // ordinal: 0x5
  KeWakeSourceTypeInterrupt = 5,         // ordinal: 0x6
  KeWakeSourceTypeIRTimer = 6,           // ordinal: 0x7
  KeWakeSourceTypeMax = 7,               // ordinal: 0x8
} _KE_WAKE_SOURCE_TYPE;

typedef enum _MI_ENCLAVE_TYPE {
  MiEnclaveNone = 0,     // ordinal: 0x0
  MiEnclaveHardware = 1, // ordinal: 0x1
  MiEnclaveVsm = 2,      // ordinal: 0x2
  MiEnclaveMax = 3,      // ordinal: 0x3
} _MI_ENCLAVE_TYPE;

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE {
  ETW_PHF_EVENT_ID = 0,   // ordinal: 0x0
  ETW_PHF_STACK_WALK = 1, // ordinal: 0x1
  ETW_PHF_MAX_COUNT = 2,  // ordinal: 0x2
} _ETW_PERFECT_HASH_FUNCTION_TYPE;

typedef enum _KTHREAD_TAG {
  KThreadTagNone = 0,           // ordinal: 0x0
  KThreadTagMediaBuffering = 1, // ordinal: 0x1
  KThreadTagMax = 2,            // ordinal: 0x2
} _KTHREAD_TAG;

typedef enum _REG_NOTIFY_CLASS {
  RegNtDeleteKey = 0,                     // ordinal: 0x0
  RegNtPreDeleteKey = 0,                  // ordinal: 0x1
  RegNtSetValueKey = 1,                   // ordinal: 0x2
  RegNtPreSetValueKey = 1,                // ordinal: 0x3
  RegNtDeleteValueKey = 2,                // ordinal: 0x4
  RegNtPreDeleteValueKey = 2,             // ordinal: 0x5
  RegNtSetInformationKey = 3,             // ordinal: 0x6
  RegNtPreSetInformationKey = 3,          // ordinal: 0x7
  RegNtRenameKey = 4,                     // ordinal: 0x8
  RegNtPreRenameKey = 4,                  // ordinal: 0x9
  RegNtEnumerateKey = 5,                  // ordinal: 0xa
  RegNtPreEnumerateKey = 5,               // ordinal: 0xb
  RegNtEnumerateValueKey = 6,             // ordinal: 0xc
  RegNtPreEnumerateValueKey = 6,          // ordinal: 0xd
  RegNtQueryKey = 7,                      // ordinal: 0xe
  RegNtPreQueryKey = 7,                   // ordinal: 0xf
  RegNtQueryValueKey = 8,                 // ordinal: 0x10
  RegNtPreQueryValueKey = 8,              // ordinal: 0x11
  RegNtQueryMultipleValueKey = 9,         // ordinal: 0x12
  RegNtPreQueryMultipleValueKey = 9,      // ordinal: 0x13
  RegNtPreCreateKey = 10,                 // ordinal: 0x14
  RegNtPostCreateKey = 11,                // ordinal: 0x15
  RegNtPreOpenKey = 12,                   // ordinal: 0x16
  RegNtPostOpenKey = 13,                  // ordinal: 0x17
  RegNtKeyHandleClose = 14,               // ordinal: 0x18
  RegNtPreKeyHandleClose = 14,            // ordinal: 0x19
  RegNtPostDeleteKey = 15,                // ordinal: 0x1a
  RegNtPostSetValueKey = 16,              // ordinal: 0x1b
  RegNtPostDeleteValueKey = 17,           // ordinal: 0x1c
  RegNtPostSetInformationKey = 18,        // ordinal: 0x1d
  RegNtPostRenameKey = 19,                // ordinal: 0x1e
  RegNtPostEnumerateKey = 20,             // ordinal: 0x1f
  RegNtPostEnumerateValueKey = 21,        // ordinal: 0x20
  RegNtPostQueryKey = 22,                 // ordinal: 0x21
  RegNtPostQueryValueKey = 23,            // ordinal: 0x22
  RegNtPostQueryMultipleValueKey = 24,    // ordinal: 0x23
  RegNtPostKeyHandleClose = 25,           // ordinal: 0x24
  RegNtPreCreateKeyEx = 26,               // ordinal: 0x25
  RegNtPostCreateKeyEx = 27,              // ordinal: 0x26
  RegNtPreOpenKeyEx = 28,                 // ordinal: 0x27
  RegNtPostOpenKeyEx = 29,                // ordinal: 0x28
  RegNtPreFlushKey = 30,                  // ordinal: 0x29
  RegNtPostFlushKey = 31,                 // ordinal: 0x2a
  RegNtPreLoadKey = 32,                   // ordinal: 0x2b
  RegNtPostLoadKey = 33,                  // ordinal: 0x2c
  RegNtPreUnLoadKey = 34,                 // ordinal: 0x2d
  RegNtPostUnLoadKey = 35,                // ordinal: 0x2e
  RegNtPreQueryKeySecurity = 36,          // ordinal: 0x2f
  RegNtPostQueryKeySecurity = 37,         // ordinal: 0x30
  RegNtPreSetKeySecurity = 38,            // ordinal: 0x31
  RegNtPostSetKeySecurity = 39,           // ordinal: 0x32
  RegNtCallbackObjectContextCleanup = 40, // ordinal: 0x33
  RegNtPreRestoreKey = 41,                // ordinal: 0x34
  RegNtPostRestoreKey = 42,               // ordinal: 0x35
  RegNtPreSaveKey = 43,                   // ordinal: 0x36
  RegNtPostSaveKey = 44,                  // ordinal: 0x37
  RegNtPreReplaceKey = 45,                // ordinal: 0x38
  RegNtPostReplaceKey = 46,               // ordinal: 0x39
  RegNtPreQueryKeyName = 47,              // ordinal: 0x3a
  RegNtPostQueryKeyName = 48,             // ordinal: 0x3b
  MaxRegNtNotifyClass = 49,               // ordinal: 0x3c
} _REG_NOTIFY_CLASS;

typedef enum _KHETERO_RUNNING_TYPE {
  KHeteroShortRunning = 0,   // ordinal: 0x0
  KHeteroLongRunning = 1,    // ordinal: 0x1
  KHeteroRunningTypeMax = 2, // ordinal: 0x2
} _KHETERO_RUNNING_TYPE;

typedef enum wil_FeatureStage {
  wil_FeatureStage_AlwaysDisabled = 0,    // ordinal: 0x0
  wil_FeatureStage_DisabledByDefault = 1, // ordinal: 0x1
  wil_FeatureStage_EnabledByDefault = 2,  // ordinal: 0x2
  wil_FeatureStage_AlwaysEnabled = 3,     // ordinal: 0x3
} wil_FeatureStage;

typedef enum _RTL_MEMORY_TYPE {
  MemoryTypePaged = 0,     // ordinal: 0x0
  MemoryTypeNonPaged = 1,  // ordinal: 0x1
  MemoryTypeLargePage = 2, // ordinal: 0x2
  MemoryTypeHugePage = 3,  // ordinal: 0x3
  MemoryTypeMax = 4,       // ordinal: 0x4
} _RTL_MEMORY_TYPE;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI {
  PowerInformationInternalTtmFirst = 4096,           // ordinal: 0x0
  PowerInternalTtmOpenTerminal = 4096,               // ordinal: 0x1
  PowerInternalTtmCreateTerminal = 4097,             // ordinal: 0x2
  PowerInternalTtmEvacuateDevices = 4098,            // ordinal: 0x3
  PowerInternalTtmCreateTerminalEventQueue = 4099,   // ordinal: 0x4
  PowerInternalTtmGetTerminalEvent = 4100,           // ordinal: 0x5
  PowerInternalTtmSetDefaultDeviceAssignment = 4101, // ordinal: 0x6
  PowerInternalTtmAssignDevice = 4102,               // ordinal: 0x7
  PowerInternalTtmSetDisplayState = 4103,            // ordinal: 0x8
  PowerInternalTtmSetDisplayTimeouts = 4104,         // ordinal: 0x9
  PowerInternalTtmSetDisplayPowerRequest = 4105,     // ordinal: 0xa
  PowerInformationInternalTtmLast = 4105,            // ordinal: 0xb
} _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;

typedef enum _PS_WAKE_REASON {
  PsWakeReasonUser = 0,              // ordinal: 0x0
  PsWakeReasonExecutionRequired = 1, // ordinal: 0x1
  PsWakeReasonKernel = 2,            // ordinal: 0x2
  PsWakeReasonInstrumentation = 3,   // ordinal: 0x3
  PsWakeReasonPreserveProcess = 4,   // ordinal: 0x4
  PsWakeReasonActivityReference = 5, // ordinal: 0x5
  PsWakeReasonWorkOnBehalf = 6,      // ordinal: 0x6
  PsMaxWakeReasons = 7,              // ordinal: 0x7
} _PS_WAKE_REASON;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL {
  PowerInternalAcpiInterfaceRegister = 0,                    // ordinal: 0x0
  PowerInternalS0LowPowerIdleInfo = 1,                       // ordinal: 0x1
  PowerInternalReapplyBrightnessSettings = 2,                // ordinal: 0x2
  PowerInternalUserAbsencePrediction = 3,                    // ordinal: 0x3
  PowerInternalUserAbsencePredictionCapability = 4,          // ordinal: 0x4
  PowerInternalPoProcessorLatencyHint = 5,                   // ordinal: 0x5
  PowerInternalStandbyNetworkRequest = 6,                    // ordinal: 0x6
  PowerInternalDirtyTransitionInformation = 7,               // ordinal: 0x7
  PowerInternalSetBackgroundTaskState = 8,                   // ordinal: 0x8
  PowerInternalReservedDoNotUseEnum9 = 9,                    // ordinal: 0x9
  PowerInternalReservedDoNotUseEnum10 = 10,                  // ordinal: 0xa
  PowerInternalReservedDoNotUseEnum11 = 11,                  // ordinal: 0xb
  PowerInternalReservedDoNotUseEnum12 = 12,                  // ordinal: 0xc
  PowerInternalReservedDoNotUseEnum13 = 13,                  // ordinal: 0xd
  PowerInternalReservedDoNotUseEnum14 = 14,                  // ordinal: 0xe
  PowerInternalReservedDoNotUseEnum15 = 15,                  // ordinal: 0xf
  PowerInternalReservedDoNotUseEnum16 = 16,                  // ordinal: 0x10
  PowerInternalReservedDoNotUseEnum17 = 17,                  // ordinal: 0x11
  PowerInternalBootSessionStandbyActivationInformation = 18, // ordinal: 0x12
  PowerInternalSessionPowerState = 19,                       // ordinal: 0x13
  PowerInternalSessionTerminalInput = 20,                    // ordinal: 0x14
  PowerInternalSetWatchdog = 21,                             // ordinal: 0x15
  PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,      // ordinal: 0x16
  PowerInternalExternalMonitorConnected = 23,                // ordinal: 0x17
  PowerInternalHighPrecisionBrightnessSettings = 24,         // ordinal: 0x18
  PowerInternalWinrtScreenToggle = 25,                       // ordinal: 0x19
  PowerInternalPpmQosDisable = 26,                           // ordinal: 0x1a
  PowerInternalTransitionCheckpoint = 27,                    // ordinal: 0x1b
  PowerInternalInputControllerState = 28,                    // ordinal: 0x1c
  PowerInternalFirmwareResetReason = 29,                     // ordinal: 0x1d
  PowerInternalPpmSchedulerQosSupport = 30,                  // ordinal: 0x1e
  PowerInternalBootStatGet = 31,                             // ordinal: 0x1f
  PowerInternalBootStatSet = 32,                             // ordinal: 0x20
  PowerInternalCallHasNotReturnedWatchdog = 33,              // ordinal: 0x21
  PowerInternalBootStatCheckIntegrity = 34,                  // ordinal: 0x22
  PowerInternalBootStatRestoreDefaults = 35,                 // ordinal: 0x23
  PowerInternalHostEsStateUpdate = 36,                       // ordinal: 0x24
  PowerInternalGetPowerActionState = 37,                     // ordinal: 0x25
  PowerInternalBootStatUnlock = 38,                          // ordinal: 0x26
  PowerInternalWakeOnVoiceState = 39,                        // ordinal: 0x27
  PowerInternalDeepSleepBlock = 40,                          // ordinal: 0x28
  PowerInternalIsPoFxDevice = 41,                            // ordinal: 0x29
  PowerInternalPowerTransitionExtensionAtBoot = 42,          // ordinal: 0x2a
  PowerInternalProcessorBrandedFrequency = 43,               // ordinal: 0x2b
  PowerInternalTimeBrokerExpirationReason = 44,              // ordinal: 0x2c
  PowerInternalNotifyUserShutdownStatus = 45,                // ordinal: 0x2d
  PowerInternalPowerRequestTerminalCoreWindow = 46,          // ordinal: 0x2e
  PowerInternalProcessorIdleVeto = 47,                       // ordinal: 0x2f
  PowerInternalPlatformIdleVeto = 48,                        // ordinal: 0x30
  PowerInternalIsLongPowerButtonBugcheckEnabled = 49,        // ordinal: 0x31
  PowerInternalAutoChkCausedReboot = 50,                     // ordinal: 0x32
  PowerInternalSetWakeAlarmOverride = 51,                    // ordinal: 0x33
  PowerInternalDirectedFxAddTestDevice = 53,                 // ordinal: 0x34
  PowerInternalDirectedFxRemoveTestDevice = 54,              // ordinal: 0x35
  PowerInternalDirectedFxSetMode = 56,                       // ordinal: 0x36
  PowerInternalRegisterPowerPlane = 57,                      // ordinal: 0x37
  PowerInternalSetDirectedDripsFlags = 58,                   // ordinal: 0x38
  PowerInternalClearDirectedDripsFlags = 59,                 // ordinal: 0x39
  PowerInternalRetrieveHiberFileResumeContext = 60,          // ordinal: 0x3a
  PowerInternalReadHiberFilePage = 61,                       // ordinal: 0x3b
  PowerInformationInternalMaximum = 62,                      // ordinal: 0x3c
} _POWER_INFORMATION_LEVEL_INTERNAL;

typedef enum TlgIn_t {
  TlgInNULL = 0,                  // ordinal: 0x0
  TlgInUNICODESTRING = 1,         // ordinal: 0x1
  TlgInANSISTRING = 2,            // ordinal: 0x2
  TlgInINT8 = 3,                  // ordinal: 0x3
  TlgInUINT8 = 4,                 // ordinal: 0x4
  TlgInINT16 = 5,                 // ordinal: 0x5
  TlgInUINT16 = 6,                // ordinal: 0x6
  TlgInINT32 = 7,                 // ordinal: 0x7
  TlgInUINT32 = 8,                // ordinal: 0x8
  TlgInINT64 = 9,                 // ordinal: 0x9
  TlgInUINT64 = 10,               // ordinal: 0xa
  TlgInFLOAT = 11,                // ordinal: 0xb
  TlgInDOUBLE = 12,               // ordinal: 0xc
  TlgInBOOL32 = 13,               // ordinal: 0xd
  TlgInBINARY = 14,               // ordinal: 0xe
  TlgInGUID = 15,                 // ordinal: 0xf
  _TlgInPOINTER_unsupported = 16, // ordinal: 0x10
  TlgInFILETIME = 17,             // ordinal: 0x11
  TlgInSYSTEMTIME = 18,           // ordinal: 0x12
  TlgInSID = 19,                  // ordinal: 0x13
  TlgInHEXINT32 = 20,             // ordinal: 0x14
  TlgInHEXINT64 = 21,             // ordinal: 0x15
  TlgInCOUNTEDSTRING = 22,        // ordinal: 0x16
  TlgInCOUNTEDANSISTRING = 23,    // ordinal: 0x17
  _TlgInSTRUCT = 24,              // ordinal: 0x18
  TlgInCOUNTEDBINARY = 25,        // ordinal: 0x19
  _TlgInMax = 26,                 // ordinal: 0x1a
  TlgInINTPTR = 7,                // ordinal: 0x1b
  TlgInUINTPTR = 8,               // ordinal: 0x1c
  TlgInPOINTER = 20,              // ordinal: 0x1d
  _TlgInCcount = 32,              // ordinal: 0x1e
  TlgInVcount = 64,               // ordinal: 0x1f
  _TlgInChain = 128,              // ordinal: 0x20
  _TlgInCustom = 96,              // ordinal: 0x21
  _TlgInTypeMask = 31,            // ordinal: 0x22
  _TlgInCountMask = 96,           // ordinal: 0x23
  _TlgInFlagMask = 224,           // ordinal: 0x24
} TlgIn_t;

typedef enum PDC_RESOURCE {
  PdcResourceSystemForeground = 0,      // ordinal: 0x0
  PdcResourceUniversalApplications = 1, // ordinal: 0x1
  PdcResourceWin32 = 2,                 // ordinal: 0x2
  PdcResourceNetwork = 3,               // ordinal: 0x3
  PdcResourceSystemBackground = 4,      // ordinal: 0x4
  PdcResourceMin = 0,                   // ordinal: 0x5
  PdcResourceMax = 4,                   // ordinal: 0x6
} PDC_RESOURCE;

typedef enum _POP_SLEEP_CHECKPOINT_STATUS {
  PopSleepCheckpointStatusDisabled = 0,                  // ordinal: 0x0
  PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1, // ordinal: 0x1
  PopSleepCheckpointStatusEnabledManually = 4,           // ordinal: 0x2
  PopSleepCheckpointStatusEnabledExperiment = 4,         // ordinal: 0x3
  PopSleepCheckpointStatusEnabledMax = 7,                // ordinal: 0x4
  PopSleepCheckpointStatusFailedNotEfiSystem = 8,        // ordinal: 0x5
  PopSleepCheckpointStatusFailedInsufficientSpace = 9,   // ordinal: 0x6
  PopSleepCheckpointStatusFailedTooSlow = 10,            // ordinal: 0x7
  PopSleepCheckpointStatusFailedOtherError = 15,         // ordinal: 0x8
  PopSleepCheckpointStatusMax = 15,                      // ordinal: 0x9
} _POP_SLEEP_CHECKPOINT_STATUS;

typedef enum _KOBJECTS {
  EventNotificationObject = 0,      // ordinal: 0x0
  EventSynchronizationObject = 1,   // ordinal: 0x1
  MutantObject = 2,                 // ordinal: 0x2
  ProcessObject = 3,                // ordinal: 0x3
  QueueObject = 4,                  // ordinal: 0x4
  SemaphoreObject = 5,              // ordinal: 0x5
  ThreadObject = 6,                 // ordinal: 0x6
  GateObject = 7,                   // ordinal: 0x7
  TimerNotificationObject = 8,      // ordinal: 0x8
  TimerSynchronizationObject = 9,   // ordinal: 0x9
  Spare2Object = 10,                // ordinal: 0xa
  Spare3Object = 11,                // ordinal: 0xb
  Spare4Object = 12,                // ordinal: 0xc
  Spare5Object = 13,                // ordinal: 0xd
  Spare6Object = 14,                // ordinal: 0xe
  Spare7Object = 15,                // ordinal: 0xf
  Spare8Object = 16,                // ordinal: 0x10
  ProfileCallbackObject = 17,       // ordinal: 0x11
  ApcObject = 18,                   // ordinal: 0x12
  DpcObject = 19,                   // ordinal: 0x13
  DeviceQueueObject = 20,           // ordinal: 0x14
  PriQueueObject = 21,              // ordinal: 0x15
  InterruptObject = 22,             // ordinal: 0x16
  ProfileObject = 23,               // ordinal: 0x17
  Timer2NotificationObject = 24,    // ordinal: 0x18
  Timer2SynchronizationObject = 25, // ordinal: 0x19
  ThreadedDpcObject = 26,           // ordinal: 0x1a
  MaximumKernelObject = 27,         // ordinal: 0x1b
} _KOBJECTS;

typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,                        // ordinal: 0x0
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,             // ordinal: 0x1
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,         // ordinal: 0x2
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8, // ordinal: 0x3
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,                  // ordinal: 0x4
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;

typedef enum _MI_MEMORY_EVENT_TYPES {
  LowPagedPoolEvent = 0,          // ordinal: 0x0
  HighPagedPoolEvent = 1,         // ordinal: 0x1
  LowNonPagedPoolEvent = 2,       // ordinal: 0x2
  HighNonPagedPoolEvent = 3,      // ordinal: 0x3
  LowAvailablePagesEvent = 4,     // ordinal: 0x4
  HighAvailablePagesEvent = 5,    // ordinal: 0x5
  LowCommitEvent = 6,             // ordinal: 0x6
  HighCommitEvent = 7,            // ordinal: 0x7
  MaximumCommitEvent = 8,         // ordinal: 0x8
  BadMemoryDetectedEvent = 9,     // ordinal: 0x9
  PhysicalMemoryChangeEvent = 10, // ordinal: 0xa
  TotalNumberOfMemoryEvents = 11, // ordinal: 0xb
} _MI_MEMORY_EVENT_TYPES;

typedef enum PDC_CS_PHASE {
  PdcNoCsPhase = 0,                   // ordinal: 0x0
  PdcConnectionPhase = 1,             // ordinal: 0x1
  PdcShellPhase = 2,                  // ordinal: 0x2
  PdcPlmPhase = 3,                    // ordinal: 0x3
  PdcMaintenancePhase = 4,            // ordinal: 0x4
  PdcDamPhase = 5,                    // ordinal: 0x5
  PdcLowPowerPhase = 6,               // ordinal: 0x6
  PdcResiliencyNotificationPhase = 7, // ordinal: 0x7
  PdcResiliencyPhase = 8,             // ordinal: 0x8
  PdcInvalidPhase = 9,                // ordinal: 0x9
  PdcMaxPhase = 9,                    // ordinal: 0xa
} PDC_CS_PHASE;

typedef enum _POP_SLEEP_CHECKPOINT {
  PopSleepCheckpointInvalid = 0,                             // ordinal: 0x0
  PopSleepCheckpointPowerTransitionStart = 1,                // ordinal: 0x1
  PopSleepCheckpointSuspendAppsBefore = 2,                   // ordinal: 0x2
  PopSleepCheckpointSuspendAppsAfter = 3,                    // ordinal: 0x3
  PopSleepCheckpointSuspendServicesBefore = 4,               // ordinal: 0x4
  PopSleepCheckpointSuspendServicesAfter = 5,                // ordinal: 0x5
  PopSleepCheckpointNotifySuperfetchBefore = 6,              // ordinal: 0x6
  PopSleepCheckpointNotifySuperfetchAfter = 7,               // ordinal: 0x7
  PopSleepCheckpointNotifyCallbacksBefore = 8,               // ordinal: 0x8
  PopSleepCheckpointNotifyCallbacksAfter = 9,                // ordinal: 0x9
  PopSleepCheckpointSleepTransactionCommitted = 10,          // ordinal: 0xa
  PopSleepCheckpointQueryDriversBefore = 11,                 // ordinal: 0xb
  PopSleepCheckpointQueryDriversAfter = 12,                  // ordinal: 0xc
  PopSleepCheckpointAllocatingHiberContext = 13,             // ordinal: 0xd
  PopSleepCheckpointSuspendDriversBefore = 14,               // ordinal: 0xe
  PopSleepCheckpointPreSleepNotification = 16,               // ordinal: 0xf
  PopSleepCheckpointInterruptsDisabledBegin = 17,            // ordinal: 0x10
  PopSleepCheckpointInvokeHandlerBefore = 18,                // ordinal: 0x11
  PopSleepCheckpointSaveHiberContextBegin = 19,              // ordinal: 0x12
  PopSleepCheckpointInitializeDumpStackFailed = 20,          // ordinal: 0x13
  PopSleepCheckpointHiberWriteFailed = 21,                   // ordinal: 0x14
  PopSleepCheckpointHiberFileTooSmall = 22,                  // ordinal: 0x15
  PopSleepCheckpointSaveHiberContextFailed = 23,             // ordinal: 0x16
  PopSleepCheckpointSaveHiberContextEnd = 24,                // ordinal: 0x17
  PopSleepCheckpointHiberKernelHandoff = 25,                 // ordinal: 0x18
  PopSleepCheckpointInvokeHandlerAfter = 26,                 // ordinal: 0x19
  PopSleepCheckpointReadHiberfileBefore = 27,                // ordinal: 0x1a
  PopSleepCheckpointInitializeDumpStackForReadFailed = 28,   // ordinal: 0x1b
  PopSleepCheckpointHiberReadFailed = 29,                    // ordinal: 0x1c
  PopSleepCheckpointChecksumFailure = 30,                    // ordinal: 0x1d
  PopSleepCheckpointDecompressionFailed = 31,                // ordinal: 0x1e
  PopSleepCheckpointReadHiberfileAfter = 32,                 // ordinal: 0x1f
  PopSleepCheckpointInterruptsDisabledEnd = 33,              // ordinal: 0x20
  PopSleepCheckpointWakeDriversAfter = 36,                   // ordinal: 0x21
  PopSleepCheckpointResumeAppsBefore = 37,                   // ordinal: 0x22
  PopSleepCheckpointResumeAppsAfter = 38,                    // ordinal: 0x23
  PopSleepCheckpointResumeServicesBefore = 39,               // ordinal: 0x24
  PopSleepCheckpointResumeServicesAfter = 40,                // ordinal: 0x25
  PopSleepCheckpointPowerTransitionEnd = 41,                 // ordinal: 0x26
  PopSleepCheckpointAllocatingHiberContextNoFileObject = 42, // ordinal: 0x27
  PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed =
      43, // ordinal: 0x28
  PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed =
      44,                                                     // ordinal: 0x29
  PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45, // ordinal: 0x2a
  PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed =
      46, // ordinal: 0x2b
  PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed =
      47, // ordinal: 0x2c
  PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed =
      48, // ordinal: 0x2d
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 =
      49, // ordinal: 0x2e
  PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed =
      50, // ordinal: 0x2f
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 =
      51, // ordinal: 0x30
  PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed =
      52, // ordinal: 0x31
  PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed =
      53,                                    // ordinal: 0x32
  PopSleepCheckpointPrepareSleepBefore = 54, // ordinal: 0x33
  PopSleepCheckpointPrepareSleepAfter = 55,  // ordinal: 0x34
  PopSleepCheckpointBootstatAvailable = 56,  // ordinal: 0x35
  PopSleepCheckpointMax = 57,                // ordinal: 0x36
} _POP_SLEEP_CHECKPOINT;

typedef enum _MI_ALTERNATE_LOCK_VA_TYPE {
  AlternateLockVaTypeSystemPtes = 0,   // ordinal: 0x0
  AlternateLockVaTypeNonPagedPool = 1, // ordinal: 0x1
  AlternateLockVaTypeUser = 2,         // ordinal: 0x2
  AlternateLockVaTypeSystem = 3,       // ordinal: 0x3
  AlternateLockVaTypeMaximum = 4,      // ordinal: 0x4
} _MI_ALTERNATE_LOCK_VA_TYPE;

typedef enum _KWAIT_BLOCK_STATE {
  WaitBlockBypassStart = 0,           // ordinal: 0x0
  WaitBlockBypassComplete = 1,        // ordinal: 0x1
  WaitBlockSuspendBypassStart = 2,    // ordinal: 0x2
  WaitBlockSuspendBypassComplete = 3, // ordinal: 0x3
  WaitBlockActive = 4,                // ordinal: 0x4
  WaitBlockInactive = 5,              // ordinal: 0x5
  WaitBlockSuspended = 6,             // ordinal: 0x6
  WaitBlockAllStates = 7,             // ordinal: 0x7
} _KWAIT_BLOCK_STATE;

typedef enum _DEVPROP_OPERATOR {
  DEVPROP_OPERATOR_MODIFIER_NOT = 65536,               // ordinal: 0x0
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 131072,      // ordinal: 0x1
  DEVPROP_OPERATOR_NONE = 0,                           // ordinal: 0x2
  DEVPROP_OPERATOR_EXISTS = 1,                         // ordinal: 0x3
  DEVPROP_OPERATOR_NOT_EXISTS = 65537,                 // ordinal: 0x4
  DEVPROP_OPERATOR_EQUALS = 2,                         // ordinal: 0x5
  DEVPROP_OPERATOR_NOT_EQUALS = 65538,                 // ordinal: 0x6
  DEVPROP_OPERATOR_GREATER_THAN = 3,                   // ordinal: 0x7
  DEVPROP_OPERATOR_LESS_THAN = 4,                      // ordinal: 0x8
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,            // ordinal: 0x9
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,               // ordinal: 0xa
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 131074,        // ordinal: 0xb
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 196610,    // ordinal: 0xc
  DEVPROP_OPERATOR_BITWISE_AND = 7,                    // ordinal: 0xd
  DEVPROP_OPERATOR_BITWISE_OR = 8,                     // ordinal: 0xe
  DEVPROP_OPERATOR_BEGINS_WITH = 9,                    // ordinal: 0xf
  DEVPROP_OPERATOR_ENDS_WITH = 10,                     // ordinal: 0x10
  DEVPROP_OPERATOR_CONTAINS = 11,                      // ordinal: 0x11
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 131081,   // ordinal: 0x12
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 131082,     // ordinal: 0x13
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 131083,      // ordinal: 0x14
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,               // ordinal: 0x15
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,    // ordinal: 0x16
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,     // ordinal: 0x17
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,      // ordinal: 0x18
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 135168, // ordinal: 0x19
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE =
      139264,                                                   // ordinal: 0x1a
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 143360, // ordinal: 0x1b
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 147456,  // ordinal: 0x1c
  DEVPROP_OPERATOR_AND_OPEN = 1048576,                          // ordinal: 0x1d
  DEVPROP_OPERATOR_AND_CLOSE = 2097152,                         // ordinal: 0x1e
  DEVPROP_OPERATOR_OR_OPEN = 3145728,                           // ordinal: 0x1f
  DEVPROP_OPERATOR_OR_CLOSE = 4194304,                          // ordinal: 0x20
  DEVPROP_OPERATOR_NOT_OPEN = 5242880,                          // ordinal: 0x21
  DEVPROP_OPERATOR_NOT_CLOSE = 6291456,                         // ordinal: 0x22
  DEVPROP_OPERATOR_ARRAY_CONTAINS = 268435456,                  // ordinal: 0x23
  DEVPROP_OPERATOR_MASK_EVAL = 4095,                            // ordinal: 0x24
  DEVPROP_OPERATOR_MASK_LIST = 61440,                           // ordinal: 0x25
  DEVPROP_OPERATOR_MASK_MODIFIER = 983040,                      // ordinal: 0x26
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,               // ordinal: 0x27
  DEVPROP_OPERATOR_MASK_LOGICAL = 267386880,                    // ordinal: 0x28
  DEVPROP_OPERATOR_MASK_ARRAY = -268435456,                     // ordinal: 0x29
} _DEVPROP_OPERATOR;

typedef enum _RTLP_HP_MEMORY_TYPE {
  HeapMemoryPaged = 0,     // ordinal: 0x0
  HeapMemoryNonPaged = 1,  // ordinal: 0x1
  HeapMemoryLargePage = 2, // ordinal: 0x2
  HeapMemoryHugePage = 3,  // ordinal: 0x3
  HeapMemoryTypeMax = 4,   // ordinal: 0x4
} _RTLP_HP_MEMORY_TYPE;

typedef enum _EX_HEAP_TYPE {
  ExHeapTypeNonPagedMin = 0, // ordinal: 0x0
  ExHeapTypeNonPaged = 0,    // ordinal: 0x1
  ExHeapTypeNonPagedMax = 1, // ordinal: 0x2
  ExHeapTypeNonPagedNx = 1,  // ordinal: 0x3
  ExHeapTypePagedMin = 2,    // ordinal: 0x4
  ExHeapTypePaged = 2,       // ordinal: 0x5
  ExHeapTypePagedMax = 3,    // ordinal: 0x6
  ExHeapTypeSpecialMax = 3,  // ordinal: 0x7
  ExHeapTypeMmSt = 3,        // ordinal: 0x8
  ExHeapTypeMax = 4,         // ordinal: 0x9
} _EX_HEAP_TYPE;

typedef enum FEATURE_CHANGE_TIME {
  FEATURE_CHANGE_TIME_READ = 0,          // ordinal: 0x0
  FEATURE_CHANGE_TIME_MODULE_RELOAD = 1, // ordinal: 0x1
  FEATURE_CHANGE_TIME_SESSION = 2,       // ordinal: 0x2
  FEATURE_CHANGE_TIME_REBOOT = 3,        // ordinal: 0x3
  FEATURE_CHANGE_TIME_USER_FLAG = 128,   // ordinal: 0x4
} FEATURE_CHANGE_TIME;

typedef enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON {
  DirectedDripsProblemDeviceReasonSpecialDevice = 0,      // ordinal: 0x0
  DirectedDripsProblemDeviceReasonNoDfx = 1,              // ordinal: 0x1
  DirectedDripsProblemDeviceReasonNoPs4 = 2,              // ordinal: 0x2
  DirectedDripsProblemDeviceReasonNoPs4Root = 3,          // ordinal: 0x3
  DirectedDripsProblemDeviceReasonComponentContraint = 4, // ordinal: 0x4
  DirectedDripsProblemDeviceReasonDfxFailure = 5,         // ordinal: 0x5
  DirectedDripsProblemDeviceReasonMax = 6,                // ordinal: 0x6
} _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;

typedef enum _PROCESS_SECTION_TYPE {
  ProcessSectionData = 0,           // ordinal: 0x0
  ProcessSectionImage = 1,          // ordinal: 0x1
  ProcessSectionImageNx = 2,        // ordinal: 0x2
  ProcessSectionPagefileBacked = 3, // ordinal: 0x3
  ProcessSectionMax = 4,            // ordinal: 0x4
} _PROCESS_SECTION_TYPE;

typedef enum _FILE_OBJECT_EXTENSION_TYPE {
  FoExtTypeTransactionParams = 0,   // ordinal: 0x0
  FoExtTypeInternal = 1,            // ordinal: 0x1
  FoExtTypeIosbRange = 2,           // ordinal: 0x2
  FoExtTypeGeneric = 3,             // ordinal: 0x3
  FoExtTypeSfio = 4,                // ordinal: 0x4
  FoExtTypeSymlink = 5,             // ordinal: 0x5
  FoExtTypeOplockKey = 6,           // ordinal: 0x6
  FoExtTypeSilo = 7,                // ordinal: 0x7
  FoExtTypeMemoryPartitionInfo = 8, // ordinal: 0x8
  MaxFoExtTypes = 9,                // ordinal: 0x9
} _FILE_OBJECT_EXTENSION_TYPE;

typedef enum _OBJECT_INFORMATION_CLASS {
  ObjectBasicInformation = 0,         // ordinal: 0x0
  ObjectNameInformation = 1,          // ordinal: 0x1
  ObjectTypeInformation = 2,          // ordinal: 0x2
  ObjectTypesInformation = 3,         // ordinal: 0x3
  ObjectHandleFlagInformation = 4,    // ordinal: 0x4
  ObjectSessionInformation = 5,       // ordinal: 0x5
  ObjectSessionObjectInformation = 6, // ordinal: 0x6
  MaxObjectInfoClass = 7,             // ordinal: 0x7
} _OBJECT_INFORMATION_CLASS;

typedef enum _JOBOBJECTINFOCLASS {
  JobObjectBasicAccountingInformation = 1,         // ordinal: 0x0
  JobObjectBasicLimitInformation = 2,              // ordinal: 0x1
  JobObjectBasicProcessIdList = 3,                 // ordinal: 0x2
  JobObjectBasicUIRestrictions = 4,                // ordinal: 0x3
  JobObjectSecurityLimitInformation = 5,           // ordinal: 0x4
  JobObjectEndOfJobTimeInformation = 6,            // ordinal: 0x5
  JobObjectAssociateCompletionPortInformation = 7, // ordinal: 0x6
  JobObjectBasicAndIoAccountingInformation = 8,    // ordinal: 0x7
  JobObjectExtendedLimitInformation = 9,           // ordinal: 0x8
  JobObjectJobSetInformation = 10,                 // ordinal: 0x9
  JobObjectGroupInformation = 11,                  // ordinal: 0xa
  JobObjectNotificationLimitInformation = 12,      // ordinal: 0xb
  JobObjectLimitViolationInformation = 13,         // ordinal: 0xc
  JobObjectGroupInformationEx = 14,                // ordinal: 0xd
  JobObjectCpuRateControlInformation = 15,         // ordinal: 0xe
  JobObjectCompletionFilter = 16,                  // ordinal: 0xf
  JobObjectCompletionCounter = 17,                 // ordinal: 0x10
  JobObjectFreezeInformation = 18,                 // ordinal: 0x11
  JobObjectExtendedAccountingInformation = 19,     // ordinal: 0x12
  JobObjectWakeInformation = 20,                   // ordinal: 0x13
  JobObjectBackgroundInformation = 21,             // ordinal: 0x14
  JobObjectSchedulingRankBiasInformation = 22,     // ordinal: 0x15
  JobObjectTimerVirtualizationInformation = 23,    // ordinal: 0x16
  JobObjectCycleTimeNotification = 24,             // ordinal: 0x17
  JobObjectClearEvent = 25,                        // ordinal: 0x18
  JobObjectInterferenceInformation = 26,           // ordinal: 0x19
  JobObjectClearPeakJobMemoryUsed = 27,            // ordinal: 0x1a
  JobObjectMemoryUsageInformation = 28,            // ordinal: 0x1b
  JobObjectSharedCommit = 29,                      // ordinal: 0x1c
  JobObjectContainerId = 30,                       // ordinal: 0x1d
  JobObjectIoRateControlInformation = 31,          // ordinal: 0x1e
  JobObjectSiloRootDirectory = 37,                 // ordinal: 0x1f
  JobObjectServerSiloBasicInformation = 38,        // ordinal: 0x20
  JobObjectServerSiloUserSharedData = 39,          // ordinal: 0x21
  JobObjectServerSiloInitialize = 40,              // ordinal: 0x22
  JobObjectServerSiloRunningState = 41,            // ordinal: 0x23
  JobObjectIoAttribution = 42,                     // ordinal: 0x24
  JobObjectMemoryPartitionInformation = 43,        // ordinal: 0x25
  JobObjectContainerTelemetryId = 44,              // ordinal: 0x26
  JobObjectSiloSystemRoot = 45,                    // ordinal: 0x27
  JobObjectEnergyTrackingState = 46,               // ordinal: 0x28
  JobObjectThreadImpersonationInformation = 47,    // ordinal: 0x29
  JobObjectReserved1Information = 18,              // ordinal: 0x2a
  JobObjectReserved2Information = 19,              // ordinal: 0x2b
  JobObjectReserved3Information = 20,              // ordinal: 0x2c
  JobObjectReserved4Information = 21,              // ordinal: 0x2d
  JobObjectReserved5Information = 22,              // ordinal: 0x2e
  JobObjectReserved6Information = 23,              // ordinal: 0x2f
  JobObjectReserved7Information = 24,              // ordinal: 0x30
  JobObjectReserved8Information = 25,              // ordinal: 0x31
  JobObjectReserved9Information = 26,              // ordinal: 0x32
  JobObjectReserved10Information = 27,             // ordinal: 0x33
  JobObjectReserved11Information = 28,             // ordinal: 0x34
  JobObjectReserved12Information = 29,             // ordinal: 0x35
  JobObjectReserved13Information = 30,             // ordinal: 0x36
  JobObjectReserved14Information = 31,             // ordinal: 0x37
  JobObjectNetRateControlInformation = 32,         // ordinal: 0x38
  JobObjectNotificationLimitInformation2 = 33,     // ordinal: 0x39
  JobObjectLimitViolationInformation2 = 34,        // ordinal: 0x3a
  JobObjectCreateSilo = 35,                        // ordinal: 0x3b
  JobObjectSiloBasicInformation = 36,              // ordinal: 0x3c
  JobObjectReserved15Information = 37,             // ordinal: 0x3d
  JobObjectReserved16Information = 38,             // ordinal: 0x3e
  JobObjectReserved17Information = 39,             // ordinal: 0x3f
  JobObjectReserved18Information = 40,             // ordinal: 0x40
  JobObjectReserved19Information = 41,             // ordinal: 0x41
  JobObjectReserved20Information = 42,             // ordinal: 0x42
  JobObjectReserved21Information = 43,             // ordinal: 0x43
  JobObjectReserved22Information = 44,             // ordinal: 0x44
  JobObjectReserved23Information = 45,             // ordinal: 0x45
  JobObjectReserved24Information = 46,             // ordinal: 0x46
  JobObjectReserved25Information = 47,             // ordinal: 0x47
  MaxJobObjectInfoClass = 48,                      // ordinal: 0x48
} _JOBOBJECTINFOCLASS;

typedef enum _IO_RATE_CONTROL_TYPE {
  IoRateControlTypeCapMin = 0,                         // ordinal: 0x0
  IoRateControlTypeIopsCap = 0,                        // ordinal: 0x1
  IoRateControlTypeBandwidthCap = 1,                   // ordinal: 0x2
  IoRateControlTypeTimePercentCap = 2,                 // ordinal: 0x3
  IoRateControlTypeCapMax = 2,                         // ordinal: 0x4
  IoRateControlTypeReservationMin = 3,                 // ordinal: 0x5
  IoRateControlTypeIopsReservation = 3,                // ordinal: 0x6
  IoRateControlTypeBandwidthReservation = 4,           // ordinal: 0x7
  IoRateControlTypeTimePercentReservation = 5,         // ordinal: 0x8
  IoRateControlTypeReservationMax = 5,                 // ordinal: 0x9
  IoRateControlTypeCriticalReservationMin = 6,         // ordinal: 0xa
  IoRateControlTypeIopsCriticalReservation = 6,        // ordinal: 0xb
  IoRateControlTypeBandwidthCriticalReservation = 7,   // ordinal: 0xc
  IoRateControlTypeTimePercentCriticalReservation = 8, // ordinal: 0xd
  IoRateControlTypeCriticalReservationMax = 8,         // ordinal: 0xe
  IoRateControlTypeSoftCapMin = 9,                     // ordinal: 0xf
  IoRateControlTypeIopsSoftCap = 9,                    // ordinal: 0x10
  IoRateControlTypeBandwidthSoftCap = 10,              // ordinal: 0x11
  IoRateControlTypeTimePercentSoftCap = 11,            // ordinal: 0x12
  IoRateControlTypeSoftCapMax = 11,                    // ordinal: 0x13
  IoRateControlTypeLimitExcessNotifyMin = 12,          // ordinal: 0x14
  IoRateControlTypeIopsLimitExcessNotify = 12,         // ordinal: 0x15
  IoRateControlTypeBandwidthLimitExcessNotify = 13,    // ordinal: 0x16
  IoRateControlTypeTimePercentLimitExcessNotify = 14,  // ordinal: 0x17
  IoRateControlTypeLimitExcessNotifyMax = 14,          // ordinal: 0x18
  IoRateControlTypeMax = 15,                           // ordinal: 0x19
} _IO_RATE_CONTROL_TYPE;

typedef enum _WNF_STATE_NAME_LIFETIME {
  WnfWellKnownStateName = 0,  // ordinal: 0x0
  WnfPermanentStateName = 1,  // ordinal: 0x1
  WnfPersistentStateName = 2, // ordinal: 0x2
  WnfTemporaryStateName = 3,  // ordinal: 0x3
} _WNF_STATE_NAME_LIFETIME;

typedef enum _TRANSFER_TYPE {
  ReadTransfer = 0,  // ordinal: 0x0
  WriteTransfer = 1, // ordinal: 0x1
  OtherTransfer = 2, // ordinal: 0x2
} _TRANSFER_TYPE;

typedef enum _LOCK_OPERATION {
  IoReadAccess = 0,   // ordinal: 0x0
  IoWriteAccess = 1,  // ordinal: 0x1
  IoModifyAccess = 2, // ordinal: 0x2
} _LOCK_OPERATION;

typedef enum _EX_POOL_PRIORITY {
  LowPoolPriority = 0,                        // ordinal: 0x0
  LowPoolPrioritySpecialPoolOverrun = 8,      // ordinal: 0x1
  LowPoolPrioritySpecialPoolUnderrun = 9,     // ordinal: 0x2
  NormalPoolPriority = 16,                    // ordinal: 0x3
  NormalPoolPrioritySpecialPoolOverrun = 24,  // ordinal: 0x4
  NormalPoolPrioritySpecialPoolUnderrun = 25, // ordinal: 0x5
  HighPoolPriority = 32,                      // ordinal: 0x6
  HighPoolPrioritySpecialPoolOverrun = 40,    // ordinal: 0x7
  HighPoolPrioritySpecialPoolUnderrun = 41,   // ordinal: 0x8
} _EX_POOL_PRIORITY;

typedef enum _KWAIT_REASON {
  Executive = 0,          // ordinal: 0x0
  FreePage = 1,           // ordinal: 0x1
  PageIn = 2,             // ordinal: 0x2
  PoolAllocation = 3,     // ordinal: 0x3
  DelayExecution = 4,     // ordinal: 0x4
  Suspended = 5,          // ordinal: 0x5
  UserRequest = 6,        // ordinal: 0x6
  WrExecutive = 7,        // ordinal: 0x7
  WrFreePage = 8,         // ordinal: 0x8
  WrPageIn = 9,           // ordinal: 0x9
  WrPoolAllocation = 10,  // ordinal: 0xa
  WrDelayExecution = 11,  // ordinal: 0xb
  WrSuspended = 12,       // ordinal: 0xc
  WrUserRequest = 13,     // ordinal: 0xd
  WrSpare0 = 14,          // ordinal: 0xe
  WrQueue = 15,           // ordinal: 0xf
  WrLpcReceive = 16,      // ordinal: 0x10
  WrLpcReply = 17,        // ordinal: 0x11
  WrVirtualMemory = 18,   // ordinal: 0x12
  WrPageOut = 19,         // ordinal: 0x13
  WrRendezvous = 20,      // ordinal: 0x14
  WrKeyedEvent = 21,      // ordinal: 0x15
  WrTerminated = 22,      // ordinal: 0x16
  WrProcessInSwap = 23,   // ordinal: 0x17
  WrCpuRateControl = 24,  // ordinal: 0x18
  WrCalloutStack = 25,    // ordinal: 0x19
  WrKernel = 26,          // ordinal: 0x1a
  WrResource = 27,        // ordinal: 0x1b
  WrPushLock = 28,        // ordinal: 0x1c
  WrMutex = 29,           // ordinal: 0x1d
  WrQuantumEnd = 30,      // ordinal: 0x1e
  WrDispatchInt = 31,     // ordinal: 0x1f
  WrPreempted = 32,       // ordinal: 0x20
  WrYieldExecution = 33,  // ordinal: 0x21
  WrFastMutex = 34,       // ordinal: 0x22
  WrGuardedMutex = 35,    // ordinal: 0x23
  WrRundown = 36,         // ordinal: 0x24
  WrAlertByThreadId = 37, // ordinal: 0x25
  WrDeferredPreempt = 38, // ordinal: 0x26
  WrPhysicalFault = 39,   // ordinal: 0x27
  MaximumWaitReason = 40, // ordinal: 0x28
} _KWAIT_REASON;

typedef enum _RTLP_HP_ALLOCATOR {
  RtlpHpSegmentSm = 0,     // ordinal: 0x0
  RtlpHpSegmentLg = 1,     // ordinal: 0x1
  RtlpHpSegmentTypes = 2,  // ordinal: 0x2
  RtlpHpHugeAllocator = 2, // ordinal: 0x3
  RtlpHpAllocatorMax = 3,  // ordinal: 0x4
} _RTLP_HP_ALLOCATOR;

typedef enum _HEAP_SEG_RANGE_TYPE {
  HeapSegRangeUser = 0,     // ordinal: 0x0
  HeapSegRangeInternal = 1, // ordinal: 0x1
  HeapSegRangeLFH = 2,      // ordinal: 0x2
  HeapSegRangeVS = 3,       // ordinal: 0x3
  HeapSegRangeTypeMax = 3,  // ordinal: 0x4
} _HEAP_SEG_RANGE_TYPE;

typedef enum _HEAP_LFH_LOCKMODE {
  HeapLockNotHeld = 0,   // ordinal: 0x0
  HeapLockShared = 1,    // ordinal: 0x1
  HeapLockExclusive = 2, // ordinal: 0x2
} _HEAP_LFH_LOCKMODE;

typedef enum RTLP_CSPARSE_BITMAP_STATE {
  CommitBitmapInvalid = 0, // ordinal: 0x0
  UserBitmapInvalid = 1,   // ordinal: 0x1
  UserBitmapValid = 2,     // ordinal: 0x2
} RTLP_CSPARSE_BITMAP_STATE;

typedef enum _OPENCOUNT_REASON {
  OpenCount_SkipLogging = 0,                    // ordinal: 0x0
  OpenCount_AsyncRead = 1,                      // ordinal: 0x1
  OpenCount_FlushCache = 2,                     // ordinal: 0x2
  OpenCount_GetDirtyPage = 3,                   // ordinal: 0x3
  OpenCount_GetFlushedVDL = 4,                  // ordinal: 0x4
  OpenCount_InitCachemap1 = 5,                  // ordinal: 0x5
  OpenCount_InitCachemap2 = 6,                  // ordinal: 0x6
  OpenCount_InitCachemap3 = 7,                  // ordinal: 0x7
  OpenCount_InitCachemap4 = 8,                  // ordinal: 0x8
  OpenCount_InitCachemap5 = 9,                  // ordinal: 0x9
  OpenCount_MdlWrite = 10,                      // ordinal: 0xa
  OpenCount_MdlWriteAbort = 11,                 // ordinal: 0xb
  OpenCount_NotifyMappedWrite = 12,             // ordinal: 0xc
  OpenCount_NotifyMappedWriteCompCallback = 13, // ordinal: 0xd
  OpenCount_PurgeCache = 14,                    // ordinal: 0xe
  OpenCount_PurgeCacheActiveViews = 15,         // ordinal: 0xf
  OpenCount_ReadAhead = 16,                     // ordinal: 0x10
  OpenCount_SetFileSize = 17,                   // ordinal: 0x11
  OpenCount_SetFileSizeSection = 18,            // ordinal: 0x12
  OpenCount_UninitCachemapReadAhead = 19,       // ordinal: 0x13
  OpenCount_UninitCachemapReg = 20,             // ordinal: 0x14
  OpenCount_UnmapInactiveViews = 21,            // ordinal: 0x15
  OpenCount_UnmapInactiveViews1 = 22,           // ordinal: 0x16
  OpenCount_UnmapInactiveViews2 = 23,           // ordinal: 0x17
  OpenCount_UnmapInactiveViews3 = 24,           // ordinal: 0x18
  OpenCount_WriteBehind = 25,                   // ordinal: 0x19
  OpenCount_WriteBehindComplete = 26,           // ordinal: 0x1a
  OpenCount_WriteBehindFailAcquire = 27,        // ordinal: 0x1b
} _OPENCOUNT_REASON;

typedef enum _POWER_REQUEST_TYPE_INTERNAL {
  PowerRequestDisplayRequiredInternal = 0,   // ordinal: 0x0
  PowerRequestSystemRequiredInternal = 1,    // ordinal: 0x1
  PowerRequestAwayModeRequiredInternal = 2,  // ordinal: 0x2
  PowerRequestExecutionRequiredInternal = 3, // ordinal: 0x3
  PowerRequestPerfBoostRequiredInternal = 4, // ordinal: 0x4
  PowerRequestActiveLockScreenInternal = 5,  // ordinal: 0x5
  PowerRequestInternalInvalid = 6,           // ordinal: 0x6
} _POWER_REQUEST_TYPE_INTERNAL;

typedef enum _POWER_REQUEST_TYPE {
  PowerRequestDisplayRequired = 0,   // ordinal: 0x0
  PowerRequestSystemRequired = 1,    // ordinal: 0x1
  PowerRequestAwayModeRequired = 2,  // ordinal: 0x2
  PowerRequestExecutionRequired = 3, // ordinal: 0x3
} _POWER_REQUEST_TYPE;

typedef enum _IPI_TYPE {
  IpiAffinity = 0,   // ordinal: 0x0
  IpiAllButSelf = 1, // ordinal: 0x1
  IpiAll = 2,        // ordinal: 0x2
} _IPI_TYPE;

typedef enum _CMP_FAILURE_INJECTION_POINT {
  CmpFailurePointPoolAllocation = 0,                    // ordinal: 0x0
  CmpFailurePointViewMapping = 1,                       // ordinal: 0x1
  CmpFailurePointViewPinning = 2,                       // ordinal: 0x2
  CmpFailurePointResourceCharging = 3,                  // ordinal: 0x3
  CmpFailurePointFileWrite = 4,                         // ordinal: 0x4
  CmpFailurePointFileRead = 5,                          // ordinal: 0x5
  CmpFailurePointCacheFlush = 6,                        // ordinal: 0x6
  CmpFailurePointFlush = 7,                             // ordinal: 0x7
  CmpFailurePointFlushAndPurge = 8,                     // ordinal: 0x8
  CmpFailurePointForceLargeBin = 9,                     // ordinal: 0x9
  CmpFailurePointDontFixAlignment = 10,                 // ordinal: 0xa
  CmpFailurePointAllocateCell = 11,                     // ordinal: 0xb
  CmpFailurePointMarkDirty = 12,                        // ordinal: 0xc
  CmpFailurePointForceMultiLevelMap = 13,               // ordinal: 0xd
  CmpFailurePointAllocateContiguousLogEntry = 14,       // ordinal: 0xe
  CmpFailurePointAllocateKcb = 15,                      // ordinal: 0xf
  CmpFailurePointCreateKeyBody = 16,                    // ordinal: 0x10
  CmpFailurePointForceFreeKcb = 17,                     // ordinal: 0x11
  CmpFailurePointKeyEnumResumeContextVerification = 18, // ordinal: 0x12
  CmpFailurePointKeyEnumForceRetry = 19,                // ordinal: 0x13
  CmpFailurePointForceReorganization = 20,              // ordinal: 0x14
  CmpFailurePointForceLazyCOWByPolicy = 21,             // ordinal: 0x15
  CmpFailureInjectionPointCount = 22,                   // ordinal: 0x16
} _CMP_FAILURE_INJECTION_POINT;

typedef enum wil_UsageReportingMode {
  wil_UsageReportingMode_Default = 0,           // ordinal: 0x0
  wil_UsageReportingMode_SuppressPotential = 1, // ordinal: 0x1
  wil_UsageReportingMode_SuppressImplicit = 2,  // ordinal: 0x2
} wil_UsageReportingMode;

typedef enum wil_FeatureChangeTime {
  wil_FeatureChangeTime_OnRead = 0,    // ordinal: 0x0
  wil_FeatureChangeTime_OnReload = 1,  // ordinal: 0x1
  wil_FeatureChangeTime_OnSession = 2, // ordinal: 0x2
  wil_FeatureChangeTime_OnReboot = 3,  // ordinal: 0x3
} wil_FeatureChangeTime;

typedef enum wil_FeatureStore {
  wil_FeatureStore_Machine = 0, // ordinal: 0x0
  wil_FeatureStore_User = 1,    // ordinal: 0x1
  wil_FeatureStore_All = 2,     // ordinal: 0x2
} wil_FeatureStore;

typedef enum wil_details_ServiceReportingOptions {
  wil_details_ServiceReportingOptions_None = 0,          // ordinal: 0x0
  wil_details_ServiceReportingOptions_VariantConfig = 1, // ordinal: 0x1
} wil_details_ServiceReportingOptions;

typedef enum wil_details_StagingConfigFeatureFields {
  wil_details_StagingConfigFeatureFields_None = 0,         // ordinal: 0x0
  wil_details_StagingConfigFeatureFields_ServiceState = 1, // ordinal: 0x1
  wil_details_StagingConfigFeatureFields_UserState = 2,    // ordinal: 0x2
  wil_details_StagingConfigFeatureFields_TestState = 4,    // ordinal: 0x3
  wil_details_StagingConfigFeatureFields_Variant = 8,      // ordinal: 0x4
} wil_details_StagingConfigFeatureFields;

typedef enum wil_FeatureEnabledStateKind {
  wil_FeatureEnabledStateKind_All = 0,     // ordinal: 0x0
  wil_FeatureEnabledStateKind_Service = 1, // ordinal: 0x1
  wil_FeatureEnabledStateKind_User = 2,    // ordinal: 0x2
  wil_FeatureEnabledStateKind_Test = 3,    // ordinal: 0x3
} wil_FeatureEnabledStateKind;

typedef enum wil_FeatureEnabledStateOptions {
  wil_FeatureEnabledStateOptions_None = 0,          // ordinal: 0x0
  wil_FeatureEnabledStateOptions_VariantConfig = 1, // ordinal: 0x1
} wil_FeatureEnabledStateOptions;

typedef enum wil_VariantReportingKind {
  wil_VariantReportingKind_None = 0,        // ordinal: 0x0
  wil_VariantReportingKind_UniqueUsage = 1, // ordinal: 0x1
  wil_VariantReportingKind_DeviceUsage = 2, // ordinal: 0x2
} wil_VariantReportingKind;

typedef enum wil_ReportingKind {
  wil_ReportingKind_None = 0,              // ordinal: 0x0
  wil_ReportingKind_UniqueUsage = 1,       // ordinal: 0x1
  wil_ReportingKind_UniqueOpportunity = 2, // ordinal: 0x2
  wil_ReportingKind_DeviceUsage = 3,       // ordinal: 0x3
  wil_ReportingKind_DeviceOpportunity = 4, // ordinal: 0x4
  wil_ReportingKind_TotalDuration = 5,     // ordinal: 0x5
  wil_ReportingKind_PausedDuration = 6,    // ordinal: 0x6
} wil_ReportingKind;

typedef enum wil_details_ServiceReportingKind {
  wil_details_ServiceReportingKind_UniqueUsage = 0,          // ordinal: 0x0
  wil_details_ServiceReportingKind_UniqueOpportunity = 1,    // ordinal: 0x1
  wil_details_ServiceReportingKind_DeviceUsage = 2,          // ordinal: 0x2
  wil_details_ServiceReportingKind_DeviceOpportunity = 3,    // ordinal: 0x3
  wil_details_ServiceReportingKind_PotentialUniqueUsage = 4, // ordinal: 0x4
  wil_details_ServiceReportingKind_PotentialUniqueOpportunity =
      5,                                                     // ordinal: 0x5
  wil_details_ServiceReportingKind_PotentialDeviceUsage = 6, // ordinal: 0x6
  wil_details_ServiceReportingKind_PotentialDeviceOpportunity =
      7,                                                        // ordinal: 0x7
  wil_details_ServiceReportingKind_EnabledTotalDuration = 8,    // ordinal: 0x8
  wil_details_ServiceReportingKind_EnabledPausedDuration = 9,   // ordinal: 0x9
  wil_details_ServiceReportingKind_DisabledTotalDuration = 10,  // ordinal: 0xa
  wil_details_ServiceReportingKind_DisabledPausedDuration = 11, // ordinal: 0xb
  wil_details_ServiceReportingKind_CustomEnabledBase = 100,     // ordinal: 0xc
  wil_details_ServiceReportingKind_CustomDisabledBase = 150,    // ordinal: 0xd
  wil_details_ServiceReportingKind_Store = 254,                 // ordinal: 0xe
  wil_details_ServiceReportingKind_None = 255,                  // ordinal: 0xf
  wil_details_ServiceReportingKind_VariantDevicePotentialBase =
      256, // ordinal: 0x10
  wil_details_ServiceReportingKind_VariantDeviceUsageBase =
      320, // ordinal: 0x11
  wil_details_ServiceReportingKind_VariantUniquePotentialBase =
      384, // ordinal: 0x12
  wil_details_ServiceReportingKind_VariantUniqueUsageBase =
      448, // ordinal: 0x13
} wil_details_ServiceReportingKind;

typedef enum wil_details_CachedHasNotificationState {
  wil_details_CachedHasNotificationState_Unknown = 0, // ordinal: 0x0
  wil_details_CachedHasNotificationState_DoesNotHaveNotifications =
      1,                                                      // ordinal: 0x1
  wil_details_CachedHasNotificationState_HasNotification = 2, // ordinal: 0x2
} wil_details_CachedHasNotificationState;

typedef enum wil_details_CachedFeatureEnabledState {
  wil_details_CachedFeatureEnabledState_Unknown = 0,  // ordinal: 0x0
  wil_details_CachedFeatureEnabledState_Disabled = 1, // ordinal: 0x1
  wil_details_CachedFeatureEnabledState_Enabled = 2,  // ordinal: 0x2
  wil_details_CachedFeatureEnabledState_Desired = 3,  // ordinal: 0x3
} wil_details_CachedFeatureEnabledState;

typedef enum _EVENT_INFO_CLASS {
  EventProviderBinaryTrackInfo = 0,   // ordinal: 0x0
  EventProviderSetReserved1 = 1,      // ordinal: 0x1
  EventProviderSetTraits = 2,         // ordinal: 0x2
  EventProviderUseDescriptorType = 3, // ordinal: 0x3
  MaxEventInfo = 4,                   // ordinal: 0x4
} _EVENT_INFO_CLASS;

typedef enum _DEVICE_WAKE_DEPTH {
  DeviceWakeDepthNotWakeable = 0, // ordinal: 0x0
  DeviceWakeDepthD0 = 1,          // ordinal: 0x1
  DeviceWakeDepthD1 = 2,          // ordinal: 0x2
  DeviceWakeDepthD2 = 3,          // ordinal: 0x3
  DeviceWakeDepthD3hot = 4,       // ordinal: 0x4
  DeviceWakeDepthD3cold = 5,      // ordinal: 0x5
  DeviceWakeDepthMaximum = 6,     // ordinal: 0x6
} _DEVICE_WAKE_DEPTH;

typedef enum _DEVICE_POWER_STATE {
  PowerDeviceUnspecified = 0, // ordinal: 0x0
  PowerDeviceD0 = 1,          // ordinal: 0x1
  PowerDeviceD1 = 2,          // ordinal: 0x2
  PowerDeviceD2 = 3,          // ordinal: 0x3
  PowerDeviceD3 = 4,          // ordinal: 0x4
  PowerDeviceMaximum = 5,     // ordinal: 0x5
} _DEVICE_POWER_STATE;

typedef enum _PF_FILE_ACCESS_TYPE {
  PfFileAccessTypeRead = 0,  // ordinal: 0x0
  PfFileAccessTypeWrite = 1, // ordinal: 0x1
  PfFileAccessTypeMax = 2,   // ordinal: 0x2
} _PF_FILE_ACCESS_TYPE;

typedef enum _MEMORY_CACHING_TYPE {
  MmNonCached = 0,              // ordinal: 0x0
  MmCached = 1,                 // ordinal: 0x1
  MmWriteCombined = 2,          // ordinal: 0x2
  MmHardwareCoherentCached = 3, // ordinal: 0x3
  MmNonCachedUnordered = 4,     // ordinal: 0x4
  MmUSWCCached = 5,             // ordinal: 0x5
  MmMaximumCacheType = 6,       // ordinal: 0x6
  MmNotMapped = -1,             // ordinal: 0x7
} _MEMORY_CACHING_TYPE;

typedef enum _EX_GEN_RANDOM_DOMAIN {
  ExGenRandomDomainKernel = 0,      // ordinal: 0x0
  ExGenRandomDomainFirst = 0,       // ordinal: 0x1
  ExGenRandomDomainUserVisible = 1, // ordinal: 0x2
  ExGenRandomDomainMax = 2,         // ordinal: 0x3
} _EX_GEN_RANDOM_DOMAIN;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER {
  LookasideSmallIrpList = 0,      // ordinal: 0x0
  LookasideMediumIrpList = 1,     // ordinal: 0x1
  LookasideLargeIrpList = 2,      // ordinal: 0x2
  LookasideMdlList = 3,           // ordinal: 0x3
  LookasideCreateInfoList = 4,    // ordinal: 0x4
  LookasideNameBufferList = 5,    // ordinal: 0x5
  LookasideTwilightList = 6,      // ordinal: 0x6
  LookasideCompletionList = 7,    // ordinal: 0x7
  LookasideScratchBufferList = 8, // ordinal: 0x8
  LookasideMaximumList = 9,       // ordinal: 0x9
} _PP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _EVENT_TYPE {
  NotificationEvent = 0,    // ordinal: 0x0
  SynchronizationEvent = 1, // ordinal: 0x1
} _EVENT_TYPE;

typedef enum _KSPIN_LOCK_QUEUE_NUMBER {
  LockQueueUnusedSpare0 = 0,      // ordinal: 0x0
  LockQueueUnusedSpare1 = 1,      // ordinal: 0x1
  LockQueueUnusedSpare2 = 2,      // ordinal: 0x2
  LockQueueUnusedSpare3 = 3,      // ordinal: 0x3
  LockQueueVacbLock = 4,          // ordinal: 0x4
  LockQueueMasterLock = 5,        // ordinal: 0x5
  LockQueueNonPagedPoolLock = 6,  // ordinal: 0x6
  LockQueueIoCancelLock = 7,      // ordinal: 0x7
  LockQueueUnusedSpare8 = 8,      // ordinal: 0x8
  LockQueueIoVpbLock = 9,         // ordinal: 0x9
  LockQueueIoDatabaseLock = 10,   // ordinal: 0xa
  LockQueueIoCompletionLock = 11, // ordinal: 0xb
  LockQueueNtfsStructLock = 12,   // ordinal: 0xc
  LockQueueAfdWorkQueueLock = 13, // ordinal: 0xd
  LockQueueBcbLock = 14,          // ordinal: 0xe
  LockQueueUnusedSpare15 = 15,    // ordinal: 0xf
  LockQueueUnusedSpare16 = 16,    // ordinal: 0x10
  LockQueueMaximumLock = 17,      // ordinal: 0x11
} _KSPIN_LOCK_QUEUE_NUMBER;

typedef enum _PS_MITIGATION_OPTION {
  PS_MITIGATION_OPTION_NX = 0,                               // ordinal: 0x0
  PS_MITIGATION_OPTION_SEHOP = 1,                            // ordinal: 0x1
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,            // ordinal: 0x2
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,                   // ordinal: 0x3
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,                   // ordinal: 0x4
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,                // ordinal: 0x5
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,             // ordinal: 0x6
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,       // ordinal: 0x7
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,          // ordinal: 0x8
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,            // ordinal: 0x9
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,              // ordinal: 0xa
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,    // ordinal: 0xb
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,                    // ordinal: 0xc
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,            // ordinal: 0xd
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,         // ordinal: 0xe
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,      // ordinal: 0xf
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,               // ordinal: 0x10
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,     // ordinal: 0x11
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,       // ordinal: 0x12
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,     // ordinal: 0x13
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,                  // ordinal: 0x14
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,                // ordinal: 0x15
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,                     // ordinal: 0x16
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,           // ordinal: 0x17
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,      // ordinal: 0x18
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25, // ordinal: 0x19
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,           // ordinal: 0x1a
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,     // ordinal: 0x1b
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION =
      28,                                                     // ordinal: 0x1c
  PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29, // ordinal: 0x1d
  PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY =
      30,                                           // ordinal: 0x1e
  PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31, // ordinal: 0x1f
} _PS_MITIGATION_OPTION;

typedef enum SE_WS_APPX_SIGNATURE_ORIGIN {
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0, // ordinal: 0x0
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,       // ordinal: 0x1
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,      // ordinal: 0x2
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,       // ordinal: 0x3
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,    // ordinal: 0x4
} SE_WS_APPX_SIGNATURE_ORIGIN;

typedef enum _DMA_SPEED {
  Compatible = 0,      // ordinal: 0x0
  TypeA = 1,           // ordinal: 0x1
  TypeB = 2,           // ordinal: 0x2
  TypeC = 3,           // ordinal: 0x3
  TypeF = 4,           // ordinal: 0x4
  MaximumDmaSpeed = 5, // ordinal: 0x5
} _DMA_SPEED;

typedef enum _DMA_WIDTH {
  Width8Bits = 0,      // ordinal: 0x0
  Width16Bits = 1,     // ordinal: 0x1
  Width32Bits = 2,     // ordinal: 0x2
  Width64Bits = 3,     // ordinal: 0x3
  WidthNoWrap = 4,     // ordinal: 0x4
  MaximumDmaWidth = 5, // ordinal: 0x5
} _DMA_WIDTH;

typedef enum _LDR_DDAG_STATE {
  LdrModulesMerged = -5,                // ordinal: 0x0
  LdrModulesInitError = -4,             // ordinal: 0x1
  LdrModulesSnapError = -3,             // ordinal: 0x2
  LdrModulesUnloaded = -2,              // ordinal: 0x3
  LdrModulesUnloading = -1,             // ordinal: 0x4
  LdrModulesPlaceHolder = 0,            // ordinal: 0x5
  LdrModulesMapping = 1,                // ordinal: 0x6
  LdrModulesMapped = 2,                 // ordinal: 0x7
  LdrModulesWaitingForDependencies = 3, // ordinal: 0x8
  LdrModulesSnapping = 4,               // ordinal: 0x9
  LdrModulesSnapped = 5,                // ordinal: 0xa
  LdrModulesCondensed = 6,              // ordinal: 0xb
  LdrModulesReadyToInit = 7,            // ordinal: 0xc
  LdrModulesInitializing = 8,           // ordinal: 0xd
  LdrModulesReadyToRun = 9,             // ordinal: 0xe
} _LDR_DDAG_STATE;

typedef enum _LDR_DLL_LOAD_REASON {
  LoadReasonStaticDependency = 0,           // ordinal: 0x0
  LoadReasonStaticForwarderDependency = 1,  // ordinal: 0x1
  LoadReasonDynamicForwarderDependency = 2, // ordinal: 0x2
  LoadReasonDelayloadDependency = 3,        // ordinal: 0x3
  LoadReasonDynamicLoad = 4,                // ordinal: 0x4
  LoadReasonAsImageLoad = 5,                // ordinal: 0x5
  LoadReasonAsDataLoad = 6,                 // ordinal: 0x6
  LoadReasonEnclavePrimary = 7,             // ordinal: 0x7
  LoadReasonEnclaveDependency = 8,          // ordinal: 0x8
  LoadReasonUnknown = -1,                   // ordinal: 0x9
} _LDR_DLL_LOAD_REASON;

typedef enum _KERNEL_STACK_LIMITS {
  BugcheckStackLimits = 0,     // ordinal: 0x0
  DPCStackLimits = 1,          // ordinal: 0x1
  ExpandedStackLimits = 2,     // ordinal: 0x2
  NormalStackLimits = 3,       // ordinal: 0x3
  Win32kStackLimits = 4,       // ordinal: 0x4
  SwapBusyStackLimits = 5,     // ordinal: 0x5
  IsrStackLimits = 6,          // ordinal: 0x6
  DebuggerStackLimits = 7,     // ordinal: 0x7
  NmiStackLimits = 8,          // ordinal: 0x8
  MachineCheckStackLimits = 9, // ordinal: 0x9
  ExceptionStackLimits = 10,   // ordinal: 0xa
  MaximumStackLimits = 11,     // ordinal: 0xb
} _KERNEL_STACK_LIMITS;

typedef enum _DUMP_EVENTS {
  DUMP_EVENT_NONE = 0,             // ordinal: 0x0
  DUMP_EVENT_HIBER_RESUME = 1,     // ordinal: 0x1
  DUMP_EVENT_HIBER_RESUME_END = 2, // ordinal: 0x2
} _DUMP_EVENTS;

typedef enum _POP_IO_STATUS {
  IoReady = 0,   // ordinal: 0x0
  IoPending = 1, // ordinal: 0x1
  IoDone = 2,    // ordinal: 0x2
} _POP_IO_STATUS;

typedef enum _POP_POWER_ACTION_WATCHDOG_STATE {
  PopPowerActionWatchdogStateDisabled = 0,      // ordinal: 0x0
  PopPowerActionWatchdogStateTransitioning = 1, // ordinal: 0x1
  PopPowerActionWatchdogStateResuming = 2,      // ordinal: 0x2
  PopPowerActionWatchdogStateMax = 3,           // ordinal: 0x3
} _POP_POWER_ACTION_WATCHDOG_STATE;

typedef enum SYSTEM_POWER_CONDITION {
  PoAc = 0,               // ordinal: 0x0
  PoDc = 1,               // ordinal: 0x1
  PoHot = 2,              // ordinal: 0x2
  PoConditionMaximum = 3, // ordinal: 0x3
} SYSTEM_POWER_CONDITION;

// 0x4 bytes (sizeof)
typedef struct FEATURE_STATE_CHANGE_SUBSCRIPTION__ {
  LONG unused; // offset: 0x0 ordinal: 0x0
} FEATURE_STATE_CHANGE_SUBSCRIPTION__;

typedef enum _REQUESTER_TYPE {
  KernelRequester = 0,            // ordinal: 0x0
  UserProcessRequester = 1,       // ordinal: 0x1
  UserSharedServiceRequester = 2, // ordinal: 0x2
} _REQUESTER_TYPE;

typedef enum _ETW_NOTIFICATION_TYPE {
  EtwNotificationTypeNoReply = 1,                // ordinal: 0x0
  EtwNotificationTypeLegacyEnable = 2,           // ordinal: 0x1
  EtwNotificationTypeEnable = 3,                 // ordinal: 0x2
  EtwNotificationTypePrivateLogger = 4,          // ordinal: 0x3
  EtwNotificationTypePerflib = 5,                // ordinal: 0x4
  EtwNotificationTypeAudio = 6,                  // ordinal: 0x5
  EtwNotificationTypeSession = 7,                // ordinal: 0x6
  EtwNotificationTypeReserved = 8,               // ordinal: 0x7
  EtwNotificationTypeCredentialUI = 9,           // ordinal: 0x8
  EtwNotificationTypeInProcSession = 10,         // ordinal: 0x9
  EtwNotificationTypeFilteredPrivateLogger = 11, // ordinal: 0xa
  EtwNotificationTypeMax = 12,                   // ordinal: 0xb
} _ETW_NOTIFICATION_TYPE;

typedef enum _EXQUEUEINDEX {
  ExPoolUntrusted = 0, // ordinal: 0x0
  IoPoolUntrusted = 1, // ordinal: 0x1
  ExPoolMax = 8,       // ordinal: 0x2
} _EXQUEUEINDEX;

typedef enum _PNP_DEVICE_ACTION_REQUEST {
  AssignResources = 0,                 // ordinal: 0x0
  ClearDeviceProblem = 1,              // ordinal: 0x1
  ClearProblem = 2,                    // ordinal: 0x2
  ClearEjectProblem = 3,               // ordinal: 0x3
  HaltDevice = 4,                      // ordinal: 0x4
  QueryPowerRelations = 5,             // ordinal: 0x5
  Rebalance = 6,                       // ordinal: 0x6
  ReenumerateBootDevices = 7,          // ordinal: 0x7
  ReenumerateDeviceOnly = 8,           // ordinal: 0x8
  ReenumerateDeviceTree = 9,           // ordinal: 0x9
  ReenumerateRootDevices = 10,         // ordinal: 0xa
  RequeryDeviceState = 11,             // ordinal: 0xb
  ResetDevice = 12,                    // ordinal: 0xc
  ResourceRequirementsChanged = 13,    // ordinal: 0xd
  RestartEnumeration = 14,             // ordinal: 0xe
  SetDeviceProblem = 15,               // ordinal: 0xf
  StartDevice = 16,                    // ordinal: 0x10
  StartSystemDevicesPass0 = 17,        // ordinal: 0x11
  StartSystemDevicesPass1 = 18,        // ordinal: 0x12
  NotifyTransportRelationsChange = 19, // ordinal: 0x13
  NotifyEjectionRelationsChange = 20,  // ordinal: 0x14
  ConfigureDevice = 21,                // ordinal: 0x15
  ConfigureDeviceClass = 22,           // ordinal: 0x16
  ConfigureDeviceExtensions = 23,      // ordinal: 0x17
  ConfigureDeviceReset = 24,           // ordinal: 0x18
  ClearDmaGuardProblem = 25,           // ordinal: 0x19
  PnpDeviceActionRequestMax = 26,      // ordinal: 0x1a
} _PNP_DEVICE_ACTION_REQUEST;

typedef enum POWER_POLICY_DEVICE_TYPE {
  PolicyDeviceSystemButton = 0,                    // ordinal: 0x0
  PolicyDeviceThermalZone = 1,                     // ordinal: 0x1
  PolicyDeviceBattery = 2,                         // ordinal: 0x2
  PolicyDeviceMemory = 3,                          // ordinal: 0x3
  PolicyInitiatePowerActionAPI = 4,                // ordinal: 0x4
  PolicySetPowerStateAPI = 5,                      // ordinal: 0x5
  PolicyImmediateDozeS4 = 6,                       // ordinal: 0x6
  PolicySystemIdle = 7,                            // ordinal: 0x7
  PolicyDeviceWakeAlarm = 8,                       // ordinal: 0x8
  PolicyDeviceFan = 9,                             // ordinal: 0x9
  PolicyCsBatterySaver = 10,                       // ordinal: 0xa
  PolicyImmediateDozeS4Predicted = 11,             // ordinal: 0xb
  PolicyImmediateDozeS4PredictedNoWake = 12,       // ordinal: 0xc
  PolicyImmediateDozeS4AdaptiveBudget = 13,        // ordinal: 0xd
  PolicyImmediateDozeS4AdaptiveReserveNoWake = 14, // ordinal: 0xe
  PolicySystemInitiatedShutdown = 15,              // ordinal: 0xf
  PolicyDeviceMax = 16,                            // ordinal: 0x10
} POWER_POLICY_DEVICE_TYPE;

typedef enum _ARBITER_RESULT {
  ArbiterResultUndefined = -1,       // ordinal: 0x0
  ArbiterResultSuccess = 0,          // ordinal: 0x1
  ArbiterResultExternalConflict = 1, // ordinal: 0x2
  ArbiterResultNullRequest = 2,      // ordinal: 0x3
} _ARBITER_RESULT;

typedef enum _ARBITER_ACTION {
  ArbiterActionTestAllocation = 0,          // ordinal: 0x0
  ArbiterActionRetestAllocation = 1,        // ordinal: 0x1
  ArbiterActionCommitAllocation = 2,        // ordinal: 0x2
  ArbiterActionRollbackAllocation = 3,      // ordinal: 0x3
  ArbiterActionQueryAllocatedResources = 4, // ordinal: 0x4
  ArbiterActionWriteReservedResources = 5,  // ordinal: 0x5
  ArbiterActionQueryConflict = 6,           // ordinal: 0x6
  ArbiterActionQueryArbitrate = 7,          // ordinal: 0x7
  ArbiterActionAddReserved = 8,             // ordinal: 0x8
  ArbiterActionBootAllocation = 9,          // ordinal: 0x9
} _ARBITER_ACTION;

typedef enum _MI_PFN_CACHE_ATTRIBUTE {
  MiNonCached = 0,     // ordinal: 0x0
  MiCached = 1,        // ordinal: 0x1
  MiWriteCombined = 2, // ordinal: 0x2
  MiNotMapped = 3,     // ordinal: 0x3
} _MI_PFN_CACHE_ATTRIBUTE;

typedef enum _FAULT_INFORMATION_ARM64_TYPE {
  UnsupportedUpstreamTransaction = 0, // ordinal: 0x0
  AddressSizeFault = 1,               // ordinal: 0x1
  TlbMatchConflict = 2,               // ordinal: 0x2
  ExternalFault = 3,                  // ordinal: 0x3
  PermissionFault = 4,                // ordinal: 0x4
  AccessFlagFault = 5,                // ordinal: 0x5
  TranslationFault = 6,               // ordinal: 0x6
  MaxFaultType = 7,                   // ordinal: 0x7
} _FAULT_INFORMATION_ARM64_TYPE;

typedef enum _FAULT_INFORMATION_ARCH {
  FaultInformationInvalid = 0, // ordinal: 0x0
  FaultInformationArm64 = 1,   // ordinal: 0x1
} _FAULT_INFORMATION_ARCH;

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE {
  BootEntropySourceStructureUninitialized = 0, // ordinal: 0x0
  BootEntropySourceDisabledByPolicy = 1,       // ordinal: 0x1
  BootEntropySourceNotPresent = 2,             // ordinal: 0x2
  BootEntropySourceError = 3,                  // ordinal: 0x3
  BootEntropySourceSuccess = 4,                // ordinal: 0x4
} _BOOT_ENTROPY_SOURCE_RESULT_CODE;

typedef enum _BOOT_ENTROPY_SOURCE_ID {
  BootEntropySourceNone = 0,       // ordinal: 0x0
  BootEntropySourceSeedfile = 1,   // ordinal: 0x1
  BootEntropySourceExternal = 2,   // ordinal: 0x2
  BootEntropySourceTpm = 3,        // ordinal: 0x3
  BootEntropySourceRdrand = 4,     // ordinal: 0x4
  BootEntropySourceTime = 5,       // ordinal: 0x5
  BootEntropySourceAcpiOem0 = 6,   // ordinal: 0x6
  BootEntropySourceUefi = 7,       // ordinal: 0x7
  BootEntropySourceCng = 8,        // ordinal: 0x8
  BootEntropySourceTcbTpm = 9,     // ordinal: 0x9
  BootEntropySourceTcbRdrand = 10, // ordinal: 0xa
  BootMaxEntropySources = 10,      // ordinal: 0xb
} _BOOT_ENTROPY_SOURCE_ID;

typedef enum _DOMAIN_CONFIGURATION_ARCH {
  DomainConfigurationArm64 = 0,   // ordinal: 0x0
  DomainConfigurationInvalid = 1, // ordinal: 0x1
} _DOMAIN_CONFIGURATION_ARCH;

typedef enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE {
  WheaRecoveryContextErrorTypeMemory = 1, // ordinal: 0x0
  WheaRecoveryContextErrorTypePmem = 2,   // ordinal: 0x1
  WheaRecoveryContextErrorTypeMax = 3,    // ordinal: 0x2
} _WHEA_RECOVERY_CONTEXT_ERROR_TYPE;

typedef enum _CONFIGURATION_TYPE {
  ArcSystem = 0,                // ordinal: 0x0
  CentralProcessor = 1,         // ordinal: 0x1
  FloatingPointProcessor = 2,   // ordinal: 0x2
  PrimaryIcache = 3,            // ordinal: 0x3
  PrimaryDcache = 4,            // ordinal: 0x4
  SecondaryIcache = 5,          // ordinal: 0x5
  SecondaryDcache = 6,          // ordinal: 0x6
  SecondaryCache = 7,           // ordinal: 0x7
  EisaAdapter = 8,              // ordinal: 0x8
  TcAdapter = 9,                // ordinal: 0x9
  ScsiAdapter = 10,             // ordinal: 0xa
  DtiAdapter = 11,              // ordinal: 0xb
  MultiFunctionAdapter = 12,    // ordinal: 0xc
  DiskController = 13,          // ordinal: 0xd
  TapeController = 14,          // ordinal: 0xe
  CdromController = 15,         // ordinal: 0xf
  WormController = 16,          // ordinal: 0x10
  SerialController = 17,        // ordinal: 0x11
  NetworkController = 18,       // ordinal: 0x12
  DisplayController = 19,       // ordinal: 0x13
  ParallelController = 20,      // ordinal: 0x14
  PointerController = 21,       // ordinal: 0x15
  KeyboardController = 22,      // ordinal: 0x16
  AudioController = 23,         // ordinal: 0x17
  OtherController = 24,         // ordinal: 0x18
  DiskPeripheral = 25,          // ordinal: 0x19
  FloppyDiskPeripheral = 26,    // ordinal: 0x1a
  TapePeripheral = 27,          // ordinal: 0x1b
  ModemPeripheral = 28,         // ordinal: 0x1c
  MonitorPeripheral = 29,       // ordinal: 0x1d
  PrinterPeripheral = 30,       // ordinal: 0x1e
  PointerPeripheral = 31,       // ordinal: 0x1f
  KeyboardPeripheral = 32,      // ordinal: 0x20
  TerminalPeripheral = 33,      // ordinal: 0x21
  OtherPeripheral = 34,         // ordinal: 0x22
  LinePeripheral = 35,          // ordinal: 0x23
  NetworkPeripheral = 36,       // ordinal: 0x24
  SystemMemory = 37,            // ordinal: 0x25
  DockingInformation = 38,      // ordinal: 0x26
  RealModeIrqRoutingTable = 39, // ordinal: 0x27
  RealModePCIEnumeration = 40,  // ordinal: 0x28
  MaximumType = 41,             // ordinal: 0x29
} _CONFIGURATION_TYPE;

typedef enum _CONFIGURATION_CLASS {
  SystemClass = 0,     // ordinal: 0x0
  ProcessorClass = 1,  // ordinal: 0x1
  CacheClass = 2,      // ordinal: 0x2
  AdapterClass = 3,    // ordinal: 0x3
  ControllerClass = 4, // ordinal: 0x4
  PeripheralClass = 5, // ordinal: 0x5
  MemoryClass = 6,     // ordinal: 0x6
  MaximumClass = 7,    // ordinal: 0x7
} _CONFIGURATION_CLASS;

typedef enum _EXT_IOMMU_DEVICE_TYPE {
  EXT_IOMMU_DEVICE_TYPE_INVALID = 0, // ordinal: 0x0
  EXT_IOMMU_DEVICE_TYPE_PCI = 1,     // ordinal: 0x1
  EXT_IOMMU_DEVICE_TYPE_ACPI = 2,    // ordinal: 0x2
  EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,  // ordinal: 0x3
  EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4, // ordinal: 0x4
  EXT_IOMMU_DEVICE_TYPE_GIC = 5,     // ordinal: 0x5
  EXT_IOMMU_DEVICE_TYPE_TEST = 6,    // ordinal: 0x6
  EXT_IOMMU_DEVICE_TYPE_MAX = 7,     // ordinal: 0x7
} _EXT_IOMMU_DEVICE_TYPE;

typedef enum KD_CALLBACK_ACTION {
  KdConfigureDeviceAndContinue = 0, // ordinal: 0x0
  KdSkipDeviceAndContinue = 1,      // ordinal: 0x1
  KdConfigureDeviceAndStop = 2,     // ordinal: 0x2
  KdSkipDeviceAndStop = 3,          // ordinal: 0x3
} KD_CALLBACK_ACTION;

typedef enum _PCI_BUSMASTER_RID_TYPE {
  BusmasterRidFromDeviceRid = 0,       // ordinal: 0x0
  BusmasterRidFromBridgeRid = 1,       // ordinal: 0x1
  BusmasterRidFromMultipleBridges = 2, // ordinal: 0x2
} _PCI_BUSMASTER_RID_TYPE;

typedef enum KD_NAMESPACE_ENUM {
  KdNameSpacePCI = 0,  // ordinal: 0x0
  KdNameSpaceACPI = 1, // ordinal: 0x1
  KdNameSpaceAny = 2,  // ordinal: 0x2
  KdNameSpaceNone = 3, // ordinal: 0x3
  KdNameSpaceMax = 4,  // ordinal: 0x4
} KD_NAMESPACE_ENUM;

typedef enum _HAL_PROCESSOR_STAT_TYPE {
  HalProcessorStatResidency = 0, // ordinal: 0x0
  HalProcessorStatCount = 1,     // ordinal: 0x1
  HalProcessorStatMax = 2,       // ordinal: 0x2
} _HAL_PROCESSOR_STAT_TYPE;

typedef enum _HAL_CLOCK_TIMER_MODE {
  HalClockTimerModePeriodic = 0, // ordinal: 0x0
  HalClockTimerModeOneShot = 1,  // ordinal: 0x1
  HalClockTimerModeMax = 2,      // ordinal: 0x2
} _HAL_CLOCK_TIMER_MODE;

typedef enum _BUS_DATA_TYPE {
  ConfigurationSpaceUndefined = -1, // ordinal: 0x0
  Cmos = 0,                         // ordinal: 0x1
  EisaConfiguration = 1,            // ordinal: 0x2
  Pos = 2,                          // ordinal: 0x3
  CbusConfiguration = 3,            // ordinal: 0x4
  PCIConfiguration = 4,             // ordinal: 0x5
  VMEConfiguration = 5,             // ordinal: 0x6
  NuBusConfiguration = 6,           // ordinal: 0x7
  PCMCIAConfiguration = 7,          // ordinal: 0x8
  MPIConfiguration = 8,             // ordinal: 0x9
  MPSAConfiguration = 9,            // ordinal: 0xa
  PNPISAConfiguration = 10,         // ordinal: 0xb
  SgiInternalConfiguration = 11,    // ordinal: 0xc
  MaximumBusDataType = 12,          // ordinal: 0xd
} _BUS_DATA_TYPE;

typedef enum _TYPE_OF_MEMORY {
  LoaderExceptionBlock = 0,       // ordinal: 0x0
  LoaderSystemBlock = 1,          // ordinal: 0x1
  LoaderFree = 2,                 // ordinal: 0x2
  LoaderBad = 3,                  // ordinal: 0x3
  LoaderLoadedProgram = 4,        // ordinal: 0x4
  LoaderFirmwareTemporary = 5,    // ordinal: 0x5
  LoaderFirmwarePermanent = 6,    // ordinal: 0x6
  LoaderOsloaderHeap = 7,         // ordinal: 0x7
  LoaderOsloaderStack = 8,        // ordinal: 0x8
  LoaderSystemCode = 9,           // ordinal: 0x9
  LoaderHalCode = 10,             // ordinal: 0xa
  LoaderBootDriver = 11,          // ordinal: 0xb
  LoaderConsoleInDriver = 12,     // ordinal: 0xc
  LoaderConsoleOutDriver = 13,    // ordinal: 0xd
  LoaderStartupDpcStack = 14,     // ordinal: 0xe
  LoaderStartupKernelStack = 15,  // ordinal: 0xf
  LoaderStartupPanicStack = 16,   // ordinal: 0x10
  LoaderStartupPcrPage = 17,      // ordinal: 0x11
  LoaderStartupPdrPage = 18,      // ordinal: 0x12
  LoaderRegistryData = 19,        // ordinal: 0x13
  LoaderMemoryData = 20,          // ordinal: 0x14
  LoaderNlsData = 21,             // ordinal: 0x15
  LoaderSpecialMemory = 22,       // ordinal: 0x16
  LoaderBBTMemory = 23,           // ordinal: 0x17
  LoaderZero = 24,                // ordinal: 0x18
  LoaderXIPRom = 25,              // ordinal: 0x19
  LoaderHALCachedMemory = 26,     // ordinal: 0x1a
  LoaderLargePageFiller = 27,     // ordinal: 0x1b
  LoaderErrorLogMemory = 28,      // ordinal: 0x1c
  LoaderVsmMemory = 29,           // ordinal: 0x1d
  LoaderFirmwareCode = 30,        // ordinal: 0x1e
  LoaderFirmwareData = 31,        // ordinal: 0x1f
  LoaderFirmwareReserved = 32,    // ordinal: 0x20
  LoaderEnclaveMemory = 33,       // ordinal: 0x21
  LoaderFirmwareKsr = 34,         // ordinal: 0x22
  LoaderEnclaveKsr = 35,          // ordinal: 0x23
  LoaderSkMemory = 36,            // ordinal: 0x24
  LoaderSkFirmwareReserved = 37,  // ordinal: 0x25
  LoaderIoSpaceMemoryZeroed = 38, // ordinal: 0x26
  LoaderIoSpaceMemoryFree = 39,   // ordinal: 0x27
  LoaderIoSpaceMemoryKsr = 40,    // ordinal: 0x28
  LoaderMaximum = 41,             // ordinal: 0x29
} _TYPE_OF_MEMORY;

typedef enum _VI_DEADLOCK_RESOURCE_TYPE {
  VfDeadlockUnknown = 0,               // ordinal: 0x0
  VfDeadlockMutex = 1,                 // ordinal: 0x1
  VfDeadlockMutexAbandoned = 2,        // ordinal: 0x2
  VfDeadlockFastMutex = 3,             // ordinal: 0x3
  VfDeadlockFastMutexUnsafe = 4,       // ordinal: 0x4
  VfDeadlockSpinLock = 5,              // ordinal: 0x5
  VfDeadlockInStackQueuedSpinLock = 6, // ordinal: 0x6
  VfDeadlockUnusedSpinLock = 7,        // ordinal: 0x7
  VfDeadlockEresource = 8,             // ordinal: 0x8
  VfDeadlockTypeMaximum = 9,           // ordinal: 0x9
} _VI_DEADLOCK_RESOURCE_TYPE;

typedef enum _WNF_SUBSCRIPTION_STATE {
  WNF_SUB_STATE_QUIESCENT = 0,        // ordinal: 0x0
  WNF_SUB_STATE_READY_TO_DELIVER = 1, // ordinal: 0x1
  WNF_SUB_STATE_IN_DELIVERY = 2,      // ordinal: 0x2
  WNF_SUB_STATE_RETRY = 3,            // ordinal: 0x3
} _WNF_SUBSCRIPTION_STATE;

typedef enum _WHEA_ERROR_SOURCE_STATE {
  WheaErrSrcStateStopped = 1,       // ordinal: 0x0
  WheaErrSrcStateStarted = 2,       // ordinal: 0x1
  WheaErrSrcStateRemoved = 3,       // ordinal: 0x2
  WheaErrSrcStateRemovePending = 4, // ordinal: 0x3
} _WHEA_ERROR_SOURCE_STATE;

typedef enum _SEP_CACHED_HANDLES_ENTRY_TYPE {
  SepCachedHandlesEntryLowbox = 0,       // ordinal: 0x0
  SepCachedHandlesEntryBnoIsolation = 1, // ordinal: 0x1
} _SEP_CACHED_HANDLES_ENTRY_TYPE;

typedef enum _CREATE_FILE_TYPE {
  CreateFileTypeNone = 0,      // ordinal: 0x0
  CreateFileTypeNamedPipe = 1, // ordinal: 0x1
  CreateFileTypeMailslot = 2,  // ordinal: 0x2
} _CREATE_FILE_TYPE;

typedef enum _IOP_PRIORITY_HINT {
  IopIoPriorityNotSet = 0,   // ordinal: 0x0
  IopIoPriorityVeryLow = 1,  // ordinal: 0x1
  IopIoPriorityLow = 2,      // ordinal: 0x2
  IopIoPriorityNormal = 3,   // ordinal: 0x3
  IopIoPriorityHigh = 4,     // ordinal: 0x4
  IopIoPriorityCritical = 5, // ordinal: 0x5
  MaxIopIoPriorityTypes = 6, // ordinal: 0x6
} _IOP_PRIORITY_HINT;

typedef enum _SECURITY_OPERATION_CODE {
  SetSecurityDescriptor = 0,    // ordinal: 0x0
  QuerySecurityDescriptor = 1,  // ordinal: 0x1
  DeleteSecurityDescriptor = 2, // ordinal: 0x2
  AssignSecurityDescriptor = 3, // ordinal: 0x3
} _SECURITY_OPERATION_CODE;

typedef enum _OB_OPEN_REASON {
  ObCreateHandle = 0,    // ordinal: 0x0
  ObOpenHandle = 1,      // ordinal: 0x1
  ObDuplicateHandle = 2, // ordinal: 0x2
  ObInheritHandle = 3,   // ordinal: 0x3
  ObMaxOpenReason = 4,   // ordinal: 0x4
} _OB_OPEN_REASON;

typedef enum _BLOB_ID {
  BLOB_TYPE_UNKNOWN = 0,          // ordinal: 0x0
  BLOB_TYPE_CONNECTION_INFO = 1,  // ordinal: 0x1
  BLOB_TYPE_MESSAGE = 2,          // ordinal: 0x2
  BLOB_TYPE_SECURITY_CONTEXT = 3, // ordinal: 0x3
  BLOB_TYPE_SECTION = 4,          // ordinal: 0x4
  BLOB_TYPE_REGION = 5,           // ordinal: 0x5
  BLOB_TYPE_VIEW = 6,             // ordinal: 0x6
  BLOB_TYPE_RESERVE = 7,          // ordinal: 0x7
  BLOB_TYPE_DIRECT_TRANSFER = 8,  // ordinal: 0x8
  BLOB_TYPE_HANDLE_DATA = 9,      // ordinal: 0x9
  BLOB_TYPE_MAX_ID = 10,          // ordinal: 0xa
} _BLOB_ID;

typedef enum _RTLP_HP_LOCK_TYPE {
  HeapLockPaged = 0,    // ordinal: 0x0
  HeapLockNonPaged = 1, // ordinal: 0x1
  HeapLockTypeMax = 2,  // ordinal: 0x2
} _RTLP_HP_LOCK_TYPE;

typedef enum _HEAP_FAILURE_TYPE {
  heap_failure_internal = 0,                       // ordinal: 0x0
  heap_failure_unknown = 1,                        // ordinal: 0x1
  heap_failure_generic = 2,                        // ordinal: 0x2
  heap_failure_entry_corruption = 3,               // ordinal: 0x3
  heap_failure_multiple_entries_corruption = 4,    // ordinal: 0x4
  heap_failure_virtual_block_corruption = 5,       // ordinal: 0x5
  heap_failure_buffer_overrun = 6,                 // ordinal: 0x6
  heap_failure_buffer_underrun = 7,                // ordinal: 0x7
  heap_failure_block_not_busy = 8,                 // ordinal: 0x8
  heap_failure_invalid_argument = 9,               // ordinal: 0x9
  heap_failure_invalid_allocation_type = 10,       // ordinal: 0xa
  heap_failure_usage_after_free = 11,              // ordinal: 0xb
  heap_failure_cross_heap_operation = 12,          // ordinal: 0xc
  heap_failure_freelists_corruption = 13,          // ordinal: 0xd
  heap_failure_listentry_corruption = 14,          // ordinal: 0xe
  heap_failure_lfh_bitmap_mismatch = 15,           // ordinal: 0xf
  heap_failure_segment_lfh_bitmap_corruption = 16, // ordinal: 0x10
  heap_failure_segment_lfh_double_free = 17,       // ordinal: 0x11
  heap_failure_vs_subsegment_corruption = 18,      // ordinal: 0x12
  heap_failure_null_heap = 19,                     // ordinal: 0x13
  heap_failure_allocation_limit = 20,              // ordinal: 0x14
  heap_failure_commit_limit = 21,                  // ordinal: 0x15
  heap_failure_invalid_va_mgr_query = 22,          // ordinal: 0x16
} _HEAP_FAILURE_TYPE;

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE {
  HeapAddressUser = 0,    // ordinal: 0x0
  HeapAddressKernel = 1,  // ordinal: 0x1
  HeapAddressSession = 2, // ordinal: 0x2
  HeapAddressTypeMax = 3, // ordinal: 0x3
} _RTLP_HP_ADDRESS_SPACE_TYPE;

typedef enum _KHETERO_CPU_POLICY {
  KHeteroCpuPolicyAll = 0,         // ordinal: 0x0
  KHeteroCpuPolicyLarge = 1,       // ordinal: 0x1
  KHeteroCpuPolicyLargeOrIdle = 2, // ordinal: 0x2
  KHeteroCpuPolicySmall = 3,       // ordinal: 0x3
  KHeteroCpuPolicySmallOrIdle = 4, // ordinal: 0x4
  KHeteroCpuPolicyDynamic = 5,     // ordinal: 0x5
  KHeteroCpuPolicyStaticMax = 5,   // ordinal: 0x6
  KHeteroCpuPolicyBiasedSmall = 6, // ordinal: 0x7
  KHeteroCpuPolicyBiasedLarge = 7, // ordinal: 0x8
  KHeteroCpuPolicyDefault = 8,     // ordinal: 0x9
  KHeteroCpuPolicyMax = 9,         // ordinal: 0xa
} _KHETERO_CPU_POLICY;

typedef enum _GPIO_PIN_IORESTRICTION_TYPE {
  IoRestrictionNone = 0,            // ordinal: 0x0
  IoRestrictionInputOnly = 1,       // ordinal: 0x1
  IoRestrictionOutputOnly = 2,      // ordinal: 0x2
  IoRestrictionNoneAndPreserve = 3, // ordinal: 0x3
} _GPIO_PIN_IORESTRICTION_TYPE;

typedef enum _GPIO_PIN_CONFIG_TYPE {
  PullDefault = 0, // ordinal: 0x0
  PullUp = 1,      // ordinal: 0x1
  PullDown = 2,    // ordinal: 0x2
  PullNone = 3,    // ordinal: 0x3
} _GPIO_PIN_CONFIG_TYPE;

typedef enum _PEP_ACPI_RESOURCE_TYPE {
  PepAcpiMemory = 0,         // ordinal: 0x0
  PepAcpiIoPort = 1,         // ordinal: 0x1
  PepAcpiInterrupt = 2,      // ordinal: 0x2
  PepAcpiGpioIo = 3,         // ordinal: 0x3
  PepAcpiGpioInt = 4,        // ordinal: 0x4
  PepAcpiSpbI2c = 5,         // ordinal: 0x5
  PepAcpiSpbSpi = 6,         // ordinal: 0x6
  PepAcpiSpbUart = 7,        // ordinal: 0x7
  PepAcpiExtendedMemory = 8, // ordinal: 0x8
  PepAcpiExtendedIo = 9,     // ordinal: 0x9
} _PEP_ACPI_RESOURCE_TYPE;

typedef enum _ARBITER_REQUEST_SOURCE {
  ArbiterRequestUndefined = -1,     // ordinal: 0x0
  ArbiterRequestLegacyReported = 0, // ordinal: 0x1
  ArbiterRequestHalReported = 1,    // ordinal: 0x2
  ArbiterRequestLegacyAssigned = 2, // ordinal: 0x3
  ArbiterRequestPnpDetected = 3,    // ordinal: 0x4
  ArbiterRequestPnpEnumerated = 4,  // ordinal: 0x5
} _ARBITER_REQUEST_SOURCE;

typedef enum _PCW_CALLBACK_TYPE {
  PcwCallbackAddCounter = 0,         // ordinal: 0x0
  PcwCallbackRemoveCounter = 1,      // ordinal: 0x1
  PcwCallbackEnumerateInstances = 2, // ordinal: 0x2
  PcwCallbackCollectData = 3,        // ordinal: 0x3
} _PCW_CALLBACK_TYPE;

typedef enum _CM_LOAD_FAILURE_TYPE {
  _None = 0,                               // ordinal: 0x0
  _CmCreateHive = 1,                       // ordinal: 0x1
  _HvpBuildMap = 3,                        // ordinal: 0x2
  _HvpBuildMapForLoaderHive = 4,           // ordinal: 0x3
  _HvpInitMap = 5,                         // ordinal: 0x4
  _HvLoadHive = 6,                         // ordinal: 0x5
  _HvpMapHiveImage = 7,                    // ordinal: 0x6
  _HvpRecoverData = 8,                     // ordinal: 0x7
  _CmpValidateHiveSecurityDescriptors = 9, // ordinal: 0x8
  _HvpEnlistBinInMap = 10,                 // ordinal: 0x9
  _CmCheckRegistry = 11,                   // ordinal: 0xa
  _CmRegistryIO = 12,                      // ordinal: 0xb
  _CmCheckRegistry2 = 13,                  // ordinal: 0xc
  _CmpCheckKey = 14,                       // ordinal: 0xd
  _CmpCheckValueList = 15,                 // ordinal: 0xe
  _HvCheckHive = 16,                       // ordinal: 0xf
  _HvCheckBin = 17,                        // ordinal: 0x10
  _HvpGetLogEntryDirtyVector = 18,         // ordinal: 0x11
  _HvpReadLogEntryHeader = 19,             // ordinal: 0x12
  _HvpReadLogEntry = 20,                   // ordinal: 0x13
  _CmpMountPreloadedHives = 21,            // ordinal: 0x14
  _CmpLoadHiveThread = 22,                 // ordinal: 0x15
  _CmpCheckLeaf = 23,                      // ordinal: 0x16
  _HvHiveStartFileBacked = 24,             // ordinal: 0x17
  _HvStartHiveMemoryBacked = 25,           // ordinal: 0x18
  _HvpEnlistFreeCells = 26,                // ordinal: 0x19
  _HvpPerformLogFileRecovery = 27,         // ordinal: 0x1a
} _CM_LOAD_FAILURE_TYPE;

typedef enum _RTL_GENERIC_COMPARE_RESULTS {
  GenericLessThan = 0,    // ordinal: 0x0
  GenericGreaterThan = 1, // ordinal: 0x1
  GenericEqual = 2,       // ordinal: 0x2
} _RTL_GENERIC_COMPARE_RESULTS;

typedef enum _CM_DIRTY_VECTOR_OPERATION {
  DirtyVectorModified = 0,   // ordinal: 0x0
  DirtyDataCaptureStart = 1, // ordinal: 0x1
  DirtyDataCaptureEnd = 2,   // ordinal: 0x2
} _CM_DIRTY_VECTOR_OPERATION;

typedef enum __anon_1707 {
  KTMOH_CommitTransaction_Result = 1,   // ordinal: 0x0
  KTMOH_RollbackTransaction_Result = 2, // ordinal: 0x1
} __anon_1707;

typedef enum KTM_STATE {
  KKtmUninitialized = 0,  // ordinal: 0x0
  KKtmInitialized = 1,    // ordinal: 0x1
  KKtmRecovering = 2,     // ordinal: 0x2
  KKtmOnline = 3,         // ordinal: 0x3
  KKtmRecoveryFailed = 4, // ordinal: 0x4
  KKtmOffline = 5,        // ordinal: 0x5
} KTM_STATE;

typedef enum _KTRANSACTION_OUTCOME {
  KTxOutcomeUninitialized = 0, // ordinal: 0x0
  KTxOutcomeUndetermined = 1,  // ordinal: 0x1
  KTxOutcomeCommitted = 2,     // ordinal: 0x2
  KTxOutcomeAborted = 3,       // ordinal: 0x3
  KTxOutcomeUnavailable = 4,   // ordinal: 0x4
} _KTRANSACTION_OUTCOME;

typedef enum _KTRANSACTION_STATE {
  KTransactionUninitialized = 0, // ordinal: 0x0
  KTransactionActive = 1,        // ordinal: 0x1
  KTransactionPreparing = 2,     // ordinal: 0x2
  KTransactionPrepared = 3,      // ordinal: 0x3
  KTransactionInDoubt = 4,       // ordinal: 0x4
  KTransactionCommitted = 5,     // ordinal: 0x5
  KTransactionAborted = 6,       // ordinal: 0x6
  KTransactionDelegated = 7,     // ordinal: 0x7
  KTransactionPrePreparing = 8,  // ordinal: 0x8
  KTransactionForgotten = 9,     // ordinal: 0x9
  KTransactionRecovering = 10,   // ordinal: 0xa
  KTransactionPrePrepared = 11,  // ordinal: 0xb
} _KTRANSACTION_STATE;

typedef enum _KRESOURCEMANAGER_STATE {
  KResourceManagerUninitialized = 0, // ordinal: 0x0
  KResourceManagerOffline = 1,       // ordinal: 0x1
  KResourceManagerOnline = 2,        // ordinal: 0x2
} _KRESOURCEMANAGER_STATE;

typedef enum HSTORAGE_TYPE {
  Stable = 0,         // ordinal: 0x0
  Volatile = 1,       // ordinal: 0x1
  InvalidStorage = 2, // ordinal: 0x2
} HSTORAGE_TYPE;

typedef enum UoWActionType {
  UoWAddThisKey = 0,            // ordinal: 0x0
  UoWAddChildKey = 1,           // ordinal: 0x1
  UoWDeleteThisKey = 2,         // ordinal: 0x2
  UoWDeleteChildKey = 3,        // ordinal: 0x3
  UoWSetValueNew = 4,           // ordinal: 0x4
  UoWSetValueExisting = 5,      // ordinal: 0x5
  UoWDeleteValue = 6,           // ordinal: 0x6
  UoWSetKeyUserFlags = 7,       // ordinal: 0x7
  UoWSetLastWriteTime = 8,      // ordinal: 0x8
  UoWSetSecurityDescriptor = 9, // ordinal: 0x9
  UoWRenameSubKey = 10,         // ordinal: 0xa
  UoWRenameOldSubKey = 11,      // ordinal: 0xb
  UoWRenameNewSubKey = 12,      // ordinal: 0xc
  UoWIsolation = 13,            // ordinal: 0xd
  UoWInvalid = 14,              // ordinal: 0xe
} UoWActionType;

typedef enum _KENLISTMENT_STATE {
  KEnlistmentUninitialized = 0,           // ordinal: 0x0
  KEnlistmentActive = 256,                // ordinal: 0x1
  KEnlistmentPreparing = 257,             // ordinal: 0x2
  KEnlistmentPrepared = 258,              // ordinal: 0x3
  KEnlistmentInDoubt = 259,               // ordinal: 0x4
  KEnlistmentCommitted = 260,             // ordinal: 0x5
  KEnlistmentCommittedNotify = 261,       // ordinal: 0x6
  KEnlistmentCommitRequested = 262,       // ordinal: 0x7
  KEnlistmentAborted = 263,               // ordinal: 0x8
  KEnlistmentDelegated = 264,             // ordinal: 0x9
  KEnlistmentDelegatedDisconnected = 265, // ordinal: 0xa
  KEnlistmentPrePreparing = 266,          // ordinal: 0xb
  KEnlistmentForgotten = 267,             // ordinal: 0xc
  KEnlistmentRecovering = 268,            // ordinal: 0xd
  KEnlistmentAborting = 269,              // ordinal: 0xe
  KEnlistmentReadOnly = 270,              // ordinal: 0xf
  KEnlistmentOutcomeUnavailable = 271,    // ordinal: 0x10
  KEnlistmentOffline = 272,               // ordinal: 0x11
  KEnlistmentPrePrepared = 273,           // ordinal: 0x12
  KEnlistmentInitialized = 274,           // ordinal: 0x13
} _KENLISTMENT_STATE;

typedef enum _MI_SLAB_ALLOCATOR_PROTECTION {
  MiSlabAllocatorProtectionReadExecute = 0, // ordinal: 0x0
  MiSlabAllocatorProtectionReadOnly = 1,    // ordinal: 0x1
  MiSlabAllocatorProtectionNoAccess = 2,    // ordinal: 0x2
  MiSlabAllocatorProtectionReadWrite = 3,   // ordinal: 0x3
  MiSlabAllocatorProtectionMax = 4,         // ordinal: 0x4
} _MI_SLAB_ALLOCATOR_PROTECTION;

typedef enum _MI_SLAB_ALLOCATOR_TYPE {
  MiSlabAllocatorTypeSlatProtected = 0, // ordinal: 0x0
  MiSlabAllocatorTypeUnprotected = 1,   // ordinal: 0x1
  MiSlabAllocatorTypeMax = 2,           // ordinal: 0x2
} _MI_SLAB_ALLOCATOR_TYPE;

typedef enum _MMLISTS {
  ZeroedPageList = 0,          // ordinal: 0x0
  FreePageList = 1,            // ordinal: 0x1
  StandbyPageList = 2,         // ordinal: 0x2
  ModifiedPageList = 3,        // ordinal: 0x3
  ModifiedNoWritePageList = 4, // ordinal: 0x4
  BadPageList = 5,             // ordinal: 0x5
  ActiveAndValid = 6,          // ordinal: 0x6
  TransitionPage = 7,          // ordinal: 0x7
} _MMLISTS;

typedef enum wil_details_FeatureTestStateKind {
  wil_details_FeatureTestStateKind_EnabledState = 0, // ordinal: 0x0
  wil_details_FeatureTestStateKind_Variant = 1,      // ordinal: 0x1
} wil_details_FeatureTestStateKind;

typedef enum wil_FeatureVariantPayloadKind {
  wil_FeatureVariantPayloadKind_None = 0,     // ordinal: 0x0
  wil_FeatureVariantPayloadKind_Resident = 1, // ordinal: 0x1
  wil_FeatureVariantPayloadKind_External = 2, // ordinal: 0x2
} wil_FeatureVariantPayloadKind;

typedef enum wil_FeatureEnabledState {
  wil_FeatureEnabledState_Default = 0,  // ordinal: 0x0
  wil_FeatureEnabledState_Disabled = 1, // ordinal: 0x1
  wil_FeatureEnabledState_Enabled = 2,  // ordinal: 0x2
} wil_FeatureEnabledState;

// 0x18 bytes (sizeof)
typedef struct wil_details_RecordUsageResult {
  LONG queueBackground; // offset: 0x0 ordinal: 0x0
  ULONG countImmediate; // offset: 0x4 ordinal: 0x1
  enum wil_details_ServiceReportingKind
      kindImmediate;           // offset: 0x8 ordinal: 0x2
  ULONG payloadId;             // offset: 0xc ordinal: 0x3
  LONG ignoredUse;             // offset: 0x10 ordinal: 0x4
  LONG isVariantConfiguration; // offset: 0x14 ordinal: 0x5
} wil_details_RecordUsageResult;

// 0x20 bytes (sizeof)
typedef struct _iobuf {
  CHAR *_ptr;      // offset: 0x0 ordinal: 0x0
  LONG _cnt;       // offset: 0x4 ordinal: 0x1
  CHAR *_base;     // offset: 0x8 ordinal: 0x2
  LONG _flag;      // offset: 0xc ordinal: 0x3
  LONG _file;      // offset: 0x10 ordinal: 0x4
  LONG _charbuf;   // offset: 0x14 ordinal: 0x5
  LONG _bufsiz;    // offset: 0x18 ordinal: 0x6
  CHAR *_tmpfname; // offset: 0x1c ordinal: 0x7
} _iobuf;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
  WheaDataFormatIPFSalRecord = 0, // ordinal: 0x0
  WheaDataFormatXPFMCA = 1,       // ordinal: 0x1
  WheaDataFormatMemory = 2,       // ordinal: 0x2
  WheaDataFormatPCIExpress = 3,   // ordinal: 0x3
  WheaDataFormatNMIPort = 4,      // ordinal: 0x4
  WheaDataFormatPCIXBus = 5,      // ordinal: 0x5
  WheaDataFormatPCIXDevice = 6,   // ordinal: 0x6
  WheaDataFormatGeneric = 7,      // ordinal: 0x7
  WheaDataFormatMax = 8,          // ordinal: 0x8
} _WHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _WHEA_ERROR_SOURCE_TYPE {
  WheaErrSrcTypeMCE = 0,           // ordinal: 0x0
  WheaErrSrcTypeCMC = 1,           // ordinal: 0x1
  WheaErrSrcTypeCPE = 2,           // ordinal: 0x2
  WheaErrSrcTypeNMI = 3,           // ordinal: 0x3
  WheaErrSrcTypePCIe = 4,          // ordinal: 0x4
  WheaErrSrcTypeGeneric = 5,       // ordinal: 0x5
  WheaErrSrcTypeINIT = 6,          // ordinal: 0x6
  WheaErrSrcTypeBOOT = 7,          // ordinal: 0x7
  WheaErrSrcTypeSCIGeneric = 8,    // ordinal: 0x8
  WheaErrSrcTypeIPFMCA = 9,        // ordinal: 0x9
  WheaErrSrcTypeIPFCMC = 10,       // ordinal: 0xa
  WheaErrSrcTypeIPFCPE = 11,       // ordinal: 0xb
  WheaErrSrcTypeGenericV2 = 12,    // ordinal: 0xc
  WheaErrSrcTypeSCIGenericV2 = 13, // ordinal: 0xd
  WheaErrSrcTypeBMC = 14,          // ordinal: 0xe
  WheaErrSrcTypePMEM = 15,         // ordinal: 0xf
  WheaErrSrcTypeDeviceDriver = 16, // ordinal: 0x10
  WheaErrSrcTypeMax = 17,          // ordinal: 0x11
} _WHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_SEVERITY {
  WheaErrSevRecoverable = 0,   // ordinal: 0x0
  WheaErrSevFatal = 1,         // ordinal: 0x1
  WheaErrSevCorrected = 2,     // ordinal: 0x2
  WheaErrSevInformational = 3, // ordinal: 0x3
} _WHEA_ERROR_SEVERITY;

typedef enum _WHEA_ERROR_TYPE {
  WheaErrTypeProcessor = 0,  // ordinal: 0x0
  WheaErrTypeMemory = 1,     // ordinal: 0x1
  WheaErrTypePCIExpress = 2, // ordinal: 0x2
  WheaErrTypeNMI = 3,        // ordinal: 0x3
  WheaErrTypePCIXBus = 4,    // ordinal: 0x4
  WheaErrTypePCIXDevice = 5, // ordinal: 0x5
  WheaErrTypeGeneric = 6,    // ordinal: 0x6
  WheaErrTypePmem = 7,       // ordinal: 0x7
} _WHEA_ERROR_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID {
  WheaEventLogEntryIdCmcPollingTimeout = -2147483647,      // ordinal: 0x0
  WheaEventLogEntryIdWheaInit = -2147483646,               // ordinal: 0x1
  WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,     // ordinal: 0x2
  WheaEventLogEntryIdDroppedCorrectedError = -2147483644,  // ordinal: 0x3
  WheaEventLogEntryIdStartedReportHwError = -2147483643,   // ordinal: 0x4
  WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,      // ordinal: 0x5
  WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641, // ordinal: 0x6
  WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,        // ordinal: 0x7
  WheaEventLogEntryIdPshedInjectError = -2147483639,       // ordinal: 0x8
  WheaEventLogEntryIdOscCapabilities = -2147483638,        // ordinal: 0x9
  WheaEventLogEntryIdPshedPluginRegister = -2147483637,    // ordinal: 0xa
  WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,   // ordinal: 0xb
  WheaEventLogEntryIdWorkQueueItem = -2147483635,          // ordinal: 0xc
  WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,   // ordinal: 0xd
  WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,    // ordinal: 0xe
  WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,     // ordinal: 0xf
  WheaEventLogEntryIdMcaErrorCleared = -2147483631,        // ordinal: 0x10
  WheaEventLogEntryIdClearedPoison = -2147483630,          // ordinal: 0x11
  WheaEventLogEntryIdProcessEINJ = -2147483629,            // ordinal: 0x12
  WheaEventLogEntryIdProcessHEST = -2147483628,            // ordinal: 0x13
  WheaEventLogEntryIdCreateGenericRecord = -2147483627,    // ordinal: 0x14
  WheaEventLogEntryIdErrorRecord = -2147483626,            // ordinal: 0x15
  WheaEventLogEntryIdErrorRecordLimit = -2147483625,       // ordinal: 0x16
  WheaEventLogEntryIdSELEventFailed = -2147483624,         // ordinal: 0x17
  WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,     // ordinal: 0x18
  WheaEventLogEntryIdErrSrcInvalid = -2147483616,          // ordinal: 0x19
  WheaEventLogEntryIdGenericErrMemMap = -2147483615,       // ordinal: 0x1a
  WheaEventLogEntryIdPshedCallbackCollision = -2147483614, // ordinal: 0x1b
  WheaEventLogEntryIdSELBugCheckProgress = -2147483613,    // ordinal: 0x1c
} _WHEA_EVENT_LOG_ENTRY_ID;

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE {
  WheaEventLogEntryTypeInformational = 0, // ordinal: 0x0
  WheaEventLogEntryTypeWarning = 1,       // ordinal: 0x1
  WheaEventLogEntryTypeError = 2,         // ordinal: 0x2
} _WHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _MM_PAGE_ACCESS_TYPE {
  MmPteAccessType = 0,         // ordinal: 0x0
  MmCcReadAheadType = 1,       // ordinal: 0x1
  MmPfnRepurposeType = 2,      // ordinal: 0x2
  MmMaximumPageAccessType = 3, // ordinal: 0x3
} _MM_PAGE_ACCESS_TYPE;

typedef enum _IO_PRIORITY_HINT {
  IoPriorityVeryLow = 0,  // ordinal: 0x0
  IoPriorityLow = 1,      // ordinal: 0x1
  IoPriorityNormal = 2,   // ordinal: 0x2
  IoPriorityHigh = 3,     // ordinal: 0x3
  IoPriorityCritical = 4, // ordinal: 0x4
  MaxIoPriorityTypes = 5, // ordinal: 0x5
} _IO_PRIORITY_HINT;

typedef enum _KPROFILE_SOURCE {
  ProfileTime = 0,                  // ordinal: 0x0
  ProfileAlignmentFixup = 1,        // ordinal: 0x1
  ProfileTotalIssues = 2,           // ordinal: 0x2
  ProfilePipelineDry = 3,           // ordinal: 0x3
  ProfileLoadInstructions = 4,      // ordinal: 0x4
  ProfilePipelineFrozen = 5,        // ordinal: 0x5
  ProfileBranchInstructions = 6,    // ordinal: 0x6
  ProfileTotalNonissues = 7,        // ordinal: 0x7
  ProfileDcacheMisses = 8,          // ordinal: 0x8
  ProfileIcacheMisses = 9,          // ordinal: 0x9
  ProfileCacheMisses = 10,          // ordinal: 0xa
  ProfileBranchMispredictions = 11, // ordinal: 0xb
  ProfileStoreInstructions = 12,    // ordinal: 0xc
  ProfileFpInstructions = 13,       // ordinal: 0xd
  ProfileIntegerInstructions = 14,  // ordinal: 0xe
  Profile2Issue = 15,               // ordinal: 0xf
  Profile3Issue = 16,               // ordinal: 0x10
  Profile4Issue = 17,               // ordinal: 0x11
  ProfileSpecialInstructions = 18,  // ordinal: 0x12
  ProfileTotalCycles = 19,          // ordinal: 0x13
  ProfileIcacheIssues = 20,         // ordinal: 0x14
  ProfileDcacheAccesses = 21,       // ordinal: 0x15
  ProfileMemoryBarrierCycles = 22,  // ordinal: 0x16
  ProfileLoadLinkedIssues = 23,     // ordinal: 0x17
  ProfileMaximum = 24,              // ordinal: 0x18
} _KPROFILE_SOURCE;

typedef enum _TOKEN_TYPE {
  TokenPrimary = 1,       // ordinal: 0x0
  TokenImpersonation = 2, // ordinal: 0x1
} _TOKEN_TYPE;

typedef enum _ETW_BUFFER_STATE {
  EtwBufferStateFree = 0,               // ordinal: 0x0
  EtwBufferStateGeneralLogging = 1,     // ordinal: 0x1
  EtwBufferStateCSwitch = 2,            // ordinal: 0x2
  EtwBufferStateFlush = 3,              // ordinal: 0x3
  EtwBufferStatePendingCompression = 4, // ordinal: 0x4
  EtwBufferStateCompressed = 5,         // ordinal: 0x5
  EtwBufferStatePlaceholder = 6,        // ordinal: 0x6
  EtwBufferStateMaximum = 7,            // ordinal: 0x7
} _ETW_BUFFER_STATE;

typedef enum _WNF_DATA_SCOPE {
  WnfDataScopeSystem = 0,  // ordinal: 0x0
  WnfDataScopeSession = 1, // ordinal: 0x1
  WnfDataScopeUser = 2,    // ordinal: 0x2
  WnfDataScopeProcess = 3, // ordinal: 0x3
  WnfDataScopeMachine = 4, // ordinal: 0x4
} _WNF_DATA_SCOPE;

typedef enum ETW_COMPRESSION_RESUMPTION_MODE {
  EtwCompressionModeRestart = 0,   // ordinal: 0x0
  EtwCompressionModeNoDisable = 1, // ordinal: 0x1
  EtwCompressionModeNoRestart = 2, // ordinal: 0x2
} ETW_COMPRESSION_RESUMPTION_MODE;

typedef enum _ETW_PERIODIC_TIMER_STATE {
  EtwpPeriodicTimerUnset = 0, // ordinal: 0x0
  EtwpPeriodicTimerSet = 1,   // ordinal: 0x1
} _ETW_PERIODIC_TIMER_STATE;

typedef enum _ETW_RT_EVENT_LOSS {
  EtwRtEventNoLoss = 0,  // ordinal: 0x0
  EtwRtEventLost = 1,    // ordinal: 0x1
  EtwRtBufferLost = 2,   // ordinal: 0x2
  EtwRtBackupLost = 3,   // ordinal: 0x3
  EtwRtEventLossMax = 4, // ordinal: 0x4
} _ETW_RT_EVENT_LOSS;

typedef enum _FS_FILTER_SECTION_SYNC_TYPE {
  SyncTypeOther = 0,         // ordinal: 0x0
  SyncTypeCreateSection = 1, // ordinal: 0x1
} _FS_FILTER_SECTION_SYNC_TYPE;

typedef enum _SECURITY_IMPERSONATION_LEVEL {
  SecurityAnonymous = 0,      // ordinal: 0x0
  SecurityIdentification = 1, // ordinal: 0x1
  SecurityImpersonation = 2,  // ordinal: 0x2
  SecurityDelegation = 3,     // ordinal: 0x3
} _SECURITY_IMPERSONATION_LEVEL;

// 0x10 bytes (sizeof)
typedef struct _SECURITY_SUBJECT_CONTEXT {
  VOID *ClientToken; // offset: 0x0 ordinal: 0x0
  enum _SECURITY_IMPERSONATION_LEVEL
      ImpersonationLevel; // offset: 0x4 ordinal: 0x1
  VOID *PrimaryToken;     // offset: 0x8 ordinal: 0x2
  VOID *ProcessAuditId;   // offset: 0xc ordinal: 0x3
} _SECURITY_SUBJECT_CONTEXT;

typedef enum _DEVICE_RELATION_LEVEL {
  RELATION_LEVEL_REMOVE_EJECT = 0,      // ordinal: 0x0
  RELATION_LEVEL_DEPENDENT = 1,         // ordinal: 0x1
  RELATION_LEVEL_DIRECT_DESCENDANT = 2, // ordinal: 0x2
} _DEVICE_RELATION_LEVEL;

typedef enum _SERVERSILO_STATE {
  SERVERSILO_INITING = 0,       // ordinal: 0x0
  SERVERSILO_STARTED = 1,       // ordinal: 0x1
  SERVERSILO_SHUTTING_DOWN = 2, // ordinal: 0x2
  SERVERSILO_TERMINATING = 3,   // ordinal: 0x3
  SERVERSILO_TERMINATED = 4,    // ordinal: 0x4
} _SERVERSILO_STATE;

typedef enum _PO_FX_PERF_STATE_TYPE {
  PoFxPerfStateTypeDiscrete = 0, // ordinal: 0x0
  PoFxPerfStateTypeRange = 1,    // ordinal: 0x1
  PoFxPerfStateTypeMaximum = 2,  // ordinal: 0x2
} _PO_FX_PERF_STATE_TYPE;

typedef enum _PO_FX_PERF_STATE_UNIT {
  PoFxPerfStateUnitOther = 0,     // ordinal: 0x0
  PoFxPerfStateUnitFrequency = 1, // ordinal: 0x1
  PoFxPerfStateUnitBandwidth = 2, // ordinal: 0x2
  PoFxPerfStateUnitMaximum = 3,   // ordinal: 0x3
} _PO_FX_PERF_STATE_UNIT;

typedef enum _IRQ_PRIORITY {
  IrqPriorityUndefined = 0, // ordinal: 0x0
  IrqPriorityLow = 1,       // ordinal: 0x1
  IrqPriorityNormal = 2,    // ordinal: 0x2
  IrqPriorityHigh = 3,      // ordinal: 0x3
} _IRQ_PRIORITY;

typedef enum _MI_SYSTEM_VA_TYPE {
  MiVaUnused = 0,              // ordinal: 0x0
  MiVaSessionSpace = 1,        // ordinal: 0x1
  MiVaProcessSpace = 2,        // ordinal: 0x2
  MiVaBootLoaded = 3,          // ordinal: 0x3
  MiVaPfnDatabase = 4,         // ordinal: 0x4
  MiVaNonPagedPool = 5,        // ordinal: 0x5
  MiVaPagedPool = 6,           // ordinal: 0x6
  MiVaSpecialPoolPaged = 7,    // ordinal: 0x7
  MiVaSystemCache = 8,         // ordinal: 0x8
  MiVaSystemPtes = 9,          // ordinal: 0x9
  MiVaHal = 10,                // ordinal: 0xa
  MiVaSessionGlobalSpace = 11, // ordinal: 0xb
  MiVaDriverImages = 12,       // ordinal: 0xc
  MiVaSystemPtesLarge = 13,    // ordinal: 0xd
  MiVaKernelStacks = 14,       // ordinal: 0xe
  MiVaMaximumType = 15,        // ordinal: 0xf
} _MI_SYSTEM_VA_TYPE;

typedef enum PROFILE_DEPARTURE_STYLE {
  PDS_UPDATE_DEFAULT = 1,      // ordinal: 0x0
  PDS_UPDATE_ON_REMOVE = 2,    // ordinal: 0x1
  PDS_UPDATE_ON_INTERFACE = 3, // ordinal: 0x2
  PDS_UPDATE_ON_EJECT = 4,     // ordinal: 0x3
} PROFILE_DEPARTURE_STYLE;

typedef enum _PNP_WATCHDOG_TYPE {
  PNP_EVENT_WORKER_WATCHDOG = 1,            // ordinal: 0x0
  PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2, // ordinal: 0x1
  PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,   // ordinal: 0x2
} _PNP_WATCHDOG_TYPE;

typedef enum POWER_ACTION {
  PowerActionNone = 0,          // ordinal: 0x0
  PowerActionReserved = 1,      // ordinal: 0x1
  PowerActionSleep = 2,         // ordinal: 0x2
  PowerActionHibernate = 3,     // ordinal: 0x3
  PowerActionShutdown = 4,      // ordinal: 0x4
  PowerActionShutdownReset = 5, // ordinal: 0x5
  PowerActionShutdownOff = 6,   // ordinal: 0x6
  PowerActionWarmEject = 7,     // ordinal: 0x7
  PowerActionDisplayOff = 8,    // ordinal: 0x8
} POWER_ACTION;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
  DeviceUsageTypeUndefined = 0,     // ordinal: 0x0
  DeviceUsageTypePaging = 1,        // ordinal: 0x1
  DeviceUsageTypeHibernation = 2,   // ordinal: 0x2
  DeviceUsageTypeDumpFile = 3,      // ordinal: 0x3
  DeviceUsageTypeBoot = 4,          // ordinal: 0x4
  DeviceUsageTypePostDisplay = 5,   // ordinal: 0x5
  DeviceUsageTypeGuestAssigned = 6, // ordinal: 0x6
} _DEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum DEVICE_TEXT_TYPE {
  DeviceTextDescription = 0,         // ordinal: 0x0
  DeviceTextLocationInformation = 1, // ordinal: 0x1
} DEVICE_TEXT_TYPE;

typedef enum BUS_QUERY_ID_TYPE {
  BusQueryDeviceID = 0,           // ordinal: 0x0
  BusQueryHardwareIDs = 1,        // ordinal: 0x1
  BusQueryCompatibleIDs = 2,      // ordinal: 0x2
  BusQueryInstanceID = 3,         // ordinal: 0x3
  BusQueryDeviceSerialNumber = 4, // ordinal: 0x4
  BusQueryContainerID = 5,        // ordinal: 0x5
} BUS_QUERY_ID_TYPE;

// 0x4 bytes (sizeof)
typedef struct __anon_826 {
  enum BUS_QUERY_ID_TYPE IdType; // offset: 0x0 ordinal: 0x0
} __anon_826;

typedef enum _DEVICE_RELATION_TYPE {
  BusRelations = 0,         // ordinal: 0x0
  EjectionRelations = 1,    // ordinal: 0x1
  PowerRelations = 2,       // ordinal: 0x2
  RemovalRelations = 3,     // ordinal: 0x3
  TargetDeviceRelation = 4, // ordinal: 0x4
  SingleBusRelations = 5,   // ordinal: 0x5
  TransportRelations = 6,   // ordinal: 0x6
} _DEVICE_RELATION_TYPE;

// 0x4 bytes (sizeof)
typedef struct __anon_820 {
  enum _DEVICE_RELATION_TYPE Type; // offset: 0x0 ordinal: 0x0
} __anon_820;

typedef enum _FSINFOCLASS {
  FileFsVolumeInformation = 1,        // ordinal: 0x0
  FileFsLabelInformation = 2,         // ordinal: 0x1
  FileFsSizeInformation = 3,          // ordinal: 0x2
  FileFsDeviceInformation = 4,        // ordinal: 0x3
  FileFsAttributeInformation = 5,     // ordinal: 0x4
  FileFsControlInformation = 6,       // ordinal: 0x5
  FileFsFullSizeInformation = 7,      // ordinal: 0x6
  FileFsObjectIdInformation = 8,      // ordinal: 0x7
  FileFsDriverPathInformation = 9,    // ordinal: 0x8
  FileFsVolumeFlagsInformation = 10,  // ordinal: 0x9
  FileFsSectorSizeInformation = 11,   // ordinal: 0xa
  FileFsDataCopyInformation = 12,     // ordinal: 0xb
  FileFsMetadataSizeInformation = 13, // ordinal: 0xc
  FileFsFullSizeInformationEx = 14,   // ordinal: 0xd
  FileFsMaximumInformation = 15,      // ordinal: 0xe
} _FSINFOCLASS;

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
  DirectoryNotifyInformation = 1,         // ordinal: 0x0
  DirectoryNotifyExtendedInformation = 2, // ordinal: 0x1
} _DIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum _FILE_INFORMATION_CLASS {
  FileDirectoryInformation = 1,                      // ordinal: 0x0
  FileFullDirectoryInformation = 2,                  // ordinal: 0x1
  FileBothDirectoryInformation = 3,                  // ordinal: 0x2
  FileBasicInformation = 4,                          // ordinal: 0x3
  FileStandardInformation = 5,                       // ordinal: 0x4
  FileInternalInformation = 6,                       // ordinal: 0x5
  FileEaInformation = 7,                             // ordinal: 0x6
  FileAccessInformation = 8,                         // ordinal: 0x7
  FileNameInformation = 9,                           // ordinal: 0x8
  FileRenameInformation = 10,                        // ordinal: 0x9
  FileLinkInformation = 11,                          // ordinal: 0xa
  FileNamesInformation = 12,                         // ordinal: 0xb
  FileDispositionInformation = 13,                   // ordinal: 0xc
  FilePositionInformation = 14,                      // ordinal: 0xd
  FileFullEaInformation = 15,                        // ordinal: 0xe
  FileModeInformation = 16,                          // ordinal: 0xf
  FileAlignmentInformation = 17,                     // ordinal: 0x10
  FileAllInformation = 18,                           // ordinal: 0x11
  FileAllocationInformation = 19,                    // ordinal: 0x12
  FileEndOfFileInformation = 20,                     // ordinal: 0x13
  FileAlternateNameInformation = 21,                 // ordinal: 0x14
  FileStreamInformation = 22,                        // ordinal: 0x15
  FilePipeInformation = 23,                          // ordinal: 0x16
  FilePipeLocalInformation = 24,                     // ordinal: 0x17
  FilePipeRemoteInformation = 25,                    // ordinal: 0x18
  FileMailslotQueryInformation = 26,                 // ordinal: 0x19
  FileMailslotSetInformation = 27,                   // ordinal: 0x1a
  FileCompressionInformation = 28,                   // ordinal: 0x1b
  FileObjectIdInformation = 29,                      // ordinal: 0x1c
  FileCompletionInformation = 30,                    // ordinal: 0x1d
  FileMoveClusterInformation = 31,                   // ordinal: 0x1e
  FileQuotaInformation = 32,                         // ordinal: 0x1f
  FileReparsePointInformation = 33,                  // ordinal: 0x20
  FileNetworkOpenInformation = 34,                   // ordinal: 0x21
  FileAttributeTagInformation = 35,                  // ordinal: 0x22
  FileTrackingInformation = 36,                      // ordinal: 0x23
  FileIdBothDirectoryInformation = 37,               // ordinal: 0x24
  FileIdFullDirectoryInformation = 38,               // ordinal: 0x25
  FileValidDataLengthInformation = 39,               // ordinal: 0x26
  FileShortNameInformation = 40,                     // ordinal: 0x27
  FileIoCompletionNotificationInformation = 41,      // ordinal: 0x28
  FileIoStatusBlockRangeInformation = 42,            // ordinal: 0x29
  FileIoPriorityHintInformation = 43,                // ordinal: 0x2a
  FileSfioReserveInformation = 44,                   // ordinal: 0x2b
  FileSfioVolumeInformation = 45,                    // ordinal: 0x2c
  FileHardLinkInformation = 46,                      // ordinal: 0x2d
  FileProcessIdsUsingFileInformation = 47,           // ordinal: 0x2e
  FileNormalizedNameInformation = 48,                // ordinal: 0x2f
  FileNetworkPhysicalNameInformation = 49,           // ordinal: 0x30
  FileIdGlobalTxDirectoryInformation = 50,           // ordinal: 0x31
  FileIsRemoteDeviceInformation = 51,                // ordinal: 0x32
  FileUnusedInformation = 52,                        // ordinal: 0x33
  FileNumaNodeInformation = 53,                      // ordinal: 0x34
  FileStandardLinkInformation = 54,                  // ordinal: 0x35
  FileRemoteProtocolInformation = 55,                // ordinal: 0x36
  FileRenameInformationBypassAccessCheck = 56,       // ordinal: 0x37
  FileLinkInformationBypassAccessCheck = 57,         // ordinal: 0x38
  FileVolumeNameInformation = 58,                    // ordinal: 0x39
  FileIdInformation = 59,                            // ordinal: 0x3a
  FileIdExtdDirectoryInformation = 60,               // ordinal: 0x3b
  FileReplaceCompletionInformation = 61,             // ordinal: 0x3c
  FileHardLinkFullIdInformation = 62,                // ordinal: 0x3d
  FileIdExtdBothDirectoryInformation = 63,           // ordinal: 0x3e
  FileDispositionInformationEx = 64,                 // ordinal: 0x3f
  FileRenameInformationEx = 65,                      // ordinal: 0x40
  FileRenameInformationExBypassAccessCheck = 66,     // ordinal: 0x41
  FileDesiredStorageClassInformation = 67,           // ordinal: 0x42
  FileStatInformation = 68,                          // ordinal: 0x43
  FileMemoryPartitionInformation = 69,               // ordinal: 0x44
  FileStatLxInformation = 70,                        // ordinal: 0x45
  FileCaseSensitiveInformation = 71,                 // ordinal: 0x46
  FileLinkInformationEx = 72,                        // ordinal: 0x47
  FileLinkInformationExBypassAccessCheck = 73,       // ordinal: 0x48
  FileStorageReserveIdInformation = 74,              // ordinal: 0x49
  FileCaseSensitiveInformationForceAccessCheck = 75, // ordinal: 0x4a
  FileMaximumInformation = 76,                       // ordinal: 0x4b
} _FILE_INFORMATION_CLASS;

typedef enum _IO_SESSION_STATE {
  IoSessionStateCreated = 1,              // ordinal: 0x0
  IoSessionStateInitialized = 2,          // ordinal: 0x1
  IoSessionStateConnected = 3,            // ordinal: 0x2
  IoSessionStateDisconnected = 4,         // ordinal: 0x3
  IoSessionStateDisconnectedLoggedOn = 5, // ordinal: 0x4
  IoSessionStateLoggedOn = 6,             // ordinal: 0x5
  IoSessionStateLoggedOff = 7,            // ordinal: 0x6
  IoSessionStateTerminated = 8,           // ordinal: 0x7
  IoSessionStateMax = 9,                  // ordinal: 0x8
} _IO_SESSION_STATE;

typedef enum _PLUGPLAY_EVENT_CATEGORY {
  HardwareProfileChangeEvent = 0,  // ordinal: 0x0
  TargetDeviceChangeEvent = 1,     // ordinal: 0x1
  DeviceClassChangeEvent = 2,      // ordinal: 0x2
  CustomDeviceEvent = 3,           // ordinal: 0x3
  DeviceInstallEvent = 4,          // ordinal: 0x4
  DeviceArrivalEvent = 5,          // ordinal: 0x5
  VetoEvent = 6,                   // ordinal: 0x6
  BlockedDriverEvent = 7,          // ordinal: 0x7
  InvalidIDEvent = 8,              // ordinal: 0x8
  DevicePropertyChangeEvent = 9,   // ordinal: 0x9
  DeviceInstanceRemovalEvent = 10, // ordinal: 0xa
  DeviceInstanceStartedEvent = 11, // ordinal: 0xb
  MaxPlugEventCategory = 12,       // ordinal: 0xc
} _PLUGPLAY_EVENT_CATEGORY;

typedef enum _PNP_VETO_TYPE {
  PNP_VetoTypeUnknown = 0,          // ordinal: 0x0
  PNP_VetoLegacyDevice = 1,         // ordinal: 0x1
  PNP_VetoPendingClose = 2,         // ordinal: 0x2
  PNP_VetoWindowsApp = 3,           // ordinal: 0x3
  PNP_VetoWindowsService = 4,       // ordinal: 0x4
  PNP_VetoOutstandingOpen = 5,      // ordinal: 0x5
  PNP_VetoDevice = 6,               // ordinal: 0x6
  PNP_VetoDriver = 7,               // ordinal: 0x7
  PNP_VetoIllegalDeviceRequest = 8, // ordinal: 0x8
  PNP_VetoInsufficientPower = 9,    // ordinal: 0x9
  PNP_VetoNonDisableable = 10,      // ordinal: 0xa
  PNP_VetoLegacyDriver = 11,        // ordinal: 0xb
  PNP_VetoInsufficientRights = 12,  // ordinal: 0xc
  PNP_VetoAlreadyRemoved = 13,      // ordinal: 0xd
} _PNP_VETO_TYPE;

typedef enum _POP_DEVICE_IDLE_TYPE {
  DeviceIdleNormal = 0, // ordinal: 0x0
  DeviceIdleDisk = 1,   // ordinal: 0x1
} _POP_DEVICE_IDLE_TYPE;

typedef enum _IO_ALLOCATION_ACTION {
  KeepObject = 1,                    // ordinal: 0x0
  DeallocateObject = 2,              // ordinal: 0x1
  DeallocateObjectKeepRegisters = 3, // ordinal: 0x2
} _IO_ALLOCATION_ACTION;

typedef enum HAL_APIC_DESTINATION_MODE {
  ApicDestinationModePhysical = 1,         // ordinal: 0x0
  ApicDestinationModeLogicalFlat = 2,      // ordinal: 0x1
  ApicDestinationModeLogicalClustered = 3, // ordinal: 0x2
  ApicDestinationModeUnknown = 4,          // ordinal: 0x3
} HAL_APIC_DESTINATION_MODE;

// 0x4 bytes (sizeof)
typedef struct __anon_674 {
  enum HAL_APIC_DESTINATION_MODE DestinationMode; // offset: 0x0 ordinal: 0x0
} __anon_674;

// 0x4 bytes (sizeof)
typedef struct POHANDLE__ {
  LONG unused; // offset: 0x0 ordinal: 0x0
} POHANDLE__;

typedef enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON {
  DeviceQueryRebalanceSucceeded = 0,         // ordinal: 0x0
  DeviceQueryStopFailed = 1,                 // ordinal: 0x1
  DeviceFailedGetNewResourceRequirement = 2, // ordinal: 0x2
  DeviceInUnexpectedState = 3,               // ordinal: 0x3
  DeviceNotSupportQueryRebalance = 4,        // ordinal: 0x4
} _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;

typedef enum _PNP_REBALANCE_FAILURE {
  RebalanceFailureNone = 0,                    // ordinal: 0x0
  RebalanceFailureDisabled = 1,                // ordinal: 0x1
  RebalanceFailureNoMemory = 2,                // ordinal: 0x2
  RebalanceFailureQueryStopUnexpectedVeto = 3, // ordinal: 0x3
  RebalanceFailureNoRequirements = 4,          // ordinal: 0x4
  RebalanceFailureNoCandidates = 5,            // ordinal: 0x5
  RebalanceFailureNoConfiguration = 6,         // ordinal: 0x6
} _PNP_REBALANCE_FAILURE;

typedef enum _PNP_REBALANCE_REASON {
  RebalanceReasonUnknown = 0,             // ordinal: 0x0
  RebalanceReasonRequirementsChanged = 1, // ordinal: 0x1
  RebalanceReasonNewDevice = 2,           // ordinal: 0x2
} _PNP_REBALANCE_REASON;

typedef enum INTERRUPT_CONNECTION_TYPE {
  InterruptTypeControllerInput = 0, // ordinal: 0x0
  InterruptTypeXapicMessage = 1,    // ordinal: 0x1
  InterruptTypeHypertransport = 2,  // ordinal: 0x2
  InterruptTypeMessageRequest = 3,  // ordinal: 0x3
} INTERRUPT_CONNECTION_TYPE;

typedef enum _PNP_DEVICE_DELETE_TYPE {
  QueryRemoveDevice = 0,           // ordinal: 0x0
  CancelRemoveDevice = 1,          // ordinal: 0x1
  RemoveDevice = 2,                // ordinal: 0x2
  SurpriseRemoveDevice = 3,        // ordinal: 0x3
  EjectDevice = 4,                 // ordinal: 0x4
  RemoveFailedDevice = 5,          // ordinal: 0x5
  RemoveUnstartedFailedDevice = 6, // ordinal: 0x6
  MaxDeviceDeleteType = 7,         // ordinal: 0x7
} _PNP_DEVICE_DELETE_TYPE;

typedef enum IRPLOCK {
  IRPLOCK_CANCELABLE = 0,      // ordinal: 0x0
  IRPLOCK_CANCEL_STARTED = 1,  // ordinal: 0x1
  IRPLOCK_CANCEL_COMPLETE = 2, // ordinal: 0x2
  IRPLOCK_COMPLETED = 3,       // ordinal: 0x3
} IRPLOCK;

typedef enum _PEP_WORK_TYPE {
  PepWorkActiveComplete = 0,                    // ordinal: 0x0
  PepWorkRequestIdleState = 1,                  // ordinal: 0x1
  PepWorkDevicePower = 2,                       // ordinal: 0x2
  PepWorkRequestPowerControl = 3,               // ordinal: 0x3
  PepWorkDeviceIdle = 4,                        // ordinal: 0x4
  PepWorkCompleteIdleState = 5,                 // ordinal: 0x5
  PepWorkCompletePerfState = 6,                 // ordinal: 0x6
  PepWorkAcpiNotify = 7,                        // ordinal: 0x7
  PepWorkAcpiEvaluateControlMethodComplete = 8, // ordinal: 0x8
  PepWorkMax = 9,                               // ordinal: 0x9
} _PEP_WORK_TYPE;

typedef enum PROFILE_STATUS {
  DOCK_NOTDOCKDEVICE = 0,      // ordinal: 0x0
  DOCK_QUIESCENT = 1,          // ordinal: 0x1
  DOCK_ARRIVING = 2,           // ordinal: 0x2
  DOCK_DEPARTING = 3,          // ordinal: 0x3
  DOCK_EJECTIRP_COMPLETED = 4, // ordinal: 0x4
} PROFILE_STATUS;

typedef enum _HARDWARE_COUNTER_TYPE {
  PMCCounter = 0,             // ordinal: 0x0
  MaxHardwareCounterType = 1, // ordinal: 0x1
} _HARDWARE_COUNTER_TYPE;

typedef enum _SYSTEM_POWER_STATE {
  PowerSystemUnspecified = 0, // ordinal: 0x0
  PowerSystemWorking = 1,     // ordinal: 0x1
  PowerSystemSleeping1 = 2,   // ordinal: 0x2
  PowerSystemSleeping2 = 3,   // ordinal: 0x3
  PowerSystemSleeping3 = 4,   // ordinal: 0x4
  PowerSystemHibernate = 5,   // ordinal: 0x5
  PowerSystemShutdown = 6,    // ordinal: 0x6
  PowerSystemMaximum = 7,     // ordinal: 0x7
} _SYSTEM_POWER_STATE;

typedef VOID (*__anon_2470)(enum _SYSTEM_POWER_STATE);

// 0x4 bytes (sizeof)
typedef struct __anon_829 {
  enum _SYSTEM_POWER_STATE PowerState; // offset: 0x0 ordinal: 0x0
} __anon_829;

// 0x4 bytes (sizeof)
typedef union _POWER_STATE {
  enum _SYSTEM_POWER_STATE SystemState; // offset: 0x0 ordinal: 0x0
  enum _DEVICE_POWER_STATE DeviceState; // offset: 0x0 ordinal: 0x1
} _POWER_STATE;

typedef enum _INTERFACE_TYPE {
  InterfaceTypeUndefined = -1, // ordinal: 0x0
  Internal = 0,                // ordinal: 0x1
  Isa = 1,                     // ordinal: 0x2
  Eisa = 2,                    // ordinal: 0x3
  MicroChannel = 3,            // ordinal: 0x4
  TurboChannel = 4,            // ordinal: 0x5
  PCIBus = 5,                  // ordinal: 0x6
  VMEBus = 6,                  // ordinal: 0x7
  NuBus = 7,                   // ordinal: 0x8
  PCMCIABus = 8,               // ordinal: 0x9
  CBus = 9,                    // ordinal: 0xa
  MPIBus = 10,                 // ordinal: 0xb
  MPSABus = 11,                // ordinal: 0xc
  ProcessorInternal = 12,      // ordinal: 0xd
  InternalPowerBus = 13,       // ordinal: 0xe
  PNPISABus = 14,              // ordinal: 0xf
  PNPBus = 15,                 // ordinal: 0x10
  Vmcs = 16,                   // ordinal: 0x11
  ACPIBus = 17,                // ordinal: 0x12
  MaximumInterfaceType = 18,   // ordinal: 0x13
} _INTERFACE_TYPE;

typedef enum _PNP_DEVNODE_STATE {
  DeviceNodeUnspecified = 768,            // ordinal: 0x0
  DeviceNodeUninitialized = 769,          // ordinal: 0x1
  DeviceNodeInitialized = 770,            // ordinal: 0x2
  DeviceNodeDriversAdded = 771,           // ordinal: 0x3
  DeviceNodeResourcesAssigned = 772,      // ordinal: 0x4
  DeviceNodeStartPending = 773,           // ordinal: 0x5
  DeviceNodeStartCompletion = 774,        // ordinal: 0x6
  DeviceNodeStartPostWork = 775,          // ordinal: 0x7
  DeviceNodeStarted = 776,                // ordinal: 0x8
  DeviceNodeQueryStopped = 777,           // ordinal: 0x9
  DeviceNodeStopped = 778,                // ordinal: 0xa
  DeviceNodeRestartCompletion = 779,      // ordinal: 0xb
  DeviceNodeEnumeratePending = 780,       // ordinal: 0xc
  DeviceNodeEnumerateCompletion = 781,    // ordinal: 0xd
  DeviceNodeAwaitingQueuedDeletion = 782, // ordinal: 0xe
  DeviceNodeAwaitingQueuedRemoval = 783,  // ordinal: 0xf
  DeviceNodeQueryRemoved = 784,           // ordinal: 0x10
  DeviceNodeRemovePendingCloses = 785,    // ordinal: 0x11
  DeviceNodeRemoved = 786,                // ordinal: 0x12
  DeviceNodeDeletePendingCloses = 787,    // ordinal: 0x13
  DeviceNodeDeleted = 788,                // ordinal: 0x14
  MaxDeviceNodeState = 789,               // ordinal: 0x15
} _PNP_DEVNODE_STATE;

typedef enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON {
  PepNotifyDeviceDStateReasonNone = 0,             // ordinal: 0x0
  PepNotifyDeviceDStateReasonSystemTransition = 1, // ordinal: 0x1
  PepNotifyDeviceDStateReasonDfx = 2,              // ordinal: 0x2
  PepNotifyDeviceDStateReasonMax = 3,              // ordinal: 0x3
} _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON;

typedef enum _POWER_STATE_TYPE {
  SystemPowerState = 0, // ordinal: 0x0
  DevicePowerState = 1, // ordinal: 0x1
} _POWER_STATE_TYPE;

// 0x4 bytes (sizeof)
typedef struct PEPHANDLE__ {
  LONG unused; // offset: 0x0 ordinal: 0x0
} PEPHANDLE__;

// 0x8 bytes (sizeof)
typedef struct _PEP_CRASHDUMP_INFORMATION {
  struct PEPHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  VOID *DeviceContext;              // offset: 0x4 ordinal: 0x1
} _PEP_CRASHDUMP_INFORMATION;

typedef enum _KINTERRUPT_POLARITY {
  InterruptPolarityUnknown = 0,       // ordinal: 0x0
  InterruptActiveHigh = 1,            // ordinal: 0x1
  InterruptRisingEdge = 1,            // ordinal: 0x2
  InterruptActiveLow = 2,             // ordinal: 0x3
  InterruptFallingEdge = 2,           // ordinal: 0x4
  InterruptActiveBoth = 3,            // ordinal: 0x5
  InterruptActiveBothTriggerLow = 3,  // ordinal: 0x6
  InterruptActiveBothTriggerHigh = 4, // ordinal: 0x7
} _KINTERRUPT_POLARITY;

typedef enum _KINTERRUPT_MODE {
  LevelSensitive = 0, // ordinal: 0x0
  Latched = 1,        // ordinal: 0x1
} _KINTERRUPT_MODE;

typedef enum PPM_IDLE_BUCKET_TIME_TYPE {
  PpmIdleBucketTimeInQpc = 0,   // ordinal: 0x0
  PpmIdleBucketTimeIn100ns = 1, // ordinal: 0x1
  PpmIdleBucketTimeMaximum = 2, // ordinal: 0x2
} PPM_IDLE_BUCKET_TIME_TYPE;

typedef enum _PROCESSOR_CACHE_TYPE {
  CacheUnified = 0,     // ordinal: 0x0
  CacheInstruction = 1, // ordinal: 0x1
  CacheData = 2,        // ordinal: 0x2
  CacheTrace = 3,       // ordinal: 0x3
} _PROCESSOR_CACHE_TYPE;

typedef enum _POOL_TYPE {
  NonPagedPool = 0,                          // ordinal: 0x0
  NonPagedPoolExecute = 0,                   // ordinal: 0x1
  PagedPool = 1,                             // ordinal: 0x2
  NonPagedPoolMustSucceed = 2,               // ordinal: 0x3
  DontUseThisType = 3,                       // ordinal: 0x4
  NonPagedPoolCacheAligned = 4,              // ordinal: 0x5
  PagedPoolCacheAligned = 5,                 // ordinal: 0x6
  NonPagedPoolCacheAlignedMustS = 6,         // ordinal: 0x7
  MaxPoolType = 7,                           // ordinal: 0x8
  NonPagedPoolBase = 0,                      // ordinal: 0x9
  NonPagedPoolBaseMustSucceed = 2,           // ordinal: 0xa
  NonPagedPoolBaseCacheAligned = 4,          // ordinal: 0xb
  NonPagedPoolBaseCacheAlignedMustS = 6,     // ordinal: 0xc
  NonPagedPoolSession = 32,                  // ordinal: 0xd
  PagedPoolSession = 33,                     // ordinal: 0xe
  NonPagedPoolMustSucceedSession = 34,       // ordinal: 0xf
  DontUseThisTypeSession = 35,               // ordinal: 0x10
  NonPagedPoolCacheAlignedSession = 36,      // ordinal: 0x11
  PagedPoolCacheAlignedSession = 37,         // ordinal: 0x12
  NonPagedPoolCacheAlignedMustSSession = 38, // ordinal: 0x13
  NonPagedPoolNx = 512,                      // ordinal: 0x14
  NonPagedPoolNxCacheAligned = 516,          // ordinal: 0x15
  NonPagedPoolSessionNx = 544,               // ordinal: 0x16
} _POOL_TYPE;

typedef enum _KHETERO_CPU_QOS {
  KHeteroCpuQosDefault = 0,    // ordinal: 0x0
  KHeteroCpuQosHigh = 0,       // ordinal: 0x1
  KHeteroCpuQosMedium = 1,     // ordinal: 0x2
  KHeteroCpuQosLow = 2,        // ordinal: 0x3
  KHeteroCpuQosMultimedia = 3, // ordinal: 0x4
  KHeteroCpuQosDynamic = 4,    // ordinal: 0x5
  KHeteroCpuQosMax = 4,        // ordinal: 0x6
} _KHETERO_CPU_QOS;

typedef enum _PROC_HYPERVISOR_STATE {
  ProcHypervisorNone = 0,       // ordinal: 0x0
  ProcHypervisorPresent = 1,    // ordinal: 0x1
  ProcHypervisorPower = 2,      // ordinal: 0x2
  ProcHypervisorHvCounters = 3, // ordinal: 0x3
} _PROC_HYPERVISOR_STATE;

typedef enum _EXCEPTION_DISPOSITION {
  ExceptionContinueExecution = 0, // ordinal: 0x0
  ExceptionContinueSearch = 1,    // ordinal: 0x1
  ExceptionNestedException = 2,   // ordinal: 0x2
  ExceptionCollidedUnwind = 3,    // ordinal: 0x3
} _EXCEPTION_DISPOSITION;

typedef enum _TP_CALLBACK_PRIORITY {
  TP_CALLBACK_PRIORITY_HIGH = 0,    // ordinal: 0x0
  TP_CALLBACK_PRIORITY_NORMAL = 1,  // ordinal: 0x1
  TP_CALLBACK_PRIORITY_LOW = 2,     // ordinal: 0x2
  TP_CALLBACK_PRIORITY_INVALID = 3, // ordinal: 0x3
  TP_CALLBACK_PRIORITY_COUNT = 3,   // ordinal: 0x4
} _TP_CALLBACK_PRIORITY;

// 0x2 bytes (sizeof)
typedef struct __anon_920 {
  WCHAR ParentId[1]; // offset: 0x0 ordinal: 0x0
} __anon_920;

// 0x8 bytes (sizeof)
typedef struct __anon_918 {
  enum _PNP_VETO_TYPE VetoType;    // offset: 0x0 ordinal: 0x0
  WCHAR DeviceIdVetoNameBuffer[1]; // offset: 0x4 ordinal: 0x1
} __anon_918;

// 0x8 bytes (sizeof)
typedef struct __anon_915 {
  VOID *NotificationStructure; // offset: 0x0 ordinal: 0x0
  WCHAR DeviceId[1];           // offset: 0x4 ordinal: 0x1
} __anon_915;

// 0x2 bytes (sizeof)
typedef struct __anon_914 {
  WCHAR DeviceId[1]; // offset: 0x0 ordinal: 0x0
} __anon_914;

typedef VOID (*__anon_1910)(VOID *, WCHAR *);

// 0x10 bytes (sizeof)
typedef struct __anon_524 {
  enum PROFILE_STATUS DockStatus; // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ListEntry;   // offset: 0x4 ordinal: 0x1
  WCHAR *SerialNumber;            // offset: 0xc ordinal: 0x2
} __anon_524;

// 0x8 bytes (sizeof)
typedef struct _QUAD {
  union {
    LONGLONG UseThisFieldToCopy; // offset: 0x0 ordinal: 0x0
    double DoNotUseThisField;    // offset: 0x0 ordinal: 0x1
  };
} _QUAD;

typedef LONGLONG (*__anon_1159)();

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
  StandardDesign = 0,  // ordinal: 0x0
  NEC98x86 = 1,        // ordinal: 0x1
  EndAlternatives = 2, // ordinal: 0x2
} _ALTERNATIVE_ARCHITECTURE_TYPE;

// 0x8 bytes (sizeof)
typedef struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS {
  ULONG SmallPagesInUseWithinLarge;  // offset: 0x0 ordinal: 0x0
  ULONG OpportunisticLargePageCount; // offset: 0x4 ordinal: 0x1
} _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;

// 0x24 bytes (sizeof)
typedef struct _FAST_OWNER_ENTRY_INTERNAL {
  struct _LIST_ENTRY ListEntry;     // offset: 0x0 ordinal: 0x0
  UCHAR AbLockHandle;               // offset: 0x8 ordinal: 0x1
  UCHAR Disowned : 1;               // offset: 0x9 ordinal: 0x2
  UCHAR DynamicallyAllocated : 1;   // offset: 0x9 ordinal: 0x3
  UCHAR CallerExclusive : 1;        // offset: 0x9 ordinal: 0x4
  UCHAR IsSublistHead;              // offset: 0xa ordinal: 0x5
  UCHAR IsWaiting;                  // offset: 0xb ordinal: 0x6
  VOID *LockAddress;                // offset: 0xc ordinal: 0x7
  VOID *ThreadAddress;              // offset: 0x10 ordinal: 0x8
  struct _LIST_ENTRY SublistHead;   // offset: 0x14 ordinal: 0x9
  struct _LIST_ENTRY LockListEntry; // offset: 0x1c ordinal: 0xa
} _FAST_OWNER_ENTRY_INTERNAL;

// 0x1 bytes (sizeof)
typedef union __anon_3200 {
  UCHAR AsUCHAR;                // offset: 0x0 ordinal: 0x0
  UCHAR NoDomainAccounting : 1; // offset: 0x0 ordinal: 0x1
  UCHAR IncreasePolicy : 2;     // offset: 0x0 ordinal: 0x2
  UCHAR DecreasePolicy : 2;     // offset: 0x0 ordinal: 0x3
  UCHAR Reserved : 3;           // offset: 0x0 ordinal: 0x4
} __anon_3200;

// 0x8 bytes (sizeof)
typedef struct _VF_TRACKER_STAMP {
  VOID *Thread;        // offset: 0x0 ordinal: 0x0
  UCHAR Flags : 8;     // offset: 0x4 ordinal: 0x1
  UCHAR OldIrql : 8;   // offset: 0x5 ordinal: 0x2
  UCHAR NewIrql : 8;   // offset: 0x6 ordinal: 0x3
  UCHAR Processor : 8; // offset: 0x7 ordinal: 0x4
} _VF_TRACKER_STAMP;

// 0x1 bytes (sizeof)
typedef struct __anon_2900 {
  UCHAR EntireWsle; // offset: 0x0 ordinal: 0x0
} __anon_2900;

// 0x1 bytes (sizeof)
typedef struct __anon_2899 {
  UCHAR Age : 4;        // offset: 0x0 ordinal: 0x0
  UCHAR Protection : 3; // offset: 0x0 ordinal: 0x1
  UCHAR Reserved : 1;   // offset: 0x0 ordinal: 0x2
} __anon_2899;

// 0x1 bytes (sizeof)
typedef union __anon_2898 {
  struct __anon_2899 e1; // offset: 0x0 ordinal: 0x0
  struct __anon_2900 e2; // offset: 0x0 ordinal: 0x1
} __anon_2898;

// 0x1 bytes (sizeof)
typedef struct _MI_WSLE {
  union __anon_2898 u1; // offset: 0x0 ordinal: 0x0
} _MI_WSLE;

// 0x1 bytes (sizeof)
typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS {
  UCHAR Trustlet : 1;    // offset: 0x0 ordinal: 0x0
  UCHAR Ntos : 1;        // offset: 0x0 ordinal: 0x1
  UCHAR WriteHandle : 1; // offset: 0x0 ordinal: 0x2
  UCHAR ReadHandle : 1;  // offset: 0x0 ordinal: 0x3
  UCHAR Reserved : 4;    // offset: 0x0 ordinal: 0x4
  UCHAR AccessRights;    // offset: 0x0 ordinal: 0x5
} _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;

// 0x2 bytes (sizeof)
typedef struct __anon_2633 {
  UCHAR SecondaryBus;   // offset: 0x0 ordinal: 0x0
  UCHAR SubordinateBus; // offset: 0x1 ordinal: 0x1
} __anon_2633;

// 0x4 bytes (sizeof)
typedef struct __anon_2632 {
  UCHAR Bus;      // offset: 0x0 ordinal: 0x0
  UCHAR Device;   // offset: 0x1 ordinal: 0x1
  UCHAR Function; // offset: 0x2 ordinal: 0x2
  UCHAR Reserved; // offset: 0x3 ordinal: 0x3
} __anon_2632;

// 0x8 bytes (sizeof)
typedef struct _MAP_REGISTER_ENTRY {
  VOID *MapRegister;   // offset: 0x0 ordinal: 0x0
  UCHAR WriteToDevice; // offset: 0x4 ordinal: 0x1
} _MAP_REGISTER_ENTRY;

typedef UCHAR (*__anon_2513)(UCHAR);

typedef VOID (*__anon_2486)(struct _MDL *, UCHAR);

typedef VOID (*__anon_2476)(UCHAR, UCHAR);

typedef UCHAR (*__anon_2450)();

typedef VOID (*__anon_2445)(UCHAR);

// 0x1 bytes (sizeof)
typedef union _XPF_MC_BANK_FLAGS {
  UCHAR ClearOnInitializationRW : 1; // offset: 0x0 ordinal: 0x0
  UCHAR ControlDataRW : 1;           // offset: 0x0 ordinal: 0x1
  UCHAR Reserved : 6;                // offset: 0x0 ordinal: 0x2
  UCHAR AsUCHAR;                     // offset: 0x0 ordinal: 0x3
} _XPF_MC_BANK_FLAGS;

// 0x1e bytes (sizeof)
typedef struct _TOKEN_AUDIT_POLICY {
  UCHAR PerUserPolicy[30]; // offset: 0x0 ordinal: 0x0
} _TOKEN_AUDIT_POLICY;

// 0x1f bytes (sizeof)
typedef struct _SEP_AUDIT_POLICY {
  struct _TOKEN_AUDIT_POLICY AdtTokenPolicy; // offset: 0x0 ordinal: 0x0
  UCHAR PolicySetStatus;                     // offset: 0x1e ordinal: 0x1
} _SEP_AUDIT_POLICY;

// 0x1 bytes (sizeof)
typedef struct _ETW_LOGGER_HANDLE {
  UCHAR DereferenceAndLeave; // offset: 0x0 ordinal: 0x0
} _ETW_LOGGER_HANDLE;

// 0x4 bytes (sizeof)
typedef struct __anon_2190 {
  UCHAR MajorVersion;    // offset: 0x0 ordinal: 0x0
  UCHAR MinorVersion;    // offset: 0x1 ordinal: 0x1
  UCHAR SubVersion;      // offset: 0x2 ordinal: 0x2
  UCHAR SubMinorVersion; // offset: 0x3 ordinal: 0x3
} __anon_2190;

// 0x1 bytes (sizeof)
typedef struct __anon_2078 {
  UCHAR ReferenceCache : 1; // offset: 0x0 ordinal: 0x0
  UCHAR Lookaside : 1;      // offset: 0x0 ordinal: 0x1
  UCHAR Initializing : 1;   // offset: 0x0 ordinal: 0x2
  UCHAR Deleted : 1;        // offset: 0x0 ordinal: 0x3
} __anon_2078;

// 0x1 bytes (sizeof)
typedef union __anon_2079 {
  struct __anon_2078 s1; // offset: 0x0 ordinal: 0x0
  UCHAR Flags;           // offset: 0x0 ordinal: 0x1
} __anon_2079;

// 0x2 bytes (sizeof)
typedef struct _HEAP_LFH_SUBSEGMENT_STAT {
  UCHAR Index; // offset: 0x0 ordinal: 0x0
  UCHAR Count; // offset: 0x1 ordinal: 0x1
} _HEAP_LFH_SUBSEGMENT_STAT;

// 0x4 bytes (sizeof)
typedef union _HEAP_LFH_SUBSEGMENT_STATS {
  struct _HEAP_LFH_SUBSEGMENT_STAT Buckets[2]; // offset: 0x0 ordinal: 0x0
  VOID *AllStats;                              // offset: 0x0 ordinal: 0x1
} _HEAP_LFH_SUBSEGMENT_STATS;

// 0x1 bytes (sizeof)
typedef union __anon_2003 {
  UCHAR LargePagePolicy : 3;      // offset: 0x0 ordinal: 0x0
  UCHAR FullDecommit : 1;         // offset: 0x0 ordinal: 0x1
  UCHAR ReleaseEmptySegments : 1; // offset: 0x0 ordinal: 0x2
  UCHAR AllFlags;                 // offset: 0x0 ordinal: 0x3
} __anon_2003;

typedef UCHAR (*__anon_1953)(VOID *);

typedef UCHAR (*__anon_1939)(VOID *, UCHAR);

// 0x10 bytes (sizeof)
typedef struct _CACHE_MANAGER_CALLBACKS {
  UCHAR (*AcquireForLazyWrite)(VOID *, UCHAR); // offset: 0x0 ordinal: 0x0
  VOID (*ReleaseFromLazyWrite)(VOID *);        // offset: 0x4 ordinal: 0x1
  UCHAR (*AcquireForReadAhead)(VOID *, UCHAR); // offset: 0x8 ordinal: 0x2
  VOID (*ReleaseFromReadAhead)(VOID *);        // offset: 0xc ordinal: 0x3
} _CACHE_MANAGER_CALLBACKS;

// 0x1 bytes (sizeof)
typedef struct _MMPFNENTRY3 {
  UCHAR Priority : 3;           // offset: 0x0 ordinal: 0x0
  UCHAR OnProtectedStandby : 1; // offset: 0x0 ordinal: 0x1
  UCHAR InPageError : 1;        // offset: 0x0 ordinal: 0x2
  UCHAR SystemChargedPage : 1;  // offset: 0x0 ordinal: 0x3
  UCHAR RemovalRequested : 1;   // offset: 0x0 ordinal: 0x4
  UCHAR ParityError : 1;        // offset: 0x0 ordinal: 0x5
} _MMPFNENTRY3;

// 0x1 bytes (sizeof)
typedef struct _MMPFNENTRY1 {
  UCHAR PageLocation : 3;    // offset: 0x0 ordinal: 0x0
  UCHAR WriteInProgress : 1; // offset: 0x0 ordinal: 0x1
  UCHAR Modified : 1;        // offset: 0x0 ordinal: 0x2
  UCHAR ReadInProgress : 1;  // offset: 0x0 ordinal: 0x3
  UCHAR CacheAttribute : 2;  // offset: 0x0 ordinal: 0x4
} _MMPFNENTRY1;

// 0x4 bytes (sizeof)
typedef struct _MMPAGE_FILE_EXPANSION_FLAGS {
  UCHAR PageFileNumber : 8;        // offset: 0x0 ordinal: 0x0
  UCHAR Spare1 : 8;                // offset: 0x1 ordinal: 0x1
  UCHAR Spare2 : 8;                // offset: 0x2 ordinal: 0x2
  UCHAR IgnoreCurrentCommit : 1;   // offset: 0x3 ordinal: 0x3
  UCHAR IncreaseMinimumSize : 1;   // offset: 0x3 ordinal: 0x4
  UCHAR AttemptForCantExtend : 1;  // offset: 0x3 ordinal: 0x5
  UCHAR UnusedSegmentDeletion : 1; // offset: 0x3 ordinal: 0x6
  UCHAR PageFileContract : 1;      // offset: 0x3 ordinal: 0x7
  UCHAR NoWait : 1;                // offset: 0x3 ordinal: 0x8
  UCHAR Spare3 : 2;                // offset: 0x3 ordinal: 0x9
} _MMPAGE_FILE_EXPANSION_FLAGS;

// 0x14 bytes (sizeof)
typedef struct _MI_REBUILD_LARGE_PAGE_TIMER {
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x0 ordinal: 0x0
  UCHAR SecondsLeft;                // offset: 0x10 ordinal: 0x1
  UCHAR RebuildActive;              // offset: 0x11 ordinal: 0x2
  UCHAR NextPassDelta;              // offset: 0x12 ordinal: 0x3
  UCHAR LargeSubPagesActive;        // offset: 0x13 ordinal: 0x4
} _MI_REBUILD_LARGE_PAGE_TIMER;

// 0x3 bytes (sizeof)
typedef struct _MI_RESTRICTED_MODWRITES {
  UCHAR MaximumClusterPages;  // offset: 0x0 ordinal: 0x0
  UCHAR ReducedClusterWrites; // offset: 0x1 ordinal: 0x1
  UCHAR ImposeDelay;          // offset: 0x2 ordinal: 0x2
} _MI_RESTRICTED_MODWRITES;

// 0x18 bytes (sizeof)
typedef struct wil_details_FeatureTestState {
  enum wil_details_FeatureTestStateKind kind; // offset: 0x0 ordinal: 0x0
  ULONG featureId;                            // offset: 0x4 ordinal: 0x1
  enum wil_FeatureEnabledState state;         // offset: 0x8 ordinal: 0x2
  UCHAR variant;                              // offset: 0xc ordinal: 0x3
  ULONG payload;                              // offset: 0x10 ordinal: 0x4
  struct wil_details_FeatureTestState *next;  // offset: 0x14 ordinal: 0x5
} wil_details_FeatureTestState;

// 0x18 bytes (sizeof)
typedef struct wil_FeatureState {
  enum wil_FeatureEnabledState enabledState;      // offset: 0x0 ordinal: 0x0
  UCHAR variant;                                  // offset: 0x4 ordinal: 0x1
  enum wil_FeatureVariantPayloadKind payloadKind; // offset: 0x8 ordinal: 0x2
  ULONG payload;                                  // offset: 0xc ordinal: 0x3
  LONG hasNotification;                           // offset: 0x10 ordinal: 0x4
  LONG isVariantConfiguration;                    // offset: 0x14 ordinal: 0x5
} wil_FeatureState;

// 0x1 bytes (sizeof)
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
  UCHAR FRUId : 1;    // offset: 0x0 ordinal: 0x0
  UCHAR FRUText : 1;  // offset: 0x0 ordinal: 0x1
  UCHAR Reserved : 6; // offset: 0x0 ordinal: 0x2
  UCHAR AsUCHAR;      // offset: 0x0 ordinal: 0x3
} _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;

// 0x2 bytes (sizeof)
typedef struct _ETW_SYSTEM_LOGGER {
  UCHAR LoggerId;  // offset: 0x0 ordinal: 0x0
  UCHAR ClockType; // offset: 0x1 ordinal: 0x1
} _ETW_SYSTEM_LOGGER;

typedef VOID (*__anon_1008)(VOID *, UCHAR);

// 0x8 bytes (sizeof)
typedef struct _VF_ADDRESS_RANGE {
  UCHAR *Start; // offset: 0x0 ordinal: 0x0
  UCHAR *End;   // offset: 0x4 ordinal: 0x1
} _VF_ADDRESS_RANGE;

// 0x1 bytes (sizeof)
typedef struct __anon_825 {
  UCHAR Lock; // offset: 0x0 ordinal: 0x0
} __anon_825;

// 0x1 bytes (sizeof)
typedef struct _PS_PROTECTION {
  union {
    UCHAR Level;    // offset: 0x0 ordinal: 0x0
    UCHAR Type : 3; // offset: 0x0 ordinal: 0x1
  };
  UCHAR Audit : 1;  // offset: 0x0 ordinal: 0x2
  UCHAR Signer : 4; // offset: 0x0 ordinal: 0x3
} _PS_PROTECTION;

typedef UCHAR (*__anon_715)(struct _FILE_OBJECT *, struct _MDL *,
                            struct _DEVICE_OBJECT *);

// 0x8 bytes (sizeof)
typedef struct _PEP_WORK_DEVICE_IDLE {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  UCHAR IgnoreIdleTimeout;         // offset: 0x4 ordinal: 0x1
} _PEP_WORK_DEVICE_IDLE;

// 0x8 bytes (sizeof)
typedef struct _PEP_WORK_DEVICE_POWER {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  UCHAR PowerRequired;             // offset: 0x4 ordinal: 0x1
} _PEP_WORK_DEVICE_POWER;

typedef UCHAR (*__anon_472)(struct _PEP_CRASHDUMP_INFORMATION *);

typedef UCHAR (*__anon_441)(VOID *);

// 0x1 bytes (sizeof)
typedef union _KEXECUTE_OPTIONS {
  UCHAR ExecuteDisable : 1;                  // offset: 0x0 ordinal: 0x0
  UCHAR ExecuteEnable : 1;                   // offset: 0x0 ordinal: 0x1
  UCHAR DisableThunkEmulation : 1;           // offset: 0x0 ordinal: 0x2
  UCHAR Permanent : 1;                       // offset: 0x0 ordinal: 0x3
  UCHAR ExecuteDispatchEnable : 1;           // offset: 0x0 ordinal: 0x4
  UCHAR ImageDispatchEnable : 1;             // offset: 0x0 ordinal: 0x5
  UCHAR DisableExceptionChainValidation : 1; // offset: 0x0 ordinal: 0x6
  UCHAR Spare : 1;                           // offset: 0x0 ordinal: 0x7
  UCHAR ExecuteOptions;                      // offset: 0x0 ordinal: 0x8
  UCHAR ExecuteOptionsNV;                    // offset: 0x0 ordinal: 0x9
} _KEXECUTE_OPTIONS;

// 0x2 bytes (sizeof)
typedef struct _PROC_PERF_LOAD {
  UCHAR BusyPercentage;      // offset: 0x0 ordinal: 0x0
  UCHAR FrequencyPercentage; // offset: 0x1 ordinal: 0x1
} _PROC_PERF_LOAD;

// 0x1 bytes (sizeof)
typedef struct _flags {
  UCHAR Removable : 1;            // offset: 0x0 ordinal: 0x0
  UCHAR GroupAssigned : 1;        // offset: 0x0 ordinal: 0x1
  UCHAR GroupCommitted : 1;       // offset: 0x0 ordinal: 0x2
  UCHAR GroupAssignmentFixed : 1; // offset: 0x0 ordinal: 0x3
  UCHAR ProcessorOnly : 1;        // offset: 0x0 ordinal: 0x4
  UCHAR Fill : 3;                 // offset: 0x0 ordinal: 0x5
} _flags;

// 0x8 bytes (sizeof)
typedef struct __anon_2791 {
  UCHAR Pch;                // offset: 0x0 ordinal: 0x0
  UCHAR EmbeddedController; // offset: 0x1 ordinal: 0x1
  UCHAR Reserved[6];        // offset: 0x2 ordinal: 0x2
} __anon_2791;

// 0x6 bytes (sizeof)
typedef struct _SID_IDENTIFIER_AUTHORITY {
  UCHAR Value[6]; // offset: 0x0 ordinal: 0x0
} _SID_IDENTIFIER_AUTHORITY;

// 0x1 bytes (sizeof)
typedef union _KWAIT_STATUS_REGISTER {
  UCHAR Flags;        // offset: 0x0 ordinal: 0x0
  UCHAR State : 3;    // offset: 0x0 ordinal: 0x1
  UCHAR Affinity : 1; // offset: 0x0 ordinal: 0x2
  UCHAR Priority : 1; // offset: 0x0 ordinal: 0x3
  UCHAR Apc : 1;      // offset: 0x0 ordinal: 0x4
  UCHAR UserApc : 1;  // offset: 0x0 ordinal: 0x5
  UCHAR Alert : 1;    // offset: 0x0 ordinal: 0x6
} _KWAIT_STATUS_REGISTER;

// 0x4 bytes (sizeof)
typedef struct __anon_266 {
  UCHAR BaseMid; // offset: 0x0 ordinal: 0x0
  UCHAR Flags1;  // offset: 0x1 ordinal: 0x1
  UCHAR Flags2;  // offset: 0x2 ordinal: 0x2
  UCHAR BaseHi;  // offset: 0x3 ordinal: 0x3
} __anon_266;

// 0x10 bytes (sizeof)
typedef struct _RTL_BALANCED_LINKS {
  struct _RTL_BALANCED_LINKS *Parent;     // offset: 0x0 ordinal: 0x0
  struct _RTL_BALANCED_LINKS *LeftChild;  // offset: 0x4 ordinal: 0x1
  struct _RTL_BALANCED_LINKS *RightChild; // offset: 0x8 ordinal: 0x2
  CHAR Balance;                           // offset: 0xc ordinal: 0x3
  UCHAR Reserved[3];                      // offset: 0xd ordinal: 0x4
} _RTL_BALANCED_LINKS;

// 0x14 bytes (sizeof)
typedef struct _KTMOBJECT_NAMESPACE_LINK {
  struct _RTL_BALANCED_LINKS Links; // offset: 0x0 ordinal: 0x0
  UCHAR Expired;                    // offset: 0x10 ordinal: 0x1
} _KTMOBJECT_NAMESPACE_LINK;

// 0x8 bytes (sizeof)
typedef struct __anon_828 {
  UCHAR InPath;                              // offset: 0x0 ordinal: 0x0
  UCHAR Reserved[3];                         // offset: 0x1 ordinal: 0x1
  enum _DEVICE_USAGE_NOTIFICATION_TYPE Type; // offset: 0x4 ordinal: 0x2
} __anon_828;

// 0x6 bytes (sizeof)
typedef struct _PROC_IDLE_POLICY {
  UCHAR PromotePercent;     // offset: 0x0 ordinal: 0x0
  UCHAR DemotePercent;      // offset: 0x1 ordinal: 0x1
  UCHAR PromotePercentBase; // offset: 0x2 ordinal: 0x2
  UCHAR DemotePercentBase;  // offset: 0x3 ordinal: 0x3
  UCHAR AllowScaling;       // offset: 0x4 ordinal: 0x4
  UCHAR ForceLightIdle;     // offset: 0x5 ordinal: 0x5
} _PROC_IDLE_POLICY;

// 0x2024 bytes (sizeof)
typedef struct _KiIoAccessMap {
  UCHAR DirectionMap[32]; // offset: 0x0 ordinal: 0x0
  UCHAR IoMap[8196];      // offset: 0x20 ordinal: 0x1
} _KiIoAccessMap;

// 0x8 bytes (sizeof)
typedef struct _RTL_RB_TREE {
  struct _RTL_BALANCED_NODE *Root; // offset: 0x0 ordinal: 0x0
  UCHAR Encoded : 1;               // offset: 0x4 ordinal: 0x1
  struct _RTL_BALANCED_NODE *Min;  // offset: 0x4 ordinal: 0x2
} _RTL_RB_TREE;

typedef enum _NT_PRODUCT_TYPE {
  NtProductWinNt = 1,    // ordinal: 0x0
  NtProductLanManNt = 2, // ordinal: 0x1
  NtProductServer = 3,   // ordinal: 0x2
} _NT_PRODUCT_TYPE;

// 0x8 bytes (sizeof)
typedef struct _MI_COMBINE_PAGE_LISTHEAD {
  struct _RTL_AVL_TREE Table; // offset: 0x0 ordinal: 0x0
  LONG Lock;                  // offset: 0x4 ordinal: 0x1
} _MI_COMBINE_PAGE_LISTHEAD;

// 0x4 bytes (sizeof)
typedef union wil_details_FeaturePropertyCache {
  struct wil_details_FeatureProperties cache;   // offset: 0x0 ordinal: 0x0
  struct wil_details_VariantProperties variant; // offset: 0x0 ordinal: 0x1
  LONG var;                                     // offset: 0x0 ordinal: 0x2
} wil_details_FeaturePropertyCache;

// 0x8 bytes (sizeof)
typedef struct wil_details_FeatureVariantPropertyCache {
  union wil_details_FeaturePropertyCache
      propertyCache; // offset: 0x0 ordinal: 0x0
  ULONG payloadId;   // offset: 0x4 ordinal: 0x1
} wil_details_FeatureVariantPropertyCache;

// 0x4 bytes (sizeof)
typedef struct _HEAP_FREE_ENTRY_EXTRA {
  USHORT TagIndex;           // offset: 0x0 ordinal: 0x0
  USHORT FreeBackTraceIndex; // offset: 0x2 ordinal: 0x1
} _HEAP_FREE_ENTRY_EXTRA;

// 0x2 bytes (sizeof)
typedef union __anon_2901 {
  USHORT AsUSHORT;         // offset: 0x0 ordinal: 0x0
  USHORT AllowScaling : 1; // offset: 0x0 ordinal: 0x1
  USHORT Disabled : 1;     // offset: 0x0 ordinal: 0x2
  USHORT Reserved : 14;    // offset: 0x0 ordinal: 0x3
} __anon_2901;

// 0x2 bytes (sizeof)
typedef union __anon_2889 {
  USHORT SignatureLevel : 4; // offset: 0x0 ordinal: 0x0
  USHORT SignatureType : 3;  // offset: 0x0 ordinal: 0x1
  USHORT Unused : 9;         // offset: 0x0 ordinal: 0x2
  USHORT EntireField;        // offset: 0x0 ordinal: 0x3
} __anon_2889;

// 0x2 bytes (sizeof)
typedef union _HAL_UNMASKED_INTERRUPT_FLAGS {
  USHORT SecondaryInterrupt : 1; // offset: 0x0 ordinal: 0x0
  USHORT Reserved : 15;          // offset: 0x0 ordinal: 0x1
  USHORT AsUSHORT;               // offset: 0x0 ordinal: 0x2
} _HAL_UNMASKED_INTERRUPT_FLAGS;

// 0x8040 bytes (sizeof)
typedef struct _STACK_TABLE {
  USHORT NumStackTraces;                    // offset: 0x0 ordinal: 0x0
  USHORT TraceCapacity;                     // offset: 0x2 ordinal: 0x1
  struct _OBJECT_REF_TRACE *StackTrace[16]; // offset: 0x4 ordinal: 0x2
  USHORT StackTableHash[16381];             // offset: 0x44 ordinal: 0x3
} _STACK_TABLE;

// 0x2 bytes (sizeof)
typedef union _WHEA_NOTIFICATION_FLAGS {
  USHORT PollIntervalRW : 1;             // offset: 0x0 ordinal: 0x0
  USHORT SwitchToPollingThresholdRW : 1; // offset: 0x0 ordinal: 0x1
  USHORT SwitchToPollingWindowRW : 1;    // offset: 0x0 ordinal: 0x2
  USHORT ErrorThresholdRW : 1;           // offset: 0x0 ordinal: 0x3
  USHORT ErrorThresholdWindowRW : 1;     // offset: 0x0 ordinal: 0x4
  USHORT Reserved : 11;                  // offset: 0x0 ordinal: 0x5
  USHORT AsUSHORT;                       // offset: 0x0 ordinal: 0x6
} _WHEA_NOTIFICATION_FLAGS;

// 0x2 bytes (sizeof)
typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
  USHORT UncorrectableErrorMaskRW : 1;          // offset: 0x0 ordinal: 0x0
  USHORT UncorrectableErrorSeverityRW : 1;      // offset: 0x0 ordinal: 0x1
  USHORT CorrectableErrorMaskRW : 1;            // offset: 0x0 ordinal: 0x2
  USHORT AdvancedCapsAndControlRW : 1;          // offset: 0x0 ordinal: 0x3
  USHORT SecondaryUncorrectableErrorMaskRW : 1; // offset: 0x0 ordinal: 0x4
  USHORT SecondaryUncorrectableErrorSevRW : 1;  // offset: 0x0 ordinal: 0x5
  USHORT SecondaryCapsAndControlRW : 1;         // offset: 0x0 ordinal: 0x6
  USHORT Reserved : 9;                          // offset: 0x0 ordinal: 0x7
  USHORT AsUSHORT;                              // offset: 0x0 ordinal: 0x8
} _AER_BRIDGE_DESCRIPTOR_FLAGS;

// 0x2 bytes (sizeof)
typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
  USHORT UncorrectableErrorMaskRW : 1;     // offset: 0x0 ordinal: 0x0
  USHORT UncorrectableErrorSeverityRW : 1; // offset: 0x0 ordinal: 0x1
  USHORT CorrectableErrorMaskRW : 1;       // offset: 0x0 ordinal: 0x2
  USHORT AdvancedCapsAndControlRW : 1;     // offset: 0x0 ordinal: 0x3
  USHORT Reserved : 12;                    // offset: 0x0 ordinal: 0x4
  USHORT AsUSHORT;                         // offset: 0x0 ordinal: 0x5
} _AER_ENDPOINT_DESCRIPTOR_FLAGS;

// 0x2 bytes (sizeof)
typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
  USHORT UncorrectableErrorMaskRW : 1;     // offset: 0x0 ordinal: 0x0
  USHORT UncorrectableErrorSeverityRW : 1; // offset: 0x0 ordinal: 0x1
  USHORT CorrectableErrorMaskRW : 1;       // offset: 0x0 ordinal: 0x2
  USHORT AdvancedCapsAndControlRW : 1;     // offset: 0x0 ordinal: 0x3
  USHORT RootErrorCommandRW : 1;           // offset: 0x0 ordinal: 0x4
  USHORT Reserved : 11;                    // offset: 0x0 ordinal: 0x5
  USHORT AsUSHORT;                         // offset: 0x0 ordinal: 0x6
} _AER_ROOTPORT_DESCRIPTOR_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
  USHORT Type;    // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;  // offset: 0x2 ordinal: 0x1
  UCHAR Reserved; // offset: 0x3 ordinal: 0x2
} _WHEA_IPF_CPE_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
  USHORT Type;    // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;  // offset: 0x2 ordinal: 0x1
  UCHAR Reserved; // offset: 0x3 ordinal: 0x2
} _WHEA_IPF_CMC_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
  USHORT Type;    // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;  // offset: 0x2 ordinal: 0x1
  UCHAR Reserved; // offset: 0x3 ordinal: 0x2
} _WHEA_IPF_MCA_DESCRIPTOR;

// 0x3 bytes (sizeof)
typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
  USHORT Type;   // offset: 0x0 ordinal: 0x0
  UCHAR Enabled; // offset: 0x2 ordinal: 0x1
} _WHEA_XPF_NMI_DESCRIPTOR;

// 0x10 bytes (sizeof)
typedef struct _OBJECT_HEADER_CREATOR_INFO {
  struct _LIST_ENTRY TypeList;  // offset: 0x0 ordinal: 0x0
  VOID *CreatorUniqueProcess;   // offset: 0x8 ordinal: 0x1
  USHORT CreatorBackTraceIndex; // offset: 0xc ordinal: 0x2
  USHORT Reserved1;             // offset: 0xe ordinal: 0x3
} _OBJECT_HEADER_CREATOR_INFO;

// 0x8 bytes (sizeof)
typedef struct _ACL {
  UCHAR AclRevision; // offset: 0x0 ordinal: 0x0
  UCHAR Sbz1;        // offset: 0x1 ordinal: 0x1
  USHORT AclSize;    // offset: 0x2 ordinal: 0x2
  USHORT AceCount;   // offset: 0x4 ordinal: 0x3
  USHORT Sbz2;       // offset: 0x6 ordinal: 0x4
} _ACL;

// 0x14 bytes (sizeof)
typedef struct _SECURITY_DESCRIPTOR {
  UCHAR Revision;    // offset: 0x0 ordinal: 0x0
  UCHAR Sbz1;        // offset: 0x1 ordinal: 0x1
  USHORT Control;    // offset: 0x2 ordinal: 0x2
  VOID *Owner;       // offset: 0x4 ordinal: 0x3
  VOID *Group;       // offset: 0x8 ordinal: 0x4
  struct _ACL *Sacl; // offset: 0xc ordinal: 0x5
  struct _ACL *Dacl; // offset: 0x10 ordinal: 0x6
} _SECURITY_DESCRIPTOR;

// 0x10 bytes (sizeof)
typedef struct _ETW_SYSTEMTIME {
  USHORT Year;         // offset: 0x0 ordinal: 0x0
  USHORT Month;        // offset: 0x2 ordinal: 0x1
  USHORT DayOfWeek;    // offset: 0x4 ordinal: 0x2
  USHORT Day;          // offset: 0x6 ordinal: 0x3
  USHORT Hour;         // offset: 0x8 ordinal: 0x4
  USHORT Minute;       // offset: 0xa ordinal: 0x5
  USHORT Second;       // offset: 0xc ordinal: 0x6
  USHORT Milliseconds; // offset: 0xe ordinal: 0x7
} _ETW_SYSTEMTIME;

// 0x8 bytes (sizeof)
typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
  USHORT Validation; // offset: 0x0 ordinal: 0x0
  USHORT Flags;      // offset: 0x2 ordinal: 0x1
  VOID(*TrackedOffsetCallback)
  (struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *,
   struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *,
   LONGLONG); // offset: 0x4 ordinal: 0x2
} _IO_IRP_EXT_TRACK_OFFSET_HEADER;

typedef VOID (*__anon_2172)(struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *,
                            struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *, LONGLONG);

// 0x2 bytes (sizeof)
typedef union _HEAP_SEGMENT_MGR_COMMIT_STATE {
  USHORT CommittedPageCount : 11;          // offset: 0x0 ordinal: 0x0
  USHORT Spare : 3;                        // offset: 0x0 ordinal: 0x1
  USHORT LargePageOperationInProgress : 1; // offset: 0x0 ordinal: 0x2
  USHORT LargePageCommit : 1;              // offset: 0x0 ordinal: 0x3
  USHORT EntireUShortV;                    // offset: 0x0 ordinal: 0x4
  USHORT EntireUShort;                     // offset: 0x0 ordinal: 0x5
} _HEAP_SEGMENT_MGR_COMMIT_STATE;

// 0x2 bytes (sizeof)
typedef struct _HEAP_VS_UNUSED_BYTES_INFO {
  USHORT UnusedBytes : 13;  // offset: 0x0 ordinal: 0x0
  USHORT LfhSubsegment : 1; // offset: 0x0 ordinal: 0x1
  USHORT ExtraPresent : 1;  // offset: 0x0 ordinal: 0x2
  USHORT OneByteUnused : 1; // offset: 0x0 ordinal: 0x3
  UCHAR Bytes[2];           // offset: 0x0 ordinal: 0x4
} _HEAP_VS_UNUSED_BYTES_INFO;

// 0x2 bytes (sizeof)
typedef struct _HEAP_LFH_UNUSED_BYTES_INFO {
  USHORT UnusedBytes : 14;  // offset: 0x0 ordinal: 0x0
  USHORT ExtraPresent : 1;  // offset: 0x0 ordinal: 0x1
  USHORT OneByteUnused : 1; // offset: 0x0 ordinal: 0x2
  UCHAR Bytes[2];           // offset: 0x0 ordinal: 0x3
} _HEAP_LFH_UNUSED_BYTES_INFO;

// 0x4 bytes (sizeof)
typedef union _HEAP_LFH_ONDEMAND_POINTER {
  USHORT Invalid : 1;              // offset: 0x0 ordinal: 0x0
  USHORT AllocationInProgress : 1; // offset: 0x0 ordinal: 0x1
  USHORT Spare0 : 14;              // offset: 0x0 ordinal: 0x2
  USHORT UsageData;                // offset: 0x2 ordinal: 0x3
  VOID *AllBits;                   // offset: 0x0 ordinal: 0x4
} _HEAP_LFH_ONDEMAND_POINTER;

// 0x4 bytes (sizeof)
typedef struct _RTL_HP_LFH_CONFIG {
  USHORT MaxBlockSize;                  // offset: 0x0 ordinal: 0x0
  USHORT WitholdPageCrossingBlocks : 1; // offset: 0x2 ordinal: 0x1
  USHORT DisableRandomization : 1;      // offset: 0x2 ordinal: 0x2
} _RTL_HP_LFH_CONFIG;

// 0x8 bytes (sizeof)
typedef struct _SEGMENT_HEAP_EXTRA {
  USHORT AllocationTag;       // offset: 0x0 ordinal: 0x0
  UCHAR InterceptorIndex : 4; // offset: 0x2 ordinal: 0x1
  UCHAR UserFlags : 4;        // offset: 0x2 ordinal: 0x2
  UCHAR ExtraSizeInUnits;     // offset: 0x3 ordinal: 0x3
  VOID *Settable;             // offset: 0x4 ordinal: 0x4
} _SEGMENT_HEAP_EXTRA;

// 0x8 bytes (sizeof)
typedef struct _PCW_COUNTER_DESCRIPTOR {
  USHORT Id;          // offset: 0x0 ordinal: 0x0
  USHORT StructIndex; // offset: 0x2 ordinal: 0x1
  USHORT Offset;      // offset: 0x4 ordinal: 0x2
  USHORT Size;        // offset: 0x6 ordinal: 0x3
} _PCW_COUNTER_DESCRIPTOR;

// 0x2 bytes (sizeof)
typedef struct _HV_GET_BIN_CONTEXT {
  USHORT OutstandingReference : 1; // offset: 0x0 ordinal: 0x0
} _HV_GET_BIN_CONTEXT;

// 0x2 bytes (sizeof)
typedef struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
  USHORT PageRelativeOffset : 12; // offset: 0x0 ordinal: 0x0
  USHORT RegisterNumber : 4;      // offset: 0x0 ordinal: 0x1
} _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;

// 0x2 bytes (sizeof)
typedef struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  USHORT PageRelativeOffset : 12; // offset: 0x0 ordinal: 0x0
  USHORT IndirectCall : 1;        // offset: 0x0 ordinal: 0x1
  USHORT RexWPrefix : 1;          // offset: 0x0 ordinal: 0x2
  USHORT CfgCheck : 1;            // offset: 0x0 ordinal: 0x3
  USHORT Reserved : 1;            // offset: 0x0 ordinal: 0x4
} _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;

// 0x4 bytes (sizeof)
typedef struct _MMSUBSECTION_FLAGS {
  USHORT SubsectionAccessed : 1;  // offset: 0x0 ordinal: 0x0
  USHORT Protection : 5;          // offset: 0x0 ordinal: 0x1
  USHORT StartingSector4132 : 10; // offset: 0x0 ordinal: 0x2
  USHORT SubsectionStatic : 1;    // offset: 0x2 ordinal: 0x3
  USHORT GlobalMemory : 1;        // offset: 0x2 ordinal: 0x4
  USHORT Spare : 1;               // offset: 0x2 ordinal: 0x5
  USHORT OnDereferenceList : 1;   // offset: 0x2 ordinal: 0x6
  USHORT SectorEndOffset : 12;    // offset: 0x2 ordinal: 0x7
} _MMSUBSECTION_FLAGS;

// 0x2 bytes (sizeof)
typedef struct __anon_1500 {
  USHORT ReferenceCount; // offset: 0x0 ordinal: 0x0
} __anon_1500;

// 0x4 bytes (sizeof)
typedef struct _SEGMENT_FLAGS {
  USHORT TotalNumberOfPtes4132 : 10; // offset: 0x0 ordinal: 0x0
  USHORT Spare0 : 2;                 // offset: 0x0 ordinal: 0x1
  USHORT LargePages : 1;             // offset: 0x0 ordinal: 0x2
  USHORT DebugSymbolsLoaded : 1;     // offset: 0x0 ordinal: 0x3
  USHORT WriteCombined : 1;          // offset: 0x0 ordinal: 0x4
  USHORT NoCache : 1;                // offset: 0x0 ordinal: 0x5
  USHORT Short0;                     // offset: 0x0 ordinal: 0x6
  UCHAR Unused : 1;                  // offset: 0x2 ordinal: 0x7
  UCHAR DefaultProtectionMask : 5;   // offset: 0x2 ordinal: 0x8
  UCHAR Binary32 : 1;                // offset: 0x2 ordinal: 0x9
  UCHAR ContainsDebug : 1;           // offset: 0x2 ordinal: 0xa
  UCHAR UChar1;                      // offset: 0x2 ordinal: 0xb
  UCHAR ForceCollision : 1;          // offset: 0x3 ordinal: 0xc
  UCHAR ImageSigningType : 3;        // offset: 0x3 ordinal: 0xd
  UCHAR ImageSigningLevel : 4;       // offset: 0x3 ordinal: 0xe
  UCHAR UChar2;                      // offset: 0x3 ordinal: 0xf
} _SEGMENT_FLAGS;

// 0x8 bytes (sizeof)
typedef struct _wil_details_UsageSubscriptionData {
  ULONG featureId;             // offset: 0x0 ordinal: 0x0
  USHORT serviceReportingKind; // offset: 0x4 ordinal: 0x1
} _wil_details_UsageSubscriptionData;

// 0x10 bytes (sizeof)
typedef struct wil_details_StagingConfigHeader {
  UCHAR version;                   // offset: 0x0 ordinal: 0x0
  UCHAR versionMinor;              // offset: 0x1 ordinal: 0x1
  USHORT headerSizeBytes;          // offset: 0x2 ordinal: 0x2
  USHORT featureCount;             // offset: 0x4 ordinal: 0x3
  USHORT featureUsageTriggerCount; // offset: 0x6 ordinal: 0x4
  struct wil_details_StagingConfigHeaderProperties
      sessionProperties; // offset: 0x8 ordinal: 0x5
  struct wil_details_StagingConfigHeaderProperties
      properties; // offset: 0xc ordinal: 0x6
} wil_details_StagingConfigHeader;

// 0x6 bytes (sizeof)
typedef struct FEATURE_LOGGED_TRAITS {
  USHORT version;     // offset: 0x0 ordinal: 0x0
  USHORT baseVersion; // offset: 0x2 ordinal: 0x1
  UCHAR stage;        // offset: 0x4 ordinal: 0x2
} FEATURE_LOGGED_TRAITS;

typedef unsigned int HRESULT;

// 0x38 bytes (sizeof)
typedef struct FEATURE_ERROR {
  HRESULT hr;                            // offset: 0x0 ordinal: 0x0
  USHORT lineNumber;                     // offset: 0x4 ordinal: 0x1
  CHAR *file;                            // offset: 0x8 ordinal: 0x2
  CHAR *process;                         // offset: 0xc ordinal: 0x3
  CHAR *modulePath;                      // offset: 0x10 ordinal: 0x4
  ULONG callerReturnAddressOffset;       // offset: 0x14 ordinal: 0x5
  CHAR *callerModule;                    // offset: 0x18 ordinal: 0x6
  CHAR *message;                         // offset: 0x1c ordinal: 0x7
  USHORT originLineNumber;               // offset: 0x20 ordinal: 0x8
  CHAR *originFile;                      // offset: 0x24 ordinal: 0x9
  CHAR *originModule;                    // offset: 0x28 ordinal: 0xa
  ULONG originCallerReturnAddressOffset; // offset: 0x2c ordinal: 0xb
  CHAR *originCallerModule;              // offset: 0x30 ordinal: 0xc
  CHAR *originName;                      // offset: 0x34 ordinal: 0xd
} FEATURE_ERROR;

// 0x8 bytes (sizeof)
typedef struct _UNICODE_STRING {
  USHORT Length;        // offset: 0x0 ordinal: 0x0
  USHORT MaximumLength; // offset: 0x2 ordinal: 0x1
  WCHAR *Buffer;        // offset: 0x4 ordinal: 0x2
} _UNICODE_STRING;

// 0x2 bytes (sizeof)
typedef union _WHEA_REVISION {
  UCHAR MinorRevision; // offset: 0x0 ordinal: 0x0
  UCHAR MajorRevision; // offset: 0x1 ordinal: 0x1
  USHORT AsUSHORT;     // offset: 0x0 ordinal: 0x2
} _WHEA_REVISION;

// 0x8 bytes (sizeof)
typedef struct _TXN_PARAMETER_BLOCK {
  USHORT Length;           // offset: 0x0 ordinal: 0x0
  USHORT TxFsContext;      // offset: 0x2 ordinal: 0x1
  VOID *TransactionObject; // offset: 0x4 ordinal: 0x2
} _TXN_PARAMETER_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT {
  USHORT Length; // offset: 0x0 ordinal: 0x0
  WCHAR *String; // offset: 0x4 ordinal: 0x1
} _ETW_FILTER_STRING_TOKEN_ELEMENT;

// 0x4 bytes (sizeof)
typedef struct _ETW_BUFFER_CONTEXT {
  UCHAR ProcessorNumber; // offset: 0x0 ordinal: 0x0
  UCHAR Alignment;       // offset: 0x1 ordinal: 0x1
  USHORT ProcessorIndex; // offset: 0x0 ordinal: 0x2
  USHORT LoggerId;       // offset: 0x2 ordinal: 0x3
} _ETW_BUFFER_CONTEXT;

// 0xc bytes (sizeof)
typedef struct _ETW_FILTER_STRING_TOKEN {
  USHORT Count;                                      // offset: 0x0 ordinal: 0x0
  struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1]; // offset: 0x4 ordinal: 0x1
} _ETW_FILTER_STRING_TOKEN;

// 0x4 bytes (sizeof)
typedef struct _WNF_NODE_HEADER {
  USHORT NodeTypeCode; // offset: 0x0 ordinal: 0x0
  USHORT NodeByteSize; // offset: 0x2 ordinal: 0x1
} _WNF_NODE_HEADER;

// 0x10 bytes (sizeof)
typedef struct _INTERFACE {
  USHORT Size;                          // offset: 0x0 ordinal: 0x0
  USHORT Version;                       // offset: 0x2 ordinal: 0x1
  VOID *Context;                        // offset: 0x4 ordinal: 0x2
  VOID (*InterfaceReference)(VOID *);   // offset: 0x8 ordinal: 0x3
  VOID (*InterfaceDereference)(VOID *); // offset: 0xc ordinal: 0x4
} _INTERFACE;

// 0x4 bytes (sizeof)
typedef struct _MMSUPPORT_FLAGS {
  UCHAR WorkingSetType : 3;        // offset: 0x0 ordinal: 0x0
  UCHAR Reserved0 : 3;             // offset: 0x0 ordinal: 0x1
  UCHAR MaximumWorkingSetHard : 1; // offset: 0x0 ordinal: 0x2
  UCHAR MinimumWorkingSetHard : 1; // offset: 0x0 ordinal: 0x3
  UCHAR SessionMaster : 1;         // offset: 0x1 ordinal: 0x4
  UCHAR TrimmerState : 2;          // offset: 0x1 ordinal: 0x5
  UCHAR Reserved : 1;              // offset: 0x1 ordinal: 0x6
  UCHAR PageStealers : 4;          // offset: 0x1 ordinal: 0x7
  USHORT u1;                       // offset: 0x0 ordinal: 0x8
  UCHAR MemoryPriority;            // offset: 0x2 ordinal: 0x9
  UCHAR WsleDeleted : 1;           // offset: 0x3 ordinal: 0xa
  UCHAR SvmEnabled : 1;            // offset: 0x3 ordinal: 0xb
  UCHAR ForceAge : 1;              // offset: 0x3 ordinal: 0xc
  UCHAR ForceTrim : 1;             // offset: 0x3 ordinal: 0xd
  UCHAR NewMaximum : 1;            // offset: 0x3 ordinal: 0xe
  UCHAR CommitReleaseState : 2;    // offset: 0x3 ordinal: 0xf
  UCHAR u2;                        // offset: 0x3 ordinal: 0x10
} _MMSUPPORT_FLAGS;

// 0x8 bytes (sizeof)
typedef struct _PROC_PERF_HISTORY_ENTRY {
  USHORT Utility;            // offset: 0x0 ordinal: 0x0
  USHORT AffinitizedUtility; // offset: 0x2 ordinal: 0x1
  UCHAR Frequency;           // offset: 0x4 ordinal: 0x2
  UCHAR TaggedPercent[2];    // offset: 0x5 ordinal: 0x3
} _PROC_PERF_HISTORY_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _KIDTENTRY {
  USHORT Offset;         // offset: 0x0 ordinal: 0x0
  USHORT Selector;       // offset: 0x2 ordinal: 0x1
  USHORT Access;         // offset: 0x4 ordinal: 0x2
  USHORT ExtendedOffset; // offset: 0x6 ordinal: 0x3
} _KIDTENTRY;

// 0x18 bytes (sizeof)
typedef struct _ETW_PMC_SUPPORT {
  enum _KPROFILE_SOURCE *Source;              // offset: 0x0 ordinal: 0x0
  ULONG HookIdCount;                          // offset: 0x4 ordinal: 0x1
  USHORT HookId[4];                           // offset: 0x8 ordinal: 0x2
  ULONG CountersCount;                        // offset: 0x10 ordinal: 0x3
  struct _HAL_PMC_COUNTERS *ProcessorCtrs[1]; // offset: 0x14 ordinal: 0x4
} _ETW_PMC_SUPPORT;

// 0x8 bytes (sizeof)
typedef struct _STRING {
  USHORT Length;        // offset: 0x0 ordinal: 0x0
  USHORT MaximumLength; // offset: 0x2 ordinal: 0x1
  CHAR *Buffer;         // offset: 0x4 ordinal: 0x2
} _STRING;

// 0x4 bytes (sizeof)
typedef struct _PROCESSOR_NUMBER {
  USHORT Group;   // offset: 0x0 ordinal: 0x0
  UCHAR Number;   // offset: 0x2 ordinal: 0x1
  UCHAR Reserved; // offset: 0x3 ordinal: 0x2
} _PROCESSOR_NUMBER;

// 0xc bytes (sizeof)
typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR {
  enum _SEP_CACHED_HANDLES_ENTRY_TYPE
      DescriptorType; // offset: 0x0 ordinal: 0x0
  union {
    VOID *PackageSid;                       // offset: 0x4 ordinal: 0x1
    struct _UNICODE_STRING IsolationPrefix; // offset: 0x4 ordinal: 0x2
  };
} _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;

// 0x14 bytes (sizeof)
typedef struct _RELATIVE_SYMLINK_INFO {
  USHORT ExposedNamespaceLength;                     // offset: 0x0 ordinal: 0x0
  USHORT Flags;                                      // offset: 0x2 ordinal: 0x1
  USHORT DeviceNameLength;                           // offset: 0x4 ordinal: 0x2
  USHORT Reserved;                                   // offset: 0x6 ordinal: 0x3
  struct _RELATIVE_SYMLINK_INFO *InteriorMountPoint; // offset: 0x8 ordinal: 0x4
  struct _UNICODE_STRING OpenedName;                 // offset: 0xc ordinal: 0x5
} _RELATIVE_SYMLINK_INFO;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_NAME_INFORMATION {
  struct _UNICODE_STRING Name; // offset: 0x0 ordinal: 0x0
} _OBJECT_NAME_INFORMATION;

// 0x4 bytes (sizeof)
typedef struct _SE_AUDIT_PROCESS_CREATION_INFO {
  struct _OBJECT_NAME_INFORMATION *ImageFileName; // offset: 0x0 ordinal: 0x0
} _SE_AUDIT_PROCESS_CREATION_INFO;

// 0x18 bytes (sizeof)
typedef struct _SEP_SILOSTATE {
  struct _SEP_LOGON_SESSION_REFERENCES
      *SystemLogonSession; // offset: 0x0 ordinal: 0x0
  struct _SEP_LOGON_SESSION_REFERENCES
      *AnonymousLogonSession;             // offset: 0x4 ordinal: 0x1
  VOID *AnonymousLogonToken;              // offset: 0x8 ordinal: 0x2
  VOID *AnonymousLogonTokenNoEveryone;    // offset: 0xc ordinal: 0x3
  struct _UNICODE_STRING *UncSystemPaths; // offset: 0x10 ordinal: 0x4
  struct _CI_NGEN_PATHS *NgenPaths;       // offset: 0x14 ordinal: 0x5
} _SEP_SILOSTATE;

// 0xc bytes (sizeof)
typedef struct _CURDIR {
  struct _UNICODE_STRING DosPath; // offset: 0x0 ordinal: 0x0
  VOID *Handle;                   // offset: 0x8 ordinal: 0x1
} _CURDIR;

typedef LONG (*__anon_2729)(struct _IOMMU_DMA_DOMAIN *, struct _MDL *);

typedef LONG (*__anon_2721)(struct _IOMMU_DMA_DOMAIN *);

typedef LONG (*__anon_2720)(UCHAR, struct _IOMMU_DMA_DOMAIN **);

typedef LONG (*__anon_2719)(VOID *, VOID *, UCHAR);

typedef LONG (*__anon_2710)(VOID *, ULONG);

typedef LONG (*__anon_2709)(UCHAR *);

typedef LONG (*__anon_2681)(ULONG);

typedef LONG (*__anon_2680)(ULONG, UCHAR, UCHAR);

typedef LONG (*__anon_2560)(struct _BUS_HANDLER *);

typedef LONG (*__anon_2512)(UCHAR (*)(struct _KINTERRUPT *, VOID *));

typedef LONG (*__anon_2507)(UCHAR);

typedef LONG (*__anon_2487)(enum _SYSTEM_POWER_STATE);

typedef LONG (*__anon_2472)(VOID *, VOID **);

typedef LONG (*__anon_2460)();

// 0x18 bytes (sizeof)
typedef struct _WNF_DISPATCHER {
  struct _WNF_NODE_HEADER Header;   // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x4 ordinal: 0x1
  LONG State;                       // offset: 0x14 ordinal: 0x2
} _WNF_DISPATCHER;

// 0x10 bytes (sizeof)
typedef struct _OBJECT_HEADER_NAME_INFO {
  struct _OBJECT_DIRECTORY *Directory; // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING Name;         // offset: 0x4 ordinal: 0x1
  LONG ReferenceCount;                 // offset: 0xc ordinal: 0x2
} _OBJECT_HEADER_NAME_INFO;

// 0xac bytes (sizeof)
typedef struct _RTL_TIME_ZONE_INFORMATION {
  LONG Bias;                         // offset: 0x0 ordinal: 0x0
  WCHAR StandardName[32];            // offset: 0x4 ordinal: 0x1
  struct _TIME_FIELDS StandardStart; // offset: 0x44 ordinal: 0x2
  LONG StandardBias;                 // offset: 0x54 ordinal: 0x3
  WCHAR DaylightName[32];            // offset: 0x58 ordinal: 0x4
  struct _TIME_FIELDS DaylightStart; // offset: 0x98 ordinal: 0x5
  LONG DaylightBias;                 // offset: 0xa8 ordinal: 0x6
} _RTL_TIME_ZONE_INFORMATION;

// 0x8 bytes (sizeof)
typedef struct _VACB_LEVEL_REFERENCE {
  LONG Reference;        // offset: 0x0 ordinal: 0x0
  LONG SpecialReference; // offset: 0x4 ordinal: 0x1
} _VACB_LEVEL_REFERENCE;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_CONTINUE {
  LONG ContinueStatus; // offset: 0x0 ordinal: 0x0
} _DBGKD_CONTINUE;

// 0x18 bytes (sizeof)
typedef struct _ETW_PERF_COUNTERS {
  LONG TotalActiveSessions;           // offset: 0x0 ordinal: 0x0
  LONG TotalBufferMemoryNonPagedPool; // offset: 0x4 ordinal: 0x1
  LONG TotalBufferMemoryPagedPool;    // offset: 0x8 ordinal: 0x2
  LONG TotalGuidsEnabled;             // offset: 0xc ordinal: 0x3
  LONG TotalGuidsNotEnabled;          // offset: 0x10 ordinal: 0x4
  LONG TotalGuidsPreEnabled;          // offset: 0x14 ordinal: 0x5
} _ETW_PERF_COUNTERS;

// 0x10 bytes (sizeof)
typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT {
  struct _CM_KEY_CONTROL_BLOCK *BaseKcb; // offset: 0x0 ordinal: 0x0
  LONG PrepareStatus;                    // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY ClonedKcbListHead;  // offset: 0x8 ordinal: 0x2
} _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT;

// 0x20 bytes (sizeof)
typedef struct _MI_LDW_WORK_CONTEXT {
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x0 ordinal: 0x0
  struct _FILE_OBJECT *FileObject;  // offset: 0x10 ordinal: 0x1
  LONG ErrorStatus;                 // offset: 0x14 ordinal: 0x2
  LONG Active;                      // offset: 0x18 ordinal: 0x3
  UCHAR FreeWhenDone;               // offset: 0x1c ordinal: 0x4
} _MI_LDW_WORK_CONTEXT;

// 0x4 bytes (sizeof)
typedef union __anon_1385 {
  LONG FlushCompleting : 1;  // offset: 0x0 ordinal: 0x0
  LONG FlushInProgress : 31; // offset: 0x0 ordinal: 0x1
  LONG Long;                 // offset: 0x0 ordinal: 0x2
} __anon_1385;

typedef LONG (*__anon_1204)(VOID *, VOID *);

typedef LONG (*__anon_1203)(VOID *);

// 0x10 bytes (sizeof)
typedef struct _ETW_COUNTERS {
  LONG GuidCount;    // offset: 0x0 ordinal: 0x0
  LONG PoolUsage[2]; // offset: 0x4 ordinal: 0x1
  LONG SessionCount; // offset: 0xc ordinal: 0x2
} _ETW_COUNTERS;

typedef LONG (*__anon_720)(struct _FILE_OBJECT *, struct _DEVICE_OBJECT *);

// 0x4 bytes (sizeof)
typedef union __anon_505 {
  struct _IRP *MasterIrp; // offset: 0x0 ordinal: 0x0
  LONG IrpCount;          // offset: 0x0 ordinal: 0x1
  VOID *SystemBuffer;     // offset: 0x0 ordinal: 0x2
} __anon_505;

// 0x10 bytes (sizeof)
typedef struct _DISPATCHER_HEADER {
  union {
    LONG Lock;   // offset: 0x0 ordinal: 0x0
    LONG LockNV; // offset: 0x0 ordinal: 0x1
    UCHAR Type;  // offset: 0x0 ordinal: 0x2
  };
  UCHAR Signalling; // offset: 0x1 ordinal: 0x3
  UCHAR Size;       // offset: 0x2 ordinal: 0x4
  UCHAR Reserved1;  // offset: 0x3 ordinal: 0x5
  UCHAR TimerType;  // offset: 0x0 ordinal: 0x6
  union {
    UCHAR TimerControlFlags; // offset: 0x1 ordinal: 0x7
    UCHAR Absolute : 1;      // offset: 0x1 ordinal: 0x8
  };
  UCHAR Wake : 1;                  // offset: 0x1 ordinal: 0x9
  UCHAR EncodedTolerableDelay : 6; // offset: 0x1 ordinal: 0xa
  UCHAR Hand;                      // offset: 0x2 ordinal: 0xb
  union {
    UCHAR TimerMiscFlags; // offset: 0x3 ordinal: 0xc
    UCHAR Index : 1;      // offset: 0x3 ordinal: 0xd
  };
  UCHAR Processor : 5; // offset: 0x3 ordinal: 0xe
  UCHAR Inserted : 1;  // offset: 0x3 ordinal: 0xf
  UCHAR Expired : 1;   // offset: 0x3 ordinal: 0x10
  UCHAR Timer2Type;    // offset: 0x0 ordinal: 0x11
  union {
    UCHAR Timer2Flags;        // offset: 0x1 ordinal: 0x12
    UCHAR Timer2Inserted : 1; // offset: 0x1 ordinal: 0x13
  };
  UCHAR Timer2Expiring : 1;      // offset: 0x1 ordinal: 0x14
  UCHAR Timer2CancelPending : 1; // offset: 0x1 ordinal: 0x15
  UCHAR Timer2SetPending : 1;    // offset: 0x1 ordinal: 0x16
  UCHAR Timer2Running : 1;       // offset: 0x1 ordinal: 0x17
  UCHAR Timer2Disabled : 1;      // offset: 0x1 ordinal: 0x18
  UCHAR Timer2ReservedFlags : 2; // offset: 0x1 ordinal: 0x19
  UCHAR Timer2ComponentId;       // offset: 0x2 ordinal: 0x1a
  UCHAR Timer2RelativeId;        // offset: 0x3 ordinal: 0x1b
  UCHAR QueueType;               // offset: 0x0 ordinal: 0x1c
  union {
    UCHAR QueueControlFlags; // offset: 0x1 ordinal: 0x1d
    UCHAR Abandoned : 1;     // offset: 0x1 ordinal: 0x1e
  };
  UCHAR DisableIncrement : 1;          // offset: 0x1 ordinal: 0x1f
  UCHAR QueueReservedControlFlags : 6; // offset: 0x1 ordinal: 0x20
  UCHAR QueueSize;                     // offset: 0x2 ordinal: 0x21
  UCHAR QueueReserved;                 // offset: 0x3 ordinal: 0x22
  UCHAR ThreadType;                    // offset: 0x0 ordinal: 0x23
  UCHAR ThreadReserved;                // offset: 0x1 ordinal: 0x24
  union {
    UCHAR ThreadControlFlags; // offset: 0x2 ordinal: 0x25
    UCHAR CycleProfiling : 1; // offset: 0x2 ordinal: 0x26
  };
  UCHAR CounterProfiling : 1;      // offset: 0x2 ordinal: 0x27
  UCHAR GroupScheduling : 1;       // offset: 0x2 ordinal: 0x28
  UCHAR AffinitySet : 1;           // offset: 0x2 ordinal: 0x29
  UCHAR Tagged : 1;                // offset: 0x2 ordinal: 0x2a
  UCHAR EnergyProfiling : 1;       // offset: 0x2 ordinal: 0x2b
  UCHAR SchedulerAssist : 1;       // offset: 0x2 ordinal: 0x2c
  UCHAR Instrumented : 1;          // offset: 0x2 ordinal: 0x2d
  UCHAR DebugActive;               // offset: 0x3 ordinal: 0x2e
  UCHAR MutantType;                // offset: 0x0 ordinal: 0x2f
  UCHAR MutantSize;                // offset: 0x1 ordinal: 0x30
  UCHAR DpcActive;                 // offset: 0x2 ordinal: 0x31
  UCHAR MutantReserved;            // offset: 0x3 ordinal: 0x32
  LONG SignalState;                // offset: 0x4 ordinal: 0x33
  struct _LIST_ENTRY WaitListHead; // offset: 0x8 ordinal: 0x34
} _DISPATCHER_HEADER;

// 0x20 bytes (sizeof)
typedef struct _KMUTANT {
  struct _DISPATCHER_HEADER Header;   // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY MutantListEntry; // offset: 0x10 ordinal: 0x1
  struct _KTHREAD *OwnerThread;       // offset: 0x18 ordinal: 0x2
  union {
    UCHAR MutantFlags;   // offset: 0x1c ordinal: 0x3
    UCHAR Abandoned : 1; // offset: 0x1c ordinal: 0x4
  };
  UCHAR Spare1 : 7;     // offset: 0x1c ordinal: 0x5
  UCHAR Abandoned2 : 1; // offset: 0x1c ordinal: 0x6
  UCHAR AbEnabled : 1;  // offset: 0x1c ordinal: 0x7
  UCHAR Spare2 : 6;     // offset: 0x1c ordinal: 0x8
  UCHAR ApcDisable;     // offset: 0x1d ordinal: 0x9
} _KMUTANT;

// 0x14 bytes (sizeof)
typedef struct _KSEMAPHORE {
  struct _DISPATCHER_HEADER Header; // offset: 0x0 ordinal: 0x0
  LONG Limit;                       // offset: 0x10 ordinal: 0x1
} _KSEMAPHORE;

// 0x18 bytes (sizeof)
typedef struct _LPCP_NONPAGED_PORT_QUEUE {
  struct _KSEMAPHORE Semaphore;          // offset: 0x0 ordinal: 0x0
  struct _LPCP_PORT_OBJECT *BackPointer; // offset: 0x14 ordinal: 0x1
} _LPCP_NONPAGED_PORT_QUEUE;

// 0x10 bytes (sizeof)
typedef struct _LPCP_PORT_QUEUE {
  struct _LPCP_NONPAGED_PORT_QUEUE
      *NonPagedPortQueue;         // offset: 0x0 ordinal: 0x0
  struct _KSEMAPHORE *Semaphore;  // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY ReceiveHead; // offset: 0x8 ordinal: 0x2
} _LPCP_PORT_QUEUE;

// 0x2c bytes (sizeof)
typedef struct _MMDEREFERENCE_SEGMENT_HEADER {
  struct _KSEMAPHORE Semaphore;                   // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ControlAreaDeleteListHead;   // offset: 0x14 ordinal: 0x1
  struct _LIST_ENTRY UnusedSegmentDeleteListHead; // offset: 0x1c ordinal: 0x2
  struct _LIST_ENTRY PagefileExtensionListHead;   // offset: 0x24 ordinal: 0x3
} _MMDEREFERENCE_SEGMENT_HEADER;

// 0x10 bytes (sizeof)
typedef struct _KEVENT {
  struct _DISPATCHER_HEADER Header; // offset: 0x0 ordinal: 0x0
} _KEVENT;

// 0x1c bytes (sizeof)
typedef struct _KWAIT_CHAIN_ENTRY {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  struct _KTHREAD *Thread;      // offset: 0x8 ordinal: 0x1
  struct _KEVENT Event;         // offset: 0xc ordinal: 0x2
} _KWAIT_CHAIN_ENTRY;

// 0x20 bytes (sizeof)
typedef struct _MI_RESUME_WORKITEM {
  struct _KEVENT ResumeCompleteEvent; // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM WorkItem;   // offset: 0x10 ordinal: 0x1
} _MI_RESUME_WORKITEM;

// 0x14 bytes (sizeof)
typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK {
  struct _KEVENT DesiredReferenceNoEvent; // offset: 0x0 ordinal: 0x0
  LONG DesiredReferenceNo;                // offset: 0x10 ordinal: 0x1
} _PALPC_PORT_REFERENCE_WAIT_BLOCK;

// 0x14 bytes (sizeof)
typedef struct _CACHE_UNINITIALIZE_EVENT {
  struct _CACHE_UNINITIALIZE_EVENT *Next; // offset: 0x0 ordinal: 0x0
  struct _KEVENT Event;                   // offset: 0x4 ordinal: 0x1
} _CACHE_UNINITIALIZE_EVENT;

// 0x18 bytes (sizeof)
typedef struct _HIVE_WAIT_PACKET {
  struct _KEVENT WakeEvent;       // offset: 0x0 ordinal: 0x0
  LONG Status;                    // offset: 0x10 ordinal: 0x1
  struct _HIVE_WAIT_PACKET *Next; // offset: 0x14 ordinal: 0x2
} _HIVE_WAIT_PACKET;

// 0x18 bytes (sizeof)
typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
  UCHAR Removed;              // offset: 0x0 ordinal: 0x0
  UCHAR Reserved[3];          // offset: 0x1 ordinal: 0x1
  LONG IoCount;               // offset: 0x4 ordinal: 0x2
  struct _KEVENT RemoveEvent; // offset: 0x8 ordinal: 0x3
} _IO_REMOVE_LOCK_COMMON_BLOCK;

// 0x18 bytes (sizeof)
typedef struct _IO_REMOVE_LOCK {
  struct _IO_REMOVE_LOCK_COMMON_BLOCK Common; // offset: 0x0 ordinal: 0x0
} _IO_REMOVE_LOCK;

// 0x4 bytes (sizeof)
typedef struct __anon_1946 {
  struct _KEVENT *Event; // offset: 0x0 ordinal: 0x0
} __anon_1946;

// 0x10 bytes (sizeof)
typedef struct _KGATE {
  struct _DISPATCHER_HEADER Header; // offset: 0x0 ordinal: 0x0
} _KGATE;

// 0x14 bytes (sizeof)
typedef struct _MI_EXTENT_DELETION_WAIT_BLOCK {
  struct _MI_EXTENT_DELETION_WAIT_BLOCK *Next; // offset: 0x0 ordinal: 0x0
  struct _KGATE Gate;                          // offset: 0x4 ordinal: 0x1
} _MI_EXTENT_DELETION_WAIT_BLOCK;

// 0x18 bytes (sizeof)
typedef struct _MMMOD_WRITER_LISTHEAD {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
  union {
    struct _KGATE Gate;   // offset: 0x8 ordinal: 0x1
    struct _KEVENT Event; // offset: 0x8 ordinal: 0x2
  };
} _MMMOD_WRITER_LISTHEAD;

// 0x40 bytes (sizeof)
typedef struct _MI_PARTITION_ZEROING {
  struct _KEVENT PageEvent;      // offset: 0x0 ordinal: 0x0
  UCHAR ThreadActive;            // offset: 0x10 ordinal: 0x1
  UCHAR ThreadPriorityStatic;    // offset: 0x11 ordinal: 0x2
  LONG ZeroFreePageSlistMinimum; // offset: 0x14 ordinal: 0x3
  struct _WORK_QUEUE_ITEM
      RebalanceZeroFreeWorkItem;                 // offset: 0x18 ordinal: 0x4
  LONG ThreadCount;                              // offset: 0x28 ordinal: 0x5
  struct _KGATE Gate;                            // offset: 0x2c ordinal: 0x6
  struct _MI_ZERO_THREAD_CONTEXT *ThreadContext; // offset: 0x3c ordinal: 0x7
} _MI_PARTITION_ZEROING;

// 0x40 bytes (sizeof)
typedef struct _IMAGE_DOS_HEADER {
  USHORT e_magic;    // offset: 0x0 ordinal: 0x0
  USHORT e_cblp;     // offset: 0x2 ordinal: 0x1
  USHORT e_cp;       // offset: 0x4 ordinal: 0x2
  USHORT e_crlc;     // offset: 0x6 ordinal: 0x3
  USHORT e_cparhdr;  // offset: 0x8 ordinal: 0x4
  USHORT e_minalloc; // offset: 0xa ordinal: 0x5
  USHORT e_maxalloc; // offset: 0xc ordinal: 0x6
  USHORT e_ss;       // offset: 0xe ordinal: 0x7
  USHORT e_sp;       // offset: 0x10 ordinal: 0x8
  USHORT e_csum;     // offset: 0x12 ordinal: 0x9
  USHORT e_ip;       // offset: 0x14 ordinal: 0xa
  USHORT e_cs;       // offset: 0x16 ordinal: 0xb
  USHORT e_lfarlc;   // offset: 0x18 ordinal: 0xc
  USHORT e_ovno;     // offset: 0x1a ordinal: 0xd
  USHORT e_res[4];   // offset: 0x1c ordinal: 0xe
  USHORT e_oemid;    // offset: 0x24 ordinal: 0xf
  USHORT e_oeminfo;  // offset: 0x26 ordinal: 0x10
  USHORT e_res2[10]; // offset: 0x28 ordinal: 0x11
  LONG e_lfanew;     // offset: 0x3c ordinal: 0x12
} _IMAGE_DOS_HEADER;

// 0x4 bytes (sizeof)
typedef union _MI_RESERVATION_CLUSTER_INFO {
  ULONG ClusterSize : 10;    // offset: 0x0 ordinal: 0x0
  ULONG SequenceNumber : 22; // offset: 0x0 ordinal: 0x1
  LONG EntireInfo;           // offset: 0x0 ordinal: 0x2
} _MI_RESERVATION_CLUSTER_INFO;

// 0x4 bytes (sizeof)
typedef union _MI_FLAGS {
  LONG EntireFlags;                         // offset: 0x0 ordinal: 0x0
  ULONG VerifierEnabled : 1;                // offset: 0x0 ordinal: 0x1
  ULONG KernelVerifierEnabled : 1;          // offset: 0x0 ordinal: 0x2
  ULONG LargePageKernel : 1;                // offset: 0x0 ordinal: 0x3
  ULONG StopOn4d : 1;                       // offset: 0x0 ordinal: 0x4
  ULONG InitializationPhase : 2;            // offset: 0x0 ordinal: 0x5
  ULONG PageKernelStacks : 1;               // offset: 0x0 ordinal: 0x6
  ULONG CheckZeroPages : 1;                 // offset: 0x0 ordinal: 0x7
  ULONG ProcessorPrewalks : 1;              // offset: 0x0 ordinal: 0x8
  ULONG ProcessorPostwalks : 1;             // offset: 0x0 ordinal: 0x9
  ULONG CoverageBuild : 1;                  // offset: 0x0 ordinal: 0xa
  ULONG AccessBitReplacementDisabled : 1;   // offset: 0x0 ordinal: 0xb
  ULONG CheckExecute : 1;                   // offset: 0x0 ordinal: 0xc
  ULONG ProtectedPagesEnabled : 1;          // offset: 0x0 ordinal: 0xd
  ULONG SecureRelocations : 1;              // offset: 0x0 ordinal: 0xe
  ULONG StrongPageIdentity : 1;             // offset: 0x0 ordinal: 0xf
  ULONG StrongCodeGuarantees : 1;           // offset: 0x0 ordinal: 0x10
  ULONG HardCodeGuarantees : 1;             // offset: 0x0 ordinal: 0x11
  ULONG ExecutePagePrivilegeRequired : 1;   // offset: 0x0 ordinal: 0x12
  ULONG SecureKernelCfgEnabled : 1;         // offset: 0x0 ordinal: 0x13
  ULONG FullHvci : 1;                       // offset: 0x0 ordinal: 0x14
  ULONG BootDebuggerActive : 1;             // offset: 0x0 ordinal: 0x15
  ULONG ExceptionHandlingReady : 1;         // offset: 0x0 ordinal: 0x16
  ULONG ShadowStacksSupported : 1;          // offset: 0x0 ordinal: 0x17
  ULONG AccessBitFenceRequired : 1;         // offset: 0x0 ordinal: 0x18
  ULONG PfnDatabaseExists : 1;              // offset: 0x0 ordinal: 0x19
  ULONG DeferredHotAddsCompleted : 1;       // offset: 0x0 ordinal: 0x1a
  ULONG KernelHalLargeSectionAlignment : 1; // offset: 0x0 ordinal: 0x1b
} _MI_FLAGS;

// 0x14 bytes (sizeof)
typedef struct _CALL_HASH_ENTRY {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  VOID *CallersAddress;         // offset: 0x8 ordinal: 0x1
  VOID *CallersCaller;          // offset: 0xc ordinal: 0x2
  ULONG CallCount;              // offset: 0x10 ordinal: 0x3
} _CALL_HASH_ENTRY;

// 0x4 bytes (sizeof)
typedef struct _OBJECT_HEADER_PADDING_INFO {
  ULONG PaddingAmount; // offset: 0x0 ordinal: 0x0
} _OBJECT_HEADER_PADDING_INFO;

// 0x1c bytes (sizeof)
typedef struct _IMAGE_DEBUG_DIRECTORY {
  ULONG Characteristics;  // offset: 0x0 ordinal: 0x0
  ULONG TimeDateStamp;    // offset: 0x4 ordinal: 0x1
  USHORT MajorVersion;    // offset: 0x8 ordinal: 0x2
  USHORT MinorVersion;    // offset: 0xa ordinal: 0x3
  ULONG Type;             // offset: 0xc ordinal: 0x4
  ULONG SizeOfData;       // offset: 0x10 ordinal: 0x5
  ULONG AddressOfRawData; // offset: 0x14 ordinal: 0x6
  ULONG PointerToRawData; // offset: 0x18 ordinal: 0x7
} _IMAGE_DEBUG_DIRECTORY;

// 0x14 bytes (sizeof)
typedef struct _NB10 {
  ULONG Signature; // offset: 0x0 ordinal: 0x0
  ULONG Offset;    // offset: 0x4 ordinal: 0x1
  ULONG TimeStamp; // offset: 0x8 ordinal: 0x2
  ULONG Age;       // offset: 0xc ordinal: 0x3
  CHAR PdbName[1]; // offset: 0x10 ordinal: 0x4
} _NB10;

// 0x18 bytes (sizeof)
typedef struct _HEAP_UCR_DESCRIPTOR {
  struct _LIST_ENTRY ListEntry;    // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY SegmentEntry; // offset: 0x8 ordinal: 0x1
  VOID *Address;                   // offset: 0x10 ordinal: 0x2
  ULONG Size;                      // offset: 0x14 ordinal: 0x3
} _HEAP_UCR_DESCRIPTOR;

// 0x8 bytes (sizeof)
typedef struct _POOL_HEADER {
  USHORT PreviousSize : 9; // offset: 0x0 ordinal: 0x0
  USHORT PoolIndex : 7;    // offset: 0x0 ordinal: 0x1
  USHORT BlockSize : 9;    // offset: 0x2 ordinal: 0x2
  USHORT PoolType : 7;     // offset: 0x2 ordinal: 0x3
  ULONG Ulong1;            // offset: 0x0 ordinal: 0x4
  union {
    ULONG PoolTag;                  // offset: 0x4 ordinal: 0x5
    USHORT AllocatorBackTraceIndex; // offset: 0x4 ordinal: 0x6
  };
  USHORT PoolTagHash; // offset: 0x6 ordinal: 0x7
} _POOL_HEADER;

// 0x4 bytes (sizeof)
typedef union __anon_3217 {
  ULONG PhysicalAddress; // offset: 0x0 ordinal: 0x0
  ULONG VirtualSize;     // offset: 0x0 ordinal: 0x1
} __anon_3217;

// 0x28 bytes (sizeof)
typedef struct _IMAGE_SECTION_HEADER {
  UCHAR Name[8];              // offset: 0x0 ordinal: 0x0
  union __anon_3217 Misc;     // offset: 0x8 ordinal: 0x1
  ULONG VirtualAddress;       // offset: 0xc ordinal: 0x2
  ULONG SizeOfRawData;        // offset: 0x10 ordinal: 0x3
  ULONG PointerToRawData;     // offset: 0x14 ordinal: 0x4
  ULONG PointerToRelocations; // offset: 0x18 ordinal: 0x5
  ULONG PointerToLinenumbers; // offset: 0x1c ordinal: 0x6
  USHORT NumberOfRelocations; // offset: 0x20 ordinal: 0x7
  USHORT NumberOfLinenumbers; // offset: 0x22 ordinal: 0x8
  ULONG Characteristics;      // offset: 0x24 ordinal: 0x9
} _IMAGE_SECTION_HEADER;

// 0x8 bytes (sizeof)
typedef struct _LDR_SERVICE_TAG_RECORD {
  struct _LDR_SERVICE_TAG_RECORD *Next; // offset: 0x0 ordinal: 0x0
  ULONG ServiceTag;                     // offset: 0x4 ordinal: 0x1
} _LDR_SERVICE_TAG_RECORD;

// 0x2c bytes (sizeof)
typedef struct _LDR_DDAG_NODE {
  struct _LIST_ENTRY Modules;                     // offset: 0x0 ordinal: 0x0
  struct _LDR_SERVICE_TAG_RECORD *ServiceTagList; // offset: 0x8 ordinal: 0x1
  ULONG LoadCount;                                // offset: 0xc ordinal: 0x2
  ULONG LoadWhileUnloadingCount;                  // offset: 0x10 ordinal: 0x3
  ULONG LowestLink;                               // offset: 0x14 ordinal: 0x4
  struct _LDRP_CSLIST Dependencies;               // offset: 0x18 ordinal: 0x5
  struct _LDRP_CSLIST IncomingDependencies;       // offset: 0x1c ordinal: 0x6
  enum _LDR_DDAG_STATE State;                     // offset: 0x20 ordinal: 0x7
  struct _SINGLE_LIST_ENTRY CondenseLink;         // offset: 0x24 ordinal: 0x8
  ULONG PreorderNumber;                           // offset: 0x28 ordinal: 0x9
} _LDR_DDAG_NODE;

// 0x1c bytes (sizeof)
typedef struct PROCESSOR_PERFSTATE_POLICY {
  ULONG Revision;         // offset: 0x0 ordinal: 0x0
  UCHAR MaxThrottle;      // offset: 0x4 ordinal: 0x1
  UCHAR MinThrottle;      // offset: 0x5 ordinal: 0x2
  UCHAR BusyAdjThreshold; // offset: 0x6 ordinal: 0x3
  union {
    UCHAR Spare;             // offset: 0x7 ordinal: 0x4
    union __anon_3200 Flags; // offset: 0x7 ordinal: 0x5
  };
  ULONG TimeCheck;       // offset: 0x8 ordinal: 0x6
  ULONG IncreaseTime;    // offset: 0xc ordinal: 0x7
  ULONG DecreaseTime;    // offset: 0x10 ordinal: 0x8
  ULONG IncreasePercent; // offset: 0x14 ordinal: 0x9
  ULONG DecreasePercent; // offset: 0x18 ordinal: 0xa
} PROCESSOR_PERFSTATE_POLICY;

// 0x10 bytes (sizeof)
typedef struct _POOL_TRACKER_BIG_PAGES {
  ULONG Va;             // offset: 0x0 ordinal: 0x0
  ULONG Key;            // offset: 0x4 ordinal: 0x1
  ULONG Pattern : 8;    // offset: 0x8 ordinal: 0x2
  ULONG PoolType : 12;  // offset: 0x8 ordinal: 0x3
  ULONG SlushSize : 12; // offset: 0x8 ordinal: 0x4
  ULONG NumberOfBytes;  // offset: 0xc ordinal: 0x5
} _POOL_TRACKER_BIG_PAGES;

// 0x204 bytes (sizeof)
typedef struct _CALL_PERFORMANCE_DATA {
  ULONG SpinLock;                   // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY HashTable[64]; // offset: 0x4 ordinal: 0x1
} _CALL_PERFORMANCE_DATA;

// 0x4 bytes (sizeof)
typedef union _PPM_IDLE_SYNCHRONIZATION_STATE {
  LONG AsLong;        // offset: 0x0 ordinal: 0x0
  LONG RefCount : 24; // offset: 0x0 ordinal: 0x1
  ULONG State : 8;    // offset: 0x0 ordinal: 0x2
} _PPM_IDLE_SYNCHRONIZATION_STATE;

// 0x4 bytes (sizeof)
typedef struct _CM_FAST_LEAF_HINT {
  union {
    UCHAR Characters[4]; // offset: 0x0 ordinal: 0x0
    ULONG FullHint;      // offset: 0x0 ordinal: 0x1
  };
} _CM_FAST_LEAF_HINT;

// 0x44 bytes (sizeof)
typedef struct _PTE_TRACKER {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  struct _MDL *Mdl;             // offset: 0x8 ordinal: 0x1
  ULONG Count;                  // offset: 0xc ordinal: 0x2
  VOID *SystemVa;               // offset: 0x10 ordinal: 0x3
  VOID *StartVa;                // offset: 0x14 ordinal: 0x4
  ULONG Offset;                 // offset: 0x18 ordinal: 0x5
  ULONG Length;                 // offset: 0x1c ordinal: 0x6
  ULONG Page;                   // offset: 0x20 ordinal: 0x7
  ULONG IoMapping : 1;          // offset: 0x24 ordinal: 0x8
  ULONG Matched : 1;            // offset: 0x24 ordinal: 0x9
  ULONG CacheAttribute : 2;     // offset: 0x24 ordinal: 0xa
  ULONG GuardPte : 1;           // offset: 0x24 ordinal: 0xb
  ULONG Spare : 27;             // offset: 0x24 ordinal: 0xc
  VOID *StackTrace[7];          // offset: 0x28 ordinal: 0xd
} _PTE_TRACKER;

// 0x40f0 bytes (sizeof)
typedef struct _VI_DEADLOCK_GLOBALS {
  LONGLONG TimeAcquire;                 // offset: 0x0 ordinal: 0x0
  LONGLONG TimeRelease;                 // offset: 0x8 ordinal: 0x1
  struct _LIST_ENTRY *ResourceDatabase; // offset: 0x10 ordinal: 0x2
  ULONG ResourceDatabaseCount;          // offset: 0x14 ordinal: 0x3
  struct _VF_ADDRESS_RANGE
      ResourceAddressRange[1023];     // offset: 0x18 ordinal: 0x4
  struct _LIST_ENTRY *ThreadDatabase; // offset: 0x2010 ordinal: 0x5
  ULONG ThreadDatabaseCount;          // offset: 0x2014 ordinal: 0x6
  struct _VF_ADDRESS_RANGE
      ThreadAddressRange[1023];              // offset: 0x2018 ordinal: 0x7
  ULONG AllocationFailures;                  // offset: 0x4010 ordinal: 0x8
  ULONG NodesTrimmedBasedOnAge;              // offset: 0x4014 ordinal: 0x9
  ULONG NodesTrimmedBasedOnCount;            // offset: 0x4018 ordinal: 0xa
  ULONG NodesSearched;                       // offset: 0x401c ordinal: 0xb
  ULONG MaxNodesSearched;                    // offset: 0x4020 ordinal: 0xc
  ULONG SequenceNumber;                      // offset: 0x4024 ordinal: 0xd
  ULONG RecursionDepthLimit;                 // offset: 0x4028 ordinal: 0xe
  ULONG SearchedNodesLimit;                  // offset: 0x402c ordinal: 0xf
  ULONG DepthLimitHits;                      // offset: 0x4030 ordinal: 0x10
  ULONG SearchLimitHits;                     // offset: 0x4034 ordinal: 0x11
  ULONG StackLimitHits;                      // offset: 0x4038 ordinal: 0x12
  ULONG ABC_ACB_Skipped;                     // offset: 0x403c ordinal: 0x13
  ULONG OutOfOrderReleases;                  // offset: 0x4040 ordinal: 0x14
  ULONG NodesReleasedOutOfOrder;             // offset: 0x4044 ordinal: 0x15
  ULONG TotalReleases;                       // offset: 0x4048 ordinal: 0x16
  ULONG RootNodesDeleted;                    // offset: 0x404c ordinal: 0x17
  ULONG ForgetHistoryCounter;                // offset: 0x4050 ordinal: 0x18
  VOID *Instigator;                          // offset: 0x4054 ordinal: 0x19
  ULONG NumberOfParticipants;                // offset: 0x4058 ordinal: 0x1a
  struct _VI_DEADLOCK_NODE *Participant[32]; // offset: 0x405c ordinal: 0x1b
  LONG ChildrenCountWatermark;               // offset: 0x40dc ordinal: 0x1c
  enum _KERNEL_STACK_LIMITS StackType;       // offset: 0x40e0 ordinal: 0x1d
  ULONG StackLowLimit;                       // offset: 0x40e4 ordinal: 0x1e
  ULONG StackHighLimit;                      // offset: 0x40e8 ordinal: 0x1f
} _VI_DEADLOCK_GLOBALS;

// 0x8 bytes (sizeof)
typedef struct _LEARNING_MODE_DATA {
  ULONG Settings;              // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;               // offset: 0x4 ordinal: 0x1
  UCHAR PermissiveModeEnabled; // offset: 0x5 ordinal: 0x2
} _LEARNING_MODE_DATA;

// 0x38 bytes (sizeof)
typedef struct _FAST_ERESOURCE_INTERNAL {
  struct _LIST_ENTRY SystemResourcesList; // offset: 0x0 ordinal: 0x0
  VOID *ReservedPointer;                  // offset: 0x8 ordinal: 0x1
  SHORT ActiveCount;                      // offset: 0xc ordinal: 0x2
  USHORT Flag;                            // offset: 0xe ordinal: 0x3
  struct _KWAIT_CHAIN SharedWaiters;      // offset: 0x10 ordinal: 0x4
  struct _KWAIT_CHAIN ExclusiveWaiters;   // offset: 0x14 ordinal: 0x5
  struct _LIST_ENTRY OwnerEntryListHead;  // offset: 0x18 ordinal: 0x6
  ULONG ActiveEntries;                    // offset: 0x20 ordinal: 0x7
  ULONG ContentionCount;                  // offset: 0x24 ordinal: 0x8
  ULONG NumberOfSharedWaiters;            // offset: 0x28 ordinal: 0x9
  ULONG NumberOfExclusiveWaiters;         // offset: 0x2c ordinal: 0xa
  union {
    VOID *Address;               // offset: 0x30 ordinal: 0xb
    ULONG CreatorBackTraceIndex; // offset: 0x30 ordinal: 0xc
  };
  ULONG SpinLock; // offset: 0x34 ordinal: 0xd
} _FAST_ERESOURCE_INTERNAL;

typedef VOID (*__anon_3176)(enum _DUMP_EVENTS, VOID *, ULONG);

typedef LONG (*__anon_3174)(ULONG, ULONG, VOID *, ULONG);

// 0x8 bytes (sizeof)
typedef struct __anon_3171 {
  ULONG Signature; // offset: 0x0 ordinal: 0x0
  ULONG CheckSum;  // offset: 0x4 ordinal: 0x1
} __anon_3171;

// 0x18 bytes (sizeof)
typedef struct _DIAGNOSTIC_BUFFER {
  ULONG Size;                      // offset: 0x0 ordinal: 0x0
  enum _REQUESTER_TYPE CallerType; // offset: 0x4 ordinal: 0x1
  ULONG ProcessImageNameOffset;    // offset: 0x8 ordinal: 0x2
  ULONG ProcessId;                 // offset: 0xc ordinal: 0x3
  ULONG ServiceTag;                // offset: 0x10 ordinal: 0x4
  ULONG DeviceDescriptionOffset;   // offset: 0x8 ordinal: 0x5
  ULONG DevicePathOffset;          // offset: 0xc ordinal: 0x6
  ULONG ReasonOffset;              // offset: 0x14 ordinal: 0x7
} _DIAGNOSTIC_BUFFER;

// 0x4 bytes (sizeof)
typedef union RTLP_HP_LFH_PERF_FLAGS {
  ULONG HotspotDetection : 1;            // offset: 0x0 ordinal: 0x0
  ULONG HotspotFullCommit : 1;           // offset: 0x0 ordinal: 0x1
  ULONG ActiveSubsegment : 1;            // offset: 0x0 ordinal: 0x2
  ULONG SmallerSubsegment : 1;           // offset: 0x0 ordinal: 0x3
  ULONG SingleAffinitySlot : 1;          // offset: 0x0 ordinal: 0x4
  ULONG ApplyLfhDecommitPolicy : 1;      // offset: 0x0 ordinal: 0x5
  ULONG EnableGarbageCollection : 1;     // offset: 0x0 ordinal: 0x6
  ULONG LargePagePreCommit : 1;          // offset: 0x0 ordinal: 0x7
  ULONG OpportunisticLargePreCommit : 1; // offset: 0x0 ordinal: 0x8
  ULONG LfhForcedAffinity : 1;           // offset: 0x0 ordinal: 0x9
  ULONG LfhCachelinePadding : 1;         // offset: 0x0 ordinal: 0xa
  ULONG AllFlags;                        // offset: 0x0 ordinal: 0xb
} RTLP_HP_LFH_PERF_FLAGS;

// 0x4 bytes (sizeof)
typedef union _PPM_COORDINATED_SYNCHRONIZATION {
  LONG AsLong;               // offset: 0x0 ordinal: 0x0
  ULONG EnterProcessor : 12; // offset: 0x0 ordinal: 0x1
  ULONG ExitProcessor : 12;  // offset: 0x0 ordinal: 0x2
  ULONG Transition : 2;      // offset: 0x0 ordinal: 0x3
  ULONG Entered : 1;         // offset: 0x0 ordinal: 0x4
  ULONG EntryPriority : 5;   // offset: 0x0 ordinal: 0x5
} _PPM_COORDINATED_SYNCHRONIZATION;

// 0x20 bytes (sizeof)
typedef struct _VI_TRACK_IRQL {
  VOID *Thread;        // offset: 0x0 ordinal: 0x0
  UCHAR OldIrql;       // offset: 0x4 ordinal: 0x1
  UCHAR NewIrql;       // offset: 0x5 ordinal: 0x2
  USHORT Processor;    // offset: 0x6 ordinal: 0x3
  ULONG TickCount;     // offset: 0x8 ordinal: 0x4
  VOID *StackTrace[5]; // offset: 0xc ordinal: 0x5
} _VI_TRACK_IRQL;

// 0x4 bytes (sizeof)
typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS {
  ULONG SafeInputValidation : 1;  // offset: 0x0 ordinal: 0x0
  ULONG Padding : 1;              // offset: 0x0 ordinal: 0x1
  ULONG CommitLFHSubsegments : 1; // offset: 0x0 ordinal: 0x2
  ULONG AllocateHeapFromEnv : 1;  // offset: 0x0 ordinal: 0x3
} _HEAP_GLOBAL_APPCOMPAT_FLAGS;

// 0x8 bytes (sizeof)
typedef struct _TEB_ACTIVE_FRAME_CONTEXT {
  ULONG Flags;     // offset: 0x0 ordinal: 0x0
  CHAR *FrameName; // offset: 0x4 ordinal: 0x1
} _TEB_ACTIVE_FRAME_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct _MMVAD_FLAGS2 {
  ULONG FileOffset : 24;        // offset: 0x0 ordinal: 0x0
  ULONG Large : 1;              // offset: 0x0 ordinal: 0x1
  ULONG TrimBehind : 1;         // offset: 0x0 ordinal: 0x2
  ULONG Inherit : 1;            // offset: 0x0 ordinal: 0x3
  ULONG NoValidationNeeded : 1; // offset: 0x0 ordinal: 0x4
  ULONG PrivateDemandZero : 1;  // offset: 0x0 ordinal: 0x5
  ULONG Spare : 3;              // offset: 0x0 ordinal: 0x6
} _MMVAD_FLAGS2;

// 0x10 bytes (sizeof)
typedef struct _VI_POOL_ENTRY_INUSE {
  VOID *VirtualAddress; // offset: 0x0 ordinal: 0x0
  VOID *CallingAddress; // offset: 0x4 ordinal: 0x1
  ULONG NumberOfBytes;  // offset: 0x8 ordinal: 0x2
  ULONG Tag;            // offset: 0xc ordinal: 0x3
} _VI_POOL_ENTRY_INUSE;

// 0xc bytes (sizeof)
typedef struct _VI_POOL_PAGE_HEADER {
  struct _SINGLE_LIST_ENTRY *NextPage; // offset: 0x0 ordinal: 0x0
  VOID *VerifierEntry;                 // offset: 0x4 ordinal: 0x1
  ULONG Signature;                     // offset: 0x8 ordinal: 0x2
} _VI_POOL_PAGE_HEADER;

// 0x10 bytes (sizeof)
typedef struct _VI_POOL_ENTRY {
  union {
    struct _VI_POOL_PAGE_HEADER PageHeader; // offset: 0x0 ordinal: 0x0
    struct _VI_POOL_ENTRY_INUSE InUse;      // offset: 0x0 ordinal: 0x1
    struct _SINGLE_LIST_ENTRY *NextFree;    // offset: 0x0 ordinal: 0x2
  };
} _VI_POOL_ENTRY;

// 0x4 bytes (sizeof)
typedef struct _VI_VERIFIER_POOL_HEADER {
  struct _VI_POOL_ENTRY *VerifierPoolEntry; // offset: 0x0 ordinal: 0x0
} _VI_VERIFIER_POOL_HEADER;

// 0x4 bytes (sizeof)
typedef struct __anon_3078 {
  ULONG SnapSharedExportsFailed : 1; // offset: 0x0 ordinal: 0x0
  ULONG Spare : 31;                  // offset: 0x0 ordinal: 0x1
} __anon_3078;

// 0x10 bytes (sizeof)
typedef union __anon_3079 {
  struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
      AllSharedExportThunks; // offset: 0x0 ordinal: 0x0
  struct __anon_3078 Flags;  // offset: 0x0 ordinal: 0x1
} __anon_3079;

// 0x10 bytes (sizeof)
typedef struct _VF_TRACKER {
  ULONG TrackerFlags; // offset: 0x0 ordinal: 0x0
  ULONG TrackerSize;  // offset: 0x4 ordinal: 0x1
  ULONG TrackerIndex; // offset: 0x8 ordinal: 0x2
  ULONG TraceDepth;   // offset: 0xc ordinal: 0x3
} _VF_TRACKER;

// 0xc bytes (sizeof)
typedef struct _IOP_IRP_EXTENSION_STATUS {
  ULONG Flags;      // offset: 0x0 ordinal: 0x0
  ULONG ActivityId; // offset: 0x4 ordinal: 0x1
  ULONG IoTracking; // offset: 0x8 ordinal: 0x2
} _IOP_IRP_EXTENSION_STATUS;

// 0x4 bytes (sizeof)
typedef union _KSTACK_COUNT {
  LONG Value;            // offset: 0x0 ordinal: 0x0
  ULONG State : 3;       // offset: 0x0 ordinal: 0x1
  ULONG StackCount : 29; // offset: 0x0 ordinal: 0x2
} _KSTACK_COUNT;

// 0x90 bytes (sizeof)
typedef struct _MM_DRIVER_VERIFIER_DATA {
  ULONG Level;                               // offset: 0x0 ordinal: 0x0
  ULONG RaiseIrqls;                          // offset: 0x4 ordinal: 0x1
  ULONG AcquireSpinLocks;                    // offset: 0x8 ordinal: 0x2
  ULONG SynchronizeExecutions;               // offset: 0xc ordinal: 0x3
  ULONG AllocationsAttempted;                // offset: 0x10 ordinal: 0x4
  ULONG AllocationsSucceeded;                // offset: 0x14 ordinal: 0x5
  ULONG AllocationsSucceededSpecialPool;     // offset: 0x18 ordinal: 0x6
  ULONG AllocationsWithNoTag;                // offset: 0x1c ordinal: 0x7
  ULONG TrimRequests;                        // offset: 0x20 ordinal: 0x8
  ULONG Trims;                               // offset: 0x24 ordinal: 0x9
  ULONG AllocationsFailed;                   // offset: 0x28 ordinal: 0xa
  ULONG AllocationsFailedDeliberately;       // offset: 0x2c ordinal: 0xb
  ULONG Loads;                               // offset: 0x30 ordinal: 0xc
  ULONG Unloads;                             // offset: 0x34 ordinal: 0xd
  ULONG UnTrackedPool;                       // offset: 0x38 ordinal: 0xe
  ULONG UserTrims;                           // offset: 0x3c ordinal: 0xf
  ULONG CurrentPagedPoolAllocations;         // offset: 0x40 ordinal: 0x10
  ULONG CurrentNonPagedPoolAllocations;      // offset: 0x44 ordinal: 0x11
  ULONG PeakPagedPoolAllocations;            // offset: 0x48 ordinal: 0x12
  ULONG PeakNonPagedPoolAllocations;         // offset: 0x4c ordinal: 0x13
  ULONG PagedBytes;                          // offset: 0x50 ordinal: 0x14
  ULONG NonPagedBytes;                       // offset: 0x54 ordinal: 0x15
  ULONG PeakPagedBytes;                      // offset: 0x58 ordinal: 0x16
  ULONG PeakNonPagedBytes;                   // offset: 0x5c ordinal: 0x17
  ULONG BurstAllocationsFailedDeliberately;  // offset: 0x60 ordinal: 0x18
  ULONG SessionTrims;                        // offset: 0x64 ordinal: 0x19
  ULONG OptionChanges;                       // offset: 0x68 ordinal: 0x1a
  ULONG VerifyMode;                          // offset: 0x6c ordinal: 0x1b
  struct _UNICODE_STRING PreviousBucketName; // offset: 0x70 ordinal: 0x1c
  ULONG ExecutePoolTypes;                    // offset: 0x78 ordinal: 0x1d
  ULONG ExecutePageProtections;              // offset: 0x7c ordinal: 0x1e
  ULONG ExecutePageMappings;                 // offset: 0x80 ordinal: 0x1f
  ULONG ExecuteWriteSections;                // offset: 0x84 ordinal: 0x20
  ULONG SectionAlignmentFailures;            // offset: 0x88 ordinal: 0x21
  ULONG IATInExecutableSection;              // offset: 0x8c ordinal: 0x22
} _MM_DRIVER_VERIFIER_DATA;

// 0x10 bytes (sizeof)
typedef struct _RTL_ATOM_TABLE_REFERENCE {
  struct _LIST_ENTRY LowBoxList; // offset: 0x0 ordinal: 0x0
  ULONG LowBoxID;                // offset: 0x8 ordinal: 0x1
  USHORT ReferenceCount;         // offset: 0xc ordinal: 0x2
  USHORT Flags;                  // offset: 0xe ordinal: 0x3
} _RTL_ATOM_TABLE_REFERENCE;

// 0x1c bytes (sizeof)
typedef struct _RTL_ATOM_TABLE_ENTRY {
  struct _RTL_ATOM_TABLE_ENTRY *HashLink;     // offset: 0x0 ordinal: 0x0
  USHORT HandleIndex;                         // offset: 0x4 ordinal: 0x1
  USHORT Atom;                                // offset: 0x6 ordinal: 0x2
  struct _RTL_ATOM_TABLE_REFERENCE Reference; // offset: 0x8 ordinal: 0x3
  UCHAR NameLength;                           // offset: 0x18 ordinal: 0x4
  WCHAR Name[1];                              // offset: 0x1a ordinal: 0x5
} _RTL_ATOM_TABLE_ENTRY;

// 0x4 bytes (sizeof)
typedef struct __anon_3026 {
  ULONG Type; // offset: 0x0 ordinal: 0x0
} __anon_3026;

// 0x4 bytes (sizeof)
typedef struct __anon_3025 {
  ULONG PercentLevel; // offset: 0x0 ordinal: 0x0
} __anon_3025;

// 0x10 bytes (sizeof)
typedef struct _POP_ACTION_TRIGGER {
  enum POWER_POLICY_DEVICE_TYPE Type; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                        // offset: 0x4 ordinal: 0x1
  struct _POP_TRIGGER_WAIT *Wait;     // offset: 0x8 ordinal: 0x2
  union {
    struct __anon_3025 Battery; // offset: 0xc ordinal: 0x3
    struct __anon_3026 Button;  // offset: 0xc ordinal: 0x4
  };
} _POP_ACTION_TRIGGER;

// 0x20 bytes (sizeof)
typedef struct _POP_TRIGGER_WAIT {
  struct _KEVENT Event;                // offset: 0x0 ordinal: 0x0
  LONG Status;                         // offset: 0x10 ordinal: 0x1
  struct _LIST_ENTRY Link;             // offset: 0x14 ordinal: 0x2
  struct _POP_ACTION_TRIGGER *Trigger; // offset: 0x1c ordinal: 0x3
} _POP_TRIGGER_WAIT;

// 0x4 bytes (sizeof)
typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE {
  UCHAR Version;      // offset: 0x0 ordinal: 0x0
  UCHAR DataCount;    // offset: 0x1 ordinal: 0x1
  UCHAR SemanticType; // offset: 0x2 ordinal: 0x2
  union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
      AccessRights;    // offset: 0x3 ordinal: 0x3
  ULONG AttributeType; // offset: 0x0 ordinal: 0x4
} _PS_TRUSTLET_ATTRIBUTE_TYPE;

// 0x44 bytes (sizeof)
typedef struct _PI_BUS_EXTENSION {
  ULONG Flags;                                // offset: 0x0 ordinal: 0x0
  UCHAR NumberCSNs;                           // offset: 0x4 ordinal: 0x1
  UCHAR *ReadDataPort;                        // offset: 0x8 ordinal: 0x2
  UCHAR DataPortMapped;                       // offset: 0xc ordinal: 0x3
  UCHAR *AddressPort;                         // offset: 0x10 ordinal: 0x4
  UCHAR AddrPortMapped;                       // offset: 0x14 ordinal: 0x5
  UCHAR *CommandPort;                         // offset: 0x18 ordinal: 0x6
  UCHAR CmdPortMapped;                        // offset: 0x1c ordinal: 0x7
  ULONG NextSlotNumber;                       // offset: 0x20 ordinal: 0x8
  struct _SINGLE_LIST_ENTRY DeviceList;       // offset: 0x24 ordinal: 0x9
  struct _SINGLE_LIST_ENTRY CardList;         // offset: 0x28 ordinal: 0xa
  struct _DEVICE_OBJECT *PhysicalBusDevice;   // offset: 0x2c ordinal: 0xb
  struct _DEVICE_OBJECT *FunctionalBusDevice; // offset: 0x30 ordinal: 0xc
  struct _DEVICE_OBJECT *AttachedDevice;      // offset: 0x34 ordinal: 0xd
  ULONG BusNumber;                            // offset: 0x38 ordinal: 0xe
  enum _SYSTEM_POWER_STATE SystemPowerState;  // offset: 0x3c ordinal: 0xf
  enum _DEVICE_POWER_STATE DevicePowerState;  // offset: 0x40 ordinal: 0x10
} _PI_BUS_EXTENSION;

// 0x8 bytes (sizeof)
typedef struct _BUS_EXTENSION_LIST {
  VOID *Next;                             // offset: 0x0 ordinal: 0x0
  struct _PI_BUS_EXTENSION *BusExtension; // offset: 0x4 ordinal: 0x1
} _BUS_EXTENSION_LIST;

// 0x4c bytes (sizeof)
typedef struct _THERMAL_INFORMATION {
  ULONG ThermalStamp;         // offset: 0x0 ordinal: 0x0
  ULONG ThermalConstant1;     // offset: 0x4 ordinal: 0x1
  ULONG ThermalConstant2;     // offset: 0x8 ordinal: 0x2
  ULONG Processors;           // offset: 0xc ordinal: 0x3
  ULONG SamplingPeriod;       // offset: 0x10 ordinal: 0x4
  ULONG CurrentTemperature;   // offset: 0x14 ordinal: 0x5
  ULONG PassiveTripPoint;     // offset: 0x18 ordinal: 0x6
  ULONG CriticalTripPoint;    // offset: 0x1c ordinal: 0x7
  UCHAR ActiveTripPointCount; // offset: 0x20 ordinal: 0x8
  ULONG ActiveTripPoint[10];  // offset: 0x24 ordinal: 0x9
} _THERMAL_INFORMATION;

// 0x18 bytes (sizeof)
typedef struct _THERMAL_POLICY {
  ULONG Version;           // offset: 0x0 ordinal: 0x0
  UCHAR WaitForUpdate;     // offset: 0x4 ordinal: 0x1
  UCHAR Hibernate;         // offset: 0x5 ordinal: 0x2
  UCHAR Critical;          // offset: 0x6 ordinal: 0x3
  UCHAR ThermalStandby;    // offset: 0x7 ordinal: 0x4
  ULONG ActivationReasons; // offset: 0x8 ordinal: 0x5
  ULONG PassiveLimit;      // offset: 0xc ordinal: 0x6
  ULONG ActiveLevel;       // offset: 0x10 ordinal: 0x7
  UCHAR OverThrottled;     // offset: 0x14 ordinal: 0x8
} _THERMAL_POLICY;

// 0x5c bytes (sizeof)
typedef struct _THERMAL_INFORMATION_EX {
  ULONG ThermalStamp;                 // offset: 0x0 ordinal: 0x0
  ULONG ThermalConstant1;             // offset: 0x4 ordinal: 0x1
  ULONG ThermalConstant2;             // offset: 0x8 ordinal: 0x2
  ULONG SamplingPeriod;               // offset: 0xc ordinal: 0x3
  ULONG CurrentTemperature;           // offset: 0x10 ordinal: 0x4
  ULONG PassiveTripPoint;             // offset: 0x14 ordinal: 0x5
  ULONG ThermalStandbyTripPoint;      // offset: 0x18 ordinal: 0x6
  ULONG CriticalTripPoint;            // offset: 0x1c ordinal: 0x7
  UCHAR ActiveTripPointCount;         // offset: 0x20 ordinal: 0x8
  UCHAR PassiveCoolingDevicesPresent; // offset: 0x21 ordinal: 0x9
  ULONG ActiveTripPoint[10];          // offset: 0x24 ordinal: 0xa
  ULONG S4TransitionTripPoint;        // offset: 0x4c ordinal: 0xb
  ULONG MinimumThrottle;              // offset: 0x50 ordinal: 0xc
  ULONG OverThrottleThreshold;        // offset: 0x54 ordinal: 0xd
  ULONG PollingPeriod;                // offset: 0x58 ordinal: 0xe
} _THERMAL_INFORMATION_EX;

// 0x8 bytes (sizeof)
typedef struct BATTERY_REPORTING_SCALE {
  ULONG Granularity; // offset: 0x0 ordinal: 0x0
  ULONG Capacity;    // offset: 0x4 ordinal: 0x1
} BATTERY_REPORTING_SCALE;

// 0x4c bytes (sizeof)
typedef struct SYSTEM_POWER_CAPABILITIES {
  UCHAR PowerButtonPresent;                       // offset: 0x0 ordinal: 0x0
  UCHAR SleepButtonPresent;                       // offset: 0x1 ordinal: 0x1
  UCHAR LidPresent;                               // offset: 0x2 ordinal: 0x2
  UCHAR SystemS1;                                 // offset: 0x3 ordinal: 0x3
  UCHAR SystemS2;                                 // offset: 0x4 ordinal: 0x4
  UCHAR SystemS3;                                 // offset: 0x5 ordinal: 0x5
  UCHAR SystemS4;                                 // offset: 0x6 ordinal: 0x6
  UCHAR SystemS5;                                 // offset: 0x7 ordinal: 0x7
  UCHAR HiberFilePresent;                         // offset: 0x8 ordinal: 0x8
  UCHAR FullWake;                                 // offset: 0x9 ordinal: 0x9
  UCHAR VideoDimPresent;                          // offset: 0xa ordinal: 0xa
  UCHAR ApmPresent;                               // offset: 0xb ordinal: 0xb
  UCHAR UpsPresent;                               // offset: 0xc ordinal: 0xc
  UCHAR ThermalControl;                           // offset: 0xd ordinal: 0xd
  UCHAR ProcessorThrottle;                        // offset: 0xe ordinal: 0xe
  UCHAR ProcessorMinThrottle;                     // offset: 0xf ordinal: 0xf
  UCHAR ProcessorMaxThrottle;                     // offset: 0x10 ordinal: 0x10
  UCHAR FastSystemS4;                             // offset: 0x11 ordinal: 0x11
  UCHAR Hiberboot;                                // offset: 0x12 ordinal: 0x12
  UCHAR WakeAlarmPresent;                         // offset: 0x13 ordinal: 0x13
  UCHAR AoAc;                                     // offset: 0x14 ordinal: 0x14
  UCHAR DiskSpinDown;                             // offset: 0x15 ordinal: 0x15
  UCHAR HiberFileType;                            // offset: 0x16 ordinal: 0x16
  UCHAR AoAcConnectivitySupported;                // offset: 0x17 ordinal: 0x17
  UCHAR spare3[6];                                // offset: 0x18 ordinal: 0x18
  UCHAR SystemBatteriesPresent;                   // offset: 0x1e ordinal: 0x19
  UCHAR BatteriesAreShortTerm;                    // offset: 0x1f ordinal: 0x1a
  struct BATTERY_REPORTING_SCALE BatteryScale[3]; // offset: 0x20 ordinal: 0x1b
  enum _SYSTEM_POWER_STATE AcOnLineWake;          // offset: 0x38 ordinal: 0x1c
  enum _SYSTEM_POWER_STATE SoftLidWake;           // offset: 0x3c ordinal: 0x1d
  enum _SYSTEM_POWER_STATE RtcWake;               // offset: 0x40 ordinal: 0x1e
  enum _SYSTEM_POWER_STATE MinDeviceWakeState;    // offset: 0x44 ordinal: 0x1f
  enum _SYSTEM_POWER_STATE DefaultLowLatencyWake; // offset: 0x48 ordinal: 0x20
} SYSTEM_POWER_CAPABILITIES;

// 0x40 bytes (sizeof)
typedef struct _VF_POOL_TRACE {
  VOID *Address;           // offset: 0x0 ordinal: 0x0
  ULONG Size;              // offset: 0x4 ordinal: 0x1
  struct _ETHREAD *Thread; // offset: 0x8 ordinal: 0x2
  VOID *StackTrace[13];    // offset: 0xc ordinal: 0x3
} _VF_POOL_TRACE;

// 0x14 bytes (sizeof)
typedef struct _RTL_RANGE_LIST {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                 // offset: 0x8 ordinal: 0x1
  ULONG Count;                 // offset: 0xc ordinal: 0x2
  ULONG Stamp;                 // offset: 0x10 ordinal: 0x3
} _RTL_RANGE_LIST;

// 0x8 bytes (sizeof)
typedef struct _VF_AVL_TREE_NODE {
  VOID *p;         // offset: 0x0 ordinal: 0x0
  ULONG RangeSize; // offset: 0x4 ordinal: 0x1
} _VF_AVL_TREE_NODE;

// 0xc bytes (sizeof)
typedef struct _VF_AVL_TREE_NODE_EX {
  struct _VF_AVL_TREE_NODE Base; // offset: 0x0 ordinal: 0x0
  ULONG SessionId;               // offset: 0x8 ordinal: 0x1
} _VF_AVL_TREE_NODE_EX;

// 0x4 bytes (sizeof)
typedef union __anon_2905 {
  ULONG NodeSize;     // offset: 0x0 ordinal: 0x0
  ULONG UseLookaside; // offset: 0x0 ordinal: 0x1
} __anon_2905;

// 0x8 bytes (sizeof)
typedef struct PROCESSOR_IDLESTATE_INFO {
  ULONG TimeCheck;      // offset: 0x0 ordinal: 0x0
  UCHAR DemotePercent;  // offset: 0x4 ordinal: 0x1
  UCHAR PromotePercent; // offset: 0x5 ordinal: 0x2
  UCHAR Spare[2];       // offset: 0x6 ordinal: 0x3
} PROCESSOR_IDLESTATE_INFO;

// 0x20 bytes (sizeof)
typedef struct PROCESSOR_IDLESTATE_POLICY {
  USHORT Revision;                           // offset: 0x0 ordinal: 0x0
  union __anon_2901 Flags;                   // offset: 0x2 ordinal: 0x1
  ULONG PolicyCount;                         // offset: 0x4 ordinal: 0x2
  struct PROCESSOR_IDLESTATE_INFO Policy[3]; // offset: 0x8 ordinal: 0x3
} PROCESSOR_IDLESTATE_POLICY;

// 0x4 bytes (sizeof)
typedef struct _MI_SYSTEM_REGION_ANCHOR {
  ULONG ReferenceCount : 31; // offset: 0x0 ordinal: 0x0
  ULONG BeingDeleted : 1;    // offset: 0x0 ordinal: 0x1
} _MI_SYSTEM_REGION_ANCHOR;

// 0x4 bytes (sizeof)
typedef struct __anon_2893 {
  union {
    struct _MI_SYSTEM_REGION_ANCHOR Anchor; // offset: 0x0 ordinal: 0x0
    ULONG EntireReference;                  // offset: 0x0 ordinal: 0x1
  };
} __anon_2893;

// 0x4 bytes (sizeof)
typedef struct _MI_SYSTEM_REGION_REFERENCE {
  struct __anon_2893 u1; // offset: 0x0 ordinal: 0x0
} _MI_SYSTEM_REGION_REFERENCE;

// 0x4 bytes (sizeof)
typedef union __anon_2887 {
  struct _CONTROL_AREA *ControlArea; // offset: 0x0 ordinal: 0x0
  struct _FILE_OBJECT *FileObject;   // offset: 0x0 ordinal: 0x1
  ULONG RemoteImageFileObject : 1;   // offset: 0x0 ordinal: 0x2
  ULONG RemoteDataFileObject : 1;    // offset: 0x0 ordinal: 0x3
} __anon_2887;

// 0xc bytes (sizeof)
typedef struct _HAL_CHANNEL_MEMORY_RANGES {
  ULONG PageFrameIndex;    // offset: 0x0 ordinal: 0x0
  USHORT MpnId;            // offset: 0x4 ordinal: 0x1
  USHORT Node;             // offset: 0x6 ordinal: 0x2
  USHORT Channel;          // offset: 0x8 ordinal: 0x3
  UCHAR IsPowerManageable; // offset: 0xa ordinal: 0x4
  UCHAR DeepPowerState;    // offset: 0xb ordinal: 0x5
} _HAL_CHANNEL_MEMORY_RANGES;

// 0x8 bytes (sizeof)
typedef struct _HAL_NODE_RANGE {
  ULONG PageFrameIndex; // offset: 0x0 ordinal: 0x0
  ULONG Node;           // offset: 0x4 ordinal: 0x1
} _HAL_NODE_RANGE;

// 0x4 bytes (sizeof)
typedef struct _MI_NODE_NUMBER_ZERO_BASED {
  ULONG ZeroBased; // offset: 0x0 ordinal: 0x0
} _MI_NODE_NUMBER_ZERO_BASED;

// 0x10 bytes (sizeof)
typedef struct _PAE_PAGEINFO {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
  ULONG PageFrameNumber;       // offset: 0x8 ordinal: 0x1
  ULONG EntriesInUse;          // offset: 0xc ordinal: 0x2
} _PAE_PAGEINFO;

// 0x8c bytes (sizeof)
typedef struct _SYSPTES_HEADER {
  struct _LIST_ENTRY ListHead[16]; // offset: 0x0 ordinal: 0x0
  ULONG Count;                     // offset: 0x80 ordinal: 0x1
  ULONG NumberOfEntries;           // offset: 0x84 ordinal: 0x2
  ULONG NumberOfEntriesPeak;       // offset: 0x88 ordinal: 0x3
} _SYSPTES_HEADER;

// 0x20 bytes (sizeof)
typedef struct _MI_IO_CACHE_STATS {
  ULONG UnusedBlocks;                 // offset: 0x0 ordinal: 0x0
  ULONG ActiveCacheMatch;             // offset: 0x4 ordinal: 0x1
  ULONG ActiveCacheOverride;          // offset: 0x8 ordinal: 0x2
  ULONG UnmappedCacheFlush;           // offset: 0xc ordinal: 0x3
  ULONG UnmappedCacheMatch;           // offset: 0x10 ordinal: 0x4
  ULONG UnmappedCacheConflict;        // offset: 0x14 ordinal: 0x5
  ULONG PermanentIoAttributeConflict; // offset: 0x18 ordinal: 0x6
  ULONG PermanentIoNodeConflict;      // offset: 0x1c ordinal: 0x7
} _MI_IO_CACHE_STATS;

// 0x8 bytes (sizeof)
typedef struct _MI_RESAVAIL_FAILURES {
  ULONG Wrap;     // offset: 0x0 ordinal: 0x0
  ULONG NoCharge; // offset: 0x4 ordinal: 0x1
} _MI_RESAVAIL_FAILURES;

// 0x8 bytes (sizeof)
typedef struct _MI_FORCED_COMMITS {
  ULONG Regular; // offset: 0x0 ordinal: 0x0
  ULONG Wrap;    // offset: 0x4 ordinal: 0x1
} _MI_FORCED_COMMITS;

// 0x44 bytes (sizeof)
typedef struct _MI_PROBE_RAISE_TRACKER {
  ULONG UserRangeInKernel;              // offset: 0x0 ordinal: 0x0
  ULONG FaultFailed;                    // offset: 0x4 ordinal: 0x1
  ULONG WriteFaultFailed;               // offset: 0x8 ordinal: 0x2
  ULONG LargePageFailed;                // offset: 0xc ordinal: 0x3
  ULONG UserAccessToKernelPte;          // offset: 0x10 ordinal: 0x4
  ULONG BadPageLocation;                // offset: 0x14 ordinal: 0x5
  ULONG InsufficientCharge;             // offset: 0x18 ordinal: 0x6
  ULONG PageTableCharge;                // offset: 0x1c ordinal: 0x7
  ULONG NoPhysicalMapping;              // offset: 0x20 ordinal: 0x8
  ULONG NoIoReference;                  // offset: 0x24 ordinal: 0x9
  ULONG ProbeFailed;                    // offset: 0x28 ordinal: 0xa
  ULONG PteIsZero;                      // offset: 0x2c ordinal: 0xb
  ULONG StrongCodeWrite;                // offset: 0x30 ordinal: 0xc
  ULONG ReducedCloneCommitChargeFailed; // offset: 0x34 ordinal: 0xd
  ULONG CopyOnWriteAtDispatchNoPages;   // offset: 0x38 ordinal: 0xe
  ULONG NoPageTablesAllowed;            // offset: 0x3c ordinal: 0xf
  ULONG EnclavePageFailed;              // offset: 0x40 ordinal: 0x10
} _MI_PROBE_RAISE_TRACKER;

// 0x10 bytes (sizeof)
typedef struct _MM_SYSTEM_PAGE_COUNTS {
  ULONG SystemCodePage;        // offset: 0x0 ordinal: 0x0
  ULONG SystemDriverPage;      // offset: 0x4 ordinal: 0x1
  LONG TotalSystemCodePages;   // offset: 0x8 ordinal: 0x2
  LONG TotalSystemDriverPages; // offset: 0xc ordinal: 0x3
} _MM_SYSTEM_PAGE_COUNTS;

// 0x40 bytes (sizeof)
typedef struct _MI_IO_PAGE_STATE {
  LONG IoPfnLock;                         // offset: 0x0 ordinal: 0x0
  struct _RTL_AVL_TREE IoPfnRoot[3];      // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY UnusedCachedMaps;    // offset: 0x10 ordinal: 0x2
  ULONG OldestCacheFlushTimeStamp;        // offset: 0x18 ordinal: 0x3
  struct _MI_IO_CACHE_STATS IoCacheStats; // offset: 0x1c ordinal: 0x4
  struct _RTL_AVL_TREE InvariantIoSpace;  // offset: 0x3c ordinal: 0x5
} _MI_IO_PAGE_STATE;

// 0x14 bytes (sizeof)
typedef struct _MI_PAGELIST_STATE {
  LONG ActiveSpinLock;                       // offset: 0x0 ordinal: 0x0
  struct _RTL_AVL_TREE ActiveThreadTree;     // offset: 0x4 ordinal: 0x1
  LONG ActiveZeroSpinLock;                   // offset: 0x8 ordinal: 0x2
  struct _RTL_AVL_TREE ActiveZeroThreadTree; // offset: 0xc ordinal: 0x3
  ULONG NumberOfLargePageListHeads;          // offset: 0x10 ordinal: 0x4
} _MI_PAGELIST_STATE;

// 0x4 bytes (sizeof)
typedef struct _FAULT_INFORMATION_ARM64_FLAGS {
  ULONG WriteNotRead : 1;       // offset: 0x0 ordinal: 0x0
  ULONG InstructionNotData : 1; // offset: 0x0 ordinal: 0x1
  ULONG Privileged : 1;         // offset: 0x0 ordinal: 0x2
  ULONG FaultAddressValid : 1;  // offset: 0x0 ordinal: 0x3
  ULONG Reserved : 28;          // offset: 0x0 ordinal: 0x4
} _FAULT_INFORMATION_ARM64_FLAGS;

// 0x18 bytes (sizeof)
typedef struct _FAULT_INFORMATION_ARM64 {
  VOID *DomainHandle;                          // offset: 0x0 ordinal: 0x0
  VOID *FaultAddress;                          // offset: 0x4 ordinal: 0x1
  struct _DEVICE_OBJECT *PhysicalDeviceObject; // offset: 0x8 ordinal: 0x2
  ULONG InputMappingId;                        // offset: 0xc ordinal: 0x3
  struct _FAULT_INFORMATION_ARM64_FLAGS Flags; // offset: 0x10 ordinal: 0x4
  enum _FAULT_INFORMATION_ARM64_TYPE Type;     // offset: 0x14 ordinal: 0x5
} _FAULT_INFORMATION_ARM64;

// 0x1c bytes (sizeof)
typedef struct _FAULT_INFORMATION {
  enum _FAULT_INFORMATION_ARCH Type;     // offset: 0x0 ordinal: 0x0
  struct _FAULT_INFORMATION_ARM64 Arm64; // offset: 0x4 ordinal: 0x1
} _FAULT_INFORMATION;

typedef VOID (*__anon_2803)(VOID *, struct _FAULT_INFORMATION *);

// 0x8 bytes (sizeof)
typedef struct _DEVICE_FAULT_CONFIGURATION {
  VOID(*FaultHandler)
  (VOID *, struct _FAULT_INFORMATION *); // offset: 0x0 ordinal: 0x0
  VOID *FaultContext;                    // offset: 0x4 ordinal: 0x1
} _DEVICE_FAULT_CONFIGURATION;

// 0x4 bytes (sizeof)
typedef struct __anon_2797 {
  ULONG PasidMaxWidth : 5;           // offset: 0x0 ordinal: 0x0
  ULONG PasidExePerm : 1;            // offset: 0x0 ordinal: 0x1
  ULONG PasidPrivMode : 1;           // offset: 0x0 ordinal: 0x2
  ULONG AtsPageAlignedRequest : 1;   // offset: 0x0 ordinal: 0x3
  ULONG AtsGlobalInvalidate : 1;     // offset: 0x0 ordinal: 0x4
  ULONG AtsInvalidateQueueDepth : 5; // offset: 0x0 ordinal: 0x5
} __anon_2797;

// 0x4 bytes (sizeof)
typedef union __anon_2796 {
  ULONG NumberOfEntries : 10; // offset: 0x0 ordinal: 0x0
  ULONG PageSize : 2;         // offset: 0x0 ordinal: 0x1
  VOID *Va;                   // offset: 0x0 ordinal: 0x2
  ULONG VaLong;               // offset: 0x0 ordinal: 0x3
} __anon_2796;

// 0x4 bytes (sizeof)
typedef struct _KTB_FLUSH_VA {
  union __anon_2796 u1; // offset: 0x0 ordinal: 0x0
} _KTB_FLUSH_VA;

// 0x4 bytes (sizeof)
typedef struct __anon_2794 {
  ULONG PmemErrInfo; // offset: 0x0 ordinal: 0x0
} __anon_2794;

// 0xc bytes (sizeof)
typedef struct __anon_2793 {
  ULONG Address;        // offset: 0x0 ordinal: 0x0
  UCHAR Consumed;       // offset: 0x4 ordinal: 0x1
  USHORT ErrorCode;     // offset: 0x6 ordinal: 0x2
  UCHAR ErrorIpValid;   // offset: 0x8 ordinal: 0x3
  UCHAR RestartIpValid; // offset: 0x9 ordinal: 0x4
  UCHAR ClearPoison;    // offset: 0xa ordinal: 0x5
} __anon_2793;

// 0x38 bytes (sizeof)
typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES {
  ULONG GetTime;                   // offset: 0x0 ordinal: 0x0
  ULONG SetTime;                   // offset: 0x4 ordinal: 0x1
  ULONG GetWakeupTime;             // offset: 0x8 ordinal: 0x2
  ULONG SetWakeupTime;             // offset: 0xc ordinal: 0x3
  ULONG SetVirtualAddressMap;      // offset: 0x10 ordinal: 0x4
  ULONG ConvertPointer;            // offset: 0x14 ordinal: 0x5
  ULONG GetVariable;               // offset: 0x18 ordinal: 0x6
  ULONG GetNextVariableName;       // offset: 0x1c ordinal: 0x7
  ULONG SetVariable;               // offset: 0x20 ordinal: 0x8
  ULONG GetNextHighMonotonicCount; // offset: 0x24 ordinal: 0x9
  ULONG ResetSystem;               // offset: 0x28 ordinal: 0xa
  ULONG UpdateCapsule;             // offset: 0x2c ordinal: 0xb
  ULONG QueryCapsuleCapabilities;  // offset: 0x30 ordinal: 0xc
  ULONG QueryVariableInfo;         // offset: 0x34 ordinal: 0xd
} _VIRTUAL_EFI_RUNTIME_SERVICES;

// 0x4 bytes (sizeof)
typedef struct _INPUT_MAPPING_ELEMENT {
  ULONG InputMappingId; // offset: 0x0 ordinal: 0x0
} _INPUT_MAPPING_ELEMENT;

// 0xc bytes (sizeof)
typedef union _IOMMU_SVM_CAPABILITIES {
  ULONG AtsCapability : 1;   // offset: 0x0 ordinal: 0x0
  ULONG PriCapability : 1;   // offset: 0x0 ordinal: 0x1
  ULONG PasidCapability : 1; // offset: 0x0 ordinal: 0x2
  struct __anon_2797 CapReg; // offset: 0x4 ordinal: 0x3
  ULONG Rsvd : 15;           // offset: 0x8 ordinal: 0x4
  ULONG AsULONG;             // offset: 0x0 ordinal: 0x5
} _IOMMU_SVM_CAPABILITIES;

// 0x8 bytes (sizeof)
typedef struct _HAL_HV_DMA_DOMAIN_INFO {
  ULONG DomainId; // offset: 0x0 ordinal: 0x0
  UCHAR IsStage1; // offset: 0x4 ordinal: 0x1
} _HAL_HV_DMA_DOMAIN_INFO;

typedef LONG (*__anon_2703)(struct _HAL_HV_DMA_DOMAIN_INFO *);

// 0xc bytes (sizeof)
typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES {
  ULONG SvmSupported : 1;     // offset: 0x0 ordinal: 0x0
  ULONG PciExecute : 1;       // offset: 0x0 ordinal: 0x1
  ULONG NoExecute : 1;        // offset: 0x0 ordinal: 0x2
  ULONG Reserved : 28;        // offset: 0x0 ordinal: 0x3
  ULONG OverflowPossible : 1; // offset: 0x0 ordinal: 0x4
  ULONG PasidCount;           // offset: 0x4 ordinal: 0x5
  ULONG IommuIndex;           // offset: 0x8 ordinal: 0x6
} _HAL_HV_SVM_DEVICE_CAPABILITIES;

// 0x18 bytes (sizeof)
typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES {
  ULONG SvmSupported : 1;        // offset: 0x0 ordinal: 0x0
  ULONG GpaAlwaysValid : 1;      // offset: 0x0 ordinal: 0x1
  ULONG MaxPasidSpaceCount;      // offset: 0x4 ordinal: 0x2
  ULONG MaxPasidSpacePasidCount; // offset: 0x8 ordinal: 0x3
  ULONG MaxPrqSize;              // offset: 0xc ordinal: 0x4
  ULONG IommuCount;              // offset: 0x10 ordinal: 0x5
  ULONG MinIommuPasidCount;      // offset: 0x14 ordinal: 0x6
} _HAL_HV_SVM_SYSTEM_CAPABILITIES;

typedef VOID (*__anon_2694)(struct _HAL_HV_SVM_SYSTEM_CAPABILITIES *);

// 0x10 bytes (sizeof)
typedef struct _NETWORK_LOADER_BLOCK {
  UCHAR *DHCPServerACK;              // offset: 0x0 ordinal: 0x0
  ULONG DHCPServerACKLength;         // offset: 0x4 ordinal: 0x1
  UCHAR *BootServerReplyPacket;      // offset: 0x8 ordinal: 0x2
  ULONG BootServerReplyPacketLength; // offset: 0xc ordinal: 0x3
} _NETWORK_LOADER_BLOCK;

// 0x4 bytes (sizeof)
typedef struct _DEVICE_FLAGS {
  ULONG Failed : 1;     // offset: 0x0 ordinal: 0x0
  ULONG ReadOnly : 1;   // offset: 0x0 ordinal: 0x1
  ULONG Removable : 1;  // offset: 0x0 ordinal: 0x2
  ULONG ConsoleIn : 1;  // offset: 0x0 ordinal: 0x3
  ULONG ConsoleOut : 1; // offset: 0x0 ordinal: 0x4
  ULONG Input : 1;      // offset: 0x0 ordinal: 0x5
  ULONG Output : 1;     // offset: 0x0 ordinal: 0x6
} _DEVICE_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _PCAT_FIRMWARE_INFORMATION {
  ULONG PlaceHolder; // offset: 0x0 ordinal: 0x0
} _PCAT_FIRMWARE_INFORMATION;

// 0x24 bytes (sizeof)
typedef struct _EFI_FIRMWARE_INFORMATION {
  ULONG FirmwareVersion; // offset: 0x0 ordinal: 0x0
  struct _VIRTUAL_EFI_RUNTIME_SERVICES
      *VirtualEfiRuntimeServices;          // offset: 0x4 ordinal: 0x1
  LONG SetVirtualAddressMapStatus;         // offset: 0x8 ordinal: 0x2
  ULONG MissedMappingsCount;               // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY FirmwareResourceList; // offset: 0x10 ordinal: 0x4
  VOID *EfiMemoryMap;                      // offset: 0x18 ordinal: 0x5
  ULONG EfiMemoryMapSize;                  // offset: 0x1c ordinal: 0x6
  ULONG EfiMemoryMapDescriptorSize;        // offset: 0x20 ordinal: 0x7
} _EFI_FIRMWARE_INFORMATION;

// 0x24 bytes (sizeof)
typedef union __anon_2677 {
  struct _EFI_FIRMWARE_INFORMATION EfiInformation;   // offset: 0x0 ordinal: 0x0
  struct _PCAT_FIRMWARE_INFORMATION PcatInformation; // offset: 0x0 ordinal: 0x1
} __anon_2677;

// 0x14 bytes (sizeof)
typedef struct _LOADER_HIVE_RECOVERY_INFO {
  ULONG Recovered : 1;          // offset: 0x0 ordinal: 0x0
  ULONG LegacyRecovery : 1;     // offset: 0x0 ordinal: 0x1
  ULONG SoftRebootConflict : 1; // offset: 0x0 ordinal: 0x2
  ULONG MostRecentLog : 3;      // offset: 0x0 ordinal: 0x3
  ULONG Spare : 27;             // offset: 0x4 ordinal: 0x4
  ULONG LogNextSequence;        // offset: 0x8 ordinal: 0x5
  ULONG LogMinimumSequence;     // offset: 0xc ordinal: 0x6
  ULONG LogCurrentOffset;       // offset: 0x10 ordinal: 0x7
} _LOADER_HIVE_RECOVERY_INFO;

// 0x14 bytes (sizeof)
typedef struct _LOADER_BUGCHECK_PARAMETERS {
  ULONG BugcheckCode;       // offset: 0x0 ordinal: 0x0
  ULONG BugcheckParameter1; // offset: 0x4 ordinal: 0x1
  ULONG BugcheckParameter2; // offset: 0x8 ordinal: 0x2
  ULONG BugcheckParameter3; // offset: 0xc ordinal: 0x3
  ULONG BugcheckParameter4; // offset: 0x10 ordinal: 0x4
} _LOADER_BUGCHECK_PARAMETERS;

// 0x10 bytes (sizeof)
typedef struct _PROFILE_PARAMETER_BLOCK {
  USHORT Status;       // offset: 0x0 ordinal: 0x0
  USHORT Reserved;     // offset: 0x2 ordinal: 0x1
  USHORT DockingState; // offset: 0x4 ordinal: 0x2
  USHORT Capabilities; // offset: 0x6 ordinal: 0x3
  ULONG DockID;        // offset: 0x8 ordinal: 0x4
  ULONG SerialNumber;  // offset: 0xc ordinal: 0x5
} _PROFILE_PARAMETER_BLOCK;

// 0x24 bytes (sizeof)
typedef struct _CONFIGURATION_COMPONENT {
  enum _CONFIGURATION_CLASS Class; // offset: 0x0 ordinal: 0x0
  enum _CONFIGURATION_TYPE Type;   // offset: 0x4 ordinal: 0x1
  struct _DEVICE_FLAGS Flags;      // offset: 0x8 ordinal: 0x2
  USHORT Version;                  // offset: 0xc ordinal: 0x3
  USHORT Revision;                 // offset: 0xe ordinal: 0x4
  ULONG Key;                       // offset: 0x10 ordinal: 0x5
  union {
    ULONG AffinityMask; // offset: 0x14 ordinal: 0x6
    USHORT Group;       // offset: 0x14 ordinal: 0x7
  };
  USHORT GroupIndex;             // offset: 0x16 ordinal: 0x8
  ULONG ConfigurationDataLength; // offset: 0x18 ordinal: 0x9
  ULONG IdentifierLength;        // offset: 0x1c ordinal: 0xa
  CHAR *Identifier;              // offset: 0x20 ordinal: 0xb
} _CONFIGURATION_COMPONENT;

// 0x34 bytes (sizeof)
typedef struct _CONFIGURATION_COMPONENT_DATA {
  struct _CONFIGURATION_COMPONENT_DATA *Parent;   // offset: 0x0 ordinal: 0x0
  struct _CONFIGURATION_COMPONENT_DATA *Child;    // offset: 0x4 ordinal: 0x1
  struct _CONFIGURATION_COMPONENT_DATA *Sibling;  // offset: 0x8 ordinal: 0x2
  struct _CONFIGURATION_COMPONENT ComponentEntry; // offset: 0xc ordinal: 0x3
  VOID *ConfigurationData;                        // offset: 0x30 ordinal: 0x4
} _CONFIGURATION_COMPONENT_DATA;

// 0x20 bytes (sizeof)
typedef struct _SUPPORTED_RANGE {
  struct _SUPPORTED_RANGE *Next; // offset: 0x0 ordinal: 0x0
  ULONG SystemAddressSpace;      // offset: 0x4 ordinal: 0x1
  LONGLONG SystemBase;           // offset: 0x8 ordinal: 0x2
  LONGLONG Base;                 // offset: 0x10 ordinal: 0x3
  LONGLONG Limit;                // offset: 0x18 ordinal: 0x4
} _SUPPORTED_RANGE;

typedef LONG (*__anon_2735)(ULONG, USHORT, USHORT, ULONG, ULONG);

typedef LONG (*__anon_2730)(struct _DEVICE_OBJECT *, ULONG, UCHAR,
                            struct _DEVICE_FAULT_CONFIGURATION *);

typedef LONG (*__anon_2728)(struct _IOMMU_DMA_DOMAIN *, ULONG, struct _MDL *);

typedef LONG (*__anon_2724)(struct _IOMMU_DMA_DOMAIN *, UCHAR, ULONG, VOID *);

typedef LONG (*__anon_2723)(struct _IOMMU_DMA_DOMAIN *, struct _DEVICE_OBJECT *,
                            ULONG);

typedef LONG (*__anon_2722)(struct _IOMMU_DMA_DOMAIN *, struct _DEVICE_OBJECT *,
                            ULONG, ULONG);

typedef LONG (*__anon_2718)(ULONG, VOID *, ULONG);

typedef VOID *(*__anon_2717)(ULONG);

typedef VOID (*__anon_2716)(VOID *, ULONG, struct _KTB_FLUSH_VA *);

typedef LONG (*__anon_2715)(VOID *, ULONG);

typedef LONG (*__anon_2713)(ULONG, ULONG, VOID **);

typedef VOID (*__anon_2711)(ULONG, VOID *, ULONG);

typedef LONG (*__anon_2701)(ULONG, UCHAR);

typedef LONG (*__anon_2698)(ULONG, ULONG, ULONG, ULONG);

typedef VOID (*__anon_2697)(ULONG, ULONG, ULONG, struct _KTB_FLUSH_VA *);

typedef LONG (*__anon_2695)(ULONG, struct _HAL_HV_SVM_DEVICE_CAPABILITIES *);

typedef LONG (*__anon_2692)(UCHAR, ULONG, ULONG, ULONG, ULONG, ULONG, ULONG,
                            VOID *);

typedef VOID (*__anon_2679)(ULONG, ULONG);

// 0x4 bytes (sizeof)
typedef struct _ARM_LOADER_BLOCK {
  ULONG PlaceHolder; // offset: 0x0 ordinal: 0x0
} _ARM_LOADER_BLOCK;

// 0xc bytes (sizeof)
typedef struct _I386_LOADER_BLOCK {
  VOID *CommonDataArea; // offset: 0x0 ordinal: 0x0
  ULONG MachineType;    // offset: 0x4 ordinal: 0x1
  ULONG VirtualBias;    // offset: 0x8 ordinal: 0x2
} _I386_LOADER_BLOCK;

// 0xc bytes (sizeof)
typedef union __anon_2593 {
  struct _I386_LOADER_BLOCK I386; // offset: 0x0 ordinal: 0x0
  struct _ARM_LOADER_BLOCK Arm;   // offset: 0x0 ordinal: 0x1
} __anon_2593;

// 0xc bytes (sizeof)
typedef struct DEBUG_DEVICE_ADDRESS {
  UCHAR Type;  // offset: 0x0 ordinal: 0x0
  UCHAR Valid; // offset: 0x1 ordinal: 0x1
  union {
    UCHAR Reserved[2]; // offset: 0x2 ordinal: 0x2
    UCHAR BitWidth;    // offset: 0x2 ordinal: 0x3
  };
  UCHAR AccessSize;         // offset: 0x3 ordinal: 0x4
  UCHAR *TranslatedAddress; // offset: 0x4 ordinal: 0x5
  ULONG Length;             // offset: 0x8 ordinal: 0x6
} DEBUG_DEVICE_ADDRESS;

typedef ULONG (*__anon_2666)(struct _BUS_HANDLER *, struct _BUS_HANDLER *,
                             ULONG, VOID *, ULONG, ULONG);

// 0xa0 bytes (sizeof)
typedef struct _SUPPORTED_RANGES {
  USHORT Version;                         // offset: 0x0 ordinal: 0x0
  UCHAR Sorted;                           // offset: 0x2 ordinal: 0x1
  UCHAR Reserved;                         // offset: 0x3 ordinal: 0x2
  ULONG NoIO;                             // offset: 0x4 ordinal: 0x3
  struct _SUPPORTED_RANGE IO;             // offset: 0x8 ordinal: 0x4
  ULONG NoMemory;                         // offset: 0x28 ordinal: 0x5
  struct _SUPPORTED_RANGE Memory;         // offset: 0x30 ordinal: 0x6
  ULONG NoPrefetchMemory;                 // offset: 0x50 ordinal: 0x7
  struct _SUPPORTED_RANGE PrefetchMemory; // offset: 0x58 ordinal: 0x8
  ULONG NoDma;                            // offset: 0x78 ordinal: 0x9
  struct _SUPPORTED_RANGE Dma;            // offset: 0x80 ordinal: 0xa
} _SUPPORTED_RANGES;

// 0x28 bytes (sizeof)
typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK {
  ULONG FirmwareTypeUefi : 1;                  // offset: 0x0 ordinal: 0x0
  ULONG EfiRuntimeUseIum : 1;                  // offset: 0x0 ordinal: 0x1
  ULONG EfiRuntimePageProtectionSupported : 1; // offset: 0x0 ordinal: 0x2
  ULONG Reserved : 29;                         // offset: 0x0 ordinal: 0x3
  union __anon_2677 u;                         // offset: 0x4 ordinal: 0x4
} _FIRMWARE_INFORMATION_LOADER_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _DEBUG_TRANSPORT_DATA {
  ULONG HwContextSize;    // offset: 0x0 ordinal: 0x0
  UCHAR UseSerialFraming; // offset: 0x4 ordinal: 0x1
  UCHAR ValidUSBCoreId;   // offset: 0x5 ordinal: 0x2
  UCHAR USBCoreId;        // offset: 0x6 ordinal: 0x3
} _DEBUG_TRANSPORT_DATA;

typedef VOID (*__anon_2573)(ULONG, LONG *);

// 0x1c bytes (sizeof)
typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION {
  USHORT Version;                            // offset: 0x0 ordinal: 0x0
  USHORT Size;                               // offset: 0x2 ordinal: 0x1
  union _HAL_UNMASKED_INTERRUPT_FLAGS Flags; // offset: 0x4 ordinal: 0x2
  enum _KINTERRUPT_MODE Mode;                // offset: 0x8 ordinal: 0x3
  enum _KINTERRUPT_POLARITY Polarity;        // offset: 0xc ordinal: 0x4
  ULONG Gsiv;                                // offset: 0x10 ordinal: 0x5
  USHORT PinNumber;                          // offset: 0x14 ordinal: 0x6
  VOID *DeviceHandle;                        // offset: 0x18 ordinal: 0x7
} _HAL_UNMASKED_INTERRUPT_INFORMATION;

typedef UCHAR (*__anon_2569)(VOID *,
                             struct _HAL_UNMASKED_INTERRUPT_INFORMATION *);

typedef LONG (*__anon_2495)(
    UCHAR (*)(VOID *, struct _HAL_UNMASKED_INTERRUPT_INFORMATION *), VOID *,
    struct _HAL_UNMASKED_INTERRUPT_INFORMATION *);

// 0xc bytes (sizeof)
typedef struct _PCI_BUSMASTER_DESCRIPTOR {
  enum _PCI_BUSMASTER_RID_TYPE Type; // offset: 0x0 ordinal: 0x0
  ULONG Segment;                     // offset: 0x4 ordinal: 0x1
  union {
    struct __anon_2632 DeviceRid;       // offset: 0x8 ordinal: 0x2
    struct __anon_2632 BridgeRid;       // offset: 0x8 ordinal: 0x3
    struct __anon_2633 MultipleBridges; // offset: 0x8 ordinal: 0x4
  };
} _PCI_BUSMASTER_DESCRIPTOR;

// 0x8 bytes (sizeof)
typedef struct _HAL_LOG_REGISTER_CONTEXT {
  VOID (*LogRoutine)(ULONG, VOID *, ULONG); // offset: 0x0 ordinal: 0x0
  ULONG Flag;                               // offset: 0x4 ordinal: 0x1
} _HAL_LOG_REGISTER_CONTEXT;

typedef VOID (*__anon_2478)(struct _HAL_LOG_REGISTER_CONTEXT *);

typedef LONG (*__anon_2509)(ULONG, struct _DEVICE_OBJECT *);

typedef VOID (*__anon_2498)(struct _MDL *, ULONG, ULONG, ULONG, ULONG, UCHAR);

typedef LONG (*__anon_2492)(ULONG, VOID *, LONG (*)(VOID *));

typedef LONG (*__anon_2489)(ULONG, enum _KPROFILE_SOURCE *, ULONG,
                            struct _HAL_PMC_COUNTERS **);

typedef UCHAR (*__anon_2482)(ULONG, ULONG);

typedef LONG (*__anon_2481)(ULONG, ULONG);

typedef ULONG (*__anon_2479)(ULONG);

typedef LONG (*__anon_2477)(ULONG);

typedef VOID (*__anon_2465)(ULONG);

typedef LONG (*__anon_2464)(ULONG, VOID *);

typedef ULONG (*__anon_2457)(ULONG, ULONG, VOID *, ULONG, ULONG);

typedef UCHAR (*__anon_2455)(ULONG);

typedef LONG (*__anon_2451)(struct _ADAPTER_OBJECT *, ULONG, ULONG,
                            struct _MAP_REGISTER_ENTRY *);

typedef LONG (*__anon_2444)(enum _INTERFACE_TYPE, enum _BUS_DATA_TYPE, ULONG,
                            enum _INTERFACE_TYPE, ULONG, ULONG,
                            LONG (*)(struct _BUS_HANDLER *),
                            struct _BUS_HANDLER **);

typedef struct _BUS_HANDLER *(*__anon_2443)(enum _BUS_DATA_TYPE, ULONG);

typedef struct _BUS_HANDLER *(*__anon_2442)(enum _INTERFACE_TYPE, ULONG);

// 0xc bytes (sizeof)
typedef struct POWER_ACTION_POLICY {
  enum POWER_ACTION Action; // offset: 0x0 ordinal: 0x0
  ULONG Flags;              // offset: 0x4 ordinal: 0x1
  ULONG EventCode;          // offset: 0x8 ordinal: 0x2
} POWER_ACTION_POLICY;

// 0x18 bytes (sizeof)
typedef struct SYSTEM_POWER_LEVEL {
  UCHAR Enable;                            // offset: 0x0 ordinal: 0x0
  UCHAR Spare[3];                          // offset: 0x1 ordinal: 0x1
  ULONG BatteryLevel;                      // offset: 0x4 ordinal: 0x2
  struct POWER_ACTION_POLICY PowerPolicy;  // offset: 0x8 ordinal: 0x3
  enum _SYSTEM_POWER_STATE MinSystemState; // offset: 0x14 ordinal: 0x4
} SYSTEM_POWER_LEVEL;

// 0x14 bytes (sizeof)
typedef struct _MEMORY_ALLOCATION_DESCRIPTOR {
  struct _LIST_ENTRY ListEntry;    // offset: 0x0 ordinal: 0x0
  enum _TYPE_OF_MEMORY MemoryType; // offset: 0x8 ordinal: 0x1
  ULONG BasePage;                  // offset: 0xc ordinal: 0x2
  ULONG PageCount;                 // offset: 0x10 ordinal: 0x3
} _MEMORY_ALLOCATION_DESCRIPTOR;

// 0x18 bytes (sizeof)
typedef struct _VF_SUSPECT_DRIVER_ENTRY {
  struct _LIST_ENTRY Links;        // offset: 0x0 ordinal: 0x0
  ULONG Loads;                     // offset: 0x8 ordinal: 0x1
  ULONG Unloads;                   // offset: 0xc ordinal: 0x2
  struct _UNICODE_STRING BaseName; // offset: 0x10 ordinal: 0x3
} _VF_SUSPECT_DRIVER_ENTRY;

// 0x4 bytes (sizeof)
typedef struct __anon_2343 {
  ULONG MissedEtwRegistration : 1; // offset: 0x0 ordinal: 0x0
  ULONG IsBootDriver : 1;          // offset: 0x0 ordinal: 0x1
  ULONG Spare : 30;                // offset: 0x0 ordinal: 0x2
} __anon_2343;

// 0x4 bytes (sizeof)
typedef union __anon_2344 {
  struct __anon_2343 Flags; // offset: 0x0 ordinal: 0x0
  ULONG Whole;              // offset: 0x0 ordinal: 0x1
} __anon_2344;

// 0x4 bytes (sizeof)
typedef struct _HEAP_STOP_ON_TAG {
  union {
    ULONG HeapAndTagIndex; // offset: 0x0 ordinal: 0x0
    USHORT TagIndex;       // offset: 0x0 ordinal: 0x1
  };
  USHORT HeapIndex; // offset: 0x2 ordinal: 0x2
} _HEAP_STOP_ON_TAG;

// 0x18 bytes (sizeof)
typedef struct _HEAP_STOP_ON_VALUES {
  ULONG AllocAddress;                  // offset: 0x0 ordinal: 0x0
  struct _HEAP_STOP_ON_TAG AllocTag;   // offset: 0x4 ordinal: 0x1
  ULONG ReAllocAddress;                // offset: 0x8 ordinal: 0x2
  struct _HEAP_STOP_ON_TAG ReAllocTag; // offset: 0xc ordinal: 0x3
  ULONG FreeAddress;                   // offset: 0x10 ordinal: 0x4
  struct _HEAP_STOP_ON_TAG FreeTag;    // offset: 0x14 ordinal: 0x5
} _HEAP_STOP_ON_VALUES;

// 0xc bytes (sizeof)
typedef struct _VF_BTS_RECORD {
  VOID *JumpedFrom;    // offset: 0x0 ordinal: 0x0
  VOID *JumpedTo;      // offset: 0x4 ordinal: 0x1
  ULONG Unused1 : 3;   // offset: 0x8 ordinal: 0x2
  ULONG Predicted : 4; // offset: 0x8 ordinal: 0x3
  ULONG Unused2 : 25;  // offset: 0x8 ordinal: 0x4
} _VF_BTS_RECORD;

// 0xc bytes (sizeof)
typedef struct _OBJECT_REF_STACK_INFO {
  ULONG Sequence;   // offset: 0x0 ordinal: 0x0
  USHORT Index;     // offset: 0x4 ordinal: 0x1
  USHORT NumTraces; // offset: 0x6 ordinal: 0x2
  ULONG Tag;        // offset: 0x8 ordinal: 0x3
} _OBJECT_REF_STACK_INFO;

// 0x28 bytes (sizeof)
typedef struct _PO_NOTIFY_ORDER_LEVEL {
  ULONG DeviceCount;             // offset: 0x0 ordinal: 0x0
  ULONG ActiveCount;             // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY WaitSleep;  // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY ReadySleep; // offset: 0x10 ordinal: 0x3
  struct _LIST_ENTRY ReadyS0;    // offset: 0x18 ordinal: 0x4
  struct _LIST_ENTRY WaitS0;     // offset: 0x20 ordinal: 0x5
} _PO_NOTIFY_ORDER_LEVEL;

// 0xd4 bytes (sizeof)
typedef struct _PO_DEVICE_NOTIFY_ORDER {
  UCHAR Locked;                                // offset: 0x0 ordinal: 0x0
  struct _DEVICE_OBJECT **WarmEjectPdoPointer; // offset: 0x4 ordinal: 0x1
  struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5]; // offset: 0x8 ordinal: 0x2
  ULONG Flags;                                 // offset: 0xd0 ordinal: 0x3
} _PO_DEVICE_NOTIFY_ORDER;

// 0x108 bytes (sizeof)
typedef struct _POP_DEVICE_SYS_STATE {
  UCHAR IrpMinor;                        // offset: 0x0 ordinal: 0x0
  enum _SYSTEM_POWER_STATE SystemState;  // offset: 0x4 ordinal: 0x1
  ULONG SpinLock;                        // offset: 0x8 ordinal: 0x2
  struct _KTHREAD *Thread;               // offset: 0xc ordinal: 0x3
  struct _KEVENT *AbortEvent;            // offset: 0x10 ordinal: 0x4
  struct _KSEMAPHORE *ReadySemaphore;    // offset: 0x14 ordinal: 0x5
  struct _KSEMAPHORE *FinishedSemaphore; // offset: 0x18 ordinal: 0x6
  struct _PO_DEVICE_NOTIFY_ORDER Order;  // offset: 0x1c ordinal: 0x7
  struct _LIST_ENTRY Pending;            // offset: 0xf0 ordinal: 0x8
  LONG Status;                           // offset: 0xf8 ordinal: 0x9
  struct _DEVICE_OBJECT *FailedDevice;   // offset: 0xfc ordinal: 0xa
  UCHAR Waking;                          // offset: 0x100 ordinal: 0xb
  UCHAR Cancelled;                       // offset: 0x101 ordinal: 0xc
  UCHAR IgnoreErrors;                    // offset: 0x102 ordinal: 0xd
  UCHAR IgnoreNotImplemented;            // offset: 0x103 ordinal: 0xe
  UCHAR TimeRefreshLockAcquired;         // offset: 0x104 ordinal: 0xf
} _POP_DEVICE_SYS_STATE;

// 0x19c bytes (sizeof)
typedef struct _KPRIQUEUE {
  struct _DISPATCHER_HEADER Header;     // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY EntryListHead[32]; // offset: 0x10 ordinal: 0x1
  LONG CurrentCount[32];                // offset: 0x110 ordinal: 0x2
  ULONG MaximumCount;                   // offset: 0x190 ordinal: 0x3
  struct _LIST_ENTRY ThreadListHead;    // offset: 0x194 ordinal: 0x4
} _KPRIQUEUE;

// 0x19c bytes (sizeof)
typedef struct _TRIAGE_EX_WORK_QUEUE {
  struct _KPRIQUEUE WorkPriQueue; // offset: 0x0 ordinal: 0x0
} _TRIAGE_EX_WORK_QUEUE;

// 0x14 bytes (sizeof)
typedef struct _TRIAGE_9F_POWER {
  USHORT Signature;                                 // offset: 0x0 ordinal: 0x0
  USHORT Revision;                                  // offset: 0x2 ordinal: 0x1
  struct _LIST_ENTRY *IrpList;                      // offset: 0x4 ordinal: 0x2
  struct _LIST_ENTRY *ThreadList;                   // offset: 0x8 ordinal: 0x3
  struct _TRIAGE_EX_WORK_QUEUE *DelayedWorkQueue;   // offset: 0xc ordinal: 0x4
  struct _TRIAGE_EX_WORK_QUEUE *DelayedIoWorkQueue; // offset: 0x10 ordinal: 0x5
} _TRIAGE_9F_POWER;

// 0x10 bytes (sizeof)
typedef struct _TRIAGE_9F_PNP {
  USHORT Signature; // offset: 0x0 ordinal: 0x0
  USHORT Revision;  // offset: 0x2 ordinal: 0x1
  struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
      *CompletionQueue;                             // offset: 0x4 ordinal: 0x2
  struct _TRIAGE_EX_WORK_QUEUE *DelayedWorkQueue;   // offset: 0x8 ordinal: 0x3
  struct _TRIAGE_EX_WORK_QUEUE *DelayedIoWorkQueue; // offset: 0xc ordinal: 0x4
} _TRIAGE_9F_PNP;

// 0x14 bytes (sizeof)
typedef struct _LOCK_HEADER {
  struct _RTL_AVL_TREE LockTree;            // offset: 0x0 ordinal: 0x0
  struct _RTL_AVL_TREE LockMdlSwitchedTree; // offset: 0x4 ordinal: 0x1
  ULONG Count;                              // offset: 0x8 ordinal: 0x2
  ULONG Lock;                               // offset: 0xc ordinal: 0x3
  ULONG Valid;                              // offset: 0x10 ordinal: 0x4
} _LOCK_HEADER;

// 0x4 bytes (sizeof)
typedef union __anon_2313 {
  ULONG Active : 1;             // offset: 0x0 ordinal: 0x0
  ULONG OnlyTryAcquireUsed : 1; // offset: 0x0 ordinal: 0x1
  ULONG ReleasedOutOfOrder : 1; // offset: 0x0 ordinal: 0x2
  ULONG SequenceNumber : 29;    // offset: 0x0 ordinal: 0x3
  ULONG Whole;                  // offset: 0x0 ordinal: 0x4
} __anon_2313;

// 0x20 bytes (sizeof)
typedef struct _VI_DEADLOCK_THREAD {
  struct _KTHREAD *Thread;                    // offset: 0x0 ordinal: 0x0
  struct _VI_DEADLOCK_NODE *CurrentSpinNode;  // offset: 0x4 ordinal: 0x1
  struct _VI_DEADLOCK_NODE *CurrentOtherNode; // offset: 0x8 ordinal: 0x2
  union {
    struct _LIST_ENTRY ListEntry;     // offset: 0xc ordinal: 0x3
    struct _LIST_ENTRY FreeListEntry; // offset: 0xc ordinal: 0x4
  };
  ULONG NodeCount;            // offset: 0x14 ordinal: 0x5
  ULONG PagingCount;          // offset: 0x18 ordinal: 0x6
  UCHAR ThreadUsesEresources; // offset: 0x1c ordinal: 0x7
} _VI_DEADLOCK_THREAD;

// 0x80 bytes (sizeof)
typedef struct _VI_DEADLOCK_RESOURCE {
  enum _VI_DEADLOCK_RESOURCE_TYPE Type;    // offset: 0x0 ordinal: 0x0
  ULONG NodeCount : 16;                    // offset: 0x4 ordinal: 0x1
  ULONG RecursionCount : 16;               // offset: 0x4 ordinal: 0x2
  VOID *ResourceAddress;                   // offset: 0x8 ordinal: 0x3
  struct _VI_DEADLOCK_THREAD *ThreadOwner; // offset: 0xc ordinal: 0x4
  struct _LIST_ENTRY ResourceList;         // offset: 0x10 ordinal: 0x5
  union {
    struct _LIST_ENTRY HashChainList; // offset: 0x18 ordinal: 0x6
    struct _LIST_ENTRY FreeListEntry; // offset: 0x18 ordinal: 0x7
  };
  VOID *StackTrace[8];       // offset: 0x20 ordinal: 0x8
  VOID *LastAcquireTrace[8]; // offset: 0x40 ordinal: 0x9
  VOID *LastReleaseTrace[8]; // offset: 0x60 ordinal: 0xa
} _VI_DEADLOCK_RESOURCE;

// 0x6c bytes (sizeof)
typedef struct _VI_DEADLOCK_NODE {
  struct _VI_DEADLOCK_NODE *Parent; // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ChildrenList;  // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY SiblingsList;  // offset: 0xc ordinal: 0x2
  union {
    struct _LIST_ENTRY ResourceList;  // offset: 0x14 ordinal: 0x3
    struct _LIST_ENTRY FreeListEntry; // offset: 0x14 ordinal: 0x4
  };
  struct _VI_DEADLOCK_RESOURCE *Root;      // offset: 0x1c ordinal: 0x5
  struct _VI_DEADLOCK_THREAD *ThreadEntry; // offset: 0x20 ordinal: 0x6
  union __anon_2313 u1;                    // offset: 0x24 ordinal: 0x7
  LONG ChildrenCount;                      // offset: 0x28 ordinal: 0x8
  VOID *StackTrace[8];                     // offset: 0x2c ordinal: 0x9
  VOID *ParentStackTrace[8];               // offset: 0x4c ordinal: 0xa
} _VI_DEADLOCK_NODE;

// 0xc bytes (sizeof)
typedef struct _KSYSTEM_TIME {
  ULONG LowPart;  // offset: 0x0 ordinal: 0x0
  LONG High1Time; // offset: 0x4 ordinal: 0x1
  LONG High2Time; // offset: 0x8 ordinal: 0x2
} _KSYSTEM_TIME;

// 0x10 bytes (sizeof)
typedef struct _WNF_STATE_DATA {
  struct _WNF_NODE_HEADER Header; // offset: 0x0 ordinal: 0x0
  ULONG AllocatedSize;            // offset: 0x4 ordinal: 0x1
  ULONG DataSize;                 // offset: 0x8 ordinal: 0x2
  ULONG ChangeStamp;              // offset: 0xc ordinal: 0x3
} _WNF_STATE_DATA;

typedef ULONG (*__anon_2278)(VOID *, ULONG);

// 0x4 bytes (sizeof)
typedef struct __anon_2277 {
  ULONG DeviceNumber : 5;   // offset: 0x0 ordinal: 0x0
  ULONG FunctionNumber : 3; // offset: 0x0 ordinal: 0x1
  ULONG Reserved : 24;      // offset: 0x0 ordinal: 0x2
} __anon_2277;

// 0x18 bytes (sizeof)
typedef struct __anon_2276 {
  ULONG PollInterval;             // offset: 0x0 ordinal: 0x0
  ULONG Vector;                   // offset: 0x4 ordinal: 0x1
  ULONG SwitchToPollingThreshold; // offset: 0x8 ordinal: 0x2
  ULONG SwitchToPollingWindow;    // offset: 0xc ordinal: 0x3
  ULONG ErrorThreshold;           // offset: 0x10 ordinal: 0x4
  ULONG ErrorThresholdWindow;     // offset: 0x14 ordinal: 0x5
} __anon_2276;

// 0x4 bytes (sizeof)
typedef struct __anon_2275 {
  ULONG PollInterval; // offset: 0x0 ordinal: 0x0
} __anon_2275;

// 0x18 bytes (sizeof)
typedef union __anon_2270 {
  struct __anon_2275 Polled;         // offset: 0x0 ordinal: 0x0
  struct __anon_2276 Interrupt;      // offset: 0x0 ordinal: 0x1
  struct __anon_2276 LocalInterrupt; // offset: 0x0 ordinal: 0x2
  struct __anon_2276 Sci;            // offset: 0x0 ordinal: 0x3
  struct __anon_2276 Nmi;            // offset: 0x0 ordinal: 0x4
  struct __anon_2276 Sea;            // offset: 0x0 ordinal: 0x5
  struct __anon_2276 Sei;            // offset: 0x0 ordinal: 0x6
  struct __anon_2276 Gsiv;           // offset: 0x0 ordinal: 0x7
} __anon_2270;

// 0x1c bytes (sizeof)
typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
  UCHAR Type;                           // offset: 0x0 ordinal: 0x0
  UCHAR Length;                         // offset: 0x1 ordinal: 0x1
  union _WHEA_NOTIFICATION_FLAGS Flags; // offset: 0x2 ordinal: 0x2
  union __anon_2270 u;                  // offset: 0x4 ordinal: 0x3
} _WHEA_NOTIFICATION_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef union __anon_2271 {
  struct __anon_2277 bits; // offset: 0x0 ordinal: 0x0
  ULONG AsULONG;           // offset: 0x0 ordinal: 0x1
} __anon_2271;

// 0x4 bytes (sizeof)
typedef struct _WHEA_PCI_SLOT_NUMBER {
  union __anon_2271 u; // offset: 0x0 ordinal: 0x0
} _WHEA_PCI_SLOT_NUMBER;

// 0x4 bytes (sizeof)
typedef union _XPF_MCE_FLAGS {
  ULONG MCG_CapabilityRW : 1;    // offset: 0x0 ordinal: 0x0
  ULONG MCG_GlobalControlRW : 1; // offset: 0x0 ordinal: 0x1
  ULONG Reserved : 30;           // offset: 0x0 ordinal: 0x2
  ULONG AsULONG;                 // offset: 0x0 ordinal: 0x3
} _XPF_MCE_FLAGS;

// 0x2c bytes (sizeof)
typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
  USHORT Type;                              // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                            // offset: 0x2 ordinal: 0x1
  UCHAR Reserved;                           // offset: 0x3 ordinal: 0x2
  ULONG BusNumber;                          // offset: 0x4 ordinal: 0x3
  struct _WHEA_PCI_SLOT_NUMBER Slot;        // offset: 0x8 ordinal: 0x4
  USHORT DeviceControl;                     // offset: 0xc ordinal: 0x5
  union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags; // offset: 0xe ordinal: 0x6
  ULONG UncorrectableErrorMask;             // offset: 0x10 ordinal: 0x7
  ULONG UncorrectableErrorSeverity;         // offset: 0x14 ordinal: 0x8
  ULONG CorrectableErrorMask;               // offset: 0x18 ordinal: 0x9
  ULONG AdvancedCapsAndControl;             // offset: 0x1c ordinal: 0xa
  ULONG SecondaryUncorrectableErrorMask;    // offset: 0x20 ordinal: 0xb
  ULONG SecondaryUncorrectableErrorSev;     // offset: 0x24 ordinal: 0xc
  ULONG SecondaryCapsAndControl;            // offset: 0x28 ordinal: 0xd
} _WHEA_AER_BRIDGE_DESCRIPTOR;

// 0x20 bytes (sizeof)
typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
  USHORT Type;                                // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                              // offset: 0x2 ordinal: 0x1
  UCHAR Reserved;                             // offset: 0x3 ordinal: 0x2
  ULONG BusNumber;                            // offset: 0x4 ordinal: 0x3
  struct _WHEA_PCI_SLOT_NUMBER Slot;          // offset: 0x8 ordinal: 0x4
  USHORT DeviceControl;                       // offset: 0xc ordinal: 0x5
  union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags; // offset: 0xe ordinal: 0x6
  ULONG UncorrectableErrorMask;               // offset: 0x10 ordinal: 0x7
  ULONG UncorrectableErrorSeverity;           // offset: 0x14 ordinal: 0x8
  ULONG CorrectableErrorMask;                 // offset: 0x18 ordinal: 0x9
  ULONG AdvancedCapsAndControl;               // offset: 0x1c ordinal: 0xa
} _WHEA_AER_ENDPOINT_DESCRIPTOR;

// 0x24 bytes (sizeof)
typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
  USHORT Type;                                // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                              // offset: 0x2 ordinal: 0x1
  UCHAR Reserved;                             // offset: 0x3 ordinal: 0x2
  ULONG BusNumber;                            // offset: 0x4 ordinal: 0x3
  struct _WHEA_PCI_SLOT_NUMBER Slot;          // offset: 0x8 ordinal: 0x4
  USHORT DeviceControl;                       // offset: 0xc ordinal: 0x5
  union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags; // offset: 0xe ordinal: 0x6
  ULONG UncorrectableErrorMask;               // offset: 0x10 ordinal: 0x7
  ULONG UncorrectableErrorSeverity;           // offset: 0x14 ordinal: 0x8
  ULONG CorrectableErrorMask;                 // offset: 0x18 ordinal: 0x9
  ULONG AdvancedCapsAndControl;               // offset: 0x1c ordinal: 0xa
  ULONG RootErrorCommand;                     // offset: 0x20 ordinal: 0xb
} _WHEA_AER_ROOTPORT_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS {
  ULONG Preallocated : 1;            // offset: 0x0 ordinal: 0x0
  ULONG FromPersistentStore : 1;     // offset: 0x0 ordinal: 0x1
  ULONG PlatformPfaControl : 1;      // offset: 0x0 ordinal: 0x2
  ULONG PlatformDirectedOffline : 1; // offset: 0x0 ordinal: 0x3
  ULONG Reserved : 28;               // offset: 0x0 ordinal: 0x4
  ULONG AsULONG;                     // offset: 0x0 ordinal: 0x5
} _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;

// 0x24 bytes (sizeof)
typedef struct _WHEAP_ERROR_SOURCE_TABLE {
  ULONG Signature;           // offset: 0x0 ordinal: 0x0
  LONG Count;                // offset: 0x4 ordinal: 0x1
  ULONG NextId;              // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY Items;  // offset: 0xc ordinal: 0x3
  struct _KEVENT InsertLock; // offset: 0x14 ordinal: 0x4
} _WHEAP_ERROR_SOURCE_TABLE;

// 0x18 bytes (sizeof)
typedef struct _OBP_LOOKUP_CONTEXT {
  struct _OBJECT_DIRECTORY *Directory;        // offset: 0x0 ordinal: 0x0
  VOID *Object;                               // offset: 0x4 ordinal: 0x1
  struct _OBJECT_DIRECTORY_ENTRY **EntryLink; // offset: 0x8 ordinal: 0x2
  ULONG HashValue;                            // offset: 0xc ordinal: 0x3
  USHORT HashIndex;                           // offset: 0x10 ordinal: 0x4
  UCHAR DirectoryLocked;                      // offset: 0x12 ordinal: 0x5
  UCHAR LockedExclusive;                      // offset: 0x13 ordinal: 0x6
  ULONG LockStateSignature;                   // offset: 0x14 ordinal: 0x7
} _OBP_LOOKUP_CONTEXT;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HEADER_AUDIT_INFO {
  VOID *SecurityDescriptor; // offset: 0x0 ordinal: 0x0
  ULONG Reserved;           // offset: 0x4 ordinal: 0x1
} _OBJECT_HEADER_AUDIT_INFO;

// 0x10 bytes (sizeof)
typedef struct _OBJECT_HEADER_QUOTA_INFO {
  ULONG PagedPoolCharge;              // offset: 0x0 ordinal: 0x0
  ULONG NonPagedPoolCharge;           // offset: 0x4 ordinal: 0x1
  ULONG SecurityDescriptorCharge;     // offset: 0x8 ordinal: 0x2
  VOID *SecurityDescriptorQuotaBlock; // offset: 0xc ordinal: 0x3
} _OBJECT_HEADER_QUOTA_INFO;

// 0x9c bytes (sizeof)
typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY {
  VOID *ProcessCid;        // offset: 0x0 ordinal: 0x0
  VOID *ThreadCid;         // offset: 0x4 ordinal: 0x1
  UCHAR ImageFileName[16]; // offset: 0x8 ordinal: 0x2
  ULONG CreateMethod;      // offset: 0x18 ordinal: 0x3
  ULONG CreateTrace[30];   // offset: 0x1c ordinal: 0x4
  LONG Count;              // offset: 0x94 ordinal: 0x5
  LONG CaptureCount;       // offset: 0x98 ordinal: 0x6
} _SEP_TOKEN_DIAG_TRACK_ENTRY;

// 0x2c bytes (sizeof)
typedef struct _IOP_FILE_OBJECT_EXTENSION {
  ULONG FoExtFlags;                         // offset: 0x0 ordinal: 0x0
  VOID *FoExtPerTypeExtension[9];           // offset: 0x4 ordinal: 0x1
  enum _IOP_PRIORITY_HINT FoIoPriorityHint; // offset: 0x28 ordinal: 0x2
} _IOP_FILE_OBJECT_EXTENSION;

// 0xc bytes (sizeof)
typedef struct _REMOTE_PORT_VIEW {
  ULONG Length;   // offset: 0x0 ordinal: 0x0
  ULONG ViewSize; // offset: 0x4 ordinal: 0x1
  VOID *ViewBase; // offset: 0x8 ordinal: 0x2
} _REMOTE_PORT_VIEW;

// 0xc bytes (sizeof)
typedef struct _OB_EXTENDED_PARSE_PARAMETERS {
  USHORT Length;              // offset: 0x0 ordinal: 0x0
  ULONG RestrictedAccessMask; // offset: 0x4 ordinal: 0x1
  struct _EJOB *Silo;         // offset: 0x8 ordinal: 0x2
} _OB_EXTENDED_PARSE_PARAMETERS;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_DUMP_CONTROL {
  VOID *Stream; // offset: 0x0 ordinal: 0x0
  ULONG Detail; // offset: 0x4 ordinal: 0x1
} _OBJECT_DUMP_CONTROL;

typedef VOID (*__anon_2147)(VOID *, struct _OBJECT_DUMP_CONTROL *);

// 0x18 bytes (sizeof)
typedef struct _OBJECT_ATTRIBUTES {
  ULONG Length;                       // offset: 0x0 ordinal: 0x0
  VOID *RootDirectory;                // offset: 0x4 ordinal: 0x1
  struct _UNICODE_STRING *ObjectName; // offset: 0x8 ordinal: 0x2
  ULONG Attributes;                   // offset: 0xc ordinal: 0x3
  VOID *SecurityDescriptor;           // offset: 0x10 ordinal: 0x4
  VOID *SecurityQualityOfService;     // offset: 0x14 ordinal: 0x5
} _OBJECT_ATTRIBUTES;

// 0x4 bytes (sizeof)
typedef struct __anon_2135 {
  ULONG Secure : 1; // offset: 0x0 ordinal: 0x0
} __anon_2135;

// 0x4 bytes (sizeof)
typedef union __anon_2134 {
  struct __anon_2135 s1; // offset: 0x0 ordinal: 0x0
} __anon_2134;

// 0x4 bytes (sizeof)
typedef struct __anon_2132 {
  ULONG WriteAccess : 1; // offset: 0x0 ordinal: 0x0
  ULONG AutoRelease : 1; // offset: 0x0 ordinal: 0x1
  ULONG ForceUnlink : 1; // offset: 0x0 ordinal: 0x2
  ULONG SystemSpace : 1; // offset: 0x0 ordinal: 0x3
} __anon_2132;

// 0x4 bytes (sizeof)
typedef union __anon_2127 {
  struct __anon_2132 s1; // offset: 0x0 ordinal: 0x0
} __anon_2127;

// 0x4 bytes (sizeof)
typedef struct __anon_2130 {
  ULONG Revoked : 1;      // offset: 0x0 ordinal: 0x0
  ULONG Impersonated : 1; // offset: 0x0 ordinal: 0x1
} __anon_2130;

// 0x4 bytes (sizeof)
typedef union __anon_2125 {
  struct __anon_2130 s1; // offset: 0x0 ordinal: 0x0
} __anon_2125;

// 0x8 bytes (sizeof)
typedef struct _ALPC_WORK_ON_BEHALF_TICKET {
  ULONG ThreadId;              // offset: 0x0 ordinal: 0x0
  ULONG ThreadCreationTimeLow; // offset: 0x4 ordinal: 0x1
} _ALPC_WORK_ON_BEHALF_TICKET;

// 0x8 bytes (sizeof)
typedef struct _KALPC_WORK_ON_BEHALF_DATA {
  struct _ALPC_WORK_ON_BEHALF_TICKET Ticket; // offset: 0x0 ordinal: 0x0
} _KALPC_WORK_ON_BEHALF_DATA;

// 0x4 bytes (sizeof)
typedef union _KALPC_DIRECT_EVENT {
  ULONG Value;                // offset: 0x0 ordinal: 0x0
  ULONG DirectType : 1;       // offset: 0x0 ordinal: 0x1
  ULONG EventReferenced : 1;  // offset: 0x0 ordinal: 0x2
  ULONG EventObjectBits : 30; // offset: 0x0 ordinal: 0x3
} _KALPC_DIRECT_EVENT;

// 0x4 bytes (sizeof)
typedef struct __anon_2112 {
  ULONG QueueType : 3;              // offset: 0x0 ordinal: 0x0
  ULONG QueuePortType : 4;          // offset: 0x0 ordinal: 0x1
  ULONG Canceled : 1;               // offset: 0x0 ordinal: 0x2
  ULONG Ready : 1;                  // offset: 0x0 ordinal: 0x3
  ULONG ReleaseMessage : 1;         // offset: 0x0 ordinal: 0x4
  ULONG SharedQuota : 1;            // offset: 0x0 ordinal: 0x5
  ULONG ReplyWaitReply : 1;         // offset: 0x0 ordinal: 0x6
  ULONG OwnerPortReference : 1;     // offset: 0x0 ordinal: 0x7
  ULONG ReceiverReference : 1;      // offset: 0x0 ordinal: 0x8
  ULONG ViewAttributeRetrieved : 1; // offset: 0x0 ordinal: 0x9
  ULONG InDispatch : 1;             // offset: 0x0 ordinal: 0xa
} __anon_2112;

// 0x4 bytes (sizeof)
typedef union __anon_2107 {
  struct __anon_2112 s1; // offset: 0x0 ordinal: 0x0
  ULONG State;           // offset: 0x0 ordinal: 0x1
} __anon_2107;

// 0x4 bytes (sizeof)
typedef struct __anon_2103 {
  ULONG Initialized : 1;          // offset: 0x0 ordinal: 0x0
  ULONG Type : 2;                 // offset: 0x0 ordinal: 0x1
  ULONG ConnectionPending : 1;    // offset: 0x0 ordinal: 0x2
  ULONG ConnectionRefused : 1;    // offset: 0x0 ordinal: 0x3
  ULONG Disconnected : 1;         // offset: 0x0 ordinal: 0x4
  ULONG Closed : 1;               // offset: 0x0 ordinal: 0x5
  ULONG NoFlushOnClose : 1;       // offset: 0x0 ordinal: 0x6
  ULONG ReturnExtendedInfo : 1;   // offset: 0x0 ordinal: 0x7
  ULONG Waitable : 1;             // offset: 0x0 ordinal: 0x8
  ULONG DynamicSecurity : 1;      // offset: 0x0 ordinal: 0x9
  ULONG Wow64CompletionList : 1;  // offset: 0x0 ordinal: 0xa
  ULONG Lpc : 1;                  // offset: 0x0 ordinal: 0xb
  ULONG LpcToLpc : 1;             // offset: 0x0 ordinal: 0xc
  ULONG HasCompletionList : 1;    // offset: 0x0 ordinal: 0xd
  ULONG HadCompletionList : 1;    // offset: 0x0 ordinal: 0xe
  ULONG EnableCompletionList : 1; // offset: 0x0 ordinal: 0xf
} __anon_2103;

// 0x4 bytes (sizeof)
typedef union __anon_2096 {
  struct __anon_2103 s1; // offset: 0x0 ordinal: 0x0
  ULONG State;           // offset: 0x0 ordinal: 0x1
} __anon_2096;

// 0x4 bytes (sizeof)
typedef struct __anon_2081 {
  ULONG Internal : 1; // offset: 0x0 ordinal: 0x0
  ULONG Secure : 1;   // offset: 0x0 ordinal: 0x1
} __anon_2081;

// 0x4 bytes (sizeof)
typedef union __anon_2082 {
  struct __anon_2081 s1; // offset: 0x0 ordinal: 0x0
} __anon_2082;

// 0x8 bytes (sizeof)
typedef struct _BLOB_COUNTERS {
  ULONG CreatedObjects; // offset: 0x0 ordinal: 0x0
  ULONG DeletedObjects; // offset: 0x4 ordinal: 0x1
} _BLOB_COUNTERS;

// 0x24 bytes (sizeof)
typedef struct _BLOB_TYPE {
  enum _BLOB_ID ResourceId;         // offset: 0x0 ordinal: 0x0
  ULONG PoolTag;                    // offset: 0x4 ordinal: 0x1
  ULONG LookasideIndex;             // offset: 0x8 ordinal: 0x2
  ULONG Flags;                      // offset: 0xc ordinal: 0x3
  struct _BLOB_COUNTERS *Counters;  // offset: 0x10 ordinal: 0x4
  VOID (*CleanupProcedure)(VOID *); // offset: 0x14 ordinal: 0x5
  VOID (*DeleteProcedure)(VOID *);  // offset: 0x18 ordinal: 0x6
  LONG (*DestroyProcedure)(VOID *); // offset: 0x1c ordinal: 0x7
  ULONG UsualSize;                  // offset: 0x20 ordinal: 0x8
} _BLOB_TYPE;

// 0x8 bytes (sizeof)
typedef struct _ALPC_MESSAGE_ATTRIBUTES {
  ULONG AllocatedAttributes; // offset: 0x0 ordinal: 0x0
  ULONG ValidAttributes;     // offset: 0x4 ordinal: 0x1
} _ALPC_MESSAGE_ATTRIBUTES;

// 0x4 bytes (sizeof)
typedef union __anon_2070 {
  struct __anon_2069 s2; // offset: 0x0 ordinal: 0x0
  ULONG ZeroInit;        // offset: 0x0 ordinal: 0x1
} __anon_2070;

// 0x4 bytes (sizeof)
typedef union __anon_2068 {
  struct __anon_2067 s1; // offset: 0x0 ordinal: 0x0
  ULONG Length;          // offset: 0x0 ordinal: 0x1
} __anon_2068;

// 0x18 bytes (sizeof)
typedef struct _PORT_MESSAGE {
  union __anon_2068 u1; // offset: 0x0 ordinal: 0x0
  union __anon_2070 u2; // offset: 0x4 ordinal: 0x1
  union {
    struct _CLIENT_ID ClientId; // offset: 0x8 ordinal: 0x2
    double DoNotUseThisField;   // offset: 0x8 ordinal: 0x3
  };
  ULONG MessageId; // offset: 0x10 ordinal: 0x4
  union {
    ULONG ClientViewSize; // offset: 0x14 ordinal: 0x5
    ULONG CallbackId;     // offset: 0x14 ordinal: 0x6
  };
} _PORT_MESSAGE;

// 0x30 bytes (sizeof)
typedef struct _LPCP_MESSAGE {
  union {
    struct _LIST_ENTRY Entry;            // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY FreeEntry; // offset: 0x0 ordinal: 0x1
  };
  ULONG Reserved0;                  // offset: 0x4 ordinal: 0x2
  VOID *SenderPort;                 // offset: 0x8 ordinal: 0x3
  struct _ETHREAD *RepliedToThread; // offset: 0xc ordinal: 0x4
  VOID *PortContext;                // offset: 0x10 ordinal: 0x5
  struct _PORT_MESSAGE Request;     // offset: 0x18 ordinal: 0x6
} _LPCP_MESSAGE;

// 0x8 bytes (sizeof)
typedef struct _RTLP_HP_PADDING_HEADER {
  ULONG PaddingSize; // offset: 0x0 ordinal: 0x0
  ULONG Spare;       // offset: 0x4 ordinal: 0x1
} _RTLP_HP_PADDING_HEADER;

// 0xc bytes (sizeof)
typedef struct _HEAP_PSEUDO_TAG_ENTRY {
  ULONG Allocs; // offset: 0x0 ordinal: 0x0
  ULONG Frees;  // offset: 0x4 ordinal: 0x1
  ULONG Size;   // offset: 0x8 ordinal: 0x2
} _HEAP_PSEUDO_TAG_ENTRY;

// 0x40 bytes (sizeof)
typedef struct _HEAP_TAG_ENTRY {
  ULONG Allocs;                 // offset: 0x0 ordinal: 0x0
  ULONG Frees;                  // offset: 0x4 ordinal: 0x1
  ULONG Size;                   // offset: 0x8 ordinal: 0x2
  USHORT TagIndex;              // offset: 0xc ordinal: 0x3
  USHORT CreatorBackTraceIndex; // offset: 0xe ordinal: 0x4
  WCHAR TagName[24];            // offset: 0x10 ordinal: 0x5
} _HEAP_TAG_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _HEAP_EXTENDED_ENTRY {
  USHORT FunctionIndex;         // offset: 0x0 ordinal: 0x0
  USHORT ContextValue;          // offset: 0x2 ordinal: 0x1
  ULONG InterceptorValue;       // offset: 0x0 ordinal: 0x2
  USHORT UnusedBytesLength;     // offset: 0x4 ordinal: 0x3
  UCHAR EntryOffset;            // offset: 0x6 ordinal: 0x4
  UCHAR ExtendedBlockSignature; // offset: 0x7 ordinal: 0x5
} _HEAP_EXTENDED_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _HEAP_UNPACKED_ENTRY {
  USHORT Size;          // offset: 0x0 ordinal: 0x0
  UCHAR Flags;          // offset: 0x2 ordinal: 0x1
  UCHAR SmallTagIndex;  // offset: 0x3 ordinal: 0x2
  ULONG SubSegmentCode; // offset: 0x0 ordinal: 0x3
  USHORT PreviousSize;  // offset: 0x4 ordinal: 0x4
  union {
    UCHAR SegmentOffset; // offset: 0x6 ordinal: 0x5
    UCHAR LFHFlags;      // offset: 0x6 ordinal: 0x6
  };
  UCHAR UnusedBytes; // offset: 0x7 ordinal: 0x7
} _HEAP_UNPACKED_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _HEAP_TUNING_PARAMETERS {
  ULONG CommittThresholdShift;  // offset: 0x0 ordinal: 0x0
  ULONG MaxPreCommittThreshold; // offset: 0x4 ordinal: 0x1
} _HEAP_TUNING_PARAMETERS;

// 0x5c bytes (sizeof)
typedef struct _HEAP_COUNTERS {
  ULONG TotalMemoryReserved;      // offset: 0x0 ordinal: 0x0
  ULONG TotalMemoryCommitted;     // offset: 0x4 ordinal: 0x1
  ULONG TotalMemoryLargeUCR;      // offset: 0x8 ordinal: 0x2
  ULONG TotalSizeInVirtualBlocks; // offset: 0xc ordinal: 0x3
  ULONG TotalSegments;            // offset: 0x10 ordinal: 0x4
  ULONG TotalUCRs;                // offset: 0x14 ordinal: 0x5
  ULONG CommittOps;               // offset: 0x18 ordinal: 0x6
  ULONG DeCommitOps;              // offset: 0x1c ordinal: 0x7
  ULONG LockAcquires;             // offset: 0x20 ordinal: 0x8
  ULONG LockCollisions;           // offset: 0x24 ordinal: 0x9
  ULONG CommitRate;               // offset: 0x28 ordinal: 0xa
  ULONG DecommittRate;            // offset: 0x2c ordinal: 0xb
  ULONG CommitFailures;           // offset: 0x30 ordinal: 0xc
  ULONG InBlockCommitFailures;    // offset: 0x34 ordinal: 0xd
  ULONG PollIntervalCounter;      // offset: 0x38 ordinal: 0xe
  ULONG DecommitsSinceLastCheck;  // offset: 0x3c ordinal: 0xf
  ULONG HeapPollInterval;         // offset: 0x40 ordinal: 0x10
  ULONG AllocAndFreeOps;          // offset: 0x44 ordinal: 0x11
  ULONG AllocationIndicesActive;  // offset: 0x48 ordinal: 0x12
  ULONG InBlockDeccommits;        // offset: 0x4c ordinal: 0x13
  ULONG InBlockDeccomitSize;      // offset: 0x50 ordinal: 0x14
  ULONG HighWatermarkSize;        // offset: 0x54 ordinal: 0x15
  ULONG LastPolledSize;           // offset: 0x58 ordinal: 0x16
} _HEAP_COUNTERS;

// 0x4 bytes (sizeof)
typedef struct _HEAP_DESCRIPTOR_KEY {
  union {
    ULONG Key;        // offset: 0x0 ordinal: 0x0
    ULONG Ignore : 8; // offset: 0x0 ordinal: 0x1
  };
  ULONG EncodedCommittedPageCount : 16; // offset: 0x0 ordinal: 0x2
  ULONG UnitCount : 8;                  // offset: 0x0 ordinal: 0x3
} _HEAP_DESCRIPTOR_KEY;

// 0x4 bytes (sizeof)
typedef union _HEAP_VS_CHUNK_HEADER_SIZE {
  ULONG MemoryCost : 1;      // offset: 0x0 ordinal: 0x0
  ULONG UnsafeSize : 15;     // offset: 0x0 ordinal: 0x1
  ULONG UnsafePrevSize : 15; // offset: 0x0 ordinal: 0x2
  ULONG Allocated : 1;       // offset: 0x0 ordinal: 0x3
  USHORT KeyUShort;          // offset: 0x0 ordinal: 0x4
  ULONG KeyULong;            // offset: 0x0 ordinal: 0x5
  ULONG HeaderBits;          // offset: 0x0 ordinal: 0x6
} _HEAP_VS_CHUNK_HEADER_SIZE;

// 0x8 bytes (sizeof)
typedef struct _HEAP_VS_CHUNK_HEADER {
  union _HEAP_VS_CHUNK_HEADER_SIZE Sizes; // offset: 0x0 ordinal: 0x0
  ULONG EncodedSegmentPageOffset : 8;     // offset: 0x4 ordinal: 0x1
  ULONG UnusedBytes : 1;                  // offset: 0x4 ordinal: 0x2
  ULONG SkipDuringWalk : 1;               // offset: 0x4 ordinal: 0x3
  ULONG Spare : 22;                       // offset: 0x4 ordinal: 0x4
  ULONG AllocatedChunkBits;               // offset: 0x4 ordinal: 0x5
} _HEAP_VS_CHUNK_HEADER;

// 0xc bytes (sizeof)
typedef struct _RTLP_HP_QUEUE_LOCK_HANDLE {
  ULONG Reserved1;  // offset: 0x0 ordinal: 0x0
  ULONG LockPtr;    // offset: 0x4 ordinal: 0x1
  ULONG HandleData; // offset: 0x8 ordinal: 0x2
} _RTLP_HP_QUEUE_LOCK_HANDLE;

// 0x4 bytes (sizeof)
typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE {
  ULONG DelayFree : 1; // offset: 0x0 ordinal: 0x0
  ULONG Count : 31;    // offset: 0x0 ordinal: 0x1
  VOID *AllBits;       // offset: 0x0 ordinal: 0x2
} _HEAP_LFH_SUBSEGMENT_DELAY_FREE;

// 0x4 bytes (sizeof)
typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS {
  USHORT BlockSize;        // offset: 0x0 ordinal: 0x0
  USHORT FirstBlockOffset; // offset: 0x2 ordinal: 0x1
  ULONG EncodedData;       // offset: 0x0 ordinal: 0x2
} _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;

typedef VOID *(*__anon_2017)(ULONG, VOID *);

// 0x4 bytes (sizeof)
typedef struct _RTL_SRWLOCK {
  ULONG Locked : 1;         // offset: 0x0 ordinal: 0x0
  ULONG Waiting : 1;        // offset: 0x0 ordinal: 0x1
  ULONG Waking : 1;         // offset: 0x0 ordinal: 0x2
  ULONG MultipleShared : 1; // offset: 0x0 ordinal: 0x3
  ULONG Shared : 28;        // offset: 0x0 ordinal: 0x4
  union {
    ULONG Value; // offset: 0x0 ordinal: 0x5
    VOID *Ptr;   // offset: 0x0 ordinal: 0x6
  };
} _RTL_SRWLOCK;

// 0x4 bytes (sizeof)
typedef struct _HEAP_LFH_FAST_REF {
  union {
    VOID *Target;        // offset: 0x0 ordinal: 0x0
    ULONG Value;         // offset: 0x0 ordinal: 0x1
    ULONG RefCount : 12; // offset: 0x0 ordinal: 0x2
  };
} _HEAP_LFH_FAST_REF;

// 0x1c bytes (sizeof)
typedef struct _HEAP_LFH_SUBSEGMENT_OWNER {
  UCHAR IsBucket : 1; // offset: 0x0 ordinal: 0x0
  UCHAR Spare0 : 7;   // offset: 0x0 ordinal: 0x1
  UCHAR BucketIndex;  // offset: 0x1 ordinal: 0x2
  union {
    UCHAR SlotCount; // offset: 0x2 ordinal: 0x3
    UCHAR SlotIndex; // offset: 0x2 ordinal: 0x4
  };
  UCHAR Spare1;                               // offset: 0x3 ordinal: 0x5
  ULONG AvailableSubsegmentCount;             // offset: 0x4 ordinal: 0x6
  ULONG Lock;                                 // offset: 0x8 ordinal: 0x7
  struct _LIST_ENTRY AvailableSubsegmentList; // offset: 0xc ordinal: 0x8
  struct _LIST_ENTRY FullSubsegmentList;      // offset: 0x14 ordinal: 0x9
} _HEAP_LFH_SUBSEGMENT_OWNER;

// 0x20 bytes (sizeof)
typedef struct _HEAP_LFH_AFFINITY_SLOT {
  struct _HEAP_LFH_SUBSEGMENT_OWNER State;    // offset: 0x0 ordinal: 0x0
  struct _HEAP_LFH_FAST_REF ActiveSubsegment; // offset: 0x1c ordinal: 0x1
} _HEAP_LFH_AFFINITY_SLOT;

// 0x38 bytes (sizeof)
typedef struct _HEAP_LFH_BUCKET {
  struct _HEAP_LFH_SUBSEGMENT_OWNER State;        // offset: 0x0 ordinal: 0x0
  ULONG TotalBlockCount;                          // offset: 0x1c ordinal: 0x1
  ULONG TotalSubsegmentCount;                     // offset: 0x20 ordinal: 0x2
  ULONG ReciprocalBlockSize;                      // offset: 0x24 ordinal: 0x3
  UCHAR Shift;                                    // offset: 0x28 ordinal: 0x4
  UCHAR ContentionCount;                          // offset: 0x29 ordinal: 0x5
  ULONG AffinityMappingLock;                      // offset: 0x2c ordinal: 0x6
  UCHAR *ProcAffinityMapping;                     // offset: 0x30 ordinal: 0x7
  struct _HEAP_LFH_AFFINITY_SLOT **AffinitySlots; // offset: 0x34 ordinal: 0x8
} _HEAP_LFH_BUCKET;

// 0x80 bytes (sizeof)
typedef struct _HEAP_SEG_CONTEXT {
  ULONG SegmentMask;                            // offset: 0x0 ordinal: 0x0
  UCHAR UnitShift;                              // offset: 0x4 ordinal: 0x1
  UCHAR PagesPerUnitShift;                      // offset: 0x5 ordinal: 0x2
  UCHAR FirstDescriptorIndex;                   // offset: 0x6 ordinal: 0x3
  UCHAR CachedCommitSoftShift;                  // offset: 0x7 ordinal: 0x4
  UCHAR CachedCommitHighShift;                  // offset: 0x8 ordinal: 0x5
  union __anon_2003 Flags;                      // offset: 0x9 ordinal: 0x6
  ULONG MaxAllocationSize;                      // offset: 0xc ordinal: 0x7
  SHORT OlpStatsOffset;                         // offset: 0x10 ordinal: 0x8
  SHORT MemStatsOffset;                         // offset: 0x12 ordinal: 0x9
  VOID *LfhContext;                             // offset: 0x14 ordinal: 0xa
  VOID *VsContext;                              // offset: 0x18 ordinal: 0xb
  struct RTL_HP_ENV_HANDLE EnvHandle;           // offset: 0x1c ordinal: 0xc
  VOID *Heap;                                   // offset: 0x24 ordinal: 0xd
  ULONG SegmentLock;                            // offset: 0x40 ordinal: 0xe
  struct _LIST_ENTRY SegmentListHead;           // offset: 0x44 ordinal: 0xf
  ULONG SegmentCount;                           // offset: 0x4c ordinal: 0x10
  struct _RTL_RB_TREE FreePageRanges;           // offset: 0x50 ordinal: 0x11
  ULONG FreeSegmentListLock;                    // offset: 0x58 ordinal: 0x12
  struct _SINGLE_LIST_ENTRY FreeSegmentList[2]; // offset: 0x5c ordinal: 0x13
} _HEAP_SEG_CONTEXT;

// 0xc bytes (sizeof)
typedef struct _RTL_HP_SEG_ALLOC_POLICY {
  ULONG MinLargePages;  // offset: 0x0 ordinal: 0x0
  ULONG MaxLargePages;  // offset: 0x4 ordinal: 0x1
  UCHAR MinUtilization; // offset: 0x8 ordinal: 0x2
} _RTL_HP_SEG_ALLOC_POLICY;

// 0x2c bytes (sizeof)
typedef struct _HEAP_RUNTIME_MEMORY_STATS {
  ULONG TotalReservedPages;    // offset: 0x0 ordinal: 0x0
  ULONG TotalCommittedPages;   // offset: 0x4 ordinal: 0x1
  ULONG FreeCommittedPages;    // offset: 0x8 ordinal: 0x2
  ULONG LfhFreeCommittedPages; // offset: 0xc ordinal: 0x3
  struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
      LargePageStats[2]; // offset: 0x10 ordinal: 0x4
  struct _RTL_HP_SEG_ALLOC_POLICY
      LargePageUtilizationPolicy; // offset: 0x20 ordinal: 0x5
} _HEAP_RUNTIME_MEMORY_STATS;

// 0x8 bytes (sizeof)
typedef struct _FAKE_HEAP_ENTRY {
  ULONG Size;         // offset: 0x0 ordinal: 0x0
  ULONG PreviousSize; // offset: 0x4 ordinal: 0x1
} _FAKE_HEAP_ENTRY;

// 0x4 bytes (sizeof)
typedef struct __anon_1984 {
  ULONG PageAlignLargeAllocs : 1; // offset: 0x0 ordinal: 0x0
  ULONG FullDecommit : 1;         // offset: 0x0 ordinal: 0x1
  ULONG EnableDelayFree : 1;      // offset: 0x0 ordinal: 0x2
} __anon_1984;

// 0x4 bytes (sizeof)
typedef struct _RTL_HP_VS_CONFIG {
  struct __anon_1984 Flags; // offset: 0x0 ordinal: 0x0
} _RTL_HP_VS_CONFIG;

// 0x8 bytes (sizeof)
typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS {
  struct _RTL_HP_LFH_CONFIG LfhConfigs; // offset: 0x0 ordinal: 0x0
  struct _RTL_HP_VS_CONFIG VsConfigs;   // offset: 0x4 ordinal: 0x1
} _RTL_HP_SUB_ALLOCATOR_CONFIGS;

// 0x4 bytes (sizeof)
typedef union _RTL_RUN_ONCE {
  VOID *Ptr;       // offset: 0x0 ordinal: 0x0
  ULONG Value;     // offset: 0x0 ordinal: 0x1
  ULONG State : 2; // offset: 0x0 ordinal: 0x2
} _RTL_RUN_ONCE;

// 0x10 bytes (sizeof)
typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA {
  ULONG CommitLimitBytes;           // offset: 0x0 ordinal: 0x0
  ULONG CommitLimitFailureCode;     // offset: 0x4 ordinal: 0x1
  ULONG MaxAllocationSizeBytes;     // offset: 0x8 ordinal: 0x2
  ULONG AllocationLimitFailureCode; // offset: 0xc ordinal: 0x3
} _RTL_HEAP_MEMORY_LIMIT_DATA;

// 0x14 bytes (sizeof)
typedef struct _HEAP_SUBALLOCATOR_CALLBACKS {
  ULONG Allocate;      // offset: 0x0 ordinal: 0x0
  ULONG Free;          // offset: 0x4 ordinal: 0x1
  ULONG Commit;        // offset: 0x8 ordinal: 0x2
  ULONG Decommit;      // offset: 0xc ordinal: 0x3
  ULONG ExtendContext; // offset: 0x10 ordinal: 0x4
} _HEAP_SUBALLOCATOR_CALLBACKS;

// 0x2c0 bytes (sizeof)
typedef struct _HEAP_LFH_CONTEXT {
  VOID *BackendCtx;                              // offset: 0x0 ordinal: 0x0
  struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks; // offset: 0x4 ordinal: 0x1
  UCHAR *AffinityModArray;                       // offset: 0x18 ordinal: 0x2
  UCHAR MaxAffinity;                             // offset: 0x1c ordinal: 0x3
  UCHAR LockType;                                // offset: 0x1d ordinal: 0x4
  SHORT MemStatsOffset;                          // offset: 0x1e ordinal: 0x5
  struct _RTL_HP_LFH_CONFIG Config;              // offset: 0x20 ordinal: 0x6
  union _HEAP_LFH_SUBSEGMENT_STATS BucketStats;  // offset: 0x40 ordinal: 0x7
  ULONG SubsegmentCreationLock;                  // offset: 0x44 ordinal: 0x8
  struct _HEAP_LFH_BUCKET *Buckets[129];         // offset: 0x80 ordinal: 0x9
} _HEAP_LFH_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct VACB_LEVEL_ALLOCATION_LIST {
  struct _LIST_ENTRY VacbLevelList; // offset: 0x0 ordinal: 0x0
  VOID *VacbLevelWithBcbListHeads;  // offset: 0x8 ordinal: 0x1
  ULONG VacbLevelsAllocated;        // offset: 0xc ordinal: 0x2
} VACB_LEVEL_ALLOCATION_LIST;

// 0x14 bytes (sizeof)
typedef struct _CC_ASYNC_READ_CONTEXT {
  UCHAR (*CompletionRoutine)(VOID *); // offset: 0x0 ordinal: 0x0
  VOID *Context;                      // offset: 0x4 ordinal: 0x1
  struct _MDL *Mdl;                   // offset: 0x8 ordinal: 0x2
  CHAR RequestorMode;                 // offset: 0xc ordinal: 0x3
  ULONG NestingLevel;                 // offset: 0x10 ordinal: 0x4
} _CC_ASYNC_READ_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct __anon_1947 {
  ULONG Reason; // offset: 0x0 ordinal: 0x0
} __anon_1947;

// 0x194 bytes (sizeof)
typedef struct _ASYNC_READ_THREAD_STATS {
  ULONG CurrentLoad[101]; // offset: 0x0 ordinal: 0x0
} _ASYNC_READ_THREAD_STATS;

// 0x10 bytes (sizeof)
typedef struct _VACB_ARRAY_HEADER {
  ULONG VacbArrayIndex;     // offset: 0x0 ordinal: 0x0
  ULONG MappingCount;       // offset: 0x4 ordinal: 0x1
  ULONG HighestMappedIndex; // offset: 0x8 ordinal: 0x2
  ULONG Reserved;           // offset: 0xc ordinal: 0x3
} _VACB_ARRAY_HEADER;

// 0x8 bytes (sizeof)
typedef struct _WRITE_BEHIND_THROUGHPUT {
  ULONG PagesYetToWrite; // offset: 0x0 ordinal: 0x0
  ULONG Throughput;      // offset: 0x4 ordinal: 0x1
} _WRITE_BEHIND_THROUGHPUT;

// 0xc bytes (sizeof)
typedef struct _SHARED_CACHE_MAP_LIST_CURSOR {
  struct _LIST_ENTRY SharedCacheMapLinks; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                            // offset: 0x8 ordinal: 0x1
} _SHARED_CACHE_MAP_LIST_CURSOR;

// 0x4 bytes (sizeof)
typedef struct _PRIVATE_CACHE_MAP_FLAGS {
  ULONG DontUse : 16;           // offset: 0x0 ordinal: 0x0
  ULONG ReadAheadActive : 1;    // offset: 0x0 ordinal: 0x1
  ULONG ReadAheadEnabled : 1;   // offset: 0x0 ordinal: 0x2
  ULONG PagePriority : 3;       // offset: 0x0 ordinal: 0x3
  ULONG PipelineReadAheads : 1; // offset: 0x0 ordinal: 0x4
  ULONG Available : 10;         // offset: 0x0 ordinal: 0x5
} _PRIVATE_CACHE_MAP_FLAGS;

// 0xc bytes (sizeof)
typedef struct _DIRTY_PAGE_STATISTICS {
  ULONG DirtyPages;                  // offset: 0x0 ordinal: 0x0
  ULONG DirtyPagesLastScan;          // offset: 0x4 ordinal: 0x1
  ULONG DirtyPagesScheduledLastScan; // offset: 0x8 ordinal: 0x2
} _DIRTY_PAGE_STATISTICS;

// 0x4 bytes (sizeof)
typedef union _POP_FX_DEVICE_STATUS {
  LONG Value;                             // offset: 0x0 ordinal: 0x0
  ULONG SystemTransition : 1;             // offset: 0x0 ordinal: 0x1
  ULONG PepD0Notify : 1;                  // offset: 0x0 ordinal: 0x2
  ULONG IdleTimerOn : 1;                  // offset: 0x0 ordinal: 0x3
  ULONG IgnoreIdleTimeout : 1;            // offset: 0x0 ordinal: 0x4
  ULONG IrpInUse : 1;                     // offset: 0x0 ordinal: 0x5
  ULONG IrpPending : 1;                   // offset: 0x0 ordinal: 0x6
  ULONG DPNRDeviceNotified : 1;           // offset: 0x0 ordinal: 0x7
  ULONG DPNRReceivedFromPep : 1;          // offset: 0x0 ordinal: 0x8
  ULONG IrpFirstPendingIndex : 1;         // offset: 0x0 ordinal: 0x9
  ULONG IrpLastPendingIndex : 1;          // offset: 0x0 ordinal: 0xa
  ULONG SIrpBlocked : 1;                  // offset: 0x0 ordinal: 0xb
  ULONG BlockFastResume : 1;              // offset: 0x0 ordinal: 0xc
  ULONG DirectedPoweredDown : 1;          // offset: 0x0 ordinal: 0xd
  ULONG DirectedTransitionInProgress : 1; // offset: 0x0 ordinal: 0xe
  ULONG Reserved : 18;                    // offset: 0x0 ordinal: 0xf
} _POP_FX_DEVICE_STATUS;

// 0x4 bytes (sizeof)
typedef union _POP_FX_PERF_FLAGS {
  LONG Value;                    // offset: 0x0 ordinal: 0x0
  ULONG Progress : 3;            // offset: 0x0 ordinal: 0x1
  ULONG Reserved : 24;           // offset: 0x0 ordinal: 0x2
  ULONG Synchronicity : 2;       // offset: 0x0 ordinal: 0x3
  ULONG RequestPepCompleted : 1; // offset: 0x0 ordinal: 0x4
  ULONG RequestSucceeded : 1;    // offset: 0x0 ordinal: 0x5
  ULONG NestedCallback : 1;      // offset: 0x0 ordinal: 0x6
} _POP_FX_PERF_FLAGS;

// 0x8 bytes (sizeof)
typedef union _POP_FX_COMPONENT_FLAGS {
  LONG Value;                     // offset: 0x0 ordinal: 0x0
  LONG Value2;                    // offset: 0x4 ordinal: 0x1
  ULONG RefCount : 30;            // offset: 0x0 ordinal: 0x2
  ULONG Idling : 1;               // offset: 0x0 ordinal: 0x3
  ULONG Active : 1;               // offset: 0x0 ordinal: 0x4
  ULONG CriticalIdleOverride : 1; // offset: 0x4 ordinal: 0x5
  ULONG ResidentOverride : 1;     // offset: 0x4 ordinal: 0x6
  ULONG Reserved : 30;            // offset: 0x4 ordinal: 0x7
} _POP_FX_COMPONENT_FLAGS;

// 0x10 bytes (sizeof)
typedef struct _POP_CPU_INFO {
  ULONG Eax; // offset: 0x0 ordinal: 0x0
  ULONG Ebx; // offset: 0x4 ordinal: 0x1
  ULONG Ecx; // offset: 0x8 ordinal: 0x2
  ULONG Edx; // offset: 0xc ordinal: 0x3
} _POP_CPU_INFO;

// 0x4 bytes (sizeof)
typedef union _PEP_ACPI_RESOURCE_FLAGS {
  ULONG AsULong;            // offset: 0x0 ordinal: 0x0
  ULONG Shared : 1;         // offset: 0x0 ordinal: 0x1
  ULONG Wake : 1;           // offset: 0x0 ordinal: 0x2
  ULONG ResourceUsage : 1;  // offset: 0x0 ordinal: 0x3
  ULONG SlaveMode : 1;      // offset: 0x0 ordinal: 0x4
  ULONG AddressingMode : 1; // offset: 0x0 ordinal: 0x5
  ULONG SharedMode : 1;     // offset: 0x0 ordinal: 0x6
  ULONG Reserved : 26;      // offset: 0x0 ordinal: 0x7
} _PEP_ACPI_RESOURCE_FLAGS;

// 0x18 bytes (sizeof)
typedef struct _PEP_ACPI_SPB_RESOURCE {
  enum _PEP_ACPI_RESOURCE_TYPE Type;          // offset: 0x0 ordinal: 0x0
  union _PEP_ACPI_RESOURCE_FLAGS Flags;       // offset: 0x4 ordinal: 0x1
  USHORT TypeSpecificFlags;                   // offset: 0x8 ordinal: 0x2
  UCHAR ResourceSourceIndex;                  // offset: 0xa ordinal: 0x3
  struct _UNICODE_STRING *ResourceSourceName; // offset: 0xc ordinal: 0x4
  CHAR *VendorData;                           // offset: 0x10 ordinal: 0x5
  USHORT VendorDataLength;                    // offset: 0x14 ordinal: 0x6
} _PEP_ACPI_SPB_RESOURCE;

// 0x30 bytes (sizeof)
typedef struct _PEP_ACPI_GPIO_RESOURCE {
  enum _PEP_ACPI_RESOURCE_TYPE Type;           // offset: 0x0 ordinal: 0x0
  union _PEP_ACPI_RESOURCE_FLAGS Flags;        // offset: 0x4 ordinal: 0x1
  enum _KINTERRUPT_MODE InterruptType;         // offset: 0x8 ordinal: 0x2
  enum _KINTERRUPT_POLARITY InterruptPolarity; // offset: 0xc ordinal: 0x3
  enum _GPIO_PIN_CONFIG_TYPE PinConfig;        // offset: 0x10 ordinal: 0x4
  enum _GPIO_PIN_IORESTRICTION_TYPE
      IoRestrictionType;                      // offset: 0x14 ordinal: 0x5
  USHORT DriveStrength;                       // offset: 0x18 ordinal: 0x6
  USHORT DebounceTimeout;                     // offset: 0x1a ordinal: 0x7
  WCHAR *PinTable;                            // offset: 0x1c ordinal: 0x8
  USHORT PinCount;                            // offset: 0x20 ordinal: 0x9
  UCHAR ResourceSourceIndex;                  // offset: 0x22 ordinal: 0xa
  struct _UNICODE_STRING *ResourceSourceName; // offset: 0x24 ordinal: 0xb
  UCHAR *VendorData;                          // offset: 0x28 ordinal: 0xc
  USHORT VendorDataLength;                    // offset: 0x2c ordinal: 0xd
} _PEP_ACPI_GPIO_RESOURCE;

// 0x24 bytes (sizeof)
typedef struct _PEP_ACPI_SPB_UART_RESOURCE {
  struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // offset: 0x0 ordinal: 0x0
  ULONG BaudRate;                          // offset: 0x18 ordinal: 0x1
  USHORT RxBufferSize;                     // offset: 0x1c ordinal: 0x2
  USHORT TxBufferSize;                     // offset: 0x1e ordinal: 0x3
  UCHAR Parity;                            // offset: 0x20 ordinal: 0x4
  UCHAR LinesInUse;                        // offset: 0x21 ordinal: 0x5
} _PEP_ACPI_SPB_UART_RESOURCE;

// 0x24 bytes (sizeof)
typedef struct _PEP_ACPI_SPB_SPI_RESOURCE {
  struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // offset: 0x0 ordinal: 0x0
  ULONG ConnectionSpeed;                   // offset: 0x18 ordinal: 0x1
  UCHAR DataBitLength;                     // offset: 0x1c ordinal: 0x2
  UCHAR Phase;                             // offset: 0x1d ordinal: 0x3
  UCHAR Polarity;                          // offset: 0x1e ordinal: 0x4
  USHORT DeviceSelection;                  // offset: 0x20 ordinal: 0x5
} _PEP_ACPI_SPB_SPI_RESOURCE;

// 0x20 bytes (sizeof)
typedef struct _PEP_ACPI_SPB_I2C_RESOURCE {
  struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // offset: 0x0 ordinal: 0x0
  ULONG ConnectionSpeed;                   // offset: 0x18 ordinal: 0x1
  USHORT SlaveAddress;                     // offset: 0x1c ordinal: 0x2
} _PEP_ACPI_SPB_I2C_RESOURCE;

// 0x24 bytes (sizeof)
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
  ULONG Size;                // offset: 0x0 ordinal: 0x0
  ULONG Action;              // offset: 0x4 ordinal: 0x1
  ULONG Flags;               // offset: 0x8 ordinal: 0x2
  ULONG OperationStatus;     // offset: 0xc ordinal: 0x3
  ULONG ExtendedError;       // offset: 0x10 ordinal: 0x4
  ULONG TargetDetailedError; // offset: 0x14 ordinal: 0x5
  ULONG ReservedStatus;      // offset: 0x18 ordinal: 0x6
  ULONG OutputBlockOffset;   // offset: 0x1c ordinal: 0x7
  ULONG OutputBlockLength;   // offset: 0x20 ordinal: 0x8
} _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;

// 0x1c bytes (sizeof)
typedef struct _DEVICE_DSM_DEFINITION {
  ULONG Action;                  // offset: 0x0 ordinal: 0x0
  UCHAR SingleRange;             // offset: 0x4 ordinal: 0x1
  ULONG ParameterBlockAlignment; // offset: 0x8 ordinal: 0x2
  ULONG ParameterBlockLength;    // offset: 0xc ordinal: 0x3
  UCHAR HasOutput;               // offset: 0x10 ordinal: 0x4
  ULONG OutputBlockAlignment;    // offset: 0x14 ordinal: 0x5
  ULONG OutputBlockLength;       // offset: 0x18 ordinal: 0x6
} _DEVICE_DSM_DEFINITION;

// 0x1c bytes (sizeof)
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
  ULONG Size;                 // offset: 0x0 ordinal: 0x0
  ULONG Action;               // offset: 0x4 ordinal: 0x1
  ULONG Flags;                // offset: 0x8 ordinal: 0x2
  ULONG ParameterBlockOffset; // offset: 0xc ordinal: 0x3
  ULONG ParameterBlockLength; // offset: 0x10 ordinal: 0x4
  ULONG DataSetRangesOffset;  // offset: 0x14 ordinal: 0x5
  ULONG DataSetRangesLength;  // offset: 0x18 ordinal: 0x6
} _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;

// 0x28 bytes (sizeof)
typedef struct _DBGKD_GET_VERSION32 {
  USHORT MajorVersion;            // offset: 0x0 ordinal: 0x0
  USHORT MinorVersion;            // offset: 0x2 ordinal: 0x1
  USHORT ProtocolVersion;         // offset: 0x4 ordinal: 0x2
  USHORT Flags;                   // offset: 0x6 ordinal: 0x3
  ULONG KernBase;                 // offset: 0x8 ordinal: 0x4
  ULONG PsLoadedModuleList;       // offset: 0xc ordinal: 0x5
  USHORT MachineType;             // offset: 0x10 ordinal: 0x6
  USHORT ThCallbackStack;         // offset: 0x12 ordinal: 0x7
  USHORT NextCallback;            // offset: 0x14 ordinal: 0x8
  USHORT FramePointer;            // offset: 0x16 ordinal: 0x9
  ULONG KiCallUserMode;           // offset: 0x18 ordinal: 0xa
  ULONG KeUserCallbackDispatcher; // offset: 0x1c ordinal: 0xb
  ULONG BreakpointWithStatus;     // offset: 0x20 ordinal: 0xc
  ULONG DebuggerDataList;         // offset: 0x24 ordinal: 0xd
} _DBGKD_GET_VERSION32;

// 0xc bytes (sizeof)
typedef struct _PPC_DBGKD_CONTROL_SET {
  ULONG Continue;           // offset: 0x0 ordinal: 0x0
  ULONG CurrentSymbolStart; // offset: 0x4 ordinal: 0x1
  ULONG CurrentSymbolEnd;   // offset: 0x8 ordinal: 0x2
} _PPC_DBGKD_CONTROL_SET;

// 0xc bytes (sizeof)
typedef struct _ARMCE_DBGKD_CONTROL_SET {
  ULONG Continue;           // offset: 0x0 ordinal: 0x0
  ULONG CurrentSymbolStart; // offset: 0x4 ordinal: 0x1
  ULONG CurrentSymbolEnd;   // offset: 0x8 ordinal: 0x2
} _ARMCE_DBGKD_CONTROL_SET;

// 0xc bytes (sizeof)
typedef struct _ARM_DBGKD_CONTROL_SET {
  ULONG Continue;           // offset: 0x0 ordinal: 0x0
  ULONG CurrentSymbolStart; // offset: 0x4 ordinal: 0x1
  ULONG CurrentSymbolEnd;   // offset: 0x8 ordinal: 0x2
} _ARM_DBGKD_CONTROL_SET;

// 0x10 bytes (sizeof)
typedef struct _X86_DBGKD_CONTROL_SET {
  ULONG TraceFlag;          // offset: 0x0 ordinal: 0x0
  ULONG Dr7;                // offset: 0x4 ordinal: 0x1
  ULONG CurrentSymbolStart; // offset: 0x8 ordinal: 0x2
  ULONG CurrentSymbolEnd;   // offset: 0xc ordinal: 0x3
} _X86_DBGKD_CONTROL_SET;

// 0xc bytes (sizeof)
typedef struct _DBGKD_CONTEXT_EX {
  ULONG Offset;      // offset: 0x0 ordinal: 0x0
  ULONG ByteCount;   // offset: 0x4 ordinal: 0x1
  ULONG BytesCopied; // offset: 0x8 ordinal: 0x2
} _DBGKD_CONTEXT_EX;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_SWITCH_PARTITION {
  ULONG Partition; // offset: 0x0 ordinal: 0x0
} _DBGKD_SWITCH_PARTITION;

// 0x14 bytes (sizeof)
typedef struct _DBGKD_GET_SET_BUS_DATA {
  ULONG BusDataType; // offset: 0x0 ordinal: 0x0
  ULONG BusNumber;   // offset: 0x4 ordinal: 0x1
  ULONG SlotNumber;  // offset: 0x8 ordinal: 0x2
  ULONG Offset;      // offset: 0xc ordinal: 0x3
  ULONG Length;      // offset: 0x10 ordinal: 0x4
} _DBGKD_GET_SET_BUS_DATA;

// 0xc bytes (sizeof)
typedef struct _DBGKD_READ_WRITE_MSR {
  ULONG Msr;           // offset: 0x0 ordinal: 0x0
  ULONG DataValueLow;  // offset: 0x4 ordinal: 0x1
  ULONG DataValueHigh; // offset: 0x8 ordinal: 0x2
} _DBGKD_READ_WRITE_MSR;

// 0x8 bytes (sizeof)
typedef struct _DBGKD_BREAKPOINTEX {
  ULONG BreakPointCount; // offset: 0x0 ordinal: 0x0
  LONG ContinueStatus;   // offset: 0x4 ordinal: 0x1
} _DBGKD_BREAKPOINTEX;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_QUERY_SPECIAL_CALLS {
  ULONG NumberOfSpecialCalls; // offset: 0x0 ordinal: 0x0
} _DBGKD_QUERY_SPECIAL_CALLS;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_RESTORE_BREAKPOINT {
  ULONG BreakPointHandle; // offset: 0x0 ordinal: 0x0
} _DBGKD_RESTORE_BREAKPOINT;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_SET_CONTEXT {
  ULONG ContextFlags; // offset: 0x0 ordinal: 0x0
} _DBGKD_SET_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_GET_CONTEXT {
  ULONG Unused; // offset: 0x0 ordinal: 0x0
} _DBGKD_GET_CONTEXT;

// 0x1c bytes (sizeof)
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32 {
  ULONG BreakpointAddress; // offset: 0x0 ordinal: 0x0
  ULONG Flags;             // offset: 0x4 ordinal: 0x1
  ULONG Calls;             // offset: 0x8 ordinal: 0x2
  ULONG MaxCallsPerPeriod; // offset: 0xc ordinal: 0x3
  ULONG MinInstructions;   // offset: 0x10 ordinal: 0x4
  ULONG MaxInstructions;   // offset: 0x14 ordinal: 0x5
  ULONG TotalInstructions; // offset: 0x18 ordinal: 0x6
} _DBGKD_GET_INTERNAL_BREAKPOINT32;

// 0x8 bytes (sizeof)
typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32 {
  ULONG BreakpointAddress; // offset: 0x0 ordinal: 0x0
  ULONG Flags;             // offset: 0x4 ordinal: 0x1
} _DBGKD_SET_INTERNAL_BREAKPOINT32;

// 0x4 bytes (sizeof)
typedef struct _DBGKD_SET_SPECIAL_CALL32 {
  ULONG SpecialCall; // offset: 0x0 ordinal: 0x0
} _DBGKD_SET_SPECIAL_CALL32;

// 0x18 bytes (sizeof)
typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32 {
  ULONG DataSize;      // offset: 0x0 ordinal: 0x0
  ULONG InterfaceType; // offset: 0x4 ordinal: 0x1
  ULONG BusNumber;     // offset: 0x8 ordinal: 0x2
  ULONG AddressSpace;  // offset: 0xc ordinal: 0x3
  ULONG IoAddress;     // offset: 0x10 ordinal: 0x4
  ULONG DataValue;     // offset: 0x14 ordinal: 0x5
} _DBGKD_READ_WRITE_IO_EXTENDED32;

// 0xc bytes (sizeof)
typedef struct _DBGKD_READ_WRITE_IO32 {
  ULONG DataSize;  // offset: 0x0 ordinal: 0x0
  ULONG IoAddress; // offset: 0x4 ordinal: 0x1
  ULONG DataValue; // offset: 0x8 ordinal: 0x2
} _DBGKD_READ_WRITE_IO32;

// 0x8 bytes (sizeof)
typedef struct _DBGKD_WRITE_BREAKPOINT32 {
  ULONG BreakPointAddress; // offset: 0x0 ordinal: 0x0
  ULONG BreakPointHandle;  // offset: 0x4 ordinal: 0x1
} _DBGKD_WRITE_BREAKPOINT32;

// 0xc bytes (sizeof)
typedef struct _DBGKD_WRITE_MEMORY32 {
  ULONG TargetBaseAddress;  // offset: 0x0 ordinal: 0x0
  ULONG TransferCount;      // offset: 0x4 ordinal: 0x1
  ULONG ActualBytesWritten; // offset: 0x8 ordinal: 0x2
} _DBGKD_WRITE_MEMORY32;

// 0xc bytes (sizeof)
typedef struct _DBGKD_READ_MEMORY32 {
  ULONG TargetBaseAddress; // offset: 0x0 ordinal: 0x0
  ULONG TransferCount;     // offset: 0x4 ordinal: 0x1
  ULONG ActualBytesRead;   // offset: 0x8 ordinal: 0x2
} _DBGKD_READ_MEMORY32;

// 0x18 bytes (sizeof)
typedef struct _DBGKD_LOAD_SYMBOLS32 {
  ULONG PathNameLength; // offset: 0x0 ordinal: 0x0
  ULONG BaseOfDll;      // offset: 0x4 ordinal: 0x1
  ULONG ProcessId;      // offset: 0x8 ordinal: 0x2
  ULONG CheckSum;       // offset: 0xc ordinal: 0x3
  ULONG SizeOfImage;    // offset: 0x10 ordinal: 0x4
  UCHAR UnloadSymbols;  // offset: 0x14 ordinal: 0x5
} _DBGKD_LOAD_SYMBOLS32;

// 0x8c bytes (sizeof)
typedef struct _X86_KTRAP_FRAME_BLUE {
  ULONG DbgEbp;               // offset: 0x0 ordinal: 0x0
  ULONG DbgEip;               // offset: 0x4 ordinal: 0x1
  ULONG DbgArgMark;           // offset: 0x8 ordinal: 0x2
  USHORT TempSegCs;           // offset: 0xc ordinal: 0x3
  UCHAR Logging;              // offset: 0xe ordinal: 0x4
  UCHAR FrameType;            // offset: 0xf ordinal: 0x5
  ULONG TempEsp;              // offset: 0x10 ordinal: 0x6
  ULONG Dr0;                  // offset: 0x14 ordinal: 0x7
  ULONG Dr1;                  // offset: 0x18 ordinal: 0x8
  ULONG Dr2;                  // offset: 0x1c ordinal: 0x9
  ULONG Dr3;                  // offset: 0x20 ordinal: 0xa
  ULONG Dr6;                  // offset: 0x24 ordinal: 0xb
  ULONG Dr7;                  // offset: 0x28 ordinal: 0xc
  ULONG SegGs;                // offset: 0x2c ordinal: 0xd
  ULONG SegEs;                // offset: 0x30 ordinal: 0xe
  ULONG SegDs;                // offset: 0x34 ordinal: 0xf
  ULONG Edx;                  // offset: 0x38 ordinal: 0x10
  ULONG Ecx;                  // offset: 0x3c ordinal: 0x11
  ULONG Eax;                  // offset: 0x40 ordinal: 0x12
  UCHAR PreviousPreviousMode; // offset: 0x44 ordinal: 0x13
  UCHAR EntropyQueueDpc;      // offset: 0x45 ordinal: 0x14
  UCHAR Reserved[2];          // offset: 0x46 ordinal: 0x15
  ULONG MxCsr;                // offset: 0x48 ordinal: 0x16
  ULONG ExceptionList;        // offset: 0x4c ordinal: 0x17
  ULONG SegFs;                // offset: 0x50 ordinal: 0x18
  ULONG Edi;                  // offset: 0x54 ordinal: 0x19
  ULONG Esi;                  // offset: 0x58 ordinal: 0x1a
  ULONG Ebx;                  // offset: 0x5c ordinal: 0x1b
  ULONG Ebp;                  // offset: 0x60 ordinal: 0x1c
  ULONG ErrCode;              // offset: 0x64 ordinal: 0x1d
  ULONG Eip;                  // offset: 0x68 ordinal: 0x1e
  ULONG SegCs;                // offset: 0x6c ordinal: 0x1f
  ULONG EFlags;               // offset: 0x70 ordinal: 0x20
  ULONG HardwareEsp;          // offset: 0x74 ordinal: 0x21
  ULONG HardwareSegSs;        // offset: 0x78 ordinal: 0x22
  ULONG V86Es;                // offset: 0x7c ordinal: 0x23
  ULONG V86Ds;                // offset: 0x80 ordinal: 0x24
  ULONG V86Fs;                // offset: 0x84 ordinal: 0x25
  ULONG V86Gs;                // offset: 0x88 ordinal: 0x26
} _X86_KTRAP_FRAME_BLUE;

// 0x8c bytes (sizeof)
typedef struct _X86_KTRAP_FRAME {
  ULONG DbgEbp;               // offset: 0x0 ordinal: 0x0
  ULONG DbgEip;               // offset: 0x4 ordinal: 0x1
  ULONG DbgArgMark;           // offset: 0x8 ordinal: 0x2
  ULONG DbgArgPointer;        // offset: 0xc ordinal: 0x3
  ULONG TempSegCs;            // offset: 0x10 ordinal: 0x4
  ULONG TempEsp;              // offset: 0x14 ordinal: 0x5
  ULONG Dr0;                  // offset: 0x18 ordinal: 0x6
  ULONG Dr1;                  // offset: 0x1c ordinal: 0x7
  ULONG Dr2;                  // offset: 0x20 ordinal: 0x8
  ULONG Dr3;                  // offset: 0x24 ordinal: 0x9
  ULONG Dr6;                  // offset: 0x28 ordinal: 0xa
  ULONG Dr7;                  // offset: 0x2c ordinal: 0xb
  ULONG SegGs;                // offset: 0x30 ordinal: 0xc
  ULONG SegEs;                // offset: 0x34 ordinal: 0xd
  ULONG SegDs;                // offset: 0x38 ordinal: 0xe
  ULONG Edx;                  // offset: 0x3c ordinal: 0xf
  ULONG Ecx;                  // offset: 0x40 ordinal: 0x10
  ULONG Eax;                  // offset: 0x44 ordinal: 0x11
  UCHAR PreviousPreviousMode; // offset: 0x48 ordinal: 0x12
  UCHAR EntropyQueueDpc;      // offset: 0x49 ordinal: 0x13
  UCHAR Reserved[2];          // offset: 0x4a ordinal: 0x14
  ULONG ExceptionList;        // offset: 0x4c ordinal: 0x15
  ULONG SegFs;                // offset: 0x50 ordinal: 0x16
  ULONG Edi;                  // offset: 0x54 ordinal: 0x17
  ULONG Esi;                  // offset: 0x58 ordinal: 0x18
  ULONG Ebx;                  // offset: 0x5c ordinal: 0x19
  ULONG Ebp;                  // offset: 0x60 ordinal: 0x1a
  ULONG ErrCode;              // offset: 0x64 ordinal: 0x1b
  ULONG Eip;                  // offset: 0x68 ordinal: 0x1c
  ULONG SegCs;                // offset: 0x6c ordinal: 0x1d
  ULONG EFlags;               // offset: 0x70 ordinal: 0x1e
  ULONG HardwareEsp;          // offset: 0x74 ordinal: 0x1f
  ULONG HardwareSegSs;        // offset: 0x78 ordinal: 0x20
  ULONG V86Es;                // offset: 0x7c ordinal: 0x21
  ULONG V86Ds;                // offset: 0x80 ordinal: 0x22
  ULONG V86Fs;                // offset: 0x84 ordinal: 0x23
  ULONG V86Gs;                // offset: 0x88 ordinal: 0x24
} _X86_KTRAP_FRAME;

// 0xc bytes (sizeof)
typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT {
  ULONG IncludeFailedDevices;           // offset: 0x0 ordinal: 0x0
  ULONG DeviceCount;                    // offset: 0x4 ordinal: 0x1
  struct _DEVICE_OBJECT *DeviceList[1]; // offset: 0x8 ordinal: 0x2
} _PNP_ASSIGN_RESOURCES_CONTEXT;

// 0x2c bytes (sizeof)
typedef struct _PNP_DEVICE_COMPLETION_QUEUE {
  struct _LIST_ENTRY DispatchedList;     // offset: 0x0 ordinal: 0x0
  ULONG DispatchedCount;                 // offset: 0x8 ordinal: 0x1
  struct _LIST_ENTRY CompletedList;      // offset: 0xc ordinal: 0x2
  struct _KSEMAPHORE CompletedSemaphore; // offset: 0x14 ordinal: 0x3
  ULONG SpinLock;                        // offset: 0x28 ordinal: 0x4
} _PNP_DEVICE_COMPLETION_QUEUE;

// 0x8 bytes (sizeof)
typedef struct _STRING32 {
  USHORT Length;        // offset: 0x0 ordinal: 0x0
  USHORT MaximumLength; // offset: 0x2 ordinal: 0x1
  ULONG Buffer;         // offset: 0x4 ordinal: 0x2
} _STRING32;

// 0x8 bytes (sizeof)
typedef struct _CLIENT_ID32 {
  ULONG UniqueProcess; // offset: 0x0 ordinal: 0x0
  ULONG UniqueThread;  // offset: 0x4 ordinal: 0x1
} _CLIENT_ID32;

// 0x1c bytes (sizeof)
typedef struct _NT_TIB32 {
  ULONG ExceptionList; // offset: 0x0 ordinal: 0x0
  ULONG StackBase;     // offset: 0x4 ordinal: 0x1
  ULONG StackLimit;    // offset: 0x8 ordinal: 0x2
  ULONG SubSystemTib;  // offset: 0xc ordinal: 0x3
  union {
    ULONG FiberData; // offset: 0x10 ordinal: 0x4
    ULONG Version;   // offset: 0x10 ordinal: 0x5
  };
  ULONG ArbitraryUserPointer; // offset: 0x14 ordinal: 0x6
  ULONG Self;                 // offset: 0x18 ordinal: 0x7
} _NT_TIB32;

// 0x10 bytes (sizeof)
typedef struct _THERMAL_ZONE_COUNTERS {
  ULONG Temperature;              // offset: 0x0 ordinal: 0x0
  ULONG ThrottleLimit;            // offset: 0x4 ordinal: 0x1
  ULONG ThrottleReasons;          // offset: 0x8 ordinal: 0x2
  ULONG TemperatureHighPrecision; // offset: 0xc ordinal: 0x3
} _THERMAL_ZONE_COUNTERS;

// 0xb8 bytes (sizeof)
typedef struct _SYNCH_COUNTERS {
  ULONG SpinLockAcquireCount;                   // offset: 0x0 ordinal: 0x0
  ULONG SpinLockContentionCount;                // offset: 0x4 ordinal: 0x1
  ULONG SpinLockSpinCount;                      // offset: 0x8 ordinal: 0x2
  ULONG IpiSendRequestBroadcastCount;           // offset: 0xc ordinal: 0x3
  ULONG IpiSendRequestRoutineCount;             // offset: 0x10 ordinal: 0x4
  ULONG IpiSendSoftwareInterruptCount;          // offset: 0x14 ordinal: 0x5
  ULONG ExInitializeResourceCount;              // offset: 0x18 ordinal: 0x6
  ULONG ExReInitializeResourceCount;            // offset: 0x1c ordinal: 0x7
  ULONG ExDeleteResourceCount;                  // offset: 0x20 ordinal: 0x8
  ULONG ExecutiveResourceAcquiresCount;         // offset: 0x24 ordinal: 0x9
  ULONG ExecutiveResourceContentionsCount;      // offset: 0x28 ordinal: 0xa
  ULONG ExecutiveResourceReleaseExclusiveCount; // offset: 0x2c ordinal: 0xb
  ULONG ExecutiveResourceReleaseSharedCount;    // offset: 0x30 ordinal: 0xc
  ULONG ExecutiveResourceConvertsCount;         // offset: 0x34 ordinal: 0xd
  ULONG ExAcqResExclusiveAttempts;              // offset: 0x38 ordinal: 0xe
  ULONG ExAcqResExclusiveAcquiresExclusive;     // offset: 0x3c ordinal: 0xf
  ULONG
  ExAcqResExclusiveAcquiresExclusiveRecursive; // offset: 0x40 ordinal: 0x10
  ULONG ExAcqResExclusiveWaits;                // offset: 0x44 ordinal: 0x11
  ULONG ExAcqResExclusiveNotAcquires;          // offset: 0x48 ordinal: 0x12
  ULONG ExAcqResSharedAttempts;                // offset: 0x4c ordinal: 0x13
  ULONG ExAcqResSharedAcquiresExclusive;       // offset: 0x50 ordinal: 0x14
  ULONG ExAcqResSharedAcquiresShared;          // offset: 0x54 ordinal: 0x15
  ULONG ExAcqResSharedAcquiresSharedRecursive; // offset: 0x58 ordinal: 0x16
  ULONG ExAcqResSharedWaits;                   // offset: 0x5c ordinal: 0x17
  ULONG ExAcqResSharedNotAcquires;             // offset: 0x60 ordinal: 0x18
  ULONG ExAcqResSharedStarveExclusiveAttempts; // offset: 0x64 ordinal: 0x19
  ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive; // offset: 0x68 ordinal:
                                                        // 0x1a
  ULONG
  ExAcqResSharedStarveExclusiveAcquiresShared; // offset: 0x6c ordinal: 0x1b
  ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive; // offset: 0x70
                                                              // ordinal: 0x1c
  ULONG ExAcqResSharedStarveExclusiveWaits;       // offset: 0x74 ordinal: 0x1d
  ULONG ExAcqResSharedStarveExclusiveNotAcquires; // offset: 0x78 ordinal: 0x1e
  ULONG ExAcqResSharedWaitForExclusiveAttempts;   // offset: 0x7c ordinal: 0x1f
  ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive; // offset: 0x80
                                                         // ordinal: 0x20
  ULONG ExAcqResSharedWaitForExclusiveAcquiresShared; // offset: 0x84 ordinal:
                                                      // 0x21
  ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive; // offset: 0x88
                                                               // ordinal: 0x22
  ULONG ExAcqResSharedWaitForExclusiveWaits;       // offset: 0x8c ordinal: 0x23
  ULONG ExAcqResSharedWaitForExclusiveNotAcquires; // offset: 0x90 ordinal: 0x24
  ULONG ExSetResOwnerPointerExclusive;             // offset: 0x94 ordinal: 0x25
  ULONG ExSetResOwnerPointerSharedNew;             // offset: 0x98 ordinal: 0x26
  ULONG ExSetResOwnerPointerSharedOld;             // offset: 0x9c ordinal: 0x27
  ULONG ExTryToAcqExclusiveAttempts;               // offset: 0xa0 ordinal: 0x28
  ULONG ExTryToAcqExclusiveAcquires;               // offset: 0xa4 ordinal: 0x29
  ULONG ExBoostExclusiveOwner;                     // offset: 0xa8 ordinal: 0x2a
  ULONG ExBoostSharedOwners;                       // offset: 0xac ordinal: 0x2b
  ULONG ExEtwSynchTrackingNotificationsCount;      // offset: 0xb0 ordinal: 0x2c
  ULONG ExEtwSynchTrackingNotificationsAccountedCount; // offset: 0xb4 ordinal:
                                                       // 0x2d
} _SYNCH_COUNTERS;

// 0x8 bytes (sizeof)
typedef struct _PCW_DATA {
  VOID *Data; // offset: 0x0 ordinal: 0x0
  ULONG Size; // offset: 0x4 ordinal: 0x1
} _PCW_DATA;

// 0x4 bytes (sizeof)
typedef struct __anon_1738 {
  ULONG FileOffset; // offset: 0x0 ordinal: 0x0
} __anon_1738;

// 0x4 bytes (sizeof)
typedef union __anon_1737 {
  ULONG UserData; // offset: 0x0 ordinal: 0x0
  ULONG Next;     // offset: 0x0 ordinal: 0x1
} __anon_1737;

// 0x4 bytes (sizeof)
typedef struct __anon_1736 {
  union __anon_1737 u; // offset: 0x0 ordinal: 0x0
} __anon_1736;

// 0x4 bytes (sizeof)
typedef union __anon_1735 {
  struct __anon_1736 NewCell; // offset: 0x0 ordinal: 0x0
} __anon_1735;

// 0x8 bytes (sizeof)
typedef struct _HCELL {
  LONG Size;           // offset: 0x0 ordinal: 0x0
  union __anon_1735 u; // offset: 0x4 ordinal: 0x1
} _HCELL;

// 0xc bytes (sizeof)
typedef struct __anon_1725 {
  ULONG Action; // offset: 0x0 ordinal: 0x0
  VOID *Handle; // offset: 0x4 ordinal: 0x1
  LONG Status;  // offset: 0x8 ordinal: 0x2
} __anon_1725;

// 0xc bytes (sizeof)
typedef struct __anon_1723 {
  enum _CM_LOAD_FAILURE_TYPE Failure; // offset: 0x0 ordinal: 0x0
  LONG Status;                        // offset: 0x4 ordinal: 0x1
  ULONG Point;                        // offset: 0x8 ordinal: 0x2
} __anon_1723;

// 0x8 bytes (sizeof)
typedef struct __anon_1716 {
  ULONG Context1; // offset: 0x0 ordinal: 0x0
  ULONG Context2; // offset: 0x4 ordinal: 0x1
} __anon_1716;

// 0x8 bytes (sizeof)
typedef struct __anon_1715 {
  ULONG RangeCount;  // offset: 0x0 ordinal: 0x0
  ULONG SetBitCount; // offset: 0x4 ordinal: 0x1
} __anon_1715;

// 0x8 bytes (sizeof)
typedef struct __anon_1714 {
  ULONG Start;  // offset: 0x0 ordinal: 0x0
  ULONG Length; // offset: 0x4 ordinal: 0x1
} __anon_1714;

// 0x8 bytes (sizeof)
typedef union __anon_1709 {
  struct __anon_1714 DirtyVectorModifiedContext; // offset: 0x0 ordinal: 0x0
  struct __anon_1715 DirtyDataCaptureContext;    // offset: 0x0 ordinal: 0x1
  struct __anon_1716 Raw;                        // offset: 0x0 ordinal: 0x2
} __anon_1709;

// 0x28 bytes (sizeof)
typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY {
  struct _ETHREAD *Thread;                   // offset: 0x0 ordinal: 0x0
  enum _CM_DIRTY_VECTOR_OPERATION Operation; // offset: 0x4 ordinal: 0x1
  union __anon_1709 Data;                    // offset: 0x8 ordinal: 0x2
  VOID *Stack[6];                            // offset: 0x10 ordinal: 0x3
} _CM_DIRTY_VECTOR_LOG_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _KTRANSACTION_HISTORY {
  enum __anon_1707 RecordType; // offset: 0x0 ordinal: 0x0
  ULONG Payload;               // offset: 0x4 ordinal: 0x1
} _KTRANSACTION_HISTORY;

// 0x8 bytes (sizeof)
typedef struct __anon_1698 {
  ULONG idxRecord;    // offset: 0x0 ordinal: 0x0
  ULONG cidContainer; // offset: 0x4 ordinal: 0x1
} __anon_1698;

// 0x38 bytes (sizeof)
typedef struct _RTL_AVL_TABLE {
  struct _RTL_BALANCED_LINKS BalancedRoot; // offset: 0x0 ordinal: 0x0
  VOID *OrderedPointer;                    // offset: 0x10 ordinal: 0x1
  ULONG WhichOrderedElement;               // offset: 0x14 ordinal: 0x2
  ULONG NumberGenericTableElements;        // offset: 0x18 ordinal: 0x3
  ULONG DepthOfTree;                       // offset: 0x1c ordinal: 0x4
  struct _RTL_BALANCED_LINKS *RestartKey;  // offset: 0x20 ordinal: 0x5
  ULONG DeleteCount;                       // offset: 0x24 ordinal: 0x6
  enum _RTL_GENERIC_COMPARE_RESULTS (*CompareRoutine)(
      struct _RTL_AVL_TABLE *, VOID *, VOID *); // offset: 0x28 ordinal: 0x7
  VOID *(*AllocateRoutine)(struct _RTL_AVL_TABLE *,
                           ULONG); // offset: 0x2c ordinal: 0x8
  VOID(*FreeRoutine)
  (struct _RTL_AVL_TABLE *, VOID *); // offset: 0x30 ordinal: 0x9
  VOID *TableContext;                // offset: 0x34 ordinal: 0xa
} _RTL_AVL_TABLE;

// 0x80 bytes (sizeof)
typedef struct _VF_AVL_TABLE {
  struct _RTL_AVL_TABLE RtlTable;         // offset: 0x0 ordinal: 0x0
  struct _VF_AVL_TREE_NODE *ReservedNode; // offset: 0x38 ordinal: 0x1
  VOID *NodeToFree;                       // offset: 0x3c ordinal: 0x2
  LONG Lock;                              // offset: 0x40 ordinal: 0x3
} _VF_AVL_TABLE;

// 0x18 bytes (sizeof)
typedef struct _VF_AVL_TREE {
  ULONG NodeRangeSize;          // offset: 0x0 ordinal: 0x0
  ULONG NodeCount;              // offset: 0x4 ordinal: 0x1
  struct _VF_AVL_TABLE *Tables; // offset: 0x8 ordinal: 0x2
  ULONG TablesNo;               // offset: 0xc ordinal: 0x3
  UCHAR UseSessionId;           // offset: 0x10 ordinal: 0x4
  union __anon_2905 u1;         // offset: 0x14 ordinal: 0x5
} _VF_AVL_TREE;

typedef VOID (*__anon_1713)(struct _RTL_AVL_TABLE *, VOID *);

typedef VOID *(*__anon_1712)(struct _RTL_AVL_TABLE *, ULONG);

typedef enum _RTL_GENERIC_COMPARE_RESULTS (*__anon_1711)(
    struct _RTL_AVL_TABLE *, VOID *, VOID *);

// 0x60 bytes (sizeof)
typedef struct _KTMOBJECT_NAMESPACE {
  struct _RTL_AVL_TABLE Table; // offset: 0x0 ordinal: 0x0
  struct _KMUTANT Mutex;       // offset: 0x38 ordinal: 0x1
  USHORT LinksOffset;          // offset: 0x58 ordinal: 0x2
  USHORT GuidOffset;           // offset: 0x5a ordinal: 0x3
  UCHAR Expired;               // offset: 0x5c ordinal: 0x4
} _KTMOBJECT_NAMESPACE;

// 0x10 bytes (sizeof)
typedef struct _CM_UOW_SET_VALUE_KEY_DATA {
  ULONG PreparedCell; // offset: 0x0 ordinal: 0x0
  ULONG OldValueCell; // offset: 0x4 ordinal: 0x1
  USHORT NameLength;  // offset: 0x8 ordinal: 0x2
  ULONG DataSize;     // offset: 0xc ordinal: 0x3
} _CM_UOW_SET_VALUE_KEY_DATA;

// 0x4 bytes (sizeof)
typedef struct _CM_UOW_SET_SD_DATA {
  ULONG SecurityCell; // offset: 0x0 ordinal: 0x0
} _CM_UOW_SET_SD_DATA;

// 0x288 bytes (sizeof)
typedef struct _CM_DIRTY_VECTOR_LOG {
  ULONG Next;                                // offset: 0x0 ordinal: 0x0
  ULONG Size;                                // offset: 0x4 ordinal: 0x1
  struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16]; // offset: 0x8 ordinal: 0x2
} _CM_DIRTY_VECTOR_LOG;

// 0x14 bytes (sizeof)
typedef struct _CM_WORKITEM {
  struct _LIST_ENTRY ListEntry;  // offset: 0x0 ordinal: 0x0
  ULONG Private;                 // offset: 0x8 ordinal: 0x1
  VOID (*WorkerRoutine)(VOID *); // offset: 0xc ordinal: 0x2
  VOID *Parameter;               // offset: 0x10 ordinal: 0x3
} _CM_WORKITEM;

// 0x8 bytes (sizeof)
typedef struct _KENLISTMENT_HISTORY {
  ULONG Notification;               // offset: 0x0 ordinal: 0x0
  enum _KENLISTMENT_STATE NewState; // offset: 0x4 ordinal: 0x1
} _KENLISTMENT_HISTORY;

// 0x4 bytes (sizeof)
typedef union _CM_TRANS_PTR {
  ULONG LightWeight : 1; // offset: 0x0 ordinal: 0x0
  VOID *TransPtr;        // offset: 0x0 ordinal: 0x1
} _CM_TRANS_PTR;

// 0x4 bytes (sizeof)
typedef struct _CM_COMPONENT_HASH {
  ULONG Hash; // offset: 0x0 ordinal: 0x0
} _CM_COMPONENT_HASH;

// 0x8 bytes (sizeof)
typedef struct _CM_INDEX {
  ULONG Cell; // offset: 0x0 ordinal: 0x0
  union {
    struct _CM_FAST_LEAF_HINT NameHint; // offset: 0x4 ordinal: 0x1
    struct _CM_COMPONENT_HASH HashKey;  // offset: 0x4 ordinal: 0x2
  };
} _CM_INDEX;

// 0xc bytes (sizeof)
typedef struct _CM_NAME_HASH {
  struct _CM_COMPONENT_HASH ConvKey; // offset: 0x0 ordinal: 0x0
  struct _CM_NAME_HASH *NextHash;    // offset: 0x4 ordinal: 0x1
  USHORT NameLength;                 // offset: 0x8 ordinal: 0x2
  WCHAR Name[1];                     // offset: 0xa ordinal: 0x3
} _CM_NAME_HASH;

// 0x10 bytes (sizeof)
typedef struct _CM_NAME_CONTROL_BLOCK {
  ULONG Compressed : 1; // offset: 0x0 ordinal: 0x0
  ULONG RefCount : 31;  // offset: 0x0 ordinal: 0x1
  union {
    struct _CM_NAME_HASH NameHash;     // offset: 0x4 ordinal: 0x2
    struct _CM_COMPONENT_HASH ConvKey; // offset: 0x4 ordinal: 0x3
  };
  struct _CM_KEY_HASH *NextHash; // offset: 0x8 ordinal: 0x4
  USHORT NameLength;             // offset: 0xc ordinal: 0x5
  WCHAR Name[1];                 // offset: 0xe ordinal: 0x6
} _CM_NAME_CONTROL_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _CM_INTENT_LOCK {
  ULONG OwnerCount;                // offset: 0x0 ordinal: 0x0
  struct _CM_KCB_UOW **OwnerTable; // offset: 0x4 ordinal: 0x1
} _CM_INTENT_LOCK;

// 0x4 bytes (sizeof)
typedef struct _CM_PATH_HASH {
  ULONG Hash; // offset: 0x0 ordinal: 0x0
} _CM_PATH_HASH;

// 0x14 bytes (sizeof)
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
  UCHAR Revision; // offset: 0x0 ordinal: 0x0
  UCHAR Sbz1;     // offset: 0x1 ordinal: 0x1
  USHORT Control; // offset: 0x2 ordinal: 0x2
  ULONG Owner;    // offset: 0x4 ordinal: 0x3
  ULONG Group;    // offset: 0x8 ordinal: 0x4
  ULONG Sacl;     // offset: 0xc ordinal: 0x5
  ULONG Dacl;     // offset: 0x10 ordinal: 0x6
} _SECURITY_DESCRIPTOR_RELATIVE;

// 0x2c bytes (sizeof)
typedef struct _CM_KEY_SECURITY_CACHE {
  ULONG Cell;                                      // offset: 0x0 ordinal: 0x0
  ULONG ConvKey;                                   // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY List;                         // offset: 0x8 ordinal: 0x2
  ULONG DescriptorLength;                          // offset: 0x10 ordinal: 0x3
  ULONG RealRefCount;                              // offset: 0x14 ordinal: 0x4
  struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor; // offset: 0x18 ordinal: 0x5
} _CM_KEY_SECURITY_CACHE;

// 0x8 bytes (sizeof)
typedef struct _CM_KEY_SECURITY_CACHE_ENTRY {
  ULONG Cell;                                    // offset: 0x0 ordinal: 0x0
  struct _CM_KEY_SECURITY_CACHE *CachedSecurity; // offset: 0x4 ordinal: 0x1
} _CM_KEY_SECURITY_CACHE_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _CHILD_LIST {
  ULONG Count; // offset: 0x0 ordinal: 0x0
  ULONG List;  // offset: 0x4 ordinal: 0x1
} _CHILD_LIST;

// 0xc bytes (sizeof)
typedef struct _CM_UOW_SET_VALUE_LIST_DATA {
  ULONG RefCount;               // offset: 0x0 ordinal: 0x0
  struct _CHILD_LIST ValueList; // offset: 0x4 ordinal: 0x1
} _CM_UOW_SET_VALUE_LIST_DATA;

// 0xc bytes (sizeof)
typedef struct _HMAP_ENTRY {
  ULONG BlockOffset;         // offset: 0x0 ordinal: 0x0
  ULONG PermanentBinAddress; // offset: 0x4 ordinal: 0x1
  ULONG MemAlloc;            // offset: 0x8 ordinal: 0x2
} _HMAP_ENTRY;

// 0x1800 bytes (sizeof)
typedef struct _HMAP_TABLE {
  struct _HMAP_ENTRY Table[512]; // offset: 0x0 ordinal: 0x0
} _HMAP_TABLE;

// 0x1000 bytes (sizeof)
typedef struct _HMAP_DIRECTORY {
  struct _HMAP_TABLE *Directory[1024]; // offset: 0x0 ordinal: 0x0
} _HMAP_DIRECTORY;

// 0x8 bytes (sizeof)
typedef struct _CM_BIG_DATA {
  USHORT Signature; // offset: 0x0 ordinal: 0x0
  USHORT Count;     // offset: 0x2 ordinal: 0x1
  ULONG List;       // offset: 0x4 ordinal: 0x2
} _CM_BIG_DATA;

// 0x28 bytes (sizeof)
typedef struct _CM_KEY_SECURITY {
  USHORT Signature;                                // offset: 0x0 ordinal: 0x0
  USHORT Reserved;                                 // offset: 0x2 ordinal: 0x1
  ULONG Flink;                                     // offset: 0x4 ordinal: 0x2
  ULONG Blink;                                     // offset: 0x8 ordinal: 0x3
  ULONG ReferenceCount;                            // offset: 0xc ordinal: 0x4
  ULONG DescriptorLength;                          // offset: 0x10 ordinal: 0x5
  struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor; // offset: 0x14 ordinal: 0x6
} _CM_KEY_SECURITY;

// 0x18 bytes (sizeof)
typedef struct _CM_KEY_VALUE {
  USHORT Signature;  // offset: 0x0 ordinal: 0x0
  USHORT NameLength; // offset: 0x2 ordinal: 0x1
  ULONG DataLength;  // offset: 0x4 ordinal: 0x2
  ULONG Data;        // offset: 0x8 ordinal: 0x3
  ULONG Type;        // offset: 0xc ordinal: 0x4
  USHORT Flags;      // offset: 0x10 ordinal: 0x5
  USHORT Spare;      // offset: 0x12 ordinal: 0x6
  WCHAR Name[1];     // offset: 0x14 ordinal: 0x7
} _CM_KEY_VALUE;

// 0xc bytes (sizeof)
typedef struct CMP_OFFSET_ARRAY {
  ULONG FileOffset; // offset: 0x0 ordinal: 0x0
  VOID *DataBuffer; // offset: 0x4 ordinal: 0x1
  ULONG DataLength; // offset: 0x8 ordinal: 0x2
} CMP_OFFSET_ARRAY;

// 0x8 bytes (sizeof)
typedef struct _HV_GET_CELL_CONTEXT {
  ULONG Cell;                            // offset: 0x0 ordinal: 0x0
  struct _HV_GET_BIN_CONTEXT BinContext; // offset: 0x4 ordinal: 0x1
} _HV_GET_CELL_CONTEXT;

typedef VOID *(*__anon_1574)(ULONG, UCHAR, ULONG);

// 0x28 bytes (sizeof)
typedef struct _HVP_VIEW_MAP {
  VOID *SectionReference;                   // offset: 0x0 ordinal: 0x0
  LONGLONG StorageEndFileOffset;            // offset: 0x8 ordinal: 0x1
  LONGLONG SectionEndFileOffset;            // offset: 0x10 ordinal: 0x2
  struct _CMSI_PROCESS_TUPLE *ProcessTuple; // offset: 0x18 ordinal: 0x3
  ULONG Flags;                              // offset: 0x1c ordinal: 0x4
  struct _RTL_RB_TREE ViewTree;             // offset: 0x20 ordinal: 0x5
} _HVP_VIEW_MAP;

// 0x4 bytes (sizeof)
typedef struct _MI_VAD_SEQUENTIAL_INFO {
  ULONG Length : 11; // offset: 0x0 ordinal: 0x0
  ULONG Vpn : 21;    // offset: 0x0 ordinal: 0x1
} _MI_VAD_SEQUENTIAL_INFO;

// 0x4 bytes (sizeof)
typedef union __anon_1558 {
  ULONG LongFlags2;               // offset: 0x0 ordinal: 0x0
  struct _MMVAD_FLAGS2 VadFlags2; // offset: 0x0 ordinal: 0x1
} __anon_1558;

// 0x4 bytes (sizeof)
typedef struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  ULONG PageRelativeOffset : 12; // offset: 0x0 ordinal: 0x0
  ULONG IndirectCall : 1;        // offset: 0x0 ordinal: 0x1
  ULONG IATIndex : 19;           // offset: 0x0 ordinal: 0x2
} _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;

// 0x4 bytes (sizeof)
typedef union __anon_1553 {
  struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
      Import; // offset: 0x0 ordinal: 0x0
  struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
      Indir; // offset: 0x0 ordinal: 0x1
  struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
      SwitchJump; // offset: 0x0 ordinal: 0x2
} __anon_1553;

// 0xc bytes (sizeof)
typedef struct _RTL_RETPOLINE_RELOCATION_INDEX {
  USHORT ImportRelocationSize;     // offset: 0x0 ordinal: 0x0
  USHORT IndirectRelocationSize;   // offset: 0x2 ordinal: 0x1
  USHORT SwitchJumpRelocationSize; // offset: 0x4 ordinal: 0x2
  USHORT StraddleType;             // offset: 0x6 ordinal: 0x3
  union __anon_1553 StraddleReloc; // offset: 0x8 ordinal: 0x4
} _RTL_RETPOLINE_RELOCATION_INDEX;

// 0x4 bytes (sizeof)
typedef union _MM_STORE_KEY {
  ULONG KeyLow : 28; // offset: 0x0 ordinal: 0x0
  ULONG KeyHigh : 4; // offset: 0x0 ordinal: 0x1
  ULONG EntireKey;   // offset: 0x0 ordinal: 0x2
} _MM_STORE_KEY;

// 0x4 bytes (sizeof)
typedef union __anon_1542 {
  ULONG ReferenceCount;     // offset: 0x0 ordinal: 0x0
  ULONG NumberOfPtesToFree; // offset: 0x0 ordinal: 0x1
} __anon_1542;

// 0x4 bytes (sizeof)
typedef struct _MI_SUBSECTION_ENTRY1 {
  ULONG CrossPartitionReferences : 30; // offset: 0x0 ordinal: 0x0
  ULONG SubsectionMappedLarge : 2;     // offset: 0x0 ordinal: 0x1
} _MI_SUBSECTION_ENTRY1;

// 0x4 bytes (sizeof)
typedef union __anon_1538 {
  struct _MI_SUBSECTION_ENTRY1 e1; // offset: 0x0 ordinal: 0x0
  ULONG EntireField;               // offset: 0x0 ordinal: 0x1
} __anon_1538;

// 0x4 bytes (sizeof)
typedef union __anon_1537 {
  ULONG LongFlags;                            // offset: 0x0 ordinal: 0x0
  struct _MMSUBSECTION_FLAGS SubsectionFlags; // offset: 0x0 ordinal: 0x1
} __anon_1537;

// 0x4 bytes (sizeof)
typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS {
  union {
    ULONG EntireFlags;    // offset: 0x0 ordinal: 0x0
    ULONG StoreFault : 1; // offset: 0x0 ordinal: 0x1
  };
  ULONG LowResourceFailure : 1;  // offset: 0x0 ordinal: 0x2
  ULONG Spare : 14;              // offset: 0x0 ordinal: 0x3
  ULONG RemainingPageCount : 16; // offset: 0x0 ordinal: 0x4
} _MI_STORE_INPAGE_COMPLETE_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _MMINPAGE_FLAGS {
  ULONG GetExtents : 1;              // offset: 0x0 ordinal: 0x0
  ULONG PrefetchSystemVmType : 2;    // offset: 0x0 ordinal: 0x1
  ULONG VaPrefetchReadBlock : 1;     // offset: 0x0 ordinal: 0x2
  ULONG CollidedFlowThrough : 1;     // offset: 0x0 ordinal: 0x3
  ULONG ForceCollisions : 1;         // offset: 0x0 ordinal: 0x4
  ULONG InPageExpanded : 1;          // offset: 0x0 ordinal: 0x5
  ULONG IssuedAtLowPriority : 1;     // offset: 0x0 ordinal: 0x6
  ULONG FaultFromStore : 1;          // offset: 0x0 ordinal: 0x7
  ULONG PagePriority : 3;            // offset: 0x0 ordinal: 0x8
  ULONG ClusteredPagePriority : 3;   // offset: 0x0 ordinal: 0x9
  ULONG MakeClusterValid : 1;        // offset: 0x0 ordinal: 0xa
  ULONG PerformRelocations : 1;      // offset: 0x0 ordinal: 0xb
  ULONG ZeroLastPage : 1;            // offset: 0x0 ordinal: 0xc
  ULONG UserFault : 1;               // offset: 0x0 ordinal: 0xd
  ULONG StandbyProtectionNeeded : 1; // offset: 0x0 ordinal: 0xe
  ULONG PteChanged : 1;              // offset: 0x0 ordinal: 0xf
  ULONG PageFileFault : 1;           // offset: 0x0 ordinal: 0x10
  ULONG PageFilePageHashActive : 1;  // offset: 0x0 ordinal: 0x11
  ULONG CoalescedIo : 1;             // offset: 0x0 ordinal: 0x12
  ULONG VmLockNotNeeded : 1;         // offset: 0x0 ordinal: 0x13
  ULONG Spare0 : 1;                  // offset: 0x0 ordinal: 0x14
  ULONG Spare1 : 6;                  // offset: 0x0 ordinal: 0x15
} _MMINPAGE_FLAGS;

// 0x4 bytes (sizeof)
typedef union __anon_1529 {
  struct _MMINPAGE_FLAGS e1; // offset: 0x0 ordinal: 0x0
  ULONG LongFlags;           // offset: 0x0 ordinal: 0x1
} __anon_1529;

// 0x4 bytes (sizeof)
typedef union __anon_1528 {
  ULONG ImagePteOffset; // offset: 0x0 ordinal: 0x0
  ULONG TossPage;       // offset: 0x0 ordinal: 0x1
} __anon_1528;

// 0x4 bytes (sizeof)
typedef struct _MMSECURE_FLAGS {
  ULONG ReadOnly : 1;            // offset: 0x0 ordinal: 0x0
  ULONG ReadWrite : 1;           // offset: 0x0 ordinal: 0x1
  ULONG SecNoChange : 1;         // offset: 0x0 ordinal: 0x2
  ULONG NoDelete : 1;            // offset: 0x0 ordinal: 0x3
  ULONG RequiresPteReversal : 1; // offset: 0x0 ordinal: 0x4
  ULONG ExclusiveSecure : 1;     // offset: 0x0 ordinal: 0x5
  ULONG UserModeOnly : 1;        // offset: 0x0 ordinal: 0x6
  ULONG NoInherit : 1;           // offset: 0x0 ordinal: 0x7
  ULONG CheckVad : 1;            // offset: 0x0 ordinal: 0x8
  ULONG Spare : 3;               // offset: 0x0 ordinal: 0x9
} _MMSECURE_FLAGS;

// 0x4 bytes (sizeof)
typedef union __anon_1523 {
  struct _MMSECURE_FLAGS Flags; // offset: 0x0 ordinal: 0x0
  ULONG FlagsLong;              // offset: 0x0 ordinal: 0x1
  VOID *StartVa;                // offset: 0x0 ordinal: 0x2
} __anon_1523;

// 0x8 bytes (sizeof)
typedef struct _MMADDRESS_LIST {
  union __anon_1523 u1; // offset: 0x0 ordinal: 0x0
  VOID *EndVa;          // offset: 0x4 ordinal: 0x1
} _MMADDRESS_LIST;

// 0xc bytes (sizeof)
typedef struct _MI_LARGEPAGE_VAD_INFO {
  UCHAR LargeImageBias;                    // offset: 0x0 ordinal: 0x0
  UCHAR Spare[3];                          // offset: 0x1 ordinal: 0x1
  ULONG ActualImageViewSize;               // offset: 0x4 ordinal: 0x2
  struct _EPARTITION *ReferencedPartition; // offset: 0x8 ordinal: 0x3
} _MI_LARGEPAGE_VAD_INFO;

// 0x4 bytes (sizeof)
typedef struct _MMVAD_FLAGS1 {
  ULONG CommitCharge : 31; // offset: 0x0 ordinal: 0x0
  ULONG MemCommit : 1;     // offset: 0x0 ordinal: 0x1
} _MMVAD_FLAGS1;

// 0x4 bytes (sizeof)
typedef union __anon_1513 {
  ULONG LongFlags1;               // offset: 0x0 ordinal: 0x0
  struct _MMVAD_FLAGS1 VadFlags1; // offset: 0x0 ordinal: 0x1
} __anon_1513;

// 0x4 bytes (sizeof)
typedef struct _MM_SHARED_VAD_FLAGS {
  ULONG Lock : 1;                     // offset: 0x0 ordinal: 0x0
  ULONG LockContended : 1;            // offset: 0x0 ordinal: 0x1
  ULONG DeleteInProgress : 1;         // offset: 0x0 ordinal: 0x2
  ULONG NoChange : 1;                 // offset: 0x0 ordinal: 0x3
  ULONG VadType : 3;                  // offset: 0x0 ordinal: 0x4
  ULONG Protection : 5;               // offset: 0x0 ordinal: 0x5
  ULONG PreferredNode : 6;            // offset: 0x0 ordinal: 0x6
  ULONG PageSize : 2;                 // offset: 0x0 ordinal: 0x7
  ULONG PrivateMemoryAlwaysClear : 1; // offset: 0x0 ordinal: 0x8
  ULONG PrivateFixup : 1;             // offset: 0x0 ordinal: 0x9
  ULONG HotPatchAllowed : 1;          // offset: 0x0 ordinal: 0xa
} _MM_SHARED_VAD_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _MM_GRAPHICS_VAD_FLAGS {
  ULONG Lock : 1;                   // offset: 0x0 ordinal: 0x0
  ULONG LockContended : 1;          // offset: 0x0 ordinal: 0x1
  ULONG DeleteInProgress : 1;       // offset: 0x0 ordinal: 0x2
  ULONG NoChange : 1;               // offset: 0x0 ordinal: 0x3
  ULONG VadType : 3;                // offset: 0x0 ordinal: 0x4
  ULONG Protection : 5;             // offset: 0x0 ordinal: 0x5
  ULONG PreferredNode : 6;          // offset: 0x0 ordinal: 0x6
  ULONG PageSize : 2;               // offset: 0x0 ordinal: 0x7
  ULONG PrivateMemoryAlwaysSet : 1; // offset: 0x0 ordinal: 0x8
  ULONG WriteWatch : 1;             // offset: 0x0 ordinal: 0x9
  ULONG FixedLargePageSize : 1;     // offset: 0x0 ordinal: 0xa
  ULONG ZeroFillPagesOptional : 1;  // offset: 0x0 ordinal: 0xb
  ULONG GraphicsAlwaysSet : 1;      // offset: 0x0 ordinal: 0xc
  ULONG GraphicsUseCoherentBus : 1; // offset: 0x0 ordinal: 0xd
  ULONG GraphicsPageProtection : 3; // offset: 0x0 ordinal: 0xe
} _MM_GRAPHICS_VAD_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _MM_PRIVATE_VAD_FLAGS {
  ULONG Lock : 1;                   // offset: 0x0 ordinal: 0x0
  ULONG LockContended : 1;          // offset: 0x0 ordinal: 0x1
  ULONG DeleteInProgress : 1;       // offset: 0x0 ordinal: 0x2
  ULONG NoChange : 1;               // offset: 0x0 ordinal: 0x3
  ULONG VadType : 3;                // offset: 0x0 ordinal: 0x4
  ULONG Protection : 5;             // offset: 0x0 ordinal: 0x5
  ULONG PreferredNode : 6;          // offset: 0x0 ordinal: 0x6
  ULONG PageSize : 2;               // offset: 0x0 ordinal: 0x7
  ULONG PrivateMemoryAlwaysSet : 1; // offset: 0x0 ordinal: 0x8
  ULONG WriteWatch : 1;             // offset: 0x0 ordinal: 0x9
  ULONG FixedLargePageSize : 1;     // offset: 0x0 ordinal: 0xa
  ULONG ZeroFillPagesOptional : 1;  // offset: 0x0 ordinal: 0xb
  ULONG Graphics : 1;               // offset: 0x0 ordinal: 0xc
  ULONG Enclave : 1;                // offset: 0x0 ordinal: 0xd
  ULONG ShadowStack : 1;            // offset: 0x0 ordinal: 0xe
} _MM_PRIVATE_VAD_FLAGS;

// 0x4 bytes (sizeof)
typedef struct _MMVAD_FLAGS {
  ULONG Lock : 1;             // offset: 0x0 ordinal: 0x0
  ULONG LockContended : 1;    // offset: 0x0 ordinal: 0x1
  ULONG DeleteInProgress : 1; // offset: 0x0 ordinal: 0x2
  ULONG NoChange : 1;         // offset: 0x0 ordinal: 0x3
  ULONG VadType : 3;          // offset: 0x0 ordinal: 0x4
  ULONG Protection : 5;       // offset: 0x0 ordinal: 0x5
  ULONG PreferredNode : 6;    // offset: 0x0 ordinal: 0x6
  ULONG PageSize : 2;         // offset: 0x0 ordinal: 0x7
  ULONG PrivateMemory : 1;    // offset: 0x0 ordinal: 0x8
} _MMVAD_FLAGS;

// 0x4 bytes (sizeof)
typedef union __anon_1508 {
  ULONG LongFlags;                                // offset: 0x0 ordinal: 0x0
  struct _MMVAD_FLAGS VadFlags;                   // offset: 0x0 ordinal: 0x1
  struct _MM_PRIVATE_VAD_FLAGS PrivateVadFlags;   // offset: 0x0 ordinal: 0x2
  struct _MM_GRAPHICS_VAD_FLAGS GraphicsVadFlags; // offset: 0x0 ordinal: 0x3
  struct _MM_SHARED_VAD_FLAGS SharedVadFlags;     // offset: 0x0 ordinal: 0x4
  ULONG VolatileVadLong;                          // offset: 0x0 ordinal: 0x5
} __anon_1508;

// 0x4 bytes (sizeof)
typedef struct _MIPFNBLINK {
  ULONG Blink : 24;                  // offset: 0x0 ordinal: 0x0
  ULONG TbFlushStamp : 4;            // offset: 0x0 ordinal: 0x1
  ULONG Unused : 1;                  // offset: 0x0 ordinal: 0x2
  ULONG PageBlinkDeleteBit : 1;      // offset: 0x0 ordinal: 0x3
  ULONG PageBlinkLockBit : 1;        // offset: 0x0 ordinal: 0x4
  ULONG ShareCount : 30;             // offset: 0x0 ordinal: 0x5
  ULONG PageShareCountDeleteBit : 1; // offset: 0x0 ordinal: 0x6
  ULONG PageShareCountLockBit : 1;   // offset: 0x0 ordinal: 0x7
  union {
    ULONG EntireField;      // offset: 0x0 ordinal: 0x8
    LONG Lock;              // offset: 0x0 ordinal: 0x9
    ULONG LockNotUsed : 30; // offset: 0x0 ordinal: 0xa
  };
  ULONG DeleteBit : 1; // offset: 0x0 ordinal: 0xb
  ULONG LockBit : 1;   // offset: 0x0 ordinal: 0xc
} _MIPFNBLINK;

// 0x4 bytes (sizeof)
typedef union __anon_1505 {
  ULONG PteFrame : 24;    // offset: 0x0 ordinal: 0x0
  ULONG PageIdentity : 3; // offset: 0x0 ordinal: 0x1
  ULONG PrototypePte : 1; // offset: 0x0 ordinal: 0x2
  ULONG PageColor : 4;    // offset: 0x0 ordinal: 0x3
  ULONG EntireField;      // offset: 0x0 ordinal: 0x4
} __anon_1505;

// 0x4 bytes (sizeof)
typedef struct __anon_1501 {
  ULONG EntireField; // offset: 0x0 ordinal: 0x0
} __anon_1501;

// 0x4 bytes (sizeof)
typedef union __anon_1502 {
  USHORT ReferenceCount;  // offset: 0x0 ordinal: 0x0
  struct _MMPFNENTRY1 e1; // offset: 0x2 ordinal: 0x1
  struct _MMPFNENTRY3 e3; // offset: 0x3 ordinal: 0x2
  struct __anon_1500 e2;  // offset: 0x0 ordinal: 0x3
  struct __anon_1501 e4;  // offset: 0x0 ordinal: 0x4
} __anon_1502;

// 0x4 bytes (sizeof)
typedef struct __anon_1499 {
  ULONG Tradable : 1;       // offset: 0x0 ordinal: 0x0
  ULONG WsleAge : 3;        // offset: 0x0 ordinal: 0x1
  ULONG NonPagedBuddy : 28; // offset: 0x0 ordinal: 0x2
} __anon_1499;

// 0x4 bytes (sizeof)
typedef struct __anon_1498 {
  ULONG Tradable : 1;       // offset: 0x0 ordinal: 0x0
  ULONG NonPagedBuddy : 28; // offset: 0x0 ordinal: 0x1
} __anon_1498;

// 0x4 bytes (sizeof)
typedef struct _MI_ACTIVE_PFN {
  union {
    struct __anon_1498 Leaf;      // offset: 0x0 ordinal: 0x0
    struct __anon_1499 PageTable; // offset: 0x0 ordinal: 0x1
    ULONG EntireActiveField;      // offset: 0x0 ordinal: 0x2
  };
} _MI_ACTIVE_PFN;

// 0x4 bytes (sizeof)
typedef union __anon_1496 {
  struct _SINGLE_LIST_ENTRY NextSlistPfn; // offset: 0x0 ordinal: 0x0
  VOID *Next;                             // offset: 0x0 ordinal: 0x1
  ULONG Flink;                            // offset: 0x0 ordinal: 0x2
  struct _MI_ACTIVE_PFN Active;           // offset: 0x0 ordinal: 0x3
} __anon_1496;

// 0x4 bytes (sizeof)
typedef struct __anon_1495 {
  ULONG PrototypePtesFlags; // offset: 0x0 ordinal: 0x0
} __anon_1495;

// 0x4 bytes (sizeof)
typedef struct __anon_1494 {
  ULONG AllocationType : 3; // offset: 0x0 ordinal: 0x0
  ULONG Inserted : 1;       // offset: 0x0 ordinal: 0x1
} __anon_1494;

// 0x4 bytes (sizeof)
typedef union __anon_1493 {
  struct __anon_1494 e1; // offset: 0x0 ordinal: 0x0
  struct __anon_1495 e2; // offset: 0x0 ordinal: 0x1
} __anon_1493;

// 0x4 bytes (sizeof)
typedef struct _IMAGE_SECURITY_CONTEXT {
  union {
    VOID *PageHashes;               // offset: 0x0 ordinal: 0x0
    ULONG Value;                    // offset: 0x0 ordinal: 0x1
    ULONG SecurityBeingCreated : 2; // offset: 0x0 ordinal: 0x2
  };
  ULONG SecurityMandatory : 1; // offset: 0x0 ordinal: 0x3
  ULONG PageHashPointer : 29;  // offset: 0x0 ordinal: 0x4
} _IMAGE_SECURITY_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct _MODWRITER_FLAGS {
  ULONG KeepForever : 1;        // offset: 0x0 ordinal: 0x0
  ULONG Networked : 1;          // offset: 0x0 ordinal: 0x1
  ULONG IoPriority : 3;         // offset: 0x0 ordinal: 0x2
  ULONG ModifiedStoreWrite : 1; // offset: 0x0 ordinal: 0x3
} _MODWRITER_FLAGS;

// 0xc bytes (sizeof)
typedef struct _MI_EXTRA_IMAGE_INFORMATION {
  ULONG SizeOfHeaders; // offset: 0x0 ordinal: 0x0
  ULONG SizeOfImage;   // offset: 0x4 ordinal: 0x1
  ULONG TimeDateStamp; // offset: 0x8 ordinal: 0x2
} _MI_EXTRA_IMAGE_INFORMATION;

// 0x30 bytes (sizeof)
typedef struct _SECTION_IMAGE_INFORMATION {
  VOID *TransferAddress;              // offset: 0x0 ordinal: 0x0
  ULONG ZeroBits;                     // offset: 0x4 ordinal: 0x1
  ULONG MaximumStackSize;             // offset: 0x8 ordinal: 0x2
  ULONG CommittedStackSize;           // offset: 0xc ordinal: 0x3
  ULONG SubSystemType;                // offset: 0x10 ordinal: 0x4
  USHORT SubSystemMinorVersion;       // offset: 0x14 ordinal: 0x5
  USHORT SubSystemMajorVersion;       // offset: 0x16 ordinal: 0x6
  ULONG SubSystemVersion;             // offset: 0x14 ordinal: 0x7
  USHORT MajorOperatingSystemVersion; // offset: 0x18 ordinal: 0x8
  USHORT MinorOperatingSystemVersion; // offset: 0x1a ordinal: 0x9
  ULONG OperatingSystemVersion;       // offset: 0x18 ordinal: 0xa
  USHORT ImageCharacteristics;        // offset: 0x1c ordinal: 0xb
  USHORT DllCharacteristics;          // offset: 0x1e ordinal: 0xc
  USHORT Machine;                     // offset: 0x20 ordinal: 0xd
  UCHAR ImageContainsCode;            // offset: 0x22 ordinal: 0xe
  union {
    UCHAR ImageFlags;             // offset: 0x23 ordinal: 0xf
    UCHAR ComPlusNativeReady : 1; // offset: 0x23 ordinal: 0x10
  };
  UCHAR ComPlusILOnly : 1;             // offset: 0x23 ordinal: 0x11
  UCHAR ImageDynamicallyRelocated : 1; // offset: 0x23 ordinal: 0x12
  UCHAR ImageMappedFlat : 1;           // offset: 0x23 ordinal: 0x13
  UCHAR BaseBelow4gb : 1;              // offset: 0x23 ordinal: 0x14
  UCHAR ComPlusPrefer32bit : 1;        // offset: 0x23 ordinal: 0x15
  UCHAR Reserved : 2;                  // offset: 0x23 ordinal: 0x16
  ULONG LoaderFlags;                   // offset: 0x24 ordinal: 0x17
  ULONG ImageFileSize;                 // offset: 0x28 ordinal: 0x18
  ULONG CheckSum;                      // offset: 0x2c ordinal: 0x19
} _SECTION_IMAGE_INFORMATION;

// 0x3c bytes (sizeof)
typedef struct _MI_SECTION_IMAGE_INFORMATION {
  struct _SECTION_IMAGE_INFORMATION
      ExportedImageInformation; // offset: 0x0 ordinal: 0x0
  struct _MI_EXTRA_IMAGE_INFORMATION
      InternalImageInformation; // offset: 0x30 ordinal: 0x1
} _MI_SECTION_IMAGE_INFORMATION;

// 0x4 bytes (sizeof)
typedef union __anon_1455 {
  struct _MI_SECTION_IMAGE_INFORMATION
      *ImageInformation; // offset: 0x0 ordinal: 0x0
  VOID *FirstMappedVa;   // offset: 0x0 ordinal: 0x1
} __anon_1455;

// 0x1c bytes (sizeof)
typedef struct _MI_CONTROL_AREA_WAIT_BLOCK {
  struct _MI_CONTROL_AREA_WAIT_BLOCK *Next; // offset: 0x0 ordinal: 0x0
  ULONG WaitReason;                         // offset: 0x4 ordinal: 0x1
  ULONG WaitResponse;                       // offset: 0x8 ordinal: 0x2
  struct _KGATE Gate;                       // offset: 0xc ordinal: 0x3
} _MI_CONTROL_AREA_WAIT_BLOCK;

// 0x4 bytes (sizeof)
typedef struct _MMSECTION_FLAGS {
  ULONG BeingDeleted : 1;                     // offset: 0x0 ordinal: 0x0
  ULONG BeingCreated : 1;                     // offset: 0x0 ordinal: 0x1
  ULONG BeingPurged : 1;                      // offset: 0x0 ordinal: 0x2
  ULONG NoModifiedWriting : 1;                // offset: 0x0 ordinal: 0x3
  ULONG FailAllIo : 1;                        // offset: 0x0 ordinal: 0x4
  ULONG Image : 1;                            // offset: 0x0 ordinal: 0x5
  ULONG Based : 1;                            // offset: 0x0 ordinal: 0x6
  ULONG File : 1;                             // offset: 0x0 ordinal: 0x7
  ULONG AttemptingDelete : 1;                 // offset: 0x0 ordinal: 0x8
  ULONG PrefetchCreated : 1;                  // offset: 0x0 ordinal: 0x9
  ULONG PhysicalMemory : 1;                   // offset: 0x0 ordinal: 0xa
  ULONG ImageControlAreaOnRemovableMedia : 1; // offset: 0x0 ordinal: 0xb
  ULONG Reserve : 1;                          // offset: 0x0 ordinal: 0xc
  ULONG Commit : 1;                           // offset: 0x0 ordinal: 0xd
  ULONG NoChange : 1;                         // offset: 0x0 ordinal: 0xe
  ULONG WasPurged : 1;                        // offset: 0x0 ordinal: 0xf
  ULONG UserReference : 1;                    // offset: 0x0 ordinal: 0x10
  ULONG GlobalMemory : 1;                     // offset: 0x0 ordinal: 0x11
  ULONG DeleteOnClose : 1;                    // offset: 0x0 ordinal: 0x12
  ULONG FilePointerNull : 1;                  // offset: 0x0 ordinal: 0x13
  ULONG PreferredNode : 6;                    // offset: 0x0 ordinal: 0x14
  ULONG GlobalOnlyPerSession : 1;             // offset: 0x0 ordinal: 0x15
  ULONG UserWritable : 1;                     // offset: 0x0 ordinal: 0x16
  ULONG SystemVaAllocated : 1;                // offset: 0x0 ordinal: 0x17
  ULONG PreferredFsCompressionBoundary : 1;   // offset: 0x0 ordinal: 0x18
  ULONG UsingFileExtents : 1;                 // offset: 0x0 ordinal: 0x19
  ULONG PageSize64K : 1;                      // offset: 0x0 ordinal: 0x1a
} _MMSECTION_FLAGS;

// 0x4 bytes (sizeof)
typedef union __anon_1478 {
  ULONG IoAttributionContext : 29; // offset: 0x0 ordinal: 0x0
  ULONG Spare : 3;                 // offset: 0x0 ordinal: 0x1
  ULONG ImageCrossPartitionCharge; // offset: 0x0 ordinal: 0x2
  ULONG CommittedPageCount : 20;   // offset: 0x0 ordinal: 0x3
} __anon_1478;

// 0x4 bytes (sizeof)
typedef union __anon_1475 {
  ULONG LongFlags;               // offset: 0x0 ordinal: 0x0
  struct _MMSECTION_FLAGS Flags; // offset: 0x0 ordinal: 0x1
} __anon_1475;

// 0x4 bytes (sizeof)
typedef union __anon_1460 {
  ULONG EntryBecameEmpty : 1; // offset: 0x0 ordinal: 0x0
  ULONG Spare : 31;           // offset: 0x0 ordinal: 0x1
  ULONG AllFlags;             // offset: 0x0 ordinal: 0x2
} __anon_1460;

// 0x4 bytes (sizeof)
typedef struct _MI_DECAY_TIMER_LINKAGE {
  ULONG Spare0 : 1;            // offset: 0x0 ordinal: 0x0
  ULONG PreviousDecayPfn : 15; // offset: 0x0 ordinal: 0x1
  ULONG Spare1 : 1;            // offset: 0x0 ordinal: 0x2
  ULONG NextDecayPfn : 15;     // offset: 0x0 ordinal: 0x3
} _MI_DECAY_TIMER_LINKAGE;

// 0x4 bytes (sizeof)
typedef union __anon_1454 {
  ULONG ImageCommitment;   // offset: 0x0 ordinal: 0x0
  ULONG CreatingProcessId; // offset: 0x0 ordinal: 0x1
} __anon_1454;

// 0x8 bytes (sizeof)
typedef struct _PHYSICAL_MEMORY_RUN {
  ULONG BasePage;  // offset: 0x0 ordinal: 0x0
  ULONG PageCount; // offset: 0x4 ordinal: 0x1
} _PHYSICAL_MEMORY_RUN;

// 0x4 bytes (sizeof)
typedef union __anon_1445 {
  ULONG Long;                        // offset: 0x0 ordinal: 0x0
  struct _MI_DECAY_TIMER_LINKAGE e1; // offset: 0x0 ordinal: 0x1
} __anon_1445;

// 0x4 bytes (sizeof)
typedef struct _MI_DECAY_TIMER_LINK {
  union __anon_1445 u1; // offset: 0x0 ordinal: 0x0
} _MI_DECAY_TIMER_LINK;

// 0x4 bytes (sizeof)
typedef struct __anon_1440 {
  ULONG ChannelsHotCold : 1; // offset: 0x0 ordinal: 0x0
  ULONG Spare : 31;          // offset: 0x0 ordinal: 0x1
} __anon_1440;

// 0xc bytes (sizeof)
typedef struct _MI_FREE_LARGE_PAGE_LIST {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
  ULONG EntryCount;            // offset: 0x8 ordinal: 0x1
} _MI_FREE_LARGE_PAGE_LIST;

// 0x14 bytes (sizeof)
typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES {
  struct _KEVENT Event; // offset: 0x0 ordinal: 0x0
  ULONG EventSets;      // offset: 0x10 ordinal: 0x1
} _MI_AVAILABLE_PAGE_WAIT_STATES;

// 0x10 bytes (sizeof)
typedef struct _MI_CROSS_PARTITION_CHARGES {
  ULONG CurrentCharges; // offset: 0x0 ordinal: 0x0
  ULONG ChargeFailures; // offset: 0x4 ordinal: 0x1
  ULONG ChargePeak;     // offset: 0x8 ordinal: 0x2
  ULONG ChargeMinimum;  // offset: 0xc ordinal: 0x3
} _MI_CROSS_PARTITION_CHARGES;

// 0x4 bytes (sizeof)
typedef union __anon_1419 {
  ULONG LongFlags;                           // offset: 0x0 ordinal: 0x0
  struct _MMPAGE_FILE_EXPANSION_FLAGS Flags; // offset: 0x0 ordinal: 0x1
} __anon_1419;

// 0x10 bytes (sizeof)
typedef struct _PHYSICAL_MEMORY_DESCRIPTOR {
  ULONG NumberOfRuns;                 // offset: 0x0 ordinal: 0x0
  ULONG NumberOfPages;                // offset: 0x4 ordinal: 0x1
  struct _PHYSICAL_MEMORY_RUN Run[1]; // offset: 0x8 ordinal: 0x2
} _PHYSICAL_MEMORY_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef struct _MI_PARTITION_FLAGS {
  ULONG BeingDeleted : 1;                 // offset: 0x0 ordinal: 0x0
  ULONG PageListsInitialized : 1;         // offset: 0x0 ordinal: 0x1
  ULONG StoreReservedPagesCharged : 1;    // offset: 0x0 ordinal: 0x2
  ULONG UseProtectedSlabAllocators : 1;   // offset: 0x0 ordinal: 0x3
  ULONG UseUnprotectedSlabAllocators : 1; // offset: 0x0 ordinal: 0x4
  ULONG PureHoldingPartition : 1;         // offset: 0x0 ordinal: 0x5
  ULONG ZeroPagesOptional : 1;            // offset: 0x0 ordinal: 0x6
} _MI_PARTITION_FLAGS;

// 0x4 bytes (sizeof)
typedef union __anon_1374 {
  ULONG LongFlags;                  // offset: 0x0 ordinal: 0x0
  struct _MI_PARTITION_FLAGS Flags; // offset: 0x0 ordinal: 0x1
} __anon_1374;

// 0x80 bytes (sizeof)
typedef struct _MI_PARTITION_COMMIT {
  ULONG PeakCommitment;          // offset: 0x0 ordinal: 0x0
  ULONG TotalCommitLimitMaximum; // offset: 0x4 ordinal: 0x1
  LONG Popups[2];                // offset: 0x8 ordinal: 0x2
  ULONG LowCommitThreshold;      // offset: 0x10 ordinal: 0x3
  ULONG HighCommitThreshold;     // offset: 0x14 ordinal: 0x4
  ULONG EventLock;               // offset: 0x18 ordinal: 0x5
  ULONG SystemCommitReserve;     // offset: 0x1c ordinal: 0x6
  ULONG OverCommit;              // offset: 0x40 ordinal: 0x7
} _MI_PARTITION_COMMIT;

// 0x4 bytes (sizeof)
typedef struct _MI_CLONE_BLOCK_FLAGS {
  ULONG ActualCloneCommit : 27; // offset: 0x0 ordinal: 0x0
  ULONG CloneProtection : 5;    // offset: 0x0 ordinal: 0x1
} _MI_CLONE_BLOCK_FLAGS;

// 0x14 bytes (sizeof)
typedef struct _MMPFNLIST {
  ULONG Total;            // offset: 0x0 ordinal: 0x0
  enum _MMLISTS ListName; // offset: 0x4 ordinal: 0x1
  ULONG Flink;            // offset: 0x8 ordinal: 0x2
  ULONG Blink;            // offset: 0xc ordinal: 0x3
  ULONG Lock;             // offset: 0x10 ordinal: 0x4
} _MMPFNLIST;

// 0x8 bytes (sizeof)
typedef struct _MI_CACHED_PTE {
  ULONG GlobalTimeStamp; // offset: 0x0 ordinal: 0x0
  ULONG PteIndex;        // offset: 0x4 ordinal: 0x1
  LONGLONG Long;         // offset: 0x0 ordinal: 0x2
} _MI_CACHED_PTE;

// 0x4 bytes (sizeof)
typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE {
  ULONG Expanded : 1;      // offset: 0x0 ordinal: 0x0
  ULONG Transitioning : 1; // offset: 0x0 ordinal: 0x1
  ULONG Pageable : 1;      // offset: 0x0 ordinal: 0x2
  ULONG Value;             // offset: 0x0 ordinal: 0x3
} _EX_PUSH_LOCK_AUTO_EXPAND_STATE;

// 0x34 bytes (sizeof)
typedef struct wil_details_StagingConfig {
  enum wil_FeatureStore store;                    // offset: 0x0 ordinal: 0x0
  LONG forUpdate;                                 // offset: 0x4 ordinal: 0x1
  ULONG readChangeStamp;                          // offset: 0x8 ordinal: 0x2
  UCHAR readVersion;                              // offset: 0xc ordinal: 0x3
  LONG modified;                                  // offset: 0x10 ordinal: 0x4
  struct wil_details_StagingConfigHeader *header; // offset: 0x14 ordinal: 0x5
  struct wil_details_StagingConfigFeature
      *features; // offset: 0x18 ordinal: 0x6
  struct wil_details_StagingConfigUsageTrigger
      *triggers;         // offset: 0x1c ordinal: 0x7
  LONG changedInSession; // offset: 0x20 ordinal: 0x8
  VOID *buffer;          // offset: 0x24 ordinal: 0x9
  ULONG bufferSize;      // offset: 0x28 ordinal: 0xa
  ULONG bufferAlloc;     // offset: 0x2c ordinal: 0xb
  LONG bufferOwned;      // offset: 0x30 ordinal: 0xc
} wil_details_StagingConfig;

// 0xc bytes (sizeof)
typedef struct wil_details_SetPropertyCacheUsageContext {
  struct wil_details_RecordUsageResult *result; // offset: 0x0 ordinal: 0x0
  enum wil_details_ServiceReportingKind kind;   // offset: 0x4 ordinal: 0x1
  ULONG addend;                                 // offset: 0x8 ordinal: 0x2
} wil_details_SetPropertyCacheUsageContext;

// 0xc bytes (sizeof)
typedef struct wil_details_SetPropertyFlagContext {
  struct wil_details_RecordUsageResult *result; // offset: 0x0 ordinal: 0x0
  ULONG flags;                                  // offset: 0x4 ordinal: 0x1
  LONG ignoreReporting;                         // offset: 0x8 ordinal: 0x2
} wil_details_SetPropertyFlagContext;

// 0x4 bytes (sizeof)
typedef struct _RTL_CHASH_ENTRY {
  ULONG Key; // offset: 0x0 ordinal: 0x0
} _RTL_CHASH_ENTRY;

// 0x10 bytes (sizeof)
typedef struct _RTL_CHASH_TABLE {
  struct _RTL_CHASH_ENTRY *Table; // offset: 0x0 ordinal: 0x0
  ULONG EntrySizeShift;           // offset: 0x4 ordinal: 0x1
  ULONG EntryMax;                 // offset: 0x8 ordinal: 0x2
  ULONG EntryCount;               // offset: 0xc ordinal: 0x3
} _RTL_CHASH_TABLE;

// 0xc bytes (sizeof)
typedef struct _RTL_HASH_TABLE {
  ULONG EntryCount;                   // offset: 0x0 ordinal: 0x0
  ULONG MaskBitCount : 5;             // offset: 0x4 ordinal: 0x1
  ULONG BucketCount : 27;             // offset: 0x4 ordinal: 0x2
  struct _SINGLE_LIST_ENTRY *Buckets; // offset: 0x8 ordinal: 0x3
} _RTL_HASH_TABLE;

// 0x8 bytes (sizeof)
typedef struct _RTL_HASH_ENTRY {
  struct _SINGLE_LIST_ENTRY BucketLink; // offset: 0x0 ordinal: 0x0
  ULONG Key;                            // offset: 0x4 ordinal: 0x1
} _RTL_HASH_ENTRY;

// 0x4 bytes (sizeof)
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
  ULONG Primary : 1;              // offset: 0x0 ordinal: 0x0
  ULONG ContainmentWarning : 1;   // offset: 0x0 ordinal: 0x1
  ULONG Reset : 1;                // offset: 0x0 ordinal: 0x2
  ULONG ThresholdExceeded : 1;    // offset: 0x0 ordinal: 0x3
  ULONG ResourceNotAvailable : 1; // offset: 0x0 ordinal: 0x4
  ULONG LatentError : 1;          // offset: 0x0 ordinal: 0x5
  ULONG Propagated : 1;           // offset: 0x0 ordinal: 0x6
  ULONG Reserved : 25;            // offset: 0x0 ordinal: 0x7
  ULONG AsULONG;                  // offset: 0x0 ordinal: 0x8
} _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;

// 0x4 bytes (sizeof)
typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
  ULONG Recovered : 1;     // offset: 0x0 ordinal: 0x0
  ULONG PreviousError : 1; // offset: 0x0 ordinal: 0x1
  ULONG Simulated : 1;     // offset: 0x0 ordinal: 0x2
  ULONG DeviceDriver : 1;  // offset: 0x0 ordinal: 0x3
  ULONG Reserved : 28;     // offset: 0x0 ordinal: 0x4
  ULONG AsULONG;           // offset: 0x0 ordinal: 0x5
} _WHEA_ERROR_RECORD_HEADER_FLAGS;

// 0x4 bytes (sizeof)
typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
  ULONG PlatformId : 1;  // offset: 0x0 ordinal: 0x0
  ULONG Timestamp : 1;   // offset: 0x0 ordinal: 0x1
  ULONG PartitionId : 1; // offset: 0x0 ordinal: 0x2
  ULONG Reserved : 29;   // offset: 0x0 ordinal: 0x3
  ULONG AsULONG;         // offset: 0x0 ordinal: 0x4
} _WHEA_ERROR_RECORD_HEADER_VALIDBITS;

// 0x4 bytes (sizeof)
typedef union _WHEA_ERROR_PACKET_FLAGS {
  ULONG PreviousError : 1;           // offset: 0x0 ordinal: 0x0
  ULONG Reserved1 : 1;               // offset: 0x0 ordinal: 0x1
  ULONG HypervisorError : 1;         // offset: 0x0 ordinal: 0x2
  ULONG Simulated : 1;               // offset: 0x0 ordinal: 0x3
  ULONG PlatformPfaControl : 1;      // offset: 0x0 ordinal: 0x4
  ULONG PlatformDirectedOffline : 1; // offset: 0x0 ordinal: 0x5
  ULONG Reserved2 : 26;              // offset: 0x0 ordinal: 0x6
  ULONG AsULONG;                     // offset: 0x0 ordinal: 0x7
} _WHEA_ERROR_PACKET_FLAGS;

// 0x4 bytes (sizeof)
typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS {
  ULONG LogTelemetry : 1;   // offset: 0x0 ordinal: 0x0
  ULONG LogInternalEtw : 1; // offset: 0x0 ordinal: 0x1
  ULONG LogBlackbox : 1;    // offset: 0x0 ordinal: 0x2
  ULONG LogSel : 1;         // offset: 0x0 ordinal: 0x3
  ULONG RawSel : 1;         // offset: 0x0 ordinal: 0x4
  ULONG Reserved : 27;      // offset: 0x0 ordinal: 0x5
  ULONG AsULONG;            // offset: 0x0 ordinal: 0x6
} _WHEA_EVENT_LOG_ENTRY_FLAGS;

// 0x20 bytes (sizeof)
typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER {
  ULONG Signature;                         // offset: 0x0 ordinal: 0x0
  ULONG Version;                           // offset: 0x4 ordinal: 0x1
  ULONG Length;                            // offset: 0x8 ordinal: 0x2
  enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;    // offset: 0xc ordinal: 0x3
  ULONG OwnerTag;                          // offset: 0x10 ordinal: 0x4
  enum _WHEA_EVENT_LOG_ENTRY_ID Id;        // offset: 0x14 ordinal: 0x5
  union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags; // offset: 0x18 ordinal: 0x6
  ULONG PayloadLength;                     // offset: 0x1c ordinal: 0x7
} _WHEA_EVENT_LOG_ENTRY_HEADER;

// 0x20 bytes (sizeof)
typedef struct _WHEA_EVENT_LOG_ENTRY {
  struct _WHEA_EVENT_LOG_ENTRY_HEADER Header; // offset: 0x0 ordinal: 0x0
} _WHEA_EVENT_LOG_ENTRY;

// 0x4 bytes (sizeof)
typedef struct __anon_1262 {
  ULONG FilePointerIndex : 9; // offset: 0x0 ordinal: 0x0
  ULONG HardFault : 1;        // offset: 0x0 ordinal: 0x1
  ULONG Spare1 : 2;           // offset: 0x0 ordinal: 0x2
} __anon_1262;

// 0x4 bytes (sizeof)
typedef struct __anon_1261 {
  ULONG FilePointerIndex : 9; // offset: 0x0 ordinal: 0x0
  ULONG HardFault : 1;        // offset: 0x0 ordinal: 0x1
  ULONG Image : 1;            // offset: 0x0 ordinal: 0x2
  ULONG Spare0 : 1;           // offset: 0x0 ordinal: 0x3
} __anon_1261;

// 0x4 bytes (sizeof)
typedef union _MM_PAGE_ACCESS_INFO_FLAGS {
  struct __anon_1261 File;    // offset: 0x0 ordinal: 0x0
  struct __anon_1262 Private; // offset: 0x0 ordinal: 0x1
} _MM_PAGE_ACCESS_INFO_FLAGS;

// 0x10 bytes (sizeof)
typedef struct _IO_PRIORITY_INFO {
  ULONG Size;                        // offset: 0x0 ordinal: 0x0
  ULONG ThreadPriority;              // offset: 0x4 ordinal: 0x1
  ULONG PagePriority;                // offset: 0x8 ordinal: 0x2
  enum _IO_PRIORITY_HINT IoPriority; // offset: 0xc ordinal: 0x3
} _IO_PRIORITY_INFO;

// 0x10 bytes (sizeof)
typedef struct _ECP_LIST {
  ULONG Signature;            // offset: 0x0 ordinal: 0x0
  ULONG Flags;                // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY EcpList; // offset: 0x8 ordinal: 0x2
} _ECP_LIST;

// 0x14 bytes (sizeof)
typedef struct _IO_DRIVER_CREATE_CONTEXT {
  SHORT Size;                                 // offset: 0x0 ordinal: 0x0
  struct _ECP_LIST *ExtraCreateParameter;     // offset: 0x4 ordinal: 0x1
  VOID *DeviceObjectHint;                     // offset: 0x8 ordinal: 0x2
  struct _TXN_PARAMETER_BLOCK *TxnParameters; // offset: 0xc ordinal: 0x3
  struct _EJOB *SiloContext;                  // offset: 0x10 ordinal: 0x4
} _IO_DRIVER_CREATE_CONTEXT;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HANDLE_INFORMATION {
  ULONG HandleAttributes; // offset: 0x0 ordinal: 0x0
  ULONG GrantedAccess;    // offset: 0x4 ordinal: 0x1
} _OBJECT_HANDLE_INFORMATION;

// 0x10 bytes (sizeof)
typedef struct _GENERIC_MAPPING {
  ULONG GenericRead;    // offset: 0x0 ordinal: 0x0
  ULONG GenericWrite;   // offset: 0x4 ordinal: 0x1
  ULONG GenericExecute; // offset: 0x8 ordinal: 0x2
  ULONG GenericAll;     // offset: 0xc ordinal: 0x3
} _GENERIC_MAPPING;

// 0x4 bytes (sizeof)
typedef struct _EX_FAST_REF {
  union {
    VOID *Object;     // offset: 0x0 ordinal: 0x0
    ULONG RefCnt : 3; // offset: 0x0 ordinal: 0x1
  };
  ULONG Value; // offset: 0x0 ordinal: 0x2
} _EX_FAST_REF;

// 0x10 bytes (sizeof)
typedef struct _EXT_DELETE_PARAMETERS {
  ULONG Version;                  // offset: 0x0 ordinal: 0x0
  ULONG Reserved;                 // offset: 0x4 ordinal: 0x1
  VOID (*DeleteCallback)(VOID *); // offset: 0x8 ordinal: 0x2
  VOID *DeleteContext;            // offset: 0xc ordinal: 0x3
} _EXT_DELETE_PARAMETERS;

// 0x8 bytes (sizeof)
typedef struct _IO_STATUS_BLOCK {
  union {
    LONG Status;   // offset: 0x0 ordinal: 0x0
    VOID *Pointer; // offset: 0x0 ordinal: 0x1
  };
  ULONG Information; // offset: 0x4 ordinal: 0x2
} _IO_STATUS_BLOCK;

// 0x10 bytes (sizeof)
typedef struct _KERNEL_STACK_SEGMENT {
  ULONG StackBase;    // offset: 0x0 ordinal: 0x0
  ULONG StackLimit;   // offset: 0x4 ordinal: 0x1
  ULONG KernelStack;  // offset: 0x8 ordinal: 0x2
  ULONG InitialStack; // offset: 0xc ordinal: 0x3
} _KERNEL_STACK_SEGMENT;

// 0x8 bytes (sizeof)
typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER {
  struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType; // offset: 0x0 ordinal: 0x0
  ULONG InstanceNumber : 8;                         // offset: 0x4 ordinal: 0x1
  ULONG Reserved : 24;                              // offset: 0x4 ordinal: 0x2
} _PS_TRUSTLET_ATTRIBUTE_HEADER;

// 0x10 bytes (sizeof)
typedef struct _EXT_SET_PARAMETERS_V0 {
  ULONG Version;            // offset: 0x0 ordinal: 0x0
  ULONG Reserved;           // offset: 0x4 ordinal: 0x1
  LONGLONG NoWakeTolerance; // offset: 0x8 ordinal: 0x2
} _EXT_SET_PARAMETERS_V0;

// 0x10 bytes (sizeof)
typedef union _CPU_INFO {
  ULONG AsUINT32[4]; // offset: 0x0 ordinal: 0x0
  ULONG Eax;         // offset: 0x0 ordinal: 0x1
  ULONG Ebx;         // offset: 0x4 ordinal: 0x2
  ULONG Ecx;         // offset: 0x8 ordinal: 0x3
  ULONG Edx;         // offset: 0xc ordinal: 0x4
} _CPU_INFO;

// 0x4 bytes (sizeof)
typedef struct _TOKEN_MANDATORY_POLICY {
  ULONG Policy; // offset: 0x0 ordinal: 0x0
} _TOKEN_MANDATORY_POLICY;

// 0x2c bytes (sizeof)
typedef struct _RTL_STACKDB_CONTEXT {
  struct _RTL_HASH_TABLE StackSegmentTable; // offset: 0x0 ordinal: 0x0
  struct _RTL_HASH_TABLE StackEntryTable;   // offset: 0xc ordinal: 0x1
  struct _RTL_SRWLOCK StackEntryTableLock;  // offset: 0x18 ordinal: 0x2
  struct _RTL_SRWLOCK SegmentTableLock;     // offset: 0x1c ordinal: 0x3
  VOID *(*Allocate)(ULONG, VOID *);         // offset: 0x20 ordinal: 0x4
  VOID (*Free)(VOID *, VOID *);             // offset: 0x24 ordinal: 0x5
  VOID *AllocatorContext;                   // offset: 0x28 ordinal: 0x6
} _RTL_STACKDB_CONTEXT;

// 0xc bytes (sizeof)
typedef struct _RTL_HASH_TABLE_ITERATOR {
  struct _RTL_HASH_TABLE *Hash;      // offset: 0x0 ordinal: 0x0
  struct _RTL_HASH_ENTRY *HashEntry; // offset: 0x4 ordinal: 0x1
  struct _SINGLE_LIST_ENTRY *Bucket; // offset: 0x8 ordinal: 0x2
} _RTL_HASH_TABLE_ITERATOR;

// 0xc bytes (sizeof)
typedef struct _OBJECT_DIRECTORY_ENTRY {
  struct _OBJECT_DIRECTORY_ENTRY *ChainLink; // offset: 0x0 ordinal: 0x0
  VOID *Object;                              // offset: 0x4 ordinal: 0x1
  ULONG HashValue;                           // offset: 0x8 ordinal: 0x2
} _OBJECT_DIRECTORY_ENTRY;

// 0x14 bytes (sizeof)
typedef struct _ETW_LBR_SUPPORT {
  ULONG LbrHandle;   // offset: 0x0 ordinal: 0x0
  ULONG LbrOptions;  // offset: 0x4 ordinal: 0x1
  ULONG HookIdCount; // offset: 0x8 ordinal: 0x2
  USHORT HookId[4];  // offset: 0xc ordinal: 0x3
} _ETW_LBR_SUPPORT;

// 0x18 bytes (sizeof)
typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION {
  ULONG SecurityAttributeCount;                     // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY SecurityAttributesList;        // offset: 0x4 ordinal: 0x1
  ULONG WorkingSecurityAttributeCount;              // offset: 0xc ordinal: 0x2
  struct _LIST_ENTRY WorkingSecurityAttributesList; // offset: 0x10 ordinal: 0x3
} _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;

// 0x8 bytes (sizeof)
typedef struct _SID_AND_ATTRIBUTES {
  VOID *Sid;        // offset: 0x0 ordinal: 0x0
  ULONG Attributes; // offset: 0x4 ordinal: 0x1
} _SID_AND_ATTRIBUTES;

// 0x10 bytes (sizeof)
typedef struct _SEP_SID_VALUES_BLOCK {
  ULONG BlockLength;    // offset: 0x0 ordinal: 0x0
  LONG ReferenceCount;  // offset: 0x4 ordinal: 0x1
  ULONG SidCount;       // offset: 0x8 ordinal: 0x2
  ULONG SidValuesStart; // offset: 0xc ordinal: 0x3
} _SEP_SID_VALUES_BLOCK;

// 0x10 bytes (sizeof)
typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT {
  ULONG StructureSize;        // offset: 0x0 ordinal: 0x0
  ULONG SizeReturned;         // offset: 0x4 ordinal: 0x1
  ULONG Flags;                // offset: 0x8 ordinal: 0x2
  ULONG DesiredReadAlignment; // offset: 0xc ordinal: 0x3
} _FS_FILTER_SECTION_SYNC_OUTPUT;

// 0x8 bytes (sizeof)
typedef struct _HANDLE_TABLE_ENTRY_INFO {
  ULONG AuditMask;             // offset: 0x0 ordinal: 0x0
  ULONG MaxRelativeAccessMask; // offset: 0x4 ordinal: 0x1
} _HANDLE_TABLE_ENTRY_INFO;

// 0x4 bytes (sizeof)
typedef struct _EXHANDLE {
  ULONG TagBits : 2; // offset: 0x0 ordinal: 0x0
  ULONG Index : 30;  // offset: 0x0 ordinal: 0x1
  union {
    VOID *GenericHandleOverlay; // offset: 0x0 ordinal: 0x2
    ULONG Value;                // offset: 0x0 ordinal: 0x3
  };
} _EXHANDLE;

// 0x48 bytes (sizeof)
typedef struct _MI_CACHED_PTES {
  struct _MI_CACHED_PTE Bins[8]; // offset: 0x0 ordinal: 0x0
  LONG CachedPteCount;           // offset: 0x40 ordinal: 0x1
} _MI_CACHED_PTES;

// 0x38 bytes (sizeof)
typedef struct _DEVICE_MAP {
  struct _OBJECT_DIRECTORY *DosDevicesDirectory; // offset: 0x0 ordinal: 0x0
  struct _OBJECT_DIRECTORY
      *GlobalDosDevicesDirectory;  // offset: 0x4 ordinal: 0x1
  VOID *DosDevicesDirectoryHandle; // offset: 0x8 ordinal: 0x2
  LONG ReferenceCount;             // offset: 0xc ordinal: 0x3
  ULONG DriveMap;                  // offset: 0x10 ordinal: 0x4
  UCHAR DriveType[32];             // offset: 0x14 ordinal: 0x5
  struct _EJOB *ServerSilo;        // offset: 0x34 ordinal: 0x6
} _DEVICE_MAP;

// 0xc bytes (sizeof)
typedef struct __anon_1044 {
  enum _FS_FILTER_SECTION_SYNC_TYPE SyncType; // offset: 0x0 ordinal: 0x0
  ULONG PageProtection;                       // offset: 0x4 ordinal: 0x1
  struct _FS_FILTER_SECTION_SYNC_OUTPUT
      *OutputInformation; // offset: 0x8 ordinal: 0x2
} __anon_1044;

// 0xc bytes (sizeof)
typedef struct __anon_1040 {
  USHORT Group;        // offset: 0x0 ordinal: 0x0
  USHORT MessageCount; // offset: 0x2 ordinal: 0x1
  ULONG Vector;        // offset: 0x4 ordinal: 0x2
  ULONG Affinity;      // offset: 0x8 ordinal: 0x3
} __anon_1040;

// 0xc bytes (sizeof)
typedef struct _SECURITY_QUALITY_OF_SERVICE {
  ULONG Length; // offset: 0x0 ordinal: 0x0
  enum _SECURITY_IMPERSONATION_LEVEL
      ImpersonationLevel;    // offset: 0x4 ordinal: 0x1
  UCHAR ContextTrackingMode; // offset: 0x8 ordinal: 0x2
  UCHAR EffectiveOnly;       // offset: 0x9 ordinal: 0x3
} _SECURITY_QUALITY_OF_SERVICE;

// 0x2c bytes (sizeof)
typedef struct _ALPC_PORT_ATTRIBUTES {
  ULONG Flags;                                     // offset: 0x0 ordinal: 0x0
  struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // offset: 0x4 ordinal: 0x1
  ULONG MaxMessageLength;                          // offset: 0x10 ordinal: 0x2
  ULONG MemoryBandwidth;                           // offset: 0x14 ordinal: 0x3
  ULONG MaxPoolUsage;                              // offset: 0x18 ordinal: 0x4
  ULONG MaxSectionSize;                            // offset: 0x1c ordinal: 0x5
  ULONG MaxViewSize;                               // offset: 0x20 ordinal: 0x6
  ULONG MaxTotalSectionSize;                       // offset: 0x24 ordinal: 0x7
  ULONG DupObjectTypes;                            // offset: 0x28 ordinal: 0x8
} _ALPC_PORT_ATTRIBUTES;

// 0x2c bytes (sizeof)
typedef struct _OBJECT_CREATE_INFORMATION {
  ULONG Attributes;                                 // offset: 0x0 ordinal: 0x0
  VOID *RootDirectory;                              // offset: 0x4 ordinal: 0x1
  CHAR ProbeMode;                                   // offset: 0x8 ordinal: 0x2
  ULONG PagedPoolCharge;                            // offset: 0xc ordinal: 0x3
  ULONG NonPagedPoolCharge;                         // offset: 0x10 ordinal: 0x4
  ULONG SecurityDescriptorCharge;                   // offset: 0x14 ordinal: 0x5
  VOID *SecurityDescriptor;                         // offset: 0x18 ordinal: 0x6
  struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos; // offset: 0x1c ordinal: 0x7
  struct _SECURITY_QUALITY_OF_SERVICE
      SecurityQualityOfService; // offset: 0x20 ordinal: 0x8
} _OBJECT_CREATE_INFORMATION;

// 0x50 bytes (sizeof)
typedef struct _HANDLE_TRACE_DB_ENTRY {
  struct _CLIENT_ID ClientId; // offset: 0x0 ordinal: 0x0
  VOID *Handle;               // offset: 0x8 ordinal: 0x1
  ULONG Type;                 // offset: 0xc ordinal: 0x2
  VOID *StackTrace[16];       // offset: 0x10 ordinal: 0x3
} _HANDLE_TRACE_DB_ENTRY;

// 0x8 bytes (sizeof)
typedef union _HANDLE_TABLE_ENTRY {
  LONG VolatileLowValue;                          // offset: 0x0 ordinal: 0x0
  LONG LowValue;                                  // offset: 0x0 ordinal: 0x1
  struct _HANDLE_TABLE_ENTRY_INFO *InfoTable;     // offset: 0x0 ordinal: 0x2
  LONG HighValue;                                 // offset: 0x4 ordinal: 0x3
  union _HANDLE_TABLE_ENTRY *NextFreeHandleEntry; // offset: 0x4 ordinal: 0x4
  struct _EXHANDLE LeafHandleValue;               // offset: 0x4 ordinal: 0x5
  ULONG Unlocked : 1;                             // offset: 0x0 ordinal: 0x6
  ULONG Attributes : 2;                           // offset: 0x0 ordinal: 0x7
  ULONG ObjectPointerBits : 29;                   // offset: 0x0 ordinal: 0x8
  LONG RefCountField;                             // offset: 0x4 ordinal: 0x9
  ULONG GrantedAccessBits : 25;                   // offset: 0x4 ordinal: 0xa
  ULONG ProtectFromClose : 1;                     // offset: 0x4 ordinal: 0xb
  ULONG NoRightsUpgrade : 1;                      // offset: 0x4 ordinal: 0xc
  ULONG RefCnt : 5;                               // offset: 0x4 ordinal: 0xd
} _HANDLE_TABLE_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_HIGHLOW {
  ULONG LowPart;  // offset: 0x0 ordinal: 0x0
  ULONG HighPart; // offset: 0x4 ordinal: 0x1
} _MMPTE_HIGHLOW;

// 0x248 bytes (sizeof)
typedef struct _SILO_USER_SHARED_DATA {
  ULONG ServiceSessionId;                     // offset: 0x0 ordinal: 0x0
  ULONG ActiveConsoleId;                      // offset: 0x4 ordinal: 0x1
  LONGLONG ConsoleSessionForegroundProcessId; // offset: 0x8 ordinal: 0x2
  enum _NT_PRODUCT_TYPE NtProductType;        // offset: 0x10 ordinal: 0x3
  ULONG SuiteMask;                            // offset: 0x14 ordinal: 0x4
  ULONG SharedUserSessionId;                  // offset: 0x18 ordinal: 0x5
  UCHAR IsMultiSessionSku;                    // offset: 0x1c ordinal: 0x6
  WCHAR NtSystemRoot[260];                    // offset: 0x1e ordinal: 0x7
  USHORT UserModeGlobalLogger[16];            // offset: 0x226 ordinal: 0x8
} _SILO_USER_SHARED_DATA;

// 0xc bytes (sizeof)
typedef struct __anon_1003 {
  ULONG DataSize;  // offset: 0x0 ordinal: 0x0
  ULONG Reserved1; // offset: 0x4 ordinal: 0x1
  ULONG Reserved2; // offset: 0x8 ordinal: 0x2
} __anon_1003;

// 0xc bytes (sizeof)
typedef struct __anon_1002 {
  ULONG Start;    // offset: 0x0 ordinal: 0x0
  ULONG Length;   // offset: 0x4 ordinal: 0x1
  ULONG Reserved; // offset: 0x8 ordinal: 0x2
} __anon_1002;

// 0xc bytes (sizeof)
typedef struct __anon_1001 {
  ULONG Channel;       // offset: 0x0 ordinal: 0x0
  ULONG RequestLine;   // offset: 0x4 ordinal: 0x1
  UCHAR TransferWidth; // offset: 0x8 ordinal: 0x2
  UCHAR Reserved1;     // offset: 0x9 ordinal: 0x3
  UCHAR Reserved2;     // offset: 0xa ordinal: 0x4
  UCHAR Reserved3;     // offset: 0xb ordinal: 0x5
} __anon_1001;

// 0xc bytes (sizeof)
typedef struct __anon_1000 {
  ULONG Channel;   // offset: 0x0 ordinal: 0x0
  ULONG Port;      // offset: 0x4 ordinal: 0x1
  ULONG Reserved1; // offset: 0x8 ordinal: 0x2
} __anon_1000;

// 0xc bytes (sizeof)
typedef struct __anon_998 {
  USHORT Level;   // offset: 0x0 ordinal: 0x0
  USHORT Group;   // offset: 0x2 ordinal: 0x1
  ULONG Vector;   // offset: 0x4 ordinal: 0x2
  ULONG Affinity; // offset: 0x8 ordinal: 0x3
} __anon_998;

// 0xc bytes (sizeof)
typedef struct __anon_999 {
  union {
    struct __anon_1040 Raw;       // offset: 0x0 ordinal: 0x0
    struct __anon_998 Translated; // offset: 0x0 ordinal: 0x1
  };
} __anon_999;

// 0x10 bytes (sizeof)
typedef struct _DEVICE_OBJECT_LIST_ENTRY {
  struct _DEVICE_OBJECT *DeviceObject;       // offset: 0x0 ordinal: 0x0
  enum _DEVICE_RELATION_LEVEL RelationLevel; // offset: 0x4 ordinal: 0x1
  ULONG Ordinal;                             // offset: 0x8 ordinal: 0x2
  ULONG Flags;                               // offset: 0xc ordinal: 0x3
} _DEVICE_OBJECT_LIST_ENTRY;

// 0xc bytes (sizeof)
typedef struct _POWER_SEQUENCE {
  ULONG SequenceD1; // offset: 0x0 ordinal: 0x0
  ULONG SequenceD2; // offset: 0x4 ordinal: 0x1
  ULONG SequenceD3; // offset: 0x8 ordinal: 0x2
} _POWER_SEQUENCE;

// 0x4 bytes (sizeof)
typedef struct __anon_830 {
  struct _POWER_SEQUENCE *PowerSequence; // offset: 0x0 ordinal: 0x0
} __anon_830;

// 0x40 bytes (sizeof)
typedef struct _DEVICE_CAPABILITIES {
  USHORT Size;                             // offset: 0x0 ordinal: 0x0
  USHORT Version;                          // offset: 0x2 ordinal: 0x1
  ULONG DeviceD1 : 1;                      // offset: 0x4 ordinal: 0x2
  ULONG DeviceD2 : 1;                      // offset: 0x4 ordinal: 0x3
  ULONG LockSupported : 1;                 // offset: 0x4 ordinal: 0x4
  ULONG EjectSupported : 1;                // offset: 0x4 ordinal: 0x5
  ULONG Removable : 1;                     // offset: 0x4 ordinal: 0x6
  ULONG DockDevice : 1;                    // offset: 0x4 ordinal: 0x7
  ULONG UniqueID : 1;                      // offset: 0x4 ordinal: 0x8
  ULONG SilentInstall : 1;                 // offset: 0x4 ordinal: 0x9
  ULONG RawDeviceOK : 1;                   // offset: 0x4 ordinal: 0xa
  ULONG SurpriseRemovalOK : 1;             // offset: 0x4 ordinal: 0xb
  ULONG WakeFromD0 : 1;                    // offset: 0x4 ordinal: 0xc
  ULONG WakeFromD1 : 1;                    // offset: 0x4 ordinal: 0xd
  ULONG WakeFromD2 : 1;                    // offset: 0x4 ordinal: 0xe
  ULONG WakeFromD3 : 1;                    // offset: 0x4 ordinal: 0xf
  ULONG HardwareDisabled : 1;              // offset: 0x4 ordinal: 0x10
  ULONG NonDynamic : 1;                    // offset: 0x4 ordinal: 0x11
  ULONG WarmEjectSupported : 1;            // offset: 0x4 ordinal: 0x12
  ULONG NoDisplayInUI : 1;                 // offset: 0x4 ordinal: 0x13
  ULONG Reserved1 : 1;                     // offset: 0x4 ordinal: 0x14
  ULONG WakeFromInterrupt : 1;             // offset: 0x4 ordinal: 0x15
  ULONG SecureDevice : 1;                  // offset: 0x4 ordinal: 0x16
  ULONG ChildOfVgaEnabledBridge : 1;       // offset: 0x4 ordinal: 0x17
  ULONG DecodeIoOnBoot : 1;                // offset: 0x4 ordinal: 0x18
  ULONG Reserved : 9;                      // offset: 0x4 ordinal: 0x19
  ULONG Address;                           // offset: 0x8 ordinal: 0x1a
  ULONG UINumber;                          // offset: 0xc ordinal: 0x1b
  enum _DEVICE_POWER_STATE DeviceState[7]; // offset: 0x10 ordinal: 0x1c
  enum _SYSTEM_POWER_STATE SystemWake;     // offset: 0x2c ordinal: 0x1d
  enum _DEVICE_POWER_STATE DeviceWake;     // offset: 0x30 ordinal: 0x1e
  ULONG D1Latency;                         // offset: 0x34 ordinal: 0x1f
  ULONG D2Latency;                         // offset: 0x38 ordinal: 0x20
  ULONG D3Latency;                         // offset: 0x3c ordinal: 0x21
} _DEVICE_CAPABILITIES;

// 0x4 bytes (sizeof)
typedef struct __anon_822 {
  struct _DEVICE_CAPABILITIES *Capabilities; // offset: 0x0 ordinal: 0x0
} __anon_822;

// 0x4 bytes (sizeof)
typedef struct _MM_SESSION_SPACE_FLAGS {
  ULONG Initialized : 1;            // offset: 0x0 ordinal: 0x0
  ULONG DeletePending : 1;          // offset: 0x0 ordinal: 0x1
  ULONG PoolInitialized : 1;        // offset: 0x0 ordinal: 0x2
  ULONG DynamicVaInitialized : 1;   // offset: 0x0 ordinal: 0x3
  ULONG WsInitialized : 1;          // offset: 0x0 ordinal: 0x4
  ULONG PoolDestroyed : 1;          // offset: 0x0 ordinal: 0x5
  ULONG ObjectInitialized : 1;      // offset: 0x0 ordinal: 0x6
  ULONG SessionHeapInitialized : 1; // offset: 0x0 ordinal: 0x7
  ULONG SessionHeapDestroyed : 1;   // offset: 0x0 ordinal: 0x8
  ULONG LeakedPoolDeliberately : 1; // offset: 0x0 ordinal: 0x9
  ULONG Filler : 22;                // offset: 0x0 ordinal: 0xa
} _MM_SESSION_SPACE_FLAGS;

// 0x28 bytes (sizeof)
typedef struct _IO_MINI_COMPLETION_PACKET_USER {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  ULONG PacketType;             // offset: 0x8 ordinal: 0x1
  VOID *KeyContext;             // offset: 0xc ordinal: 0x2
  VOID *ApcContext;             // offset: 0x10 ordinal: 0x3
  LONG IoStatus;                // offset: 0x14 ordinal: 0x4
  ULONG IoStatusInformation;    // offset: 0x18 ordinal: 0x5
  VOID(*MiniPacketCallback)
  (struct _IO_MINI_COMPLETION_PACKET_USER *,
   VOID *);        // offset: 0x1c ordinal: 0x6
  VOID *Context;   // offset: 0x20 ordinal: 0x7
  UCHAR Allocated; // offset: 0x24 ordinal: 0x8
} _IO_MINI_COMPLETION_PACKET_USER;

// 0xc bytes (sizeof)
typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY {
  struct _SINGLE_LIST_ENTRY ListEntry;            // offset: 0x0 ordinal: 0x0
  struct _IO_MINI_COMPLETION_PACKET_USER *Packet; // offset: 0x4 ordinal: 0x1
  struct _ALPC_COMPLETION_PACKET_LOOKASIDE
      *Lookaside; // offset: 0x8 ordinal: 0x2
} _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;

// 0x30 bytes (sizeof)
typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE {
  ULONG Lock;                             // offset: 0x0 ordinal: 0x0
  ULONG Size;                             // offset: 0x4 ordinal: 0x1
  ULONG ActiveCount;                      // offset: 0x8 ordinal: 0x2
  ULONG PendingNullCount;                 // offset: 0xc ordinal: 0x3
  ULONG PendingCheckCompletionListCount;  // offset: 0x10 ordinal: 0x4
  ULONG PendingDelete;                    // offset: 0x14 ordinal: 0x5
  struct _SINGLE_LIST_ENTRY FreeListHead; // offset: 0x18 ordinal: 0x6
  VOID *CompletionPort;                   // offset: 0x1c ordinal: 0x7
  VOID *CompletionKey;                    // offset: 0x20 ordinal: 0x8
  struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
      Entry[1]; // offset: 0x24 ordinal: 0x9
} _ALPC_COMPLETION_PACKET_LOOKASIDE;

typedef VOID (*__anon_1011)(struct _IO_MINI_COMPLETION_PACKET_USER *, VOID *);

// 0x8 bytes (sizeof)
typedef struct _OWNER_ENTRY {
  ULONG OwnerThread;              // offset: 0x0 ordinal: 0x0
  ULONG IoPriorityBoosted : 1;    // offset: 0x4 ordinal: 0x1
  ULONG OwnerReferenced : 1;      // offset: 0x4 ordinal: 0x2
  ULONG IoQoSPriorityBoosted : 1; // offset: 0x4 ordinal: 0x3
  ULONG OwnerCount : 29;          // offset: 0x4 ordinal: 0x4
  ULONG TableSize;                // offset: 0x4 ordinal: 0x5
} _OWNER_ENTRY;

// 0xc bytes (sizeof)
typedef struct __anon_934 {
  UCHAR Class;      // offset: 0x0 ordinal: 0x0
  UCHAR Type;       // offset: 0x1 ordinal: 0x1
  UCHAR Reserved1;  // offset: 0x2 ordinal: 0x2
  UCHAR Reserved2;  // offset: 0x3 ordinal: 0x3
  ULONG IdLowPart;  // offset: 0x4 ordinal: 0x4
  ULONG IdHighPart; // offset: 0x8 ordinal: 0x5
} __anon_934;

// 0xc bytes (sizeof)
typedef struct __anon_930 {
  ULONG Priority;  // offset: 0x0 ordinal: 0x0
  ULONG Reserved1; // offset: 0x4 ordinal: 0x1
  ULONG Reserved2; // offset: 0x8 ordinal: 0x2
} __anon_930;

// 0x10 bytes (sizeof)
typedef struct __anon_929 {
  ULONG Length;       // offset: 0x0 ordinal: 0x0
  ULONG MinBusNumber; // offset: 0x4 ordinal: 0x1
  ULONG MaxBusNumber; // offset: 0x8 ordinal: 0x2
  ULONG Reserved;     // offset: 0xc ordinal: 0x3
} __anon_929;

// 0x10 bytes (sizeof)
typedef struct __anon_927 {
  ULONG RequestLine;   // offset: 0x0 ordinal: 0x0
  ULONG Reserved;      // offset: 0x4 ordinal: 0x1
  ULONG Channel;       // offset: 0x8 ordinal: 0x2
  ULONG TransferWidth; // offset: 0xc ordinal: 0x3
} __anon_927;

// 0x8 bytes (sizeof)
typedef struct __anon_926 {
  ULONG MinimumChannel; // offset: 0x0 ordinal: 0x0
  ULONG MaximumChannel; // offset: 0x4 ordinal: 0x1
} __anon_926;

// 0x14 bytes (sizeof)
typedef struct __anon_925 {
  ULONG MinimumVector;               // offset: 0x0 ordinal: 0x0
  ULONG MaximumVector;               // offset: 0x4 ordinal: 0x1
  USHORT AffinityPolicy;             // offset: 0x8 ordinal: 0x2
  USHORT Group;                      // offset: 0xa ordinal: 0x3
  enum _IRQ_PRIORITY PriorityPolicy; // offset: 0xc ordinal: 0x4
  ULONG TargetedProcessors;          // offset: 0x10 ordinal: 0x5
} __anon_925;

// 0x8 bytes (sizeof)
typedef struct __anon_917 {
  ULONG NotificationCode; // offset: 0x0 ordinal: 0x0
  ULONG NotificationData; // offset: 0x4 ordinal: 0x1
} __anon_917;

// 0x20 bytes (sizeof)
typedef struct _FAST_MUTEX {
  LONG Count;           // offset: 0x0 ordinal: 0x0
  VOID *Owner;          // offset: 0x4 ordinal: 0x1
  ULONG Contention;     // offset: 0x8 ordinal: 0x2
  struct _KEVENT Event; // offset: 0xc ordinal: 0x3
  ULONG OldIrql;        // offset: 0x1c ordinal: 0x4
} _FAST_MUTEX;

// 0x4c bytes (sizeof)
typedef struct _PNP_DEVICE_EVENT_LIST {
  LONG Status;                     // offset: 0x0 ordinal: 0x0
  struct _KMUTANT EventQueueMutex; // offset: 0x4 ordinal: 0x1
  struct _FAST_MUTEX Lock;         // offset: 0x24 ordinal: 0x2
  struct _LIST_ENTRY List;         // offset: 0x44 ordinal: 0x3
} _PNP_DEVICE_EVENT_LIST;

// 0x80 bytes (sizeof)
typedef struct _HANDLE_TRACE_DEBUG_INFO {
  LONG RefCount;                            // offset: 0x0 ordinal: 0x0
  ULONG TableSize;                          // offset: 0x4 ordinal: 0x1
  ULONG BitMaskFlags;                       // offset: 0x8 ordinal: 0x2
  struct _FAST_MUTEX CloseCompactionLock;   // offset: 0xc ordinal: 0x3
  ULONG CurrentStackIndex;                  // offset: 0x2c ordinal: 0x4
  struct _HANDLE_TRACE_DB_ENTRY TraceDb[1]; // offset: 0x30 ordinal: 0x5
} _HANDLE_TRACE_DEBUG_INFO;

// 0x4 bytes (sizeof)
typedef struct _SYSTEM_POWER_STATE_CONTEXT {
  ULONG Reserved1 : 8;               // offset: 0x0 ordinal: 0x0
  ULONG TargetSystemState : 4;       // offset: 0x0 ordinal: 0x1
  ULONG EffectiveSystemState : 4;    // offset: 0x0 ordinal: 0x2
  ULONG CurrentSystemState : 4;      // offset: 0x0 ordinal: 0x3
  ULONG IgnoreHibernationPath : 1;   // offset: 0x0 ordinal: 0x4
  ULONG PseudoTransition : 1;        // offset: 0x0 ordinal: 0x5
  ULONG KernelSoftReboot : 1;        // offset: 0x0 ordinal: 0x6
  ULONG DirectedDripsTransition : 1; // offset: 0x0 ordinal: 0x7
  ULONG Reserved2 : 8;               // offset: 0x0 ordinal: 0x8
  ULONG ContextAsUlong;              // offset: 0x0 ordinal: 0x9
} _SYSTEM_POWER_STATE_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct _POP_CURRENT_BROADCAST {
  UCHAR InProgress;                                 // offset: 0x0 ordinal: 0x0
  struct _SYSTEM_POWER_STATE_CONTEXT SystemContext; // offset: 0x4 ordinal: 0x1
  enum POWER_ACTION PowerAction;                    // offset: 0x8 ordinal: 0x2
  struct _POP_DEVICE_SYS_STATE *DeviceState;        // offset: 0xc ordinal: 0x3
} _POP_CURRENT_BROADCAST;

// 0x24 bytes (sizeof)
typedef struct _ETW_FILTER_PID {
  ULONG Count;   // offset: 0x0 ordinal: 0x0
  ULONG Pids[8]; // offset: 0x4 ordinal: 0x1
} _ETW_FILTER_PID;

// 0x20 bytes (sizeof)
typedef struct _PERFINFO_GROUPMASK {
  ULONG Masks[8]; // offset: 0x0 ordinal: 0x0
} _PERFINFO_GROUPMASK;

// 0x174 bytes (sizeof)
typedef struct _ETW_SYSTEM_LOGGER_SETTINGS {
  struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];  // offset: 0x0 ordinal: 0x0
  ULONG EtwpActiveSystemLoggers;                  // offset: 0x10 ordinal: 0x1
  struct _PERFINFO_GROUPMASK SiloGlobalGroupMask; // offset: 0x14 ordinal: 0x2
  struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];  // offset: 0x34 ordinal: 0x3
} _ETW_SYSTEM_LOGGER_SETTINGS;

// 0x4 bytes (sizeof)
typedef struct _MI_SESSION_DRIVER_UNLOAD {
  union {
    VOID (*Function)(struct _DRIVER_OBJECT *); // offset: 0x0 ordinal: 0x0
    ULONG FunctionValue;                       // offset: 0x0 ordinal: 0x1
  };
} _MI_SESSION_DRIVER_UNLOAD;

// 0x100 bytes (sizeof)
typedef struct _POOL_DESCRIPTOR {
  enum _POOL_TYPE PoolType;  // offset: 0x0 ordinal: 0x0
  LONG RunningAllocs;        // offset: 0x40 ordinal: 0x1
  ULONG PagesAllocated;      // offset: 0x44 ordinal: 0x2
  ULONG BigPagesAllocated;   // offset: 0x48 ordinal: 0x3
  ULONG BytesAllocated;      // offset: 0x4c ordinal: 0x4
  LONG RunningDeallocs;      // offset: 0x80 ordinal: 0x5
  ULONG PagesDeallocated;    // offset: 0x84 ordinal: 0x6
  ULONG BigPagesDeallocated; // offset: 0x88 ordinal: 0x7
  ULONG BytesDeallocated;    // offset: 0x8c ordinal: 0x8
  ULONG PoolIndex;           // offset: 0xc0 ordinal: 0x9
} _POOL_DESCRIPTOR;

// 0x4 bytes (sizeof)
typedef union __anon_873 {
  ULONG LongFlags;                      // offset: 0x0 ordinal: 0x0
  struct _MM_SESSION_SPACE_FLAGS Flags; // offset: 0x0 ordinal: 0x1
} __anon_873;

// 0x4 bytes (sizeof)
typedef struct __anon_858 {
  ULONG ExtendedDestination : 24; // offset: 0x0 ordinal: 0x0
  ULONG Reserved : 6;             // offset: 0x0 ordinal: 0x1
  ULONG PassPW : 1;               // offset: 0x0 ordinal: 0x2
  ULONG WaitingForEOI : 1;        // offset: 0x0 ordinal: 0x3
} __anon_858;

// 0x4 bytes (sizeof)
typedef struct __anon_857 {
  ULONG Mask : 1;            // offset: 0x0 ordinal: 0x0
  ULONG Polarity : 1;        // offset: 0x0 ordinal: 0x1
  ULONG MessageType : 3;     // offset: 0x0 ordinal: 0x2
  ULONG RequestEOI : 1;      // offset: 0x0 ordinal: 0x3
  ULONG DestinationMode : 1; // offset: 0x0 ordinal: 0x4
  ULONG MessageType3 : 1;    // offset: 0x0 ordinal: 0x5
  ULONG Destination : 8;     // offset: 0x0 ordinal: 0x6
  ULONG Vector : 8;          // offset: 0x0 ordinal: 0x7
  ULONG ExtendedAddress : 8; // offset: 0x0 ordinal: 0x8
} __anon_857;

// 0x38 bytes (sizeof)
typedef struct _ERESOURCE {
  struct _LIST_ENTRY SystemResourcesList; // offset: 0x0 ordinal: 0x0
  struct _OWNER_ENTRY *OwnerTable;        // offset: 0x8 ordinal: 0x1
  SHORT ActiveCount;                      // offset: 0xc ordinal: 0x2
  union {
    USHORT Flag;            // offset: 0xe ordinal: 0x3
    UCHAR ReservedLowFlags; // offset: 0xe ordinal: 0x4
  };
  UCHAR WaiterPriority;           // offset: 0xf ordinal: 0x5
  VOID *SharedWaiters;            // offset: 0x10 ordinal: 0x6
  VOID *ExclusiveWaiters;         // offset: 0x14 ordinal: 0x7
  struct _OWNER_ENTRY OwnerEntry; // offset: 0x18 ordinal: 0x8
  ULONG ActiveEntries;            // offset: 0x20 ordinal: 0x9
  ULONG ContentionCount;          // offset: 0x24 ordinal: 0xa
  ULONG NumberOfSharedWaiters;    // offset: 0x28 ordinal: 0xb
  ULONG NumberOfExclusiveWaiters; // offset: 0x2c ordinal: 0xc
  union {
    VOID *Address;               // offset: 0x30 ordinal: 0xd
    ULONG CreatorBackTraceIndex; // offset: 0x30 ordinal: 0xe
  };
  ULONG SpinLock; // offset: 0x34 ordinal: 0xf
} _ERESOURCE;

// 0x4 bytes (sizeof)
typedef struct __anon_1043 {
  struct _ERESOURCE *ResourceToRelease; // offset: 0x0 ordinal: 0x0
} __anon_1043;

typedef LONG (*__anon_719)(struct _FILE_OBJECT *, struct _ERESOURCE *,
                           struct _DEVICE_OBJECT *);

// 0x8 bytes (sizeof)
typedef struct __anon_848 {
  ULONG IdleTime;    // offset: 0x0 ordinal: 0x0
  ULONG NonIdleTime; // offset: 0x4 ordinal: 0x1
} __anon_848;

// 0x8 bytes (sizeof)
typedef union __anon_768 {
  struct __anon_848 Disk; // offset: 0x0 ordinal: 0x0
} __anon_768;

typedef ULONG (*__anon_845)(VOID *);

typedef ULONG (*__anon_844)(VOID *, enum PROFILE_DEPARTURE_STYLE);

// 0x18 bytes (sizeof)
typedef struct DOCK_INTERFACE {
  USHORT Size;                          // offset: 0x0 ordinal: 0x0
  USHORT Version;                       // offset: 0x2 ordinal: 0x1
  VOID *Context;                        // offset: 0x4 ordinal: 0x2
  VOID (*InterfaceReference)(VOID *);   // offset: 0x8 ordinal: 0x3
  VOID (*InterfaceDereference)(VOID *); // offset: 0xc ordinal: 0x4
  ULONG(*ProfileDepartureSetMode)
  (VOID *, enum PROFILE_DEPARTURE_STYLE);  // offset: 0x10 ordinal: 0x5
  ULONG (*ProfileDepartureUpdate)(VOID *); // offset: 0x14 ordinal: 0x6
} DOCK_INTERFACE;

// 0x20 bytes (sizeof)
typedef struct _DEVICE_OBJECT_LIST {
  ULONG Count;                                 // offset: 0x0 ordinal: 0x0
  ULONG MaxCount;                              // offset: 0x4 ordinal: 0x1
  ULONG TagCount;                              // offset: 0x8 ordinal: 0x2
  enum _PNP_DEVICE_DELETE_TYPE OperationCode;  // offset: 0xc ordinal: 0x3
  struct _DEVICE_OBJECT_LIST_ENTRY Devices[1]; // offset: 0x10 ordinal: 0x4
} _DEVICE_OBJECT_LIST;

// 0x8 bytes (sizeof)
typedef struct _RELATION_LIST {
  struct _DEVICE_OBJECT_LIST *DeviceObjectList; // offset: 0x0 ordinal: 0x0
  UCHAR Sorted;                                 // offset: 0x4 ordinal: 0x1
} _RELATION_LIST;

// 0x10 bytes (sizeof)
typedef struct __anon_833 {
  ULONG ProviderId; // offset: 0x0 ordinal: 0x0
  VOID *DataPath;   // offset: 0x4 ordinal: 0x1
  ULONG BufferSize; // offset: 0x8 ordinal: 0x2
  VOID *Buffer;     // offset: 0xc ordinal: 0x3
} __anon_833;

// 0x10 bytes (sizeof)
typedef struct __anon_831 {
  union {
    ULONG SystemContext; // offset: 0x0 ordinal: 0x0
    struct _SYSTEM_POWER_STATE_CONTEXT
        SystemPowerStateContext; // offset: 0x0 ordinal: 0x1
  };
  enum _POWER_STATE_TYPE Type;    // offset: 0x4 ordinal: 0x2
  union _POWER_STATE State;       // offset: 0x8 ordinal: 0x3
  enum POWER_ACTION ShutdownType; // offset: 0xc ordinal: 0x4
} __anon_831;

// 0x8 bytes (sizeof)
typedef struct __anon_827 {
  enum DEVICE_TEXT_TYPE DeviceTextType; // offset: 0x0 ordinal: 0x0
  ULONG LocaleId;                       // offset: 0x4 ordinal: 0x1
} __anon_827;

// 0x10 bytes (sizeof)
typedef struct __anon_824 {
  ULONG WhichSpace; // offset: 0x0 ordinal: 0x0
  VOID *Buffer;     // offset: 0x4 ordinal: 0x1
  ULONG Offset;     // offset: 0x8 ordinal: 0x2
  ULONG Length;     // offset: 0xc ordinal: 0x3
} __anon_824;

// 0x8 bytes (sizeof)
typedef struct __anon_816 {
  ULONG SecurityInformation; // offset: 0x0 ordinal: 0x0
  VOID *SecurityDescriptor;  // offset: 0x4 ordinal: 0x1
} __anon_816;

// 0x8 bytes (sizeof)
typedef struct __anon_815 {
  ULONG SecurityInformation; // offset: 0x0 ordinal: 0x0
  ULONG Length;              // offset: 0x4 ordinal: 0x1
} __anon_815;

// 0x10 bytes (sizeof)
typedef struct __anon_814 {
  ULONG OutputBufferLength; // offset: 0x0 ordinal: 0x0
  ULONG InputBufferLength;  // offset: 0x4 ordinal: 0x1
  ULONG IoControlCode;      // offset: 0x8 ordinal: 0x2
  VOID *Type3InputBuffer;   // offset: 0xc ordinal: 0x3
} __anon_814;

// 0x10 bytes (sizeof)
typedef struct __anon_812 {
  ULONG OutputBufferLength; // offset: 0x0 ordinal: 0x0
  ULONG InputBufferLength;  // offset: 0x4 ordinal: 0x1
  ULONG FsControlCode;      // offset: 0x8 ordinal: 0x2
  VOID *Type3InputBuffer;   // offset: 0xc ordinal: 0x3
} __anon_812;

// 0x8 bytes (sizeof)
typedef struct __anon_811 {
  ULONG Length;                         // offset: 0x0 ordinal: 0x0
  enum _FSINFOCLASS FsInformationClass; // offset: 0x4 ordinal: 0x1
} __anon_811;

// 0x4 bytes (sizeof)
typedef struct __anon_810 {
  ULONG Length; // offset: 0x0 ordinal: 0x0
} __anon_810;

// 0x10 bytes (sizeof)
typedef struct __anon_809 {
  ULONG Length;       // offset: 0x0 ordinal: 0x0
  VOID *EaList;       // offset: 0x4 ordinal: 0x1
  ULONG EaListLength; // offset: 0x8 ordinal: 0x2
  ULONG EaIndex;      // offset: 0xc ordinal: 0x3
} __anon_809;

// 0x10 bytes (sizeof)
typedef struct __anon_808 {
  ULONG Length;                                      // offset: 0x0 ordinal: 0x0
  enum _FILE_INFORMATION_CLASS FileInformationClass; // offset: 0x4 ordinal: 0x1
  struct _FILE_OBJECT *FileObject;                   // offset: 0x8 ordinal: 0x2
  UCHAR ReplaceIfExists;                             // offset: 0xc ordinal: 0x3
  UCHAR AdvanceOnly;                                 // offset: 0xd ordinal: 0x4
  union {
    ULONG ClusterCount; // offset: 0xc ordinal: 0x5
    VOID *DeleteHandle; // offset: 0xc ordinal: 0x6
  };
} __anon_808;

// 0x8 bytes (sizeof)
typedef struct __anon_807 {
  ULONG Length;                                      // offset: 0x0 ordinal: 0x0
  enum _FILE_INFORMATION_CLASS FileInformationClass; // offset: 0x4 ordinal: 0x1
} __anon_807;

// 0xc bytes (sizeof)
typedef struct __anon_806 {
  ULONG Length;           // offset: 0x0 ordinal: 0x0
  ULONG CompletionFilter; // offset: 0x4 ordinal: 0x1
  enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
      DirectoryNotifyInformationClass; // offset: 0x8 ordinal: 0x2
} __anon_806;

// 0x8 bytes (sizeof)
typedef struct __anon_805 {
  ULONG Length;           // offset: 0x0 ordinal: 0x0
  ULONG CompletionFilter; // offset: 0x4 ordinal: 0x1
} __anon_805;

// 0x10 bytes (sizeof)
typedef struct __anon_804 {
  ULONG Length;                                      // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING *FileName;                  // offset: 0x4 ordinal: 0x1
  enum _FILE_INFORMATION_CLASS FileInformationClass; // offset: 0x8 ordinal: 0x2
  ULONG FileIndex;                                   // offset: 0xc ordinal: 0x3
} __anon_804;

// 0x8 bytes (sizeof)
typedef struct _JOBOBJECT_WAKE_FILTER {
  ULONG HighEdgeFilter; // offset: 0x0 ordinal: 0x0
  ULONG LowEdgeFilter;  // offset: 0x4 ordinal: 0x1
} _JOBOBJECT_WAKE_FILTER;

// 0x8 bytes (sizeof)
typedef struct _PO_DIAG_STACK_RECORD {
  ULONG StackDepth; // offset: 0x0 ordinal: 0x0
  VOID *Stack[1];   // offset: 0x4 ordinal: 0x1
} _PO_DIAG_STACK_RECORD;

// 0x80 bytes (sizeof)
typedef struct _MMSUPPORT_SHARED {
  LONG WorkingSetLock;             // offset: 0x0 ordinal: 0x0
  LONG GoodCitizenWaiting;         // offset: 0x4 ordinal: 0x1
  ULONG ReleasedCommitDebt;        // offset: 0x8 ordinal: 0x2
  ULONG ResetPagesRepurposedCount; // offset: 0xc ordinal: 0x3
  VOID *WsSwapSupport;             // offset: 0x10 ordinal: 0x4
  VOID *CommitReleaseContext;      // offset: 0x14 ordinal: 0x5
  VOID *AccessLog;                 // offset: 0x18 ordinal: 0x6
  ULONG ChargedWslePages;          // offset: 0x1c ordinal: 0x7
  ULONG ActualWslePages;           // offset: 0x20 ordinal: 0x8
  ULONG WorkingSetCoreLock;        // offset: 0x40 ordinal: 0x9
  VOID *ShadowMapping;             // offset: 0x44 ordinal: 0xa
} _MMSUPPORT_SHARED;

// 0x4 bytes (sizeof)
typedef union __anon_784 {
  struct __anon_858 bits; // offset: 0x0 ordinal: 0x0
  ULONG AsULONG;          // offset: 0x0 ordinal: 0x1
} __anon_784;

// 0x4 bytes (sizeof)
typedef union __anon_783 {
  struct __anon_857 bits; // offset: 0x0 ordinal: 0x0
  ULONG AsULONG;          // offset: 0x0 ordinal: 0x1
} __anon_783;

// 0x8 bytes (sizeof)
typedef struct _INTERRUPT_HT_INTR_INFO {
  union __anon_783 LowPart;  // offset: 0x0 ordinal: 0x0
  union __anon_784 HighPart; // offset: 0x4 ordinal: 0x1
} _INTERRUPT_HT_INTR_INFO;

// 0x8 bytes (sizeof)
typedef struct __anon_673 {
  struct _INTERRUPT_HT_INTR_INFO IntrInfo; // offset: 0x0 ordinal: 0x0
} __anon_673;

// 0xc bytes (sizeof)
typedef struct __anon_782 {
  ULONG MessageAddressHigh; // offset: 0x0 ordinal: 0x0
  ULONG MessageAddressLow;  // offset: 0x4 ordinal: 0x1
  USHORT MessageData;       // offset: 0x8 ordinal: 0x2
  USHORT Reserved;          // offset: 0xa ordinal: 0x3
} __anon_782;

// 0xc bytes (sizeof)
typedef union __anon_723 {
  struct __anon_782 Msi; // offset: 0x0 ordinal: 0x0
} __anon_723;

typedef VOID (*__anon_769)(VOID *, ULONG, UCHAR, VOID *);

// 0xc bytes (sizeof)
typedef struct _PS_PROPERTY_SET {
  struct _LIST_ENTRY ListHead; // offset: 0x0 ordinal: 0x0
  ULONG Lock;                  // offset: 0x8 ordinal: 0x1
} _PS_PROPERTY_SET;

// 0x4 bytes (sizeof)
typedef union _PS_CLIENT_SECURITY_CONTEXT {
  ULONG ImpersonationData;      // offset: 0x0 ordinal: 0x0
  VOID *ImpersonationToken;     // offset: 0x0 ordinal: 0x1
  ULONG ImpersonationLevel : 2; // offset: 0x0 ordinal: 0x2
  ULONG EffectiveOnly : 1;      // offset: 0x0 ordinal: 0x3
} _PS_CLIENT_SECURITY_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct __anon_746 {
  ULONG EnableExportAddressFilter : 1;     // offset: 0x0 ordinal: 0x0
  ULONG AuditExportAddressFilter : 1;      // offset: 0x0 ordinal: 0x1
  ULONG EnableExportAddressFilterPlus : 1; // offset: 0x0 ordinal: 0x2
  ULONG AuditExportAddressFilterPlus : 1;  // offset: 0x0 ordinal: 0x3
  ULONG EnableRopStackPivot : 1;           // offset: 0x0 ordinal: 0x4
  ULONG AuditRopStackPivot : 1;            // offset: 0x0 ordinal: 0x5
  ULONG EnableRopCallerCheck : 1;          // offset: 0x0 ordinal: 0x6
  ULONG AuditRopCallerCheck : 1;           // offset: 0x0 ordinal: 0x7
  ULONG EnableRopSimExec : 1;              // offset: 0x0 ordinal: 0x8
  ULONG AuditRopSimExec : 1;               // offset: 0x0 ordinal: 0x9
  ULONG EnableImportAddressFilter : 1;     // offset: 0x0 ordinal: 0xa
  ULONG AuditImportAddressFilter : 1;      // offset: 0x0 ordinal: 0xb
  ULONG DisablePageCombine : 1;            // offset: 0x0 ordinal: 0xc
  ULONG SpeculativeStoreBypassDisable : 1; // offset: 0x0 ordinal: 0xd
  ULONG CetUserShadowStacks : 1;           // offset: 0x0 ordinal: 0xe
} __anon_746;

// 0x4 bytes (sizeof)
typedef struct __anon_745 {
  ULONG ControlFlowGuardEnabled : 1; // offset: 0x0 ordinal: 0x0
  ULONG
  ControlFlowGuardExportSuppressionEnabled : 1;     // offset: 0x0 ordinal: 0x1
  ULONG ControlFlowGuardStrict : 1;                 // offset: 0x0 ordinal: 0x2
  ULONG DisallowStrippedImages : 1;                 // offset: 0x0 ordinal: 0x3
  ULONG ForceRelocateImages : 1;                    // offset: 0x0 ordinal: 0x4
  ULONG HighEntropyASLREnabled : 1;                 // offset: 0x0 ordinal: 0x5
  ULONG StackRandomizationDisabled : 1;             // offset: 0x0 ordinal: 0x6
  ULONG ExtensionPointDisable : 1;                  // offset: 0x0 ordinal: 0x7
  ULONG DisableDynamicCode : 1;                     // offset: 0x0 ordinal: 0x8
  ULONG DisableDynamicCodeAllowOptOut : 1;          // offset: 0x0 ordinal: 0x9
  ULONG DisableDynamicCodeAllowRemoteDowngrade : 1; // offset: 0x0 ordinal: 0xa
  ULONG AuditDisableDynamicCode : 1;                // offset: 0x0 ordinal: 0xb
  ULONG DisallowWin32kSystemCalls : 1;              // offset: 0x0 ordinal: 0xc
  ULONG AuditDisallowWin32kSystemCalls : 1;         // offset: 0x0 ordinal: 0xd
  ULONG EnableFilteredWin32kAPIs : 1;               // offset: 0x0 ordinal: 0xe
  ULONG AuditFilteredWin32kAPIs : 1;                // offset: 0x0 ordinal: 0xf
  ULONG DisableNonSystemFonts : 1;                  // offset: 0x0 ordinal: 0x10
  ULONG AuditNonSystemFontLoading : 1;              // offset: 0x0 ordinal: 0x11
  ULONG PreferSystem32Images : 1;                   // offset: 0x0 ordinal: 0x12
  ULONG ProhibitRemoteImageMap : 1;                 // offset: 0x0 ordinal: 0x13
  ULONG AuditProhibitRemoteImageMap : 1;            // offset: 0x0 ordinal: 0x14
  ULONG ProhibitLowILImageMap : 1;                  // offset: 0x0 ordinal: 0x15
  ULONG AuditProhibitLowILImageMap : 1;             // offset: 0x0 ordinal: 0x16
  ULONG SignatureMitigationOptIn : 1;               // offset: 0x0 ordinal: 0x17
  ULONG AuditBlockNonMicrosoftBinaries : 1;         // offset: 0x0 ordinal: 0x18
  ULONG
  AuditBlockNonMicrosoftBinariesAllowStore : 1; // offset: 0x0 ordinal: 0x19
  ULONG LoaderIntegrityContinuityEnabled : 1;   // offset: 0x0 ordinal: 0x1a
  ULONG AuditLoaderIntegrityContinuity : 1;     // offset: 0x0 ordinal: 0x1b
  ULONG EnableModuleTamperingProtection : 1;    // offset: 0x0 ordinal: 0x1c
  ULONG
  EnableModuleTamperingProtectionNoInherit : 1; // offset: 0x0 ordinal: 0x1d
  ULONG RestrictIndirectBranchPrediction : 1;   // offset: 0x0 ordinal: 0x1e
  ULONG IsolateSecurityDomain : 1;              // offset: 0x0 ordinal: 0x1f
} __anon_745;

// 0x4 bytes (sizeof)
typedef struct _EX_RUNDOWN_REF {
  union {
    ULONG Count; // offset: 0x0 ordinal: 0x0
    VOID *Ptr;   // offset: 0x0 ordinal: 0x1
  };
} _EX_RUNDOWN_REF;

// 0x10 bytes (sizeof)
typedef struct _EX_RUNDOWN_REF_CACHE_AWARE {
  struct _EX_RUNDOWN_REF *RunRefs; // offset: 0x0 ordinal: 0x0
  VOID *PoolToFree;                // offset: 0x4 ordinal: 0x1
  ULONG RunRefSize;                // offset: 0x8 ordinal: 0x2
  ULONG Number;                    // offset: 0xc ordinal: 0x3
} _EX_RUNDOWN_REF_CACHE_AWARE;

// 0x4 bytes (sizeof)
typedef struct _EX_PUSH_LOCK {
  ULONG Locked : 1;         // offset: 0x0 ordinal: 0x0
  ULONG Waiting : 1;        // offset: 0x0 ordinal: 0x1
  ULONG Waking : 1;         // offset: 0x0 ordinal: 0x2
  ULONG MultipleShared : 1; // offset: 0x0 ordinal: 0x3
  ULONG Shared : 28;        // offset: 0x0 ordinal: 0x4
  union {
    ULONG Value; // offset: 0x0 ordinal: 0x5
    VOID *Ptr;   // offset: 0x0 ordinal: 0x6
  };
} _EX_PUSH_LOCK;

// 0x1c bytes (sizeof)
typedef struct _RTL_ATOM_TABLE {
  ULONG Signature;                          // offset: 0x0 ordinal: 0x0
  LONG ReferenceCount;                      // offset: 0x4 ordinal: 0x1
  struct _EX_PUSH_LOCK PushLock;            // offset: 0x8 ordinal: 0x2
  struct _HANDLE_TABLE *ExHandleTable;      // offset: 0xc ordinal: 0x3
  ULONG Flags;                              // offset: 0x10 ordinal: 0x4
  ULONG NumberOfBuckets;                    // offset: 0x14 ordinal: 0x5
  struct _RTL_ATOM_TABLE_ENTRY *Buckets[1]; // offset: 0x18 ordinal: 0x6
} _RTL_ATOM_TABLE;

// 0x20 bytes (sizeof)
typedef struct _OBJECT_HEADER {
  LONG PointerCount; // offset: 0x0 ordinal: 0x0
  union {
    LONG HandleCount; // offset: 0x4 ordinal: 0x1
    VOID *NextToFree; // offset: 0x4 ordinal: 0x2
  };
  struct _EX_PUSH_LOCK Lock; // offset: 0x8 ordinal: 0x3
  UCHAR TypeIndex;           // offset: 0xc ordinal: 0x4
  union {
    UCHAR TraceFlags;      // offset: 0xd ordinal: 0x5
    UCHAR DbgRefTrace : 1; // offset: 0xd ordinal: 0x6
  };
  UCHAR DbgTracePermanent : 1; // offset: 0xd ordinal: 0x7
  UCHAR InfoMask;              // offset: 0xe ordinal: 0x8
  union {
    UCHAR Flags;         // offset: 0xf ordinal: 0x9
    UCHAR NewObject : 1; // offset: 0xf ordinal: 0xa
  };
  UCHAR KernelObject : 1;         // offset: 0xf ordinal: 0xb
  UCHAR KernelOnlyAccess : 1;     // offset: 0xf ordinal: 0xc
  UCHAR ExclusiveObject : 1;      // offset: 0xf ordinal: 0xd
  UCHAR PermanentObject : 1;      // offset: 0xf ordinal: 0xe
  UCHAR DefaultSecurityQuota : 1; // offset: 0xf ordinal: 0xf
  UCHAR SingleHandleEntry : 1;    // offset: 0xf ordinal: 0x10
  UCHAR DeletedInline : 1;        // offset: 0xf ordinal: 0x11
  union {
    struct _OBJECT_CREATE_INFORMATION
        *ObjectCreateInfo;   // offset: 0x10 ordinal: 0x12
    VOID *QuotaBlockCharged; // offset: 0x10 ordinal: 0x13
  };
  VOID *SecurityDescriptor; // offset: 0x14 ordinal: 0x14
  struct _QUAD Body;        // offset: 0x18 ordinal: 0x15
} _OBJECT_HEADER;

// 0x1c bytes (sizeof)
typedef struct _OBJECT_REF_INFO {
  struct _OBJECT_HEADER *ObjectHeader;        // offset: 0x0 ordinal: 0x0
  VOID *NextRef;                              // offset: 0x4 ordinal: 0x1
  UCHAR ImageFileName[16];                    // offset: 0x8 ordinal: 0x2
  USHORT NextPos;                             // offset: 0x18 ordinal: 0x3
  USHORT MaxStacks;                           // offset: 0x1a ordinal: 0x4
  struct _OBJECT_REF_STACK_INFO StackInfo[0]; // offset: 0x1c ordinal: 0x5
} _OBJECT_REF_INFO;

// 0xa0 bytes (sizeof)
typedef struct _DUMMY_FILE_OBJECT {
  struct _OBJECT_HEADER ObjectHeader; // offset: 0x0 ordinal: 0x0
  CHAR FileObjectBody[128];           // offset: 0x20 ordinal: 0x1
} _DUMMY_FILE_OBJECT;

// 0x10 bytes (sizeof)
typedef struct _ALPC_HANDLE_TABLE {
  struct _ALPC_HANDLE_ENTRY *Handles; // offset: 0x0 ordinal: 0x0
  ULONG TotalHandles;                 // offset: 0x4 ordinal: 0x1
  ULONG Flags;                        // offset: 0x8 ordinal: 0x2
  struct _EX_PUSH_LOCK Lock;          // offset: 0xc ordinal: 0x3
} _ALPC_HANDLE_TABLE;

// 0x18 bytes (sizeof)
typedef struct _BLOB {
  union {
    struct _LIST_ENTRY ResourceList;         // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY FreeListEntry; // offset: 0x0 ordinal: 0x1
  };
  union __anon_2079 u1;      // offset: 0x8 ordinal: 0x2
  UCHAR ResourceId;          // offset: 0x9 ordinal: 0x3
  SHORT CachedReferences;    // offset: 0xa ordinal: 0x4
  LONG ReferenceCount;       // offset: 0xc ordinal: 0x5
  ULONG Pad;                 // offset: 0x10 ordinal: 0x6
  struct _EX_PUSH_LOCK Lock; // offset: 0x14 ordinal: 0x7
} _BLOB;

// 0xc bytes (sizeof)
typedef struct _CM_KEY_HASH_TABLE_ENTRY {
  struct _EX_PUSH_LOCK Lock;  // offset: 0x0 ordinal: 0x0
  struct _KTHREAD *Owner;     // offset: 0x4 ordinal: 0x1
  struct _CM_KEY_HASH *Entry; // offset: 0x8 ordinal: 0x2
} _CM_KEY_HASH_TABLE_ENTRY;

// 0xc bytes (sizeof)
typedef struct _EX_PUSH_LOCK_AUTO_EXPAND {
  struct _EX_PUSH_LOCK LocalLock;               // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State; // offset: 0x4 ordinal: 0x1
  ULONG Stats;                                  // offset: 0x8 ordinal: 0x2
} _EX_PUSH_LOCK_AUTO_EXPAND;

// 0xb0 bytes (sizeof)
typedef struct _OBJECT_DIRECTORY {
  struct _OBJECT_DIRECTORY_ENTRY *HashBuckets[37]; // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK Lock;                       // offset: 0x94 ordinal: 0x1
  struct _DEVICE_MAP *DeviceMap;                   // offset: 0x98 ordinal: 0x2
  struct _OBJECT_DIRECTORY *ShadowDirectory;       // offset: 0x9c ordinal: 0x3
  VOID *NamespaceEntry;                            // offset: 0xa0 ordinal: 0x4
  VOID *SessionObject;                             // offset: 0xa4 ordinal: 0x5
  ULONG Flags;                                     // offset: 0xa8 ordinal: 0x6
  ULONG SessionId;                                 // offset: 0xac ordinal: 0x7
} _OBJECT_DIRECTORY;

// 0x1c bytes (sizeof)
typedef struct _ETW_HASH_BUCKET {
  struct _LIST_ENTRY ListHead[3];  // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK BucketLock; // offset: 0x18 ordinal: 0x1
} _ETW_HASH_BUCKET;

// 0x10 bytes (sizeof)
typedef struct _OB_HANDLE_REVOCATION_BLOCK {
  struct _LIST_ENTRY RevocationInfos; // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK Lock;          // offset: 0x8 ordinal: 0x1
  struct _EX_RUNDOWN_REF Rundown;     // offset: 0xc ordinal: 0x2
} _OB_HANDLE_REVOCATION_BLOCK;

// 0x10 bytes (sizeof)
typedef struct _HANDLE_REVOCATION_INFO {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  struct _OB_HANDLE_REVOCATION_BLOCK
      *RevocationBlock;        // offset: 0x8 ordinal: 0x1
  UCHAR AllowHandleRevocation; // offset: 0xc ordinal: 0x2
  UCHAR Padding1[3];           // offset: 0xd ordinal: 0x3
} _HANDLE_REVOCATION_INFO;

// 0x18 bytes (sizeof)
typedef struct _OBJECT_FOOTER {
  struct _HANDLE_REVOCATION_INFO
      HandleRevocationInfo;                       // offset: 0x0 ordinal: 0x0
  struct _OB_EXTENDED_USER_INFO ExtendedUserInfo; // offset: 0x10 ordinal: 0x1
} _OBJECT_FOOTER;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HEADER_EXTENDED_INFO {
  struct _OBJECT_FOOTER *Footer; // offset: 0x0 ordinal: 0x0
  ULONG Reserved;                // offset: 0x4 ordinal: 0x1
} _OBJECT_HEADER_EXTENDED_INFO;

// 0x10 bytes (sizeof)
typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE {
  struct _RTL_RB_TREE Tree;  // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK Lock; // offset: 0x8 ordinal: 0x1
  USHORT SequenceNumber;     // offset: 0xc ordinal: 0x2
} _ETW_PRIV_HANDLE_DEMUX_TABLE;

// 0x4 bytes (sizeof)
typedef struct _WNF_LOCK {
  struct _EX_PUSH_LOCK PushLock; // offset: 0x0 ordinal: 0x0
} _WNF_LOCK;

// 0xc bytes (sizeof)
typedef struct _WNF_SCOPE_MAP_ENTRY {
  struct _WNF_LOCK MapEntryLock;   // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY MapEntryHead; // offset: 0x4 ordinal: 0x1
} _WNF_SCOPE_MAP_ENTRY;

// 0x2c bytes (sizeof)
typedef struct _WNF_SCOPE_INSTANCE {
  struct _WNF_NODE_HEADER Header;       // offset: 0x0 ordinal: 0x0
  struct _EX_RUNDOWN_REF RunRef;        // offset: 0x4 ordinal: 0x1
  enum _WNF_DATA_SCOPE DataScope;       // offset: 0x8 ordinal: 0x2
  ULONG InstanceIdSize;                 // offset: 0xc ordinal: 0x3
  VOID *InstanceIdData;                 // offset: 0x10 ordinal: 0x4
  struct _LIST_ENTRY ResolverListEntry; // offset: 0x14 ordinal: 0x5
  struct _WNF_LOCK NameSetLock;         // offset: 0x1c ordinal: 0x6
  struct _RTL_AVL_TREE NameSet;         // offset: 0x20 ordinal: 0x7
  VOID *PermanentDataStore;             // offset: 0x24 ordinal: 0x8
  VOID *VolatilePermanentDataStore;     // offset: 0x28 ordinal: 0x9
} _WNF_SCOPE_INSTANCE;

// 0x48 bytes (sizeof)
typedef struct _WNF_SCOPE_MAP {
  struct _WNF_NODE_HEADER Header;                   // offset: 0x0 ordinal: 0x0
  struct _WNF_SCOPE_INSTANCE *SystemScopeInstance;  // offset: 0x4 ordinal: 0x1
  struct _WNF_SCOPE_INSTANCE *MachineScopeInstance; // offset: 0x8 ordinal: 0x2
  struct _WNF_SCOPE_MAP_ENTRY ByDataScope[5];       // offset: 0xc ordinal: 0x3
} _WNF_SCOPE_MAP;

// 0x30 bytes (sizeof)
typedef struct _WNF_SILODRIVERSTATE {
  struct _WNF_SCOPE_MAP *ScopeMap;                  // offset: 0x0 ordinal: 0x0
  VOID *PermanentNameStoreRootKey;                  // offset: 0x4 ordinal: 0x1
  VOID *PersistentNameStoreRootKey;                 // offset: 0x8 ordinal: 0x2
  LONGLONG PermanentNameSequenceNumber;             // offset: 0x10 ordinal: 0x3
  struct _WNF_LOCK PermanentNameSequenceNumberLock; // offset: 0x18 ordinal: 0x4
  LONGLONG PermanentNameSequenceNumberPool;         // offset: 0x20 ordinal: 0x5
  LONGLONG RuntimeNameSequenceNumber;               // offset: 0x28 ordinal: 0x6
} _WNF_SILODRIVERSTATE;

// 0x130 bytes (sizeof)
typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE {
  struct _LIST_ENTRY HashBuckets[37]; // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK Lock;          // offset: 0x128 ordinal: 0x1
  ULONG NumberOfPrivateSpaces;        // offset: 0x12c ordinal: 0x2
} _OBJECT_NAMESPACE_LOOKUPTABLE;

// 0x40 bytes (sizeof)
typedef struct _HANDLE_TABLE_FREE_LIST {
  struct _EX_PUSH_LOCK FreeListLock;               // offset: 0x0 ordinal: 0x0
  union _HANDLE_TABLE_ENTRY *FirstFreeHandleEntry; // offset: 0x4 ordinal: 0x1
  union _HANDLE_TABLE_ENTRY *LastFreeHandleEntry;  // offset: 0x8 ordinal: 0x2
  LONG HandleCount;                                // offset: 0xc ordinal: 0x3
  ULONG HighWaterMark;                             // offset: 0x10 ordinal: 0x4
} _HANDLE_TABLE_FREE_LIST;

// 0x8 bytes (sizeof)
typedef struct _POP_RW_LOCK {
  struct _EX_PUSH_LOCK Lock; // offset: 0x0 ordinal: 0x0
  struct _KTHREAD *Thread;   // offset: 0x4 ordinal: 0x1
} _POP_RW_LOCK;

// 0x14 bytes (sizeof)
typedef struct _MMSESSION {
  struct _EX_PUSH_LOCK SystemSpaceViewLock;         // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK *SystemSpaceViewLockPointer; // offset: 0x4 ordinal: 0x1
  struct _RTL_AVL_TREE ViewRoot;                    // offset: 0x8 ordinal: 0x2
  ULONG ViewCount;                                  // offset: 0xc ordinal: 0x3
  ULONG BitmapFailures;                             // offset: 0x10 ordinal: 0x4
} _MMSESSION;

// 0xc bytes (sizeof)
typedef struct _MM_PAGED_POOL_INFO {
  struct _EX_PUSH_LOCK Lock; // offset: 0x0 ordinal: 0x0
  ULONG MaximumSize;         // offset: 0x4 ordinal: 0x1
  ULONG AllocatedPagedPool;  // offset: 0x8 ordinal: 0x2
} _MM_PAGED_POOL_INFO;

// 0x10 bytes (sizeof)
typedef struct _ALPC_PROCESS_CONTEXT {
  struct _EX_PUSH_LOCK Lock;       // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ViewListHead; // offset: 0x4 ordinal: 0x1
  ULONG PagedPoolQuotaCache;       // offset: 0xc ordinal: 0x2
} _ALPC_PROCESS_CONTEXT;

// 0x8 bytes (sizeof)
typedef struct _ACPI_METHOD_ARGUMENT_V1 {
  USHORT Type;       // offset: 0x0 ordinal: 0x0
  USHORT DataLength; // offset: 0x2 ordinal: 0x1
  union {
    ULONG Argument; // offset: 0x4 ordinal: 0x2
    UCHAR Data[1];  // offset: 0x4 ordinal: 0x3
  };
} _ACPI_METHOD_ARGUMENT_V1;

// 0x8 bytes (sizeof)
typedef struct __anon_671 {
  ULONG Gsiv;               // offset: 0x0 ordinal: 0x0
  ULONG WakeInterrupt : 1;  // offset: 0x4 ordinal: 0x1
  ULONG ReservedFlags : 31; // offset: 0x4 ordinal: 0x2
} __anon_671;

// 0x10 bytes (sizeof)
typedef struct _INTERRUPT_REMAPPING_INFO {
  ULONG IrtIndex : 30;       // offset: 0x0 ordinal: 0x0
  ULONG FlagHalInternal : 1; // offset: 0x0 ordinal: 0x1
  ULONG FlagTranslated : 1;  // offset: 0x0 ordinal: 0x2
  union __anon_723 u;        // offset: 0x4 ordinal: 0x3
} _INTERRUPT_REMAPPING_INFO;

// 0x8 bytes (sizeof)
typedef struct _POP_FX_DEPENDENT {
  ULONG Index;         // offset: 0x0 ordinal: 0x0
  ULONG ProviderIndex; // offset: 0x4 ordinal: 0x1
} _POP_FX_DEPENDENT;

// 0x8 bytes (sizeof)
typedef struct _POP_FX_PROVIDER {
  ULONG Index;      // offset: 0x0 ordinal: 0x0
  UCHAR Activating; // offset: 0x4 ordinal: 0x1
} _POP_FX_PROVIDER;

// 0x10 bytes (sizeof)
typedef struct _GUID {
  ULONG Data1;    // offset: 0x0 ordinal: 0x0
  USHORT Data2;   // offset: 0x4 ordinal: 0x1
  USHORT Data3;   // offset: 0x6 ordinal: 0x2
  UCHAR Data4[8]; // offset: 0x8 ordinal: 0x3
} _GUID;

typedef UCHAR (*__anon_2575)(struct _GUID *, WCHAR *);

// 0x10 bytes (sizeof)
typedef struct __anon_821 {
  struct _GUID *InterfaceType;  // offset: 0x0 ordinal: 0x0
  USHORT Size;                  // offset: 0x4 ordinal: 0x1
  USHORT Version;               // offset: 0x6 ordinal: 0x2
  struct _INTERFACE *Interface; // offset: 0x8 ordinal: 0x3
  VOID *InterfaceSpecificData;  // offset: 0xc ordinal: 0x4
} __anon_821;

// 0x8 bytes (sizeof)
typedef struct _DEVICE_RELATIONS {
  ULONG Count;                       // offset: 0x0 ordinal: 0x0
  struct _DEVICE_OBJECT *Objects[1]; // offset: 0x4 ordinal: 0x1
} _DEVICE_RELATIONS;

// 0x4 bytes (sizeof)
typedef union __anon_522 {
  struct _DEVICE_NODE *LegacyDeviceNode;            // offset: 0x0 ordinal: 0x0
  struct _DEVICE_RELATIONS *PendingDeviceRelations; // offset: 0x0 ordinal: 0x1
  VOID *Information;                                // offset: 0x0 ordinal: 0x2
} __anon_522;

// 0x10 bytes (sizeof)
typedef struct _KDEVICE_QUEUE_ENTRY {
  struct _LIST_ENTRY DeviceListEntry; // offset: 0x0 ordinal: 0x0
  ULONG SortKey;                      // offset: 0x8 ordinal: 0x1
  UCHAR Inserted;                     // offset: 0xc ordinal: 0x2
} _KDEVICE_QUEUE_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _PO_POWER_PLANE_PROFILE {
  ULONG ExclusivePowerMw; // offset: 0x0 ordinal: 0x0
  ULONG PeakPowerMw;      // offset: 0x4 ordinal: 0x1
} _PO_POWER_PLANE_PROFILE;

// 0x18 bytes (sizeof)
typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE {
  struct POHANDLE__ *DeviceHandle;                  // offset: 0x0 ordinal: 0x0
  ULONG CompletionFlags;                            // offset: 0x4 ordinal: 0x1
  LONG MethodStatus;                                // offset: 0x8 ordinal: 0x2
  VOID *CompletionContext;                          // offset: 0xc ordinal: 0x3
  ULONG OutputArgumentSize;                         // offset: 0x10 ordinal: 0x4
  struct _ACPI_METHOD_ARGUMENT_V1 *OutputArguments; // offset: 0x14 ordinal: 0x5
} _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;

// 0x8 bytes (sizeof)
typedef struct _PEP_WORK_ACPI_NOTIFY {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  ULONG NotifyCode;                // offset: 0x4 ordinal: 0x1
} _PEP_WORK_ACPI_NOTIFY;

// 0xc bytes (sizeof)
typedef struct _PEP_WORK_COMPLETE_PERF_STATE {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  ULONG Component;                 // offset: 0x4 ordinal: 0x1
  UCHAR Succeeded;                 // offset: 0x8 ordinal: 0x2
} _PEP_WORK_COMPLETE_PERF_STATE;

// 0x8 bytes (sizeof)
typedef struct _PEP_WORK_COMPLETE_IDLE_STATE {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  ULONG Component;                 // offset: 0x4 ordinal: 0x1
} _PEP_WORK_COMPLETE_IDLE_STATE;

// 0x1c bytes (sizeof)
typedef struct _PEP_WORK_POWER_CONTROL {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  struct _GUID *PowerControlCode;  // offset: 0x4 ordinal: 0x1
  VOID *RequestContext;            // offset: 0x8 ordinal: 0x2
  VOID *InBuffer;                  // offset: 0xc ordinal: 0x3
  ULONG InBufferSize;              // offset: 0x10 ordinal: 0x4
  VOID *OutBuffer;                 // offset: 0x14 ordinal: 0x5
  ULONG OutBufferSize;             // offset: 0x18 ordinal: 0x6
} _PEP_WORK_POWER_CONTROL;

// 0xc bytes (sizeof)
typedef struct _PEP_WORK_IDLE_STATE {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  ULONG Component;                 // offset: 0x4 ordinal: 0x1
  ULONG State;                     // offset: 0x8 ordinal: 0x2
} _PEP_WORK_IDLE_STATE;

// 0x8 bytes (sizeof)
typedef struct _PEP_WORK_ACTIVE_COMPLETE {
  struct POHANDLE__ *DeviceHandle; // offset: 0x0 ordinal: 0x0
  ULONG Component;                 // offset: 0x4 ordinal: 0x1
} _PEP_WORK_ACTIVE_COMPLETE;

// 0x20 bytes (sizeof)
typedef struct _PEP_WORK_INFORMATION {
  enum _PEP_WORK_TYPE WorkType; // offset: 0x0 ordinal: 0x0
  union {
    struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete; // offset: 0x4 ordinal: 0x1
    struct _PEP_WORK_IDLE_STATE IdleState;           // offset: 0x4 ordinal: 0x2
    struct _PEP_WORK_DEVICE_POWER DevicePower;       // offset: 0x4 ordinal: 0x3
    struct _PEP_WORK_POWER_CONTROL PowerControl;     // offset: 0x4 ordinal: 0x4
    struct _PEP_WORK_DEVICE_IDLE DeviceIdle;         // offset: 0x4 ordinal: 0x5
    struct _PEP_WORK_COMPLETE_IDLE_STATE
        CompleteIdleState; // offset: 0x4 ordinal: 0x6
    struct _PEP_WORK_COMPLETE_PERF_STATE
        CompletePerfState;                   // offset: 0x4 ordinal: 0x7
    struct _PEP_WORK_ACPI_NOTIFY AcpiNotify; // offset: 0x4 ordinal: 0x8
    struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
        ControlMethodComplete; // offset: 0x4 ordinal: 0x9
  };
} _PEP_WORK_INFORMATION;

// 0x58 bytes (sizeof)
typedef struct _VPB {
  SHORT Type;                          // offset: 0x0 ordinal: 0x0
  SHORT Size;                          // offset: 0x2 ordinal: 0x1
  USHORT Flags;                        // offset: 0x4 ordinal: 0x2
  USHORT VolumeLabelLength;            // offset: 0x6 ordinal: 0x3
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x8 ordinal: 0x4
  struct _DEVICE_OBJECT *RealDevice;   // offset: 0xc ordinal: 0x5
  ULONG SerialNumber;                  // offset: 0x10 ordinal: 0x6
  ULONG ReferenceCount;                // offset: 0x14 ordinal: 0x7
  WCHAR VolumeLabel[32];               // offset: 0x18 ordinal: 0x8
} _VPB;

// 0x8 bytes (sizeof)
typedef struct __anon_817 {
  struct _VPB *Vpb;                    // offset: 0x0 ordinal: 0x0
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x4 ordinal: 0x1
} __anon_817;

typedef UCHAR (*__anon_580)(struct PEPHANDLE__ *, ULONG, VOID *);

typedef UCHAR (*__anon_579)(ULONG, VOID *);

typedef VOID (*__anon_541)(VOID *, struct _DEVICE_OBJECT *, ULONG);

typedef VOID (*__anon_540)(VOID *, ULONG, UCHAR);

typedef VOID (*__anon_538)(VOID *, ULONG, ULONG);

// 0x18 bytes (sizeof)
typedef struct _CC_EXTERNAL_CACHE_INFO {
  VOID (*Callback)(VOID *, ULONG, ULONG);            // offset: 0x0 ordinal: 0x0
  struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics; // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY Links; // offset: 0x10 ordinal: 0x2
} _CC_EXTERNAL_CACHE_INFO;

typedef VOID (*__anon_537)(VOID *, ULONG);

// 0x1c bytes (sizeof)
typedef struct _THERMAL_COOLING_INTERFACE {
  USHORT Size;                           // offset: 0x0 ordinal: 0x0
  USHORT Version;                        // offset: 0x2 ordinal: 0x1
  VOID *Context;                         // offset: 0x4 ordinal: 0x2
  VOID (*InterfaceReference)(VOID *);    // offset: 0x8 ordinal: 0x3
  VOID (*InterfaceDereference)(VOID *);  // offset: 0xc ordinal: 0x4
  ULONG Flags;                           // offset: 0x10 ordinal: 0x5
  VOID (*ActiveCooling)(VOID *, UCHAR);  // offset: 0x14 ordinal: 0x6
  VOID (*PassiveCooling)(VOID *, ULONG); // offset: 0x18 ordinal: 0x7
} _THERMAL_COOLING_INTERFACE;

// 0x48 bytes (sizeof)
typedef struct _POP_COOLING_EXTENSION {
  struct _LIST_ENTRY Link;                     // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY RequestListHead;          // offset: 0x8 ordinal: 0x1
  struct _POP_RW_LOCK Lock;                    // offset: 0x10 ordinal: 0x2
  struct _DEVICE_OBJECT *DeviceObject;         // offset: 0x18 ordinal: 0x3
  VOID *NotificationEntry;                     // offset: 0x1c ordinal: 0x4
  UCHAR Enabled;                               // offset: 0x20 ordinal: 0x5
  UCHAR ActiveEngaged;                         // offset: 0x21 ordinal: 0x6
  UCHAR ThrottleLimit;                         // offset: 0x22 ordinal: 0x7
  UCHAR UpdatingToCurrent;                     // offset: 0x23 ordinal: 0x8
  struct _KEVENT *RemovalFlushEvent;           // offset: 0x24 ordinal: 0x9
  struct _KEVENT *PnpFlushEvent;               // offset: 0x28 ordinal: 0xa
  struct _THERMAL_COOLING_INTERFACE Interface; // offset: 0x2c ordinal: 0xb
} _POP_COOLING_EXTENSION;

// 0x44 bytes (sizeof)
typedef struct _DEVICE_OBJECT_POWER_EXTENSION {
  ULONG IdleCount;                                 // offset: 0x0 ordinal: 0x0
  ULONG BusyCount;                                 // offset: 0x4 ordinal: 0x1
  ULONG BusyReference;                             // offset: 0x8 ordinal: 0x2
  ULONG TotalBusyCount;                            // offset: 0xc ordinal: 0x3
  ULONG ConservationIdleTime;                      // offset: 0x10 ordinal: 0x4
  ULONG PerformanceIdleTime;                       // offset: 0x14 ordinal: 0x5
  struct _DEVICE_OBJECT *DeviceObject;             // offset: 0x18 ordinal: 0x6
  struct _LIST_ENTRY IdleList;                     // offset: 0x1c ordinal: 0x7
  enum _POP_DEVICE_IDLE_TYPE IdleType;             // offset: 0x24 ordinal: 0x8
  enum _DEVICE_POWER_STATE IdleState;              // offset: 0x28 ordinal: 0x9
  enum _DEVICE_POWER_STATE CurrentState;           // offset: 0x2c ordinal: 0xa
  struct _POP_COOLING_EXTENSION *CoolingExtension; // offset: 0x30 ordinal: 0xb
  struct _LIST_ENTRY Volume;                       // offset: 0x34 ordinal: 0xc
  union __anon_768 Specific;                       // offset: 0x3c ordinal: 0xd
} _DEVICE_OBJECT_POWER_EXTENSION;

// 0x38 bytes (sizeof)
typedef struct _DEVOBJ_EXTENSION {
  SHORT Type;                                  // offset: 0x0 ordinal: 0x0
  USHORT Size;                                 // offset: 0x2 ordinal: 0x1
  struct _DEVICE_OBJECT *DeviceObject;         // offset: 0x4 ordinal: 0x2
  ULONG PowerFlags;                            // offset: 0x8 ordinal: 0x3
  struct _DEVICE_OBJECT_POWER_EXTENSION *Dope; // offset: 0xc ordinal: 0x4
  ULONG ExtensionFlags;                        // offset: 0x10 ordinal: 0x5
  VOID *DeviceNode;                            // offset: 0x14 ordinal: 0x6
  struct _DEVICE_OBJECT *AttachedTo;           // offset: 0x18 ordinal: 0x7
  LONG StartIoCount;                           // offset: 0x1c ordinal: 0x8
  LONG StartIoKey;                             // offset: 0x20 ordinal: 0x9
  ULONG StartIoFlags;                          // offset: 0x24 ordinal: 0xa
  struct _VPB *Vpb;                            // offset: 0x28 ordinal: 0xb
  VOID *DependencyNode;                        // offset: 0x2c ordinal: 0xc
  VOID *InterruptContext;                      // offset: 0x30 ordinal: 0xd
  VOID *VerifierContext;                       // offset: 0x34 ordinal: 0xe
} _DEVOBJ_EXTENSION;

// 0x24 bytes (sizeof)
typedef struct _POP_POWER_PLANE {
  struct _UNICODE_STRING PowerPlaneId;          // offset: 0x0 ordinal: 0x0
  ULONG Lock;                                   // offset: 0x8 ordinal: 0x1
  UCHAR OldIrql;                                // offset: 0xc ordinal: 0x2
  LONG DevicePowerMw;                           // offset: 0x10 ordinal: 0x3
  VOID *PmaxHandle;                             // offset: 0x14 ordinal: 0x4
  VOID (*NotifyDevicePowerDraw)(VOID *, ULONG); // offset: 0x18 ordinal: 0x5
  ULONG DeviceCount;                            // offset: 0x1c ordinal: 0x6
  struct _POP_DEVICE_POWER_PROFILE **Devices;   // offset: 0x20 ordinal: 0x7
} _POP_POWER_PLANE;

// 0x14 bytes (sizeof)
typedef struct _KDEVICE_QUEUE {
  SHORT Type;                        // offset: 0x0 ordinal: 0x0
  SHORT Size;                        // offset: 0x2 ordinal: 0x1
  struct _LIST_ENTRY DeviceListHead; // offset: 0x4 ordinal: 0x2
  ULONG Lock;                        // offset: 0xc ordinal: 0x3
  UCHAR Busy;                        // offset: 0x10 ordinal: 0x4
} _KDEVICE_QUEUE;

// 0x20 bytes (sizeof)
typedef struct _PO_DIRECTED_DRIPS_STATE {
  struct _LIST_ENTRY QueueLink;        // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY VisitedQueueLink; // offset: 0x8 ordinal: 0x1
  ULONG Flags;                         // offset: 0x10 ordinal: 0x2
  ULONG CachedFlags;                   // offset: 0x14 ordinal: 0x3
  ULONG DeviceUsageCount;              // offset: 0x18 ordinal: 0x4
  VOID *Diagnostic;                    // offset: 0x1c ordinal: 0x5
} _PO_DIRECTED_DRIPS_STATE;

// 0x3c bytes (sizeof)
typedef struct _PO_DEVICE_NOTIFY {
  struct _LIST_ENTRY Link;             // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY PowerChildren;    // offset: 0x8 ordinal: 0x1
  struct _LIST_ENTRY PowerParents;     // offset: 0x10 ordinal: 0x2
  struct _DEVICE_OBJECT *TargetDevice; // offset: 0x18 ordinal: 0x3
  UCHAR OrderLevel;                    // offset: 0x1c ordinal: 0x4
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x20 ordinal: 0x5
  WCHAR *DeviceName;                   // offset: 0x24 ordinal: 0x6
  WCHAR *DriverName;                   // offset: 0x28 ordinal: 0x7
  ULONG ChildCount;                    // offset: 0x2c ordinal: 0x8
  ULONG ActiveChild;                   // offset: 0x30 ordinal: 0x9
  ULONG ParentCount;                   // offset: 0x34 ordinal: 0xa
  ULONG ActiveParent;                  // offset: 0x38 ordinal: 0xb
} _PO_DEVICE_NOTIFY;

// 0x8 bytes (sizeof)
typedef struct __anon_513 {
  struct _PO_DEVICE_NOTIFY *NotifyDevice; // offset: 0x0 ordinal: 0x0
  UCHAR FxDeviceActivated;                // offset: 0x4 ordinal: 0x1
} __anon_513;

// 0x8 bytes (sizeof)
typedef union __anon_1487 {
  struct _IO_STATUS_BLOCK IoStatus; // offset: 0x0 ordinal: 0x0
} __anon_1487;

// 0x1c bytes (sizeof)
typedef struct __anon_1948 {
  struct _SHARED_CACHE_MAP *SharedCacheMap; // offset: 0x0 ordinal: 0x0
  struct _IO_STATUS_BLOCK *IoStatus;        // offset: 0x4 ordinal: 0x1
  struct _KEVENT CallerWaitEvent;           // offset: 0x8 ordinal: 0x2
  UCHAR IsLowPriWriteBehind;                // offset: 0x18 ordinal: 0x3
} __anon_1948;

typedef UCHAR (*__anon_709)(struct _FILE_OBJECT *, UCHAR, VOID *, ULONG, VOID *,
                            ULONG, ULONG, struct _IO_STATUS_BLOCK *,
                            struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_708)(struct _FILE_OBJECT *, VOID *, ULONG,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

typedef VOID (*__anon_676)(VOID *, struct _IO_STATUS_BLOCK *, ULONG);

// 0x8 bytes (sizeof)
typedef struct __anon_567 {
  union {
    VOID(*UserApcRoutine)
    (VOID *, struct _IO_STATUS_BLOCK *, ULONG); // offset: 0x0 ordinal: 0x0
    VOID *IssuingProcess;                       // offset: 0x0 ordinal: 0x1
  };
  VOID *UserApcContext; // offset: 0x4 ordinal: 0x2
} __anon_567;

typedef VOID (*__anon_544)(struct _DEVICE_OBJECT *, UCHAR, union _POWER_STATE,
                           VOID *, struct _IO_STATUS_BLOCK *);

// 0x10 bytes (sizeof)
typedef struct __anon_512 {
  VOID(*CallerCompletion)
  (struct _DEVICE_OBJECT *, UCHAR, union _POWER_STATE, VOID *,
   struct _IO_STATUS_BLOCK *);         // offset: 0x0 ordinal: 0x0
  VOID *CallerContext;                 // offset: 0x4 ordinal: 0x1
  struct _DEVICE_OBJECT *CallerDevice; // offset: 0x8 ordinal: 0x2
  UCHAR SystemWake;                    // offset: 0xc ordinal: 0x3
} __anon_512;

// 0x8 bytes (sizeof)
typedef struct _PROCESSOR_IDLE_DEPENDENCY {
  ULONG ProcessorIndex;    // offset: 0x0 ordinal: 0x0
  UCHAR ExpectedState;     // offset: 0x4 ordinal: 0x1
  UCHAR AllowDeeperStates; // offset: 0x5 ordinal: 0x2
  UCHAR LooseDependency;   // offset: 0x6 ordinal: 0x3
} _PROCESSOR_IDLE_DEPENDENCY;

// 0x28 bytes (sizeof)
typedef struct _KQUEUE {
  struct _DISPATCHER_HEADER Header;  // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY EntryListHead;  // offset: 0x10 ordinal: 0x1
  ULONG CurrentCount;                // offset: 0x18 ordinal: 0x2
  ULONG MaximumCount;                // offset: 0x1c ordinal: 0x3
  struct _LIST_ENTRY ThreadListHead; // offset: 0x20 ordinal: 0x4
} _KQUEUE;

// 0x2c bytes (sizeof)
typedef struct _ETW_REPLY_QUEUE {
  struct _KQUEUE Queue; // offset: 0x0 ordinal: 0x0
  LONG EventsLost;      // offset: 0x28 ordinal: 0x1
} _ETW_REPLY_QUEUE;

// 0x18 bytes (sizeof)
typedef struct _KWAIT_BLOCK {
  struct _LIST_ENTRY WaitListEntry; // offset: 0x0 ordinal: 0x0
  UCHAR WaitType;                   // offset: 0x8 ordinal: 0x1
  UCHAR BlockState;                 // offset: 0x9 ordinal: 0x2
  USHORT WaitKey;                   // offset: 0xa ordinal: 0x3
  union {
    struct _KTHREAD *Thread;           // offset: 0xc ordinal: 0x4
    struct _KQUEUE *NotificationQueue; // offset: 0xc ordinal: 0x5
  };
  VOID *Object;   // offset: 0x10 ordinal: 0x6
  VOID *SparePtr; // offset: 0x14 ordinal: 0x7
} _KWAIT_BLOCK;

// 0x1c bytes (sizeof)
typedef struct _PROC_PERF_QOS_CLASS_POLICY {
  ULONG MaxPolicyPercent;              // offset: 0x0 ordinal: 0x0
  ULONG MaxEquivalentFrequencyPercent; // offset: 0x4 ordinal: 0x1
  ULONG MinPolicyPercent;              // offset: 0x8 ordinal: 0x2
  ULONG AutonomousActivityWindow;      // offset: 0xc ordinal: 0x3
  ULONG EnergyPerfPreference;          // offset: 0x10 ordinal: 0x4
  UCHAR ProvideGuidance;               // offset: 0x14 ordinal: 0x5
  UCHAR AllowThrottling;               // offset: 0x15 ordinal: 0x6
  UCHAR PerfBoostMode;                 // offset: 0x16 ordinal: 0x7
  UCHAR LatencyHintPerf;               // offset: 0x17 ordinal: 0x8
  UCHAR TrackDesiredCrossClass;        // offset: 0x18 ordinal: 0x9
} _PROC_PERF_QOS_CLASS_POLICY;

typedef VOID (*__anon_451)(ULONG);

typedef VOID (*__anon_450)(ULONG, ULONG);

typedef VOID (*__anon_440)(VOID *, ULONG);

typedef ULONG (*__anon_438)(VOID *, ULONG);

typedef ULONG (*__anon_437)(VOID *, ULONG, ULONG);

// 0x4 bytes (sizeof)
typedef union _KLOCK_ENTRY_BOOST_BITMAP {
  ULONG AllFields;                        // offset: 0x0 ordinal: 0x0
  ULONG AllBoosts : 17;                   // offset: 0x0 ordinal: 0x1
  ULONG Reserved : 15;                    // offset: 0x0 ordinal: 0x2
  USHORT CpuBoostsBitmap : 15;            // offset: 0x0 ordinal: 0x3
  USHORT IoBoost : 1;                     // offset: 0x0 ordinal: 0x4
  USHORT IoQoSBoost : 1;                  // offset: 0x2 ordinal: 0x5
  USHORT IoNormalPriorityWaiterCount : 8; // offset: 0x2 ordinal: 0x6
  USHORT IoQoSWaiterCount : 7;            // offset: 0x2 ordinal: 0x7
} _KLOCK_ENTRY_BOOST_BITMAP;

// 0x8 bytes (sizeof)
typedef struct _KLOCK_ENTRY_LOCK_STATE {
  ULONG CrossThreadReleasable : 1; // offset: 0x0 ordinal: 0x0
  ULONG Busy : 1;                  // offset: 0x0 ordinal: 0x1
  ULONG Reserved : 29;             // offset: 0x0 ordinal: 0x2
  ULONG InTree : 1;                // offset: 0x0 ordinal: 0x3
  VOID *LockState;                 // offset: 0x0 ordinal: 0x4
  union {
    VOID *SessionState; // offset: 0x4 ordinal: 0x5
    ULONG SessionId;    // offset: 0x4 ordinal: 0x6
  };
} _KLOCK_ENTRY_LOCK_STATE;

// 0x8 bytes (sizeof)
typedef struct _KSCHEDULING_GROUP_POLICY {
  union {
    ULONG Value;    // offset: 0x0 ordinal: 0x0
    USHORT Weight;  // offset: 0x0 ordinal: 0x1
    USHORT MinRate; // offset: 0x0 ordinal: 0x2
  };
  USHORT MaxRate; // offset: 0x2 ordinal: 0x3
  union {
    ULONG AllFlags; // offset: 0x4 ordinal: 0x4
    ULONG Type : 1; // offset: 0x4 ordinal: 0x5
  };
  ULONG Disabled : 1; // offset: 0x4 ordinal: 0x6
  ULONG RankBias : 1; // offset: 0x4 ordinal: 0x7
  ULONG Spare1 : 29;  // offset: 0x4 ordinal: 0x8
} _KSCHEDULING_GROUP_POLICY;

typedef VOID (*__anon_3175)(ULONG *, ULONG *);

typedef LONG (*__anon_2734)(ULONG, USHORT, USHORT, ULONG *);

typedef LONG (*__anon_2725)(struct _DEVICE_OBJECT *,
                            struct _INPUT_MAPPING_ELEMENT *, ULONG, ULONG *);

typedef LONG (*__anon_2712)(ULONG, ULONG *, ULONG *, VOID **);

typedef LONG (*__anon_2699)(ULONG, VOID *, ULONG *);

typedef LONG (*__anon_2687)(ULONG, ULONG, ULONG *, ULONG *, ULONG *, ULONG *);

typedef LONG (*__anon_2523)(ULONG, ULONG, UCHAR *, UCHAR *, UCHAR *, ULONG *,
                            ULONG *);

typedef LONG (*__anon_2522)(VOID *, ULONG *);

typedef LONG (*__anon_2519)(ULONG, ULONG *);

typedef UCHAR (*__anon_2518)(ULONG *, ULONG *);

typedef LONG (*__anon_2517)(ULONG, struct _HAL_LBR_ENTRY *, ULONG *);

typedef LONG (*__anon_2516)(ULONG, UCHAR (*)(struct _GUID *, WCHAR *), VOID *,
                            ULONG *);

typedef LONG (*__anon_2514)(enum _HAL_PROCESSOR_STAT_TYPE, ULONG, ULONG,
                            ULONG *);

typedef LONG (*__anon_2508)(ULONG *, UCHAR *);

typedef LONG (*__anon_2488)(ULONG, ULONG *, ULONG *);

typedef LONG (*__anon_2483)(CHAR *, USHORT, ULONG *);

typedef VOID (*__anon_2468)(UCHAR, ULONG *);

typedef ULONG (*__anon_2458)(enum _INTERFACE_TYPE, ULONG, ULONG, ULONG, UCHAR *,
                             ULONG *);

typedef ULONG (*__anon_2279)(VOID *, ULONG *);

// 0x10 bytes (sizeof)
typedef struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD {
  ULONG (*Initialize)(VOID *, ULONG); // offset: 0x0 ordinal: 0x0
  VOID (*Uninitialize)(VOID *);       // offset: 0x4 ordinal: 0x1
  VOID (*Ready)(VOID *, VOID *);      // offset: 0x8 ordinal: 0x2
  ULONG (*Correct)(VOID *, ULONG *);  // offset: 0xc ordinal: 0x3
} _WHEA_ERROR_SOURCE_CONFIGURATION_DD;

// 0x14 bytes (sizeof)
typedef struct _WHEA_DEVICE_DRIVER_DESCRIPTOR {
  USHORT Type;                                       // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                                     // offset: 0x2 ordinal: 0x1
  UCHAR Reserved;                                    // offset: 0x3 ordinal: 0x2
  struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD Config; // offset: 0x4 ordinal: 0x3
} _WHEA_DEVICE_DRIVER_DESCRIPTOR;

typedef LONG (*__anon_2153)(VOID *, UCHAR, struct _OBJECT_NAME_INFORMATION *,
                            ULONG, ULONG *, CHAR);

typedef LONG (*__anon_2152)(VOID *, enum _SECURITY_OPERATION_CODE, ULONG *,
                            VOID *, ULONG *, VOID **, enum _POOL_TYPE,
                            struct _GENERIC_MAPPING *, CHAR);

typedef LONG (*__anon_2059)(VOID *, VOID **, ULONG *);

// 0x24 bytes (sizeof)
typedef struct _HEAP_LIST_LOOKUP {
  struct _HEAP_LIST_LOOKUP *ExtendedLookup; // offset: 0x0 ordinal: 0x0
  ULONG ArraySize;                          // offset: 0x4 ordinal: 0x1
  ULONG ExtraItem;                          // offset: 0x8 ordinal: 0x2
  ULONG ItemCount;                          // offset: 0xc ordinal: 0x3
  ULONG OutOfRangeItems;                    // offset: 0x10 ordinal: 0x4
  ULONG BaseIndex;                          // offset: 0x14 ordinal: 0x5
  struct _LIST_ENTRY *ListHead;             // offset: 0x18 ordinal: 0x6
  ULONG *ListsInUseUlong;                   // offset: 0x1c ordinal: 0x7
  struct _LIST_ENTRY **ListHints;           // offset: 0x20 ordinal: 0x8
} _HEAP_LIST_LOOKUP;

// 0x20 bytes (sizeof)
typedef struct _BITMAP_RANGE {
  struct _LIST_ENTRY Links; // offset: 0x0 ordinal: 0x0
  LONGLONG BasePage;        // offset: 0x8 ordinal: 0x1
  ULONG FirstDirtyPage;     // offset: 0x10 ordinal: 0x2
  ULONG LastDirtyPage;      // offset: 0x14 ordinal: 0x3
  ULONG DirtyPages;         // offset: 0x18 ordinal: 0x4
  ULONG *Bitmap;            // offset: 0x1c ordinal: 0x5
} _BITMAP_RANGE;

// 0x88 bytes (sizeof)
typedef struct _MBCB {
  SHORT NodeTypeCode;                // offset: 0x0 ordinal: 0x0
  SHORT NodeIsInZone;                // offset: 0x2 ordinal: 0x1
  ULONG PagesToWrite;                // offset: 0x4 ordinal: 0x2
  ULONG DirtyPages;                  // offset: 0x8 ordinal: 0x3
  ULONG Reserved;                    // offset: 0xc ordinal: 0x4
  struct _LIST_ENTRY BitmapRanges;   // offset: 0x10 ordinal: 0x5
  LONGLONG ResumeWritePage;          // offset: 0x18 ordinal: 0x6
  LONGLONG MostRecentlyDirtiedPage;  // offset: 0x20 ordinal: 0x7
  struct _BITMAP_RANGE BitmapRange1; // offset: 0x28 ordinal: 0x8
  struct _BITMAP_RANGE BitmapRange2; // offset: 0x48 ordinal: 0x9
  struct _BITMAP_RANGE BitmapRange3; // offset: 0x68 ordinal: 0xa
} _MBCB;

// 0x18 bytes (sizeof)
typedef struct _PEP_ACPI_INTERRUPT_RESOURCE {
  enum _PEP_ACPI_RESOURCE_TYPE Type;           // offset: 0x0 ordinal: 0x0
  enum _KINTERRUPT_MODE InterruptType;         // offset: 0x4 ordinal: 0x1
  enum _KINTERRUPT_POLARITY InterruptPolarity; // offset: 0x8 ordinal: 0x2
  union _PEP_ACPI_RESOURCE_FLAGS Flags;        // offset: 0xc ordinal: 0x3
  UCHAR Count;                                 // offset: 0x10 ordinal: 0x4
  ULONG *Pins;                                 // offset: 0x14 ordinal: 0x5
} _PEP_ACPI_INTERRUPT_RESOURCE;

// 0x1c bytes (sizeof)
typedef struct _RTL_RETPOLINE_BINARY_INFO {
  LONG RetpolineStubsStartRva;     // offset: 0x0 ordinal: 0x0
  ULONG CfgDispatchFunctionPtrRva; // offset: 0x4 ordinal: 0x1
  ULONG IATRva;                    // offset: 0x8 ordinal: 0x2
  LONG *ImportRvas;                // offset: 0xc ordinal: 0x3
  ULONG *IAT;                      // offset: 0x10 ordinal: 0x4
  VOID *ImageBase;                 // offset: 0x14 ordinal: 0x5
  ULONG (*CheckFunction)(VOID *);  // offset: 0x18 ordinal: 0x6
} _RTL_RETPOLINE_BINARY_INFO;

// 0x24 bytes (sizeof)
typedef struct _MI_RETPOLINE_RELOCATION_INFORMATION {
  struct _RTL_RETPOLINE_BINARY_INFO BinaryInfo;     // offset: 0x0 ordinal: 0x0
  VOID *RelocationBuffer;                           // offset: 0x1c ordinal: 0x1
  struct _RTL_RETPOLINE_RELOCATION_INDEX *Index[1]; // offset: 0x20 ordinal: 0x2
} _MI_RETPOLINE_RELOCATION_INFORMATION;

// 0x8 bytes (sizeof)
typedef struct _RTL_BITMAP {
  ULONG SizeOfBitMap; // offset: 0x0 ordinal: 0x0
  ULONG *Buffer;      // offset: 0x4 ordinal: 0x1
} _RTL_BITMAP;

// 0x10 bytes (sizeof)
typedef struct _FREE_DISPLAY {
  ULONG RealVectorSize;       // offset: 0x0 ordinal: 0x0
  ULONG Hint;                 // offset: 0x4 ordinal: 0x1
  struct _RTL_BITMAP Display; // offset: 0x8 ordinal: 0x2
} _FREE_DISPLAY;

// 0x19c bytes (sizeof)
typedef struct _DUAL {
  ULONG Length;                         // offset: 0x0 ordinal: 0x0
  struct _HMAP_DIRECTORY *Map;          // offset: 0x4 ordinal: 0x1
  struct _HMAP_TABLE *SmallDir;         // offset: 0x8 ordinal: 0x2
  ULONG Guard;                          // offset: 0xc ordinal: 0x3
  struct _FREE_DISPLAY FreeDisplay[24]; // offset: 0x10 ordinal: 0x4
  struct _LIST_ENTRY FreeBins;          // offset: 0x190 ordinal: 0x5
  ULONG FreeSummary;                    // offset: 0x198 ordinal: 0x6
} _DUAL;

// 0x20 bytes (sizeof)
typedef struct _RTL_RVA_LIST {
  ULONG RvaCount;                    // offset: 0x0 ordinal: 0x0
  ULONG StateBitsPerRva;             // offset: 0x4 ordinal: 0x1
  UCHAR *CompressedBuffer;           // offset: 0x8 ordinal: 0x2
  ULONG CompressedBufferSize;        // offset: 0xc ordinal: 0x3
  struct _RTL_BITMAP RvaStateBitMap; // offset: 0x10 ordinal: 0x4
  ULONG *StateBitValueMap;           // offset: 0x18 ordinal: 0x5
  VOID *ExtensionBuffer;             // offset: 0x1c ordinal: 0x6
} _RTL_RVA_LIST;

// 0x14 bytes (sizeof)
typedef struct _MI_IMAGE_LOAD_CONFIG {
  ULONG Flags;                   // offset: 0x0 ordinal: 0x0
  ULONG CfgAlignmentBias;        // offset: 0x4 ordinal: 0x1
  USHORT MachineType;            // offset: 0x8 ordinal: 0x2
  struct _RTL_RVA_LIST *RvaList; // offset: 0xc ordinal: 0x3
  struct _MI_RETPOLINE_RELOCATION_INFORMATION
      *RetpolineRelocations; // offset: 0x10 ordinal: 0x4
} _MI_IMAGE_LOAD_CONFIG;

// 0x20 bytes (sizeof)
typedef struct _MI_SUB64K_FREE_RANGES {
  struct _RTL_BITMAP BitMap;    // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ListEntry; // offset: 0x8 ordinal: 0x1
  struct _MMVAD_SHORT *Vad;     // offset: 0x10 ordinal: 0x2
  ULONG SetBits;                // offset: 0x14 ordinal: 0x3
  ULONG FullSetBits;            // offset: 0x18 ordinal: 0x4
  ULONG SubListIndex : 2;       // offset: 0x1c ordinal: 0x5
  ULONG Hint : 30;              // offset: 0x1c ordinal: 0x6
} _MI_SUB64K_FREE_RANGES;

// 0x28 bytes (sizeof)
typedef struct _MI_VAD_EVENT_BLOCK {
  struct _MI_VAD_EVENT_BLOCK *Next; // offset: 0x0 ordinal: 0x0
  union {
    struct _KGATE Gate;                      // offset: 0x4 ordinal: 0x1
    struct _MMADDRESS_LIST SecureInfo;       // offset: 0x4 ordinal: 0x2
    struct _RTL_BITMAP BitMap;               // offset: 0x4 ordinal: 0x3
    struct _MMINPAGE_SUPPORT *InPageSupport; // offset: 0x4 ordinal: 0x4
    struct _MI_LARGEPAGE_VAD_INFO LargePage; // offset: 0x4 ordinal: 0x5
    struct _ETHREAD *CreatingThread;         // offset: 0x4 ordinal: 0x6
    struct _MI_SUB64K_FREE_RANGES PebTeb;    // offset: 0x4 ordinal: 0x7
    struct _MMVAD_SHORT *PlaceholderVad;     // offset: 0x4 ordinal: 0x8
  };
  ULONG WaitReason; // offset: 0x24 ordinal: 0x9
} _MI_VAD_EVENT_BLOCK;

// 0x14 bytes (sizeof)
typedef struct _MI_PAGING_FILE_SPACE_BITMAPS {
  union {
    ULONG RefCount;                               // offset: 0x0 ordinal: 0x0
    struct _MI_PAGING_FILE_SPACE_BITMAPS *Anchor; // offset: 0x0 ordinal: 0x1
  };
  struct _RTL_BITMAP AllocationBitmap; // offset: 0x4 ordinal: 0x2
  union {
    struct _RTL_BITMAP ReservationBitmap; // offset: 0xc ordinal: 0x3
    struct _RTL_BITMAP EvictedBitmap;     // offset: 0xc ordinal: 0x4
  };
} _MI_PAGING_FILE_SPACE_BITMAPS;

// 0x14 bytes (sizeof)
typedef struct _JOB_RATE_CONTROL_HEADER {
  VOID *RateControlQuotaReference;     // offset: 0x0 ordinal: 0x0
  struct _RTL_BITMAP OverQuotaHistory; // offset: 0x4 ordinal: 0x1
  UCHAR *BitMapBuffer;                 // offset: 0xc ordinal: 0x2
  ULONG BitMapBufferSize;              // offset: 0x10 ordinal: 0x3
} _JOB_RATE_CONTROL_HEADER;

typedef VOID (*__anon_564)(ULONG, ULONG *);

typedef LONG (*__anon_539)(VOID *, struct _GUID *, VOID *, ULONG, VOID *, ULONG,
                           ULONG *);

// 0x28 bytes (sizeof)
typedef struct _POP_FX_DRIVER_CALLBACKS {
  VOID (*ComponentActive)(VOID *, ULONG);           // offset: 0x0 ordinal: 0x0
  VOID (*ComponentIdle)(VOID *, ULONG);             // offset: 0x4 ordinal: 0x1
  VOID (*ComponentIdleState)(VOID *, ULONG, ULONG); // offset: 0x8 ordinal: 0x2
  VOID (*DevicePowerRequired)(VOID *);              // offset: 0xc ordinal: 0x3
  VOID (*DevicePowerNotRequired)(VOID *);           // offset: 0x10 ordinal: 0x4
  LONG(*PowerControl)
  (VOID *, struct _GUID *, VOID *, ULONG, VOID *, ULONG,
   ULONG *); // offset: 0x14 ordinal: 0x5
  VOID(*ComponentCriticalTransition)
  (VOID *, ULONG, UCHAR); // offset: 0x18 ordinal: 0x6
  VOID(*DripsWatchdogCallback)
  (VOID *, struct _DEVICE_OBJECT *, ULONG);         // offset: 0x1c ordinal: 0x7
  VOID (*DirectedPowerUpCallback)(VOID *, ULONG);   // offset: 0x20 ordinal: 0x8
  VOID (*DirectedPowerDownCallback)(VOID *, ULONG); // offset: 0x24 ordinal: 0x9
} _POP_FX_DRIVER_CALLBACKS;

typedef VOID (*__anon_439)(VOID *, ULONG, ULONG, ULONG, ULONG *);

typedef LONG (*__anon_434)(VOID *, ULONG, ULONG, ULONG, ULONG *);

// 0xc bytes (sizeof)
typedef struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE {
  VOID *CompletionContext; // offset: 0x0 ordinal: 0x0
  LONG CompletionStatus;   // offset: 0x4 ordinal: 0x1
  ULONG DIrpPending : 1;   // offset: 0x8 ordinal: 0x2
  ULONG DIrpCompleted : 1; // offset: 0x8 ordinal: 0x3
} _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE;

// 0x14 bytes (sizeof)
typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT {
  struct _LIST_ENTRY Link;            // offset: 0x0 ordinal: 0x0
  ULONG ComponentIndex;               // offset: 0x8 ordinal: 0x1
  struct _DEVICE_NODE **ChildDevices; // offset: 0xc ordinal: 0x2
  ULONG ChildDeviceCount;             // offset: 0x10 ordinal: 0x3
} _POP_FX_DRIPS_WATCHDOG_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct _PPM_COORDINATED_SELECTION {
  ULONG MaximumStates;    // offset: 0x0 ordinal: 0x0
  ULONG SelectedStates;   // offset: 0x4 ordinal: 0x1
  ULONG DefaultSelection; // offset: 0x8 ordinal: 0x2
  ULONG *Selection;       // offset: 0xc ordinal: 0x3
} _PPM_COORDINATED_SELECTION;

// 0x8 bytes (sizeof)
typedef struct _PPM_SELECTION_MENU {
  ULONG Count;                               // offset: 0x0 ordinal: 0x0
  struct _PPM_SELECTION_MENU_ENTRY *Entries; // offset: 0x4 ordinal: 0x1
} _PPM_SELECTION_MENU;

// 0xc bytes (sizeof)
typedef struct _PPM_SELECTION_DEPENDENCY {
  ULONG Processor;                 // offset: 0x0 ordinal: 0x0
  struct _PPM_SELECTION_MENU Menu; // offset: 0x4 ordinal: 0x1
} _PPM_SELECTION_DEPENDENCY;

// 0x10 bytes (sizeof)
typedef struct _PPM_SELECTION_MENU_ENTRY {
  UCHAR StrictDependency;                           // offset: 0x0 ordinal: 0x0
  UCHAR InitiatingState;                            // offset: 0x1 ordinal: 0x1
  UCHAR DependentState;                             // offset: 0x2 ordinal: 0x2
  ULONG StateIndex;                                 // offset: 0x4 ordinal: 0x3
  ULONG Dependencies;                               // offset: 0x8 ordinal: 0x4
  struct _PPM_SELECTION_DEPENDENCY *DependencyList; // offset: 0xc ordinal: 0x5
} _PPM_SELECTION_MENU_ENTRY;

typedef VOID *(*__anon_347)(enum _POOL_TYPE, ULONG, ULONG);

// 0xc bytes (sizeof)
typedef struct _KHETERO_PROCESSOR_SET {
  ULONG IdealMask;     // offset: 0x0 ordinal: 0x0
  ULONG PreferredMask; // offset: 0x4 ordinal: 0x1
  ULONG AvailableMask; // offset: 0x8 ordinal: 0x2
} _KHETERO_PROCESSOR_SET;

// 0x8c bytes (sizeof)
typedef struct _KTRAP_FRAME {
  ULONG DbgEbp;               // offset: 0x0 ordinal: 0x0
  ULONG DbgEip;               // offset: 0x4 ordinal: 0x1
  ULONG DbgArgMark;           // offset: 0x8 ordinal: 0x2
  USHORT TempSegCs;           // offset: 0xc ordinal: 0x3
  UCHAR Logging;              // offset: 0xe ordinal: 0x4
  UCHAR FrameType;            // offset: 0xf ordinal: 0x5
  ULONG TempEsp;              // offset: 0x10 ordinal: 0x6
  ULONG Dr0;                  // offset: 0x14 ordinal: 0x7
  ULONG Dr1;                  // offset: 0x18 ordinal: 0x8
  ULONG Dr2;                  // offset: 0x1c ordinal: 0x9
  ULONG Dr3;                  // offset: 0x20 ordinal: 0xa
  ULONG Dr6;                  // offset: 0x24 ordinal: 0xb
  ULONG Dr7;                  // offset: 0x28 ordinal: 0xc
  ULONG SegGs;                // offset: 0x2c ordinal: 0xd
  ULONG SegEs;                // offset: 0x30 ordinal: 0xe
  ULONG SegDs;                // offset: 0x34 ordinal: 0xf
  ULONG Edx;                  // offset: 0x38 ordinal: 0x10
  ULONG Ecx;                  // offset: 0x3c ordinal: 0x11
  ULONG Eax;                  // offset: 0x40 ordinal: 0x12
  UCHAR PreviousPreviousMode; // offset: 0x44 ordinal: 0x13
  UCHAR EntropyQueueDpc;      // offset: 0x45 ordinal: 0x14
  union {
    UCHAR NmiMsrIbrs; // offset: 0x46 ordinal: 0x15
    UCHAR Reserved1;  // offset: 0x46 ordinal: 0x16
  };
  UCHAR PreviousIrql; // offset: 0x47 ordinal: 0x17
  ULONG MxCsr;        // offset: 0x48 ordinal: 0x18
  struct _EXCEPTION_REGISTRATION_RECORD
      *ExceptionList;  // offset: 0x4c ordinal: 0x19
  ULONG SegFs;         // offset: 0x50 ordinal: 0x1a
  ULONG Edi;           // offset: 0x54 ordinal: 0x1b
  ULONG Esi;           // offset: 0x58 ordinal: 0x1c
  ULONG Ebx;           // offset: 0x5c ordinal: 0x1d
  ULONG Ebp;           // offset: 0x60 ordinal: 0x1e
  ULONG ErrCode;       // offset: 0x64 ordinal: 0x1f
  ULONG Eip;           // offset: 0x68 ordinal: 0x20
  ULONG SegCs;         // offset: 0x6c ordinal: 0x21
  ULONG EFlags;        // offset: 0x70 ordinal: 0x22
  ULONG HardwareEsp;   // offset: 0x74 ordinal: 0x23
  ULONG HardwareSegSs; // offset: 0x78 ordinal: 0x24
  ULONG V86Es;         // offset: 0x7c ordinal: 0x25
  ULONG V86Ds;         // offset: 0x80 ordinal: 0x26
  ULONG V86Fs;         // offset: 0x84 ordinal: 0x27
  ULONG V86Gs;         // offset: 0x88 ordinal: 0x28
} _KTRAP_FRAME;

// 0x20 bytes (sizeof)
typedef struct _KSTACK_CONTROL {
  ULONG StackBase; // offset: 0x0 ordinal: 0x0
  union {
    ULONG ActualLimit;        // offset: 0x4 ordinal: 0x1
    ULONG StackExpansion : 1; // offset: 0x4 ordinal: 0x2
  };
  struct _KTRAP_FRAME *PreviousTrapFrame; // offset: 0x8 ordinal: 0x3
  VOID *PreviousExceptionList;            // offset: 0xc ordinal: 0x4
  struct _KERNEL_STACK_SEGMENT Previous;  // offset: 0x10 ordinal: 0x5
} _KSTACK_CONTROL;

// 0x8 bytes (sizeof)
typedef struct _KSPIN_LOCK_QUEUE {
  struct _KSPIN_LOCK_QUEUE *Next; // offset: 0x0 ordinal: 0x0
  ULONG *Lock;                    // offset: 0x4 ordinal: 0x1
} _KSPIN_LOCK_QUEUE;

// 0xc bytes (sizeof)
typedef struct _KLOCK_QUEUE_HANDLE {
  struct _KSPIN_LOCK_QUEUE LockQueue; // offset: 0x0 ordinal: 0x0
  UCHAR OldIrql;                      // offset: 0x8 ordinal: 0x1
} _KLOCK_QUEUE_HANDLE;

// 0x8 bytes (sizeof)
typedef struct _DESCRIPTOR {
  USHORT Pad;   // offset: 0x0 ordinal: 0x0
  USHORT Limit; // offset: 0x2 ordinal: 0x1
  ULONG Base;   // offset: 0x4 ordinal: 0x2
} _DESCRIPTOR;

// 0x30 bytes (sizeof)
typedef struct _KAPC {
  UCHAR Type;                      // offset: 0x0 ordinal: 0x0
  UCHAR SpareByte0;                // offset: 0x1 ordinal: 0x1
  UCHAR Size;                      // offset: 0x2 ordinal: 0x2
  UCHAR SpareByte1;                // offset: 0x3 ordinal: 0x3
  ULONG SpareLong0;                // offset: 0x4 ordinal: 0x4
  struct _KTHREAD *Thread;         // offset: 0x8 ordinal: 0x5
  struct _LIST_ENTRY ApcListEntry; // offset: 0xc ordinal: 0x6
  VOID(*KernelRoutine)
  (struct _KAPC *, VOID (**)(VOID *, VOID *, VOID *), VOID **, VOID **,
   VOID **);                                     // offset: 0x14 ordinal: 0x7
  VOID (*RundownRoutine)(struct _KAPC *);        // offset: 0x18 ordinal: 0x8
  VOID (*NormalRoutine)(VOID *, VOID *, VOID *); // offset: 0x1c ordinal: 0x9
  VOID *Reserved[3];                             // offset: 0x14 ordinal: 0xa
  VOID *NormalContext;                           // offset: 0x20 ordinal: 0xb
  VOID *SystemArgument1;                         // offset: 0x24 ordinal: 0xc
  VOID *SystemArgument2;                         // offset: 0x28 ordinal: 0xd
  CHAR ApcStateIndex;                            // offset: 0x2c ordinal: 0xe
  CHAR ApcMode;                                  // offset: 0x2d ordinal: 0xf
  UCHAR Inserted;                                // offset: 0x2e ordinal: 0x10
} _KAPC;

// 0x30 bytes (sizeof)
typedef struct _ETW_APC_ENTRY {
  union {
    struct _SINGLE_LIST_ENTRY SListEntry; // offset: 0x0 ordinal: 0x0
    struct _KAPC Apc;                     // offset: 0x0 ordinal: 0x1
  };
} _ETW_APC_ENTRY;

// 0x2c bytes (sizeof)
typedef struct __anon_569 {
  union {
    struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry; // offset: 0x0 ordinal: 0x0
    VOID *DriverContext[4];                       // offset: 0x0 ordinal: 0x1
  };
  struct _ETHREAD *Thread;      // offset: 0x10 ordinal: 0x2
  CHAR *AuxiliaryBuffer;        // offset: 0x14 ordinal: 0x3
  struct _LIST_ENTRY ListEntry; // offset: 0x18 ordinal: 0x4
  union {
    struct _IO_STACK_LOCATION
        *CurrentStackLocation; // offset: 0x20 ordinal: 0x5
    ULONG PacketType;          // offset: 0x20 ordinal: 0x6
  };
  struct _FILE_OBJECT *OriginalFileObject; // offset: 0x24 ordinal: 0x7
  VOID *IrpExtension;                      // offset: 0x28 ordinal: 0x8
} __anon_569;

// 0x30 bytes (sizeof)
typedef union __anon_510 {
  struct __anon_569 Overlay; // offset: 0x0 ordinal: 0x0
  struct _KAPC Apc;          // offset: 0x0 ordinal: 0x1
  VOID *CompletionKey;       // offset: 0x0 ordinal: 0x2
} __anon_510;

typedef VOID (*__anon_426)(struct _KAPC *);

typedef VOID (*__anon_425)(struct _KAPC *, VOID (**)(VOID *, VOID *, VOID *),
                           VOID **, VOID **, VOID **);

// 0xc bytes (sizeof)
typedef struct _GROUP_AFFINITY {
  ULONG Mask;         // offset: 0x0 ordinal: 0x0
  USHORT Group;       // offset: 0x4 ordinal: 0x1
  USHORT Reserved[3]; // offset: 0x6 ordinal: 0x2
} _GROUP_AFFINITY;

typedef VOID (*__anon_2462)(struct _DEVICE_OBJECT *, ULONG,
                            struct _GROUP_AFFINITY *);

typedef LONG (*__anon_2461)(struct _DEVICE_OBJECT *, struct _GROUP_AFFINITY *,
                            ULONG, enum _KINTERRUPT_MODE, UCHAR, ULONG *,
                            UCHAR *, ULONG *);

typedef LONG (*__anon_2459)(ULONG, struct _GROUP_AFFINITY *, ULONG *,
                            enum _KINTERRUPT_POLARITY *,
                            struct _INTERRUPT_REMAPPING_INFO *);

// 0x4 bytes (sizeof)
typedef struct __anon_267 {
  ULONG BaseMid : 8;     // offset: 0x0 ordinal: 0x0
  ULONG Type : 5;        // offset: 0x0 ordinal: 0x1
  ULONG Dpl : 2;         // offset: 0x0 ordinal: 0x2
  ULONG Pres : 1;        // offset: 0x0 ordinal: 0x3
  ULONG LimitHi : 4;     // offset: 0x0 ordinal: 0x4
  ULONG Sys : 1;         // offset: 0x0 ordinal: 0x5
  ULONG Reserved_0 : 1;  // offset: 0x0 ordinal: 0x6
  ULONG Default_Big : 1; // offset: 0x0 ordinal: 0x7
  ULONG Granularity : 1; // offset: 0x0 ordinal: 0x8
  ULONG BaseHi : 8;      // offset: 0x0 ordinal: 0x9
} __anon_267;

// 0x4 bytes (sizeof)
typedef union __anon_224 {
  struct __anon_266 Bytes; // offset: 0x0 ordinal: 0x0
  struct __anon_267 Bits;  // offset: 0x0 ordinal: 0x1
} __anon_224;

// 0x8 bytes (sizeof)
typedef struct _KGDTENTRY {
  USHORT LimitLow;           // offset: 0x0 ordinal: 0x0
  USHORT BaseLow;            // offset: 0x2 ordinal: 0x1
  union __anon_224 HighWord; // offset: 0x4 ordinal: 0x2
} _KGDTENTRY;

// 0x20 bytes (sizeof)
typedef struct _REQUEST_MAILBOX {
  struct _REQUEST_MAILBOX *Next;         // offset: 0x0 ordinal: 0x0
  ULONG RequestSummary;                  // offset: 0x4 ordinal: 0x1
  struct _KREQUEST_PACKET RequestPacket; // offset: 0x8 ordinal: 0x2
  LONG *NodeTargetCountAddr;             // offset: 0x18 ordinal: 0x3
  LONG NodeTargetCount;                  // offset: 0x1c ordinal: 0x4
} _REQUEST_MAILBOX;

// 0xc bytes (sizeof)
typedef struct _CACHE_DESCRIPTOR {
  UCHAR Level;                     // offset: 0x0 ordinal: 0x0
  UCHAR Associativity;             // offset: 0x1 ordinal: 0x1
  USHORT LineSize;                 // offset: 0x2 ordinal: 0x2
  ULONG Size;                      // offset: 0x4 ordinal: 0x3
  enum _PROCESSOR_CACHE_TYPE Type; // offset: 0x8 ordinal: 0x4
} _CACHE_DESCRIPTOR;

// 0x54 bytes (sizeof)
typedef struct _IOP_IRP_STACK_PROFILER {
  ULONG Profile[20]; // offset: 0x0 ordinal: 0x0
  ULONG TotalIrps;   // offset: 0x50 ordinal: 0x1
} _IOP_IRP_STACK_PROFILER;

// 0x20 bytes (sizeof)
typedef struct _KDPC {
  union {
    ULONG TargetInfoAsUlong; // offset: 0x0 ordinal: 0x0
    UCHAR Type;              // offset: 0x0 ordinal: 0x1
  };
  UCHAR Importance;                       // offset: 0x1 ordinal: 0x2
  USHORT Number;                          // offset: 0x2 ordinal: 0x3
  struct _SINGLE_LIST_ENTRY DpcListEntry; // offset: 0x4 ordinal: 0x4
  ULONG ProcessorHistory;                 // offset: 0x8 ordinal: 0x5
  VOID(*DeferredRoutine)
  (struct _KDPC *, VOID *, VOID *, VOID *); // offset: 0xc ordinal: 0x6
  VOID *DeferredContext;                    // offset: 0x10 ordinal: 0x7
  VOID *SystemArgument1;                    // offset: 0x14 ordinal: 0x8
  VOID *SystemArgument2;                    // offset: 0x18 ordinal: 0x9
  VOID *DpcData;                            // offset: 0x1c ordinal: 0xa
} _KDPC;

// 0x44 bytes (sizeof)
typedef struct _WHEAP_WORK_QUEUE {
  struct _LIST_ENTRY ListHead;      // offset: 0x0 ordinal: 0x0
  ULONG ListLock;                   // offset: 0x8 ordinal: 0x1
  LONG ItemCount;                   // offset: 0xc ordinal: 0x2
  struct _KDPC Dpc;                 // offset: 0x10 ordinal: 0x3
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x30 ordinal: 0x4
  VOID(*WorkRoutine)
  (struct _WHEAP_WORK_QUEUE *,
   struct _LIST_ENTRY *); // offset: 0x40 ordinal: 0x5
} _WHEAP_WORK_QUEUE;

typedef VOID (*__anon_2239)(struct _WHEAP_WORK_QUEUE *, struct _LIST_ENTRY *);

// 0xc bytes (sizeof)
typedef struct _WHEAP_INFO_BLOCK {
  ULONG ErrorSourceCount; // offset: 0x0 ordinal: 0x0
  struct _WHEAP_ERROR_SOURCE_TABLE
      *ErrorSourceTable;               // offset: 0x4 ordinal: 0x1
  struct _WHEAP_WORK_QUEUE *WorkQueue; // offset: 0x8 ordinal: 0x2
} _WHEAP_INFO_BLOCK;

// 0x18 bytes (sizeof)
typedef struct _KDPC_DATA {
  struct _KDPC_LIST DpcList; // offset: 0x0 ordinal: 0x0
  ULONG DpcLock;             // offset: 0x8 ordinal: 0x1
  LONG DpcQueueDepth;        // offset: 0xc ordinal: 0x2
  ULONG DpcCount;            // offset: 0x10 ordinal: 0x3
  struct _KDPC *ActiveDpc;   // offset: 0x14 ordinal: 0x4
} _KDPC_DATA;

typedef VOID (*__anon_310)(struct _KDPC *, VOID *, VOID *, VOID *);

// 0x4 bytes (sizeof)
typedef union _KPRCBFLAG {
  LONG PrcbFlags;                  // offset: 0x0 ordinal: 0x0
  ULONG BamQosLevel : 2;           // offset: 0x0 ordinal: 0x1
  ULONG PendingQosUpdate : 2;      // offset: 0x0 ordinal: 0x2
  ULONG CacheIsolationEnabled : 1; // offset: 0x0 ordinal: 0x3
  ULONG PrcbFlagsReserved : 27;    // offset: 0x0 ordinal: 0x4
} _KPRCBFLAG;

// 0xc bytes (sizeof)
typedef struct _RTL_BALANCED_NODE {
  union {
    struct _RTL_BALANCED_NODE *Children[2]; // offset: 0x0 ordinal: 0x0
    struct _RTL_BALANCED_NODE *Left;        // offset: 0x0 ordinal: 0x1
  };
  struct _RTL_BALANCED_NODE *Right; // offset: 0x4 ordinal: 0x2
  UCHAR Red : 1;                    // offset: 0x8 ordinal: 0x3
  UCHAR Balance : 2;                // offset: 0x8 ordinal: 0x4
  ULONG ParentValue;                // offset: 0x8 ordinal: 0x5
} _RTL_BALANCED_NODE;

// 0x14 bytes (sizeof)
typedef struct _ETW_PROVIDER_TRAITS {
  struct _RTL_BALANCED_NODE Node; // offset: 0x0 ordinal: 0x0
  ULONG ReferenceCount;           // offset: 0xc ordinal: 0x1
  UCHAR Traits[1];                // offset: 0x10 ordinal: 0x2
} _ETW_PROVIDER_TRAITS;

// 0x14 bytes (sizeof)
typedef struct _MI_ACCESS_VIOLATION_RANGE {
  struct _RTL_BALANCED_NODE Node; // offset: 0x0 ordinal: 0x0
  VOID *Va;                       // offset: 0xc ordinal: 0x1
  VOID *EndVaInclusive;           // offset: 0x10 ordinal: 0x2
} _MI_ACCESS_VIOLATION_RANGE;

// 0x54 bytes (sizeof)
typedef struct _MI_POOL_STATE {
  ULONG MaximumNonPagedPoolThreshold;       // offset: 0x0 ordinal: 0x0
  ULONG AllocatedNonPagedPool;              // offset: 0x4 ordinal: 0x1
  struct _SINGLE_LIST_ENTRY BadPoolHead;    // offset: 0x8 ordinal: 0x2
  ULONG HighEventSets;                      // offset: 0xc ordinal: 0x3
  UCHAR HighEventSetsValid;                 // offset: 0x10 ordinal: 0x4
  ULONG LowPagedPoolThreshold;              // offset: 0x14 ordinal: 0x5
  ULONG HighPagedPoolThreshold;             // offset: 0x18 ordinal: 0x6
  LONG PermittedFaultsLock;                 // offset: 0x1c ordinal: 0x7
  struct _RTL_AVL_TREE PermittedFaultsTree; // offset: 0x20 ordinal: 0x8
  struct _MI_ACCESS_VIOLATION_RANGE
      PermittedFaultsInitialNode[2]; // offset: 0x24 ordinal: 0x9
  ULONG TotalPagedPoolQuota;         // offset: 0x4c ordinal: 0xa
  ULONG TotalNonPagedPoolQuota;      // offset: 0x50 ordinal: 0xb
} _MI_POOL_STATE;

// 0x14 bytes (sizeof)
typedef struct _HEAP_LARGE_ALLOC_DATA {
  struct _RTL_BALANCED_NODE TreeNode; // offset: 0x0 ordinal: 0x0
  union {
    ULONG VirtualAddress;   // offset: 0xc ordinal: 0x1
    ULONG UnusedBytes : 16; // offset: 0xc ordinal: 0x2
  };
  ULONG ExtraPresent : 1;       // offset: 0x10 ordinal: 0x3
  ULONG GuardPageCount : 1;     // offset: 0x10 ordinal: 0x4
  ULONG GuardPageAlignment : 6; // offset: 0x10 ordinal: 0x5
  ULONG Spare : 4;              // offset: 0x10 ordinal: 0x6
  ULONG AllocatedPages : 20;    // offset: 0x10 ordinal: 0x7
} _HEAP_LARGE_ALLOC_DATA;

// 0x10 bytes (sizeof)
typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR {
  union {
    struct _RTL_BALANCED_NODE TreeNode; // offset: 0x0 ordinal: 0x0
    ULONG TreeSignature;                // offset: 0x0 ordinal: 0x1
  };
  ULONG UnusedBytes;       // offset: 0x4 ordinal: 0x2
  USHORT ExtraPresent : 1; // offset: 0x8 ordinal: 0x3
  USHORT Spare0 : 15;      // offset: 0x8 ordinal: 0x4
  union {
    UCHAR RangeFlags;        // offset: 0xc ordinal: 0x5
    UCHAR RangeFlagBits : 5; // offset: 0xc ordinal: 0x6
  };
  UCHAR CommittedPageCount : 3; // offset: 0xc ordinal: 0x7
  union {
    struct _HEAP_DESCRIPTOR_KEY Key; // offset: 0xc ordinal: 0x8
    UCHAR Align[3];                  // offset: 0xc ordinal: 0x9
  };
  union {
    UCHAR UnitOffset; // offset: 0xf ordinal: 0xa
    UCHAR UnitSize;   // offset: 0xf ordinal: 0xb
  };
} _HEAP_PAGE_RANGE_DESCRIPTOR;

// 0x1000 bytes (sizeof)
typedef union _HEAP_PAGE_SEGMENT {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  ULONG Signature;              // offset: 0x8 ordinal: 0x1
  union _HEAP_SEGMENT_MGR_COMMIT_STATE
      *SegmentCommitState; // offset: 0xc ordinal: 0x2
  UCHAR UnusedWatermark;   // offset: 0x10 ordinal: 0x3
  struct _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256]; // offset: 0x0 ordinal: 0x4
} _HEAP_PAGE_SEGMENT;

// 0x10 bytes (sizeof)
typedef struct _HEAP_VS_CHUNK_FREE_HEADER {
  union {
    struct _HEAP_VS_CHUNK_HEADER Header; // offset: 0x0 ordinal: 0x0
    ULONG OverlapsHeader;                // offset: 0x0 ordinal: 0x1
  };
  struct _RTL_BALANCED_NODE Node; // offset: 0x4 ordinal: 0x2
} _HEAP_VS_CHUNK_FREE_HEADER;

// 0x28 bytes (sizeof)
typedef struct _MMVAD_SHORT {
  struct _MMVAD_SHORT *NextVad;          // offset: 0x0 ordinal: 0x0
  VOID *ExtraCreateInfo;                 // offset: 0x4 ordinal: 0x1
  struct _RTL_BALANCED_NODE VadNode;     // offset: 0x0 ordinal: 0x2
  ULONG StartingVpn;                     // offset: 0xc ordinal: 0x3
  ULONG EndingVpn;                       // offset: 0x10 ordinal: 0x4
  LONG ReferenceCount;                   // offset: 0x14 ordinal: 0x5
  struct _EX_PUSH_LOCK PushLock;         // offset: 0x18 ordinal: 0x6
  union __anon_1508 u;                   // offset: 0x1c ordinal: 0x7
  union __anon_1513 u1;                  // offset: 0x20 ordinal: 0x8
  struct _MI_VAD_EVENT_BLOCK *EventList; // offset: 0x24 ordinal: 0x9
} _MMVAD_SHORT;

// 0x10 bytes (sizeof)
typedef struct _MI_PROTOTYPE_PTES_NODE {
  struct _RTL_BALANCED_NODE Node; // offset: 0x0 ordinal: 0x0
  union __anon_1493 u1;           // offset: 0xc ordinal: 0x1
} _MI_PROTOTYPE_PTES_NODE;

// 0x1c bytes (sizeof)
typedef struct _MI_IMAGE_SECURITY_REFERENCE {
  struct _MI_PROTOTYPE_PTES_NODE ProtosNode;      // offset: 0x0 ordinal: 0x0
  VOID *DynamicRelocations;                       // offset: 0x10 ordinal: 0x1
  struct _IMAGE_SECURITY_CONTEXT SecurityContext; // offset: 0x14 ordinal: 0x2
  ULONG StrongImageReference;                     // offset: 0x18 ordinal: 0x3
} _MI_IMAGE_SECURITY_REFERENCE;

// 0xc bytes (sizeof)
typedef struct __anon_1484 {
  union {
    ULONG NumberOfSystemCacheViews; // offset: 0x0 ordinal: 0x0
    ULONG ImageRelocationStartBit;  // offset: 0x0 ordinal: 0x1
  };
  union {
    LONG WritableUserReferences;         // offset: 0x4 ordinal: 0x2
    ULONG ImageRelocationSizeIn64k : 16; // offset: 0x4 ordinal: 0x3
  };
  ULONG SystemImage : 1;        // offset: 0x4 ordinal: 0x4
  ULONG CantMove : 1;           // offset: 0x4 ordinal: 0x5
  ULONG StrongCode : 2;         // offset: 0x4 ordinal: 0x6
  ULONG BitMap : 2;             // offset: 0x4 ordinal: 0x7
  ULONG ImageActive : 1;        // offset: 0x4 ordinal: 0x8
  ULONG ImageBaseOkToReuse : 1; // offset: 0x4 ordinal: 0x9
  union {
    ULONG FlushInProgressCount; // offset: 0x8 ordinal: 0xa
    ULONG NumberOfSubsections;  // offset: 0x8 ordinal: 0xb
    struct _MI_IMAGE_SECURITY_REFERENCE
        *SeImageStub; // offset: 0x8 ordinal: 0xc
  };
} __anon_1484;

// 0xc bytes (sizeof)
typedef union __anon_1477 {
  struct __anon_1484 e2; // offset: 0x0 ordinal: 0x0
} __anon_1477;

// 0x20 bytes (sizeof)
typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY {
  union {
    struct _RTL_BALANCED_NODE LengthTreeNode; // offset: 0x0 ordinal: 0x0
    struct _LIST_ENTRY FreeListEntry;         // offset: 0x0 ordinal: 0x1
  };
  struct _RTL_BALANCED_NODE LocationTreeNode; // offset: 0xc ordinal: 0x2
  ULONG StartingIndex;                        // offset: 0x18 ordinal: 0x3
  ULONG Length;                               // offset: 0x1c ordinal: 0x4
} _MI_PAGEFILE_BITMAPS_CACHE_ENTRY;

// 0x1c bytes (sizeof)
typedef struct _PS_IO_CONTROL_ENTRY {
  union {
    struct _RTL_BALANCED_NODE VolumeTreeNode; // offset: 0x0 ordinal: 0x0
    struct _LIST_ENTRY FreeListEntry;         // offset: 0x0 ordinal: 0x1
  };
  ULONG ReservedForParentValue;   // offset: 0x8 ordinal: 0x2
  ULONG VolumeKey;                // offset: 0xc ordinal: 0x3
  struct _EX_RUNDOWN_REF Rundown; // offset: 0x10 ordinal: 0x4
  VOID *IoControl;                // offset: 0x14 ordinal: 0x5
  VOID *VolumeIoAttribution;      // offset: 0x18 ordinal: 0x6
} _PS_IO_CONTROL_ENTRY;

// 0x30 bytes (sizeof)
typedef struct _KLOCK_ENTRY {
  union {
    struct _RTL_BALANCED_NODE TreeNode;      // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY FreeListEntry; // offset: 0x0 ordinal: 0x1
  };
  union {
    ULONG EntryFlags;  // offset: 0xc ordinal: 0x2
    UCHAR EntryOffset; // offset: 0xc ordinal: 0x3
  };
  union {
    UCHAR ThreadLocalFlags; // offset: 0xd ordinal: 0x4
    UCHAR WaitingBit : 1;   // offset: 0xd ordinal: 0x5
  };
  UCHAR Spare0 : 7; // offset: 0xd ordinal: 0x6
  union {
    UCHAR AcquiredByte;    // offset: 0xe ordinal: 0x7
    UCHAR AcquiredBit : 1; // offset: 0xe ordinal: 0x8
  };
  union {
    UCHAR CrossThreadFlags; // offset: 0xf ordinal: 0x9
    UCHAR HeadNodeBit : 1;  // offset: 0xf ordinal: 0xa
  };
  UCHAR IoPriorityBit : 1; // offset: 0xf ordinal: 0xb
  UCHAR IoQoSWaiter : 1;   // offset: 0xf ordinal: 0xc
  UCHAR Spare1 : 5;        // offset: 0xf ordinal: 0xd
  ULONG StaticState : 8;   // offset: 0xc ordinal: 0xe
  ULONG AllFlags : 24;     // offset: 0xc ordinal: 0xf
  union {
    struct _KLOCK_ENTRY_LOCK_STATE LockState; // offset: 0x10 ordinal: 0x10
    VOID *LockUnsafe;                         // offset: 0x10 ordinal: 0x11
    UCHAR CrossThreadReleasableAndBusyByte;   // offset: 0x10 ordinal: 0x12
  };
  UCHAR Reserved[2]; // offset: 0x11 ordinal: 0x13
  UCHAR InTreeByte;  // offset: 0x13 ordinal: 0x14
  union {
    VOID *SessionState; // offset: 0x14 ordinal: 0x15
    ULONG SessionId;    // offset: 0x14 ordinal: 0x16
  };
  struct _RTL_RB_TREE OwnerTree;               // offset: 0x18 ordinal: 0x17
  struct _RTL_RB_TREE WaiterTree;              // offset: 0x20 ordinal: 0x18
  CHAR CpuPriorityKey;                         // offset: 0x18 ordinal: 0x19
  ULONG EntryLock;                             // offset: 0x28 ordinal: 0x1a
  union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap; // offset: 0x2c ordinal: 0x1b
} _KLOCK_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _IMAGE_DATA_DIRECTORY {
  ULONG VirtualAddress; // offset: 0x0 ordinal: 0x0
  ULONG Size;           // offset: 0x4 ordinal: 0x1
} _IMAGE_DATA_DIRECTORY;

// 0xe0 bytes (sizeof)
typedef struct _IMAGE_OPTIONAL_HEADER {
  USHORT Magic;                                   // offset: 0x0 ordinal: 0x0
  UCHAR MajorLinkerVersion;                       // offset: 0x2 ordinal: 0x1
  UCHAR MinorLinkerVersion;                       // offset: 0x3 ordinal: 0x2
  ULONG SizeOfCode;                               // offset: 0x4 ordinal: 0x3
  ULONG SizeOfInitializedData;                    // offset: 0x8 ordinal: 0x4
  ULONG SizeOfUninitializedData;                  // offset: 0xc ordinal: 0x5
  ULONG AddressOfEntryPoint;                      // offset: 0x10 ordinal: 0x6
  ULONG BaseOfCode;                               // offset: 0x14 ordinal: 0x7
  ULONG BaseOfData;                               // offset: 0x18 ordinal: 0x8
  ULONG ImageBase;                                // offset: 0x1c ordinal: 0x9
  ULONG SectionAlignment;                         // offset: 0x20 ordinal: 0xa
  ULONG FileAlignment;                            // offset: 0x24 ordinal: 0xb
  USHORT MajorOperatingSystemVersion;             // offset: 0x28 ordinal: 0xc
  USHORT MinorOperatingSystemVersion;             // offset: 0x2a ordinal: 0xd
  USHORT MajorImageVersion;                       // offset: 0x2c ordinal: 0xe
  USHORT MinorImageVersion;                       // offset: 0x2e ordinal: 0xf
  USHORT MajorSubsystemVersion;                   // offset: 0x30 ordinal: 0x10
  USHORT MinorSubsystemVersion;                   // offset: 0x32 ordinal: 0x11
  ULONG Win32VersionValue;                        // offset: 0x34 ordinal: 0x12
  ULONG SizeOfImage;                              // offset: 0x38 ordinal: 0x13
  ULONG SizeOfHeaders;                            // offset: 0x3c ordinal: 0x14
  ULONG CheckSum;                                 // offset: 0x40 ordinal: 0x15
  USHORT Subsystem;                               // offset: 0x44 ordinal: 0x16
  USHORT DllCharacteristics;                      // offset: 0x46 ordinal: 0x17
  ULONG SizeOfStackReserve;                       // offset: 0x48 ordinal: 0x18
  ULONG SizeOfStackCommit;                        // offset: 0x4c ordinal: 0x19
  ULONG SizeOfHeapReserve;                        // offset: 0x50 ordinal: 0x1a
  ULONG SizeOfHeapCommit;                         // offset: 0x54 ordinal: 0x1b
  ULONG LoaderFlags;                              // offset: 0x58 ordinal: 0x1c
  ULONG NumberOfRvaAndSizes;                      // offset: 0x5c ordinal: 0x1d
  struct _IMAGE_DATA_DIRECTORY DataDirectory[16]; // offset: 0x60 ordinal: 0x1e
} _IMAGE_OPTIONAL_HEADER;

// 0x14 bytes (sizeof)
typedef struct _IMAGE_FILE_HEADER {
  USHORT Machine;              // offset: 0x0 ordinal: 0x0
  USHORT NumberOfSections;     // offset: 0x2 ordinal: 0x1
  ULONG TimeDateStamp;         // offset: 0x4 ordinal: 0x2
  ULONG PointerToSymbolTable;  // offset: 0x8 ordinal: 0x3
  ULONG NumberOfSymbols;       // offset: 0xc ordinal: 0x4
  USHORT SizeOfOptionalHeader; // offset: 0x10 ordinal: 0x5
  USHORT Characteristics;      // offset: 0x12 ordinal: 0x6
} _IMAGE_FILE_HEADER;

// 0xf8 bytes (sizeof)
typedef struct _IMAGE_NT_HEADERS {
  ULONG Signature;                              // offset: 0x0 ordinal: 0x0
  struct _IMAGE_FILE_HEADER FileHeader;         // offset: 0x4 ordinal: 0x1
  struct _IMAGE_OPTIONAL_HEADER OptionalHeader; // offset: 0x18 ordinal: 0x2
} _IMAGE_NT_HEADERS;

// 0x8 bytes (sizeof)
typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
  ULONG Size;       // offset: 0x0 ordinal: 0x0
  WCHAR *TriggerId; // offset: 0x4 ordinal: 0x1
} _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;

// 0x8 bytes (sizeof)
typedef struct _LUID {
  ULONG LowPart; // offset: 0x0 ordinal: 0x0
  LONG HighPart; // offset: 0x4 ordinal: 0x1
} _LUID;

// 0x10 bytes (sizeof)
typedef struct _TOKEN_SOURCE {
  CHAR SourceName[8];            // offset: 0x0 ordinal: 0x0
  struct _LUID SourceIdentifier; // offset: 0x8 ordinal: 0x1
} _TOKEN_SOURCE;

// 0x28 bytes (sizeof)
typedef struct _TOKEN_CONTROL {
  struct _LUID TokenId;             // offset: 0x0 ordinal: 0x0
  struct _LUID AuthenticationId;    // offset: 0x8 ordinal: 0x1
  struct _LUID ModifiedId;          // offset: 0x10 ordinal: 0x2
  struct _TOKEN_SOURCE TokenSource; // offset: 0x18 ordinal: 0x3
} _TOKEN_CONTROL;

// 0x3c bytes (sizeof)
typedef struct _SECURITY_CLIENT_CONTEXT {
  struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // offset: 0x0 ordinal: 0x0
  VOID *ClientToken;                               // offset: 0xc ordinal: 0x1
  UCHAR DirectlyAccessClientToken;                 // offset: 0x10 ordinal: 0x2
  UCHAR DirectAccessEffectiveOnly;                 // offset: 0x11 ordinal: 0x3
  UCHAR ServerIsRemote;                            // offset: 0x12 ordinal: 0x4
  struct _TOKEN_CONTROL ClientTokenControl;        // offset: 0x14 ordinal: 0x5
} _SECURITY_CLIENT_CONTEXT;

// 0xc bytes (sizeof)
typedef struct _LUID_AND_ATTRIBUTES {
  struct _LUID Luid; // offset: 0x0 ordinal: 0x0
  ULONG Attributes;  // offset: 0x8 ordinal: 0x1
} _LUID_AND_ATTRIBUTES;

// 0x10 bytes (sizeof)
typedef struct _TOKEN_PRIVILEGES {
  ULONG PrivilegeCount;                      // offset: 0x0 ordinal: 0x0
  struct _LUID_AND_ATTRIBUTES Privileges[1]; // offset: 0x4 ordinal: 0x1
} _TOKEN_PRIVILEGES;

// 0x14 bytes (sizeof)
typedef struct _PRIVILEGE_SET {
  ULONG PrivilegeCount;                     // offset: 0x0 ordinal: 0x0
  ULONG Control;                            // offset: 0x4 ordinal: 0x1
  struct _LUID_AND_ATTRIBUTES Privilege[1]; // offset: 0x8 ordinal: 0x2
} _PRIVILEGE_SET;

// 0x2c bytes (sizeof)
typedef struct _INITIAL_PRIVILEGE_SET {
  ULONG PrivilegeCount;                     // offset: 0x0 ordinal: 0x0
  ULONG Control;                            // offset: 0x4 ordinal: 0x1
  struct _LUID_AND_ATTRIBUTES Privilege[3]; // offset: 0x8 ordinal: 0x2
} _INITIAL_PRIVILEGE_SET;

// 0x2c bytes (sizeof)
typedef union __anon_1069 {
  struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet; // offset: 0x0 ordinal: 0x0
  struct _PRIVILEGE_SET PrivilegeSet;                // offset: 0x0 ordinal: 0x1
} __anon_1069;

// 0x74 bytes (sizeof)
typedef struct _ACCESS_STATE {
  struct _LUID OperationID;      // offset: 0x0 ordinal: 0x0
  UCHAR SecurityEvaluated;       // offset: 0x8 ordinal: 0x1
  UCHAR GenerateAudit;           // offset: 0x9 ordinal: 0x2
  UCHAR GenerateOnClose;         // offset: 0xa ordinal: 0x3
  UCHAR PrivilegesAllocated;     // offset: 0xb ordinal: 0x4
  ULONG Flags;                   // offset: 0xc ordinal: 0x5
  ULONG RemainingDesiredAccess;  // offset: 0x10 ordinal: 0x6
  ULONG PreviouslyGrantedAccess; // offset: 0x14 ordinal: 0x7
  ULONG OriginalDesiredAccess;   // offset: 0x18 ordinal: 0x8
  struct _SECURITY_SUBJECT_CONTEXT
      SubjectSecurityContext;            // offset: 0x1c ordinal: 0x9
  VOID *SecurityDescriptor;              // offset: 0x2c ordinal: 0xa
  VOID *AuxData;                         // offset: 0x30 ordinal: 0xb
  union __anon_1069 Privileges;          // offset: 0x34 ordinal: 0xc
  UCHAR AuditPrivileges;                 // offset: 0x60 ordinal: 0xd
  struct _UNICODE_STRING ObjectName;     // offset: 0x64 ordinal: 0xe
  struct _UNICODE_STRING ObjectTypeName; // offset: 0x6c ordinal: 0xf
} _ACCESS_STATE;

typedef LONG (*__anon_2151)(VOID *, VOID *, struct _ACCESS_STATE *, CHAR, ULONG,
                            struct _UNICODE_STRING *, struct _UNICODE_STRING *,
                            VOID *, struct _SECURITY_QUALITY_OF_SERVICE *,
                            struct _OB_EXTENDED_PARSE_PARAMETERS *, VOID **);

typedef LONG (*__anon_2150)(VOID *, VOID *, struct _ACCESS_STATE *, CHAR, ULONG,
                            struct _UNICODE_STRING *, struct _UNICODE_STRING *,
                            VOID *, struct _SECURITY_QUALITY_OF_SERVICE *,
                            VOID **);

// 0x10 bytes (sizeof)
typedef struct _IO_SECURITY_CONTEXT {
  struct _SECURITY_QUALITY_OF_SERVICE *SecurityQos; // offset: 0x0 ordinal: 0x0
  struct _ACCESS_STATE *AccessState;                // offset: 0x4 ordinal: 0x1
  ULONG DesiredAccess;                              // offset: 0x8 ordinal: 0x2
  ULONG FullCreateOptions;                          // offset: 0xc ordinal: 0x3
} _IO_SECURITY_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct __anon_800 {
  struct _IO_SECURITY_CONTEXT *SecurityContext; // offset: 0x0 ordinal: 0x0
  ULONG Options;                                // offset: 0x4 ordinal: 0x1
  USHORT FileAttributes;                        // offset: 0x8 ordinal: 0x2
  USHORT ShareAccess;                           // offset: 0xa ordinal: 0x3
  ULONG EaLength;                               // offset: 0xc ordinal: 0x4
} __anon_800;

// 0x24 bytes (sizeof)
typedef struct _RTL_DYNAMIC_HASH_TABLE {
  ULONG Flags;           // offset: 0x0 ordinal: 0x0
  ULONG Shift;           // offset: 0x4 ordinal: 0x1
  ULONG TableSize;       // offset: 0x8 ordinal: 0x2
  ULONG Pivot;           // offset: 0xc ordinal: 0x3
  ULONG DivisorMask;     // offset: 0x10 ordinal: 0x4
  ULONG NumEntries;      // offset: 0x14 ordinal: 0x5
  ULONG NonEmptyBuckets; // offset: 0x18 ordinal: 0x6
  ULONG NumEnumerators;  // offset: 0x1c ordinal: 0x7
  VOID *Directory;       // offset: 0x20 ordinal: 0x8
} _RTL_DYNAMIC_HASH_TABLE;

// 0x14 bytes (sizeof)
typedef struct _SEP_LOWBOX_NUMBER_MAPPING {
  struct _EX_PUSH_LOCK Lock;                 // offset: 0x0 ordinal: 0x0
  struct _RTL_BITMAP Bitmap;                 // offset: 0x4 ordinal: 0x1
  struct _RTL_DYNAMIC_HASH_TABLE *HashTable; // offset: 0xc ordinal: 0x2
  UCHAR Active;                              // offset: 0x10 ordinal: 0x3
} _SEP_LOWBOX_NUMBER_MAPPING;

// 0x20 bytes (sizeof)
typedef struct _SESSION_LOWBOX_MAP {
  struct _LIST_ENTRY ListEntry;                // offset: 0x0 ordinal: 0x0
  ULONG SessionId;                             // offset: 0x8 ordinal: 0x1
  struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap; // offset: 0xc ordinal: 0x2
} _SESSION_LOWBOX_MAP;

// 0x8 bytes (sizeof)
typedef struct _SEP_CACHED_HANDLES_TABLE {
  struct _EX_PUSH_LOCK Lock;                 // offset: 0x0 ordinal: 0x0
  struct _RTL_DYNAMIC_HASH_TABLE *HashTable; // offset: 0x4 ordinal: 0x1
} _SEP_CACHED_HANDLES_TABLE;

// 0xc bytes (sizeof)
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
  struct _LIST_ENTRY Linkage; // offset: 0x0 ordinal: 0x0
  ULONG Signature;            // offset: 0x8 ordinal: 0x1
} _RTL_DYNAMIC_HASH_TABLE_ENTRY;

// 0x24 bytes (sizeof)
typedef struct _SEP_CACHED_HANDLES_ENTRY {
  struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // offset: 0x0 ordinal: 0x0
  LONG ReferenceCount;                            // offset: 0xc ordinal: 0x1
  struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
      EntryDescriptor; // offset: 0x10 ordinal: 0x2
  ULONG HandleCount;   // offset: 0x1c ordinal: 0x3
  VOID **Handles;      // offset: 0x20 ordinal: 0x4
} _SEP_CACHED_HANDLES_ENTRY;

// 0x1c bytes (sizeof)
typedef struct _SEP_LOWBOX_NUMBER_ENTRY {
  struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // offset: 0x0 ordinal: 0x0
  LONG ReferenceCount;                            // offset: 0xc ordinal: 0x1
  VOID *PackageSid;                               // offset: 0x10 ordinal: 0x2
  ULONG LowboxNumber;                             // offset: 0x14 ordinal: 0x3
  VOID *AtomTable;                                // offset: 0x18 ordinal: 0x4
} _SEP_LOWBOX_NUMBER_ENTRY;

// 0x14 bytes (sizeof)
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
  union {
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // offset: 0x0 ordinal: 0x0
    struct _LIST_ENTRY *CurEntry;                   // offset: 0x0 ordinal: 0x1
  };
  struct _LIST_ENTRY *ChainHead; // offset: 0xc ordinal: 0x2
  ULONG BucketIndex;             // offset: 0x10 ordinal: 0x3
} _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;

// 0xc bytes (sizeof)
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
  struct _LIST_ENTRY *ChainHead;   // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY *PrevLinkage; // offset: 0x4 ordinal: 0x1
  ULONG Signature;                 // offset: 0x8 ordinal: 0x2
} _RTL_DYNAMIC_HASH_TABLE_CONTEXT;

// 0x70 bytes (sizeof)
typedef struct _FLOATING_SAVE_AREA {
  ULONG ControlWord;      // offset: 0x0 ordinal: 0x0
  ULONG StatusWord;       // offset: 0x4 ordinal: 0x1
  ULONG TagWord;          // offset: 0x8 ordinal: 0x2
  ULONG ErrorOffset;      // offset: 0xc ordinal: 0x3
  ULONG ErrorSelector;    // offset: 0x10 ordinal: 0x4
  ULONG DataOffset;       // offset: 0x14 ordinal: 0x5
  ULONG DataSelector;     // offset: 0x18 ordinal: 0x6
  UCHAR RegisterArea[80]; // offset: 0x1c ordinal: 0x7
  ULONG Spare0;           // offset: 0x6c ordinal: 0x8
} _FLOATING_SAVE_AREA;

// 0x50 bytes (sizeof)
typedef struct _EXCEPTION_RECORD32 {
  LONG ExceptionCode;             // offset: 0x0 ordinal: 0x0
  ULONG ExceptionFlags;           // offset: 0x4 ordinal: 0x1
  ULONG ExceptionRecord;          // offset: 0x8 ordinal: 0x2
  ULONG ExceptionAddress;         // offset: 0xc ordinal: 0x3
  ULONG NumberParameters;         // offset: 0x10 ordinal: 0x4
  ULONG ExceptionInformation[15]; // offset: 0x14 ordinal: 0x5
} _EXCEPTION_RECORD32;

// 0x54 bytes (sizeof)
typedef struct _DBGKM_EXCEPTION32 {
  struct _EXCEPTION_RECORD32 ExceptionRecord; // offset: 0x0 ordinal: 0x0
  ULONG FirstChance;                          // offset: 0x50 ordinal: 0x1
} _DBGKM_EXCEPTION32;

// 0x2cc bytes (sizeof)
typedef struct _CONTEXT {
  ULONG ContextFlags;                   // offset: 0x0 ordinal: 0x0
  ULONG Dr0;                            // offset: 0x4 ordinal: 0x1
  ULONG Dr1;                            // offset: 0x8 ordinal: 0x2
  ULONG Dr2;                            // offset: 0xc ordinal: 0x3
  ULONG Dr3;                            // offset: 0x10 ordinal: 0x4
  ULONG Dr6;                            // offset: 0x14 ordinal: 0x5
  ULONG Dr7;                            // offset: 0x18 ordinal: 0x6
  struct _FLOATING_SAVE_AREA FloatSave; // offset: 0x1c ordinal: 0x7
  ULONG SegGs;                          // offset: 0x8c ordinal: 0x8
  ULONG SegFs;                          // offset: 0x90 ordinal: 0x9
  ULONG SegEs;                          // offset: 0x94 ordinal: 0xa
  ULONG SegDs;                          // offset: 0x98 ordinal: 0xb
  ULONG Edi;                            // offset: 0x9c ordinal: 0xc
  ULONG Esi;                            // offset: 0xa0 ordinal: 0xd
  ULONG Ebx;                            // offset: 0xa4 ordinal: 0xe
  ULONG Edx;                            // offset: 0xa8 ordinal: 0xf
  ULONG Ecx;                            // offset: 0xac ordinal: 0x10
  ULONG Eax;                            // offset: 0xb0 ordinal: 0x11
  ULONG Ebp;                            // offset: 0xb4 ordinal: 0x12
  ULONG Eip;                            // offset: 0xb8 ordinal: 0x13
  ULONG SegCs;                          // offset: 0xbc ordinal: 0x14
  ULONG EFlags;                         // offset: 0xc0 ordinal: 0x15
  ULONG Esp;                            // offset: 0xc4 ordinal: 0x16
  ULONG SegSs;                          // offset: 0xc8 ordinal: 0x17
  UCHAR ExtendedRegisters[512];         // offset: 0xcc ordinal: 0x18
} _CONTEXT;

// 0x8 bytes (sizeof)
typedef struct _EXCEPTION_POINTERS {
  struct _EXCEPTION_RECORD *ExceptionRecord; // offset: 0x0 ordinal: 0x0
  struct _CONTEXT *ContextRecord;            // offset: 0x4 ordinal: 0x1
} _EXCEPTION_POINTERS;

typedef enum _EXCEPTION_DISPOSITION (*__anon_120)(struct _EXCEPTION_RECORD *,
                                                  VOID *, struct _CONTEXT *,
                                                  VOID *);

// 0x8 bytes (sizeof)
typedef struct _EXCEPTION_REGISTRATION_RECORD {
  struct _EXCEPTION_REGISTRATION_RECORD *Next; // offset: 0x0 ordinal: 0x0
  enum _EXCEPTION_DISPOSITION (*Handler)(struct _EXCEPTION_RECORD *, VOID *,
                                         struct _CONTEXT *,
                                         VOID *); // offset: 0x4 ordinal: 0x1
} _EXCEPTION_REGISTRATION_RECORD;

// 0x50 bytes (sizeof)
typedef struct _EXCEPTION_RECORD {
  LONG ExceptionCode;                        // offset: 0x0 ordinal: 0x0
  ULONG ExceptionFlags;                      // offset: 0x4 ordinal: 0x1
  struct _EXCEPTION_RECORD *ExceptionRecord; // offset: 0x8 ordinal: 0x2
  VOID *ExceptionAddress;                    // offset: 0xc ordinal: 0x3
  ULONG NumberParameters;                    // offset: 0x10 ordinal: 0x4
  ULONG ExceptionInformation[15];            // offset: 0x14 ordinal: 0x5
} _EXCEPTION_RECORD;

// 0x3d0 bytes (sizeof)
typedef struct _HEAP_FAILURE_INFORMATION {
  ULONG Version;                                // offset: 0x0 ordinal: 0x0
  ULONG StructureSize;                          // offset: 0x4 ordinal: 0x1
  enum _HEAP_FAILURE_TYPE FailureType;          // offset: 0x8 ordinal: 0x2
  VOID *HeapAddress;                            // offset: 0xc ordinal: 0x3
  VOID *Address;                                // offset: 0x10 ordinal: 0x4
  VOID *Param1;                                 // offset: 0x14 ordinal: 0x5
  VOID *Param2;                                 // offset: 0x18 ordinal: 0x6
  VOID *Param3;                                 // offset: 0x1c ordinal: 0x7
  VOID *PreviousBlock;                          // offset: 0x20 ordinal: 0x8
  VOID *NextBlock;                              // offset: 0x24 ordinal: 0x9
  struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry; // offset: 0x28 ordinal: 0xa
  VOID *StackTrace[32];                         // offset: 0x30 ordinal: 0xb
  UCHAR HeapMajorVersion;                       // offset: 0xb0 ordinal: 0xc
  UCHAR HeapMinorVersion;                       // offset: 0xb1 ordinal: 0xd
  struct _EXCEPTION_RECORD ExceptionRecord;     // offset: 0xb4 ordinal: 0xe
  struct _CONTEXT ContextRecord;                // offset: 0x104 ordinal: 0xf
} _HEAP_FAILURE_INFORMATION;

// 0x1c bytes (sizeof)
typedef struct _RTLP_HP_HEAP_GLOBALS {
  ULONG HeapKey;                                 // offset: 0x0 ordinal: 0x0
  ULONG LfhKey;                                  // offset: 0x4 ordinal: 0x1
  struct _HEAP_FAILURE_INFORMATION *FailureInfo; // offset: 0x8 ordinal: 0x2
  struct _RTL_HEAP_MEMORY_LIMIT_DATA
      CommitLimitData; // offset: 0xc ordinal: 0x3
} _RTLP_HP_HEAP_GLOBALS;

// 0x10 bytes (sizeof)
typedef struct _RTL_DRIVE_LETTER_CURDIR {
  USHORT Flags;           // offset: 0x0 ordinal: 0x0
  USHORT Length;          // offset: 0x2 ordinal: 0x1
  ULONG TimeStamp;        // offset: 0x4 ordinal: 0x2
  struct _STRING DosPath; // offset: 0x8 ordinal: 0x3
} _RTL_DRIVE_LETTER_CURDIR;

// 0x18 bytes (sizeof)
typedef struct _RTL_CRITICAL_SECTION {
  struct _RTL_CRITICAL_SECTION_DEBUG *DebugInfo; // offset: 0x0 ordinal: 0x0
  LONG LockCount;                                // offset: 0x4 ordinal: 0x1
  LONG RecursionCount;                           // offset: 0x8 ordinal: 0x2
  VOID *OwningThread;                            // offset: 0xc ordinal: 0x3
  VOID *LockSemaphore;                           // offset: 0x10 ordinal: 0x4
  ULONG SpinCount;                               // offset: 0x14 ordinal: 0x5
} _RTL_CRITICAL_SECTION;

// 0x38 bytes (sizeof)
typedef union __anon_2061 {
  struct _RTL_CRITICAL_SECTION CriticalSection; // offset: 0x0 ordinal: 0x0
  struct _ERESOURCE Resource;                   // offset: 0x0 ordinal: 0x1
} __anon_2061;

// 0x38 bytes (sizeof)
typedef struct _HEAP_LOCK {
  union __anon_2061 Lock; // offset: 0x0 ordinal: 0x0
} _HEAP_LOCK;

// 0x20 bytes (sizeof)
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
  USHORT Type;                                   // offset: 0x0 ordinal: 0x0
  USHORT CreatorBackTraceIndex;                  // offset: 0x2 ordinal: 0x1
  struct _RTL_CRITICAL_SECTION *CriticalSection; // offset: 0x4 ordinal: 0x2
  struct _LIST_ENTRY ProcessLocksList;           // offset: 0x8 ordinal: 0x3
  ULONG EntryCount;                              // offset: 0x10 ordinal: 0x4
  ULONG ContentionCount;                         // offset: 0x14 ordinal: 0x5
  ULONG Flags;                                   // offset: 0x18 ordinal: 0x6
  USHORT CreatorBackTraceIndexHigh;              // offset: 0x1c ordinal: 0x7
  USHORT SpareUSHORT;                            // offset: 0x1e ordinal: 0x8
} _RTL_CRITICAL_SECTION_DEBUG;

// 0x30 bytes (sizeof)
typedef struct _PEB_LDR_DATA {
  ULONG Length;                               // offset: 0x0 ordinal: 0x0
  UCHAR Initialized;                          // offset: 0x4 ordinal: 0x1
  VOID *SsHandle;                             // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY InLoadOrderModuleList;   // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY InMemoryOrderModuleList; // offset: 0x14 ordinal: 0x4
  struct _LIST_ENTRY
      InInitializationOrderModuleList; // offset: 0x1c ordinal: 0x5
  VOID *EntryInProgress;               // offset: 0x24 ordinal: 0x6
  UCHAR ShutdownInProgress;            // offset: 0x28 ordinal: 0x7
  VOID *ShutdownThreadId;              // offset: 0x2c ordinal: 0x8
} _PEB_LDR_DATA;

// 0xc bytes (sizeof)
typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
  struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
      *Previous;                                 // offset: 0x0 ordinal: 0x0
  struct _ACTIVATION_CONTEXT *ActivationContext; // offset: 0x4 ordinal: 0x1
  ULONG Flags;                                   // offset: 0x8 ordinal: 0x2
} _RTL_ACTIVATION_CONTEXT_STACK_FRAME;

// 0x80 bytes (sizeof)
typedef struct _ACCESS_REASONS {
  ULONG Data[32]; // offset: 0x0 ordinal: 0x0
} _ACCESS_REASONS;

// 0x88 bytes (sizeof)
typedef struct _SID_AND_ATTRIBUTES_HASH {
  ULONG SidCount;                      // offset: 0x0 ordinal: 0x0
  struct _SID_AND_ATTRIBUTES *SidAttr; // offset: 0x4 ordinal: 0x1
  ULONG Hash[32];                      // offset: 0x8 ordinal: 0x2
} _SID_AND_ATTRIBUTES_HASH;

// 0x38 bytes (sizeof)
typedef struct _TOKEN_ACCESS_INFORMATION {
  struct _SID_AND_ATTRIBUTES_HASH *SidHash; // offset: 0x0 ordinal: 0x0
  struct _SID_AND_ATTRIBUTES_HASH
      *RestrictedSidHash;               // offset: 0x4 ordinal: 0x1
  struct _TOKEN_PRIVILEGES *Privileges; // offset: 0x8 ordinal: 0x2
  struct _LUID AuthenticationId;        // offset: 0xc ordinal: 0x3
  enum _TOKEN_TYPE TokenType;           // offset: 0x14 ordinal: 0x4
  enum _SECURITY_IMPERSONATION_LEVEL
      ImpersonationLevel;                         // offset: 0x18 ordinal: 0x5
  struct _TOKEN_MANDATORY_POLICY MandatoryPolicy; // offset: 0x1c ordinal: 0x6
  ULONG Flags;                                    // offset: 0x20 ordinal: 0x7
  ULONG AppContainerNumber;                       // offset: 0x24 ordinal: 0x8
  VOID *PackageSid;                               // offset: 0x28 ordinal: 0x9
  struct _SID_AND_ATTRIBUTES_HASH
      *CapabilitiesHash;    // offset: 0x2c ordinal: 0xa
  VOID *TrustLevelSid;      // offset: 0x30 ordinal: 0xb
  VOID *SecurityAttributes; // offset: 0x34 ordinal: 0xc
} _TOKEN_ACCESS_INFORMATION;

// 0x130 bytes (sizeof)
typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION {
  ULONG DeviceGroupsCount;                   // offset: 0x0 ordinal: 0x0
  struct _SID_AND_ATTRIBUTES *pDeviceGroups; // offset: 0x4 ordinal: 0x1
  ULONG RestrictedDeviceGroupsCount;         // offset: 0x8 ordinal: 0x2
  struct _SID_AND_ATTRIBUTES
      *pRestrictedDeviceGroups;                     // offset: 0xc ordinal: 0x3
  struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash; // offset: 0x10 ordinal: 0x4
  struct _SID_AND_ATTRIBUTES_HASH
      RestrictedDeviceGroupsHash; // offset: 0x98 ordinal: 0x5
  struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
      *pUserSecurityAttributes; // offset: 0x120 ordinal: 0x6
  struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
      *pDeviceSecurityAttributes; // offset: 0x124 ordinal: 0x7
  struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
      *pRestrictedUserSecurityAttributes; // offset: 0x128 ordinal: 0x8
  struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
      *pRestrictedDeviceSecurityAttributes; // offset: 0x12c ordinal: 0x9
} _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;

// 0x6c bytes (sizeof)
typedef struct _SEP_LOGON_SESSION_REFERENCES {
  struct _SEP_LOGON_SESSION_REFERENCES *Next; // offset: 0x0 ordinal: 0x0
  struct _LUID LogonId;                       // offset: 0x4 ordinal: 0x1
  struct _LUID BuddyLogonId;                  // offset: 0xc ordinal: 0x2
  LONG ReferenceCount;                        // offset: 0x14 ordinal: 0x3
  ULONG Flags;                                // offset: 0x18 ordinal: 0x4
  struct _DEVICE_MAP *pDeviceMap;             // offset: 0x1c ordinal: 0x5
  VOID *Token;                                // offset: 0x20 ordinal: 0x6
  struct _UNICODE_STRING AccountName;         // offset: 0x24 ordinal: 0x7
  struct _UNICODE_STRING AuthorityName;       // offset: 0x2c ordinal: 0x8
  struct _SEP_CACHED_HANDLES_TABLE
      CachedHandlesTable;              // offset: 0x34 ordinal: 0x9
  struct _EX_PUSH_LOCK SharedDataLock; // offset: 0x3c ordinal: 0xa
  struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
      *SharedClaimAttributes;                    // offset: 0x40 ordinal: 0xb
  struct _SEP_SID_VALUES_BLOCK *SharedSidValues; // offset: 0x44 ordinal: 0xc
  struct _OB_HANDLE_REVOCATION_BLOCK
      RevocationBlock;          // offset: 0x48 ordinal: 0xd
  struct _EJOB *ServerSilo;     // offset: 0x58 ordinal: 0xe
  struct _LUID SiblingAuthId;   // offset: 0x5c ordinal: 0xf
  struct _LIST_ENTRY TokenList; // offset: 0x64 ordinal: 0x10
} _SEP_LOGON_SESSION_REFERENCES;

// 0x10 bytes (sizeof)
typedef struct _VI_VERIFIER_ISSUE {
  ULONG IssueType;     // offset: 0x0 ordinal: 0x0
  VOID *Address;       // offset: 0x4 ordinal: 0x1
  ULONG Parameters[2]; // offset: 0x8 ordinal: 0x2
} _VI_VERIFIER_ISSUE;

// 0x10 bytes (sizeof)
typedef struct _HEAP_VAMGR_RANGE {
  union {
    struct _RTL_BALANCED_NODE RbNode; // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY Next;   // offset: 0x0 ordinal: 0x1
    UCHAR Allocated : 1;              // offset: 0x0 ordinal: 0x2
  };
  UCHAR Internal : 1;   // offset: 0x0 ordinal: 0x3
  UCHAR Standalone : 1; // offset: 0x0 ordinal: 0x4
  UCHAR Spare0 : 5;     // offset: 0x0 ordinal: 0x5
  UCHAR AllocatorIndex; // offset: 0x1 ordinal: 0x6
  ULONG OwnerCtx[2];    // offset: 0x4 ordinal: 0x7
  union {
    ULONG SizeInChunks; // offset: 0xc ordinal: 0x8
    USHORT ChunkCount;  // offset: 0xc ordinal: 0x9
  };
  USHORT PrevChunkCount; // offset: 0xe ordinal: 0xa
  ULONG Signature;       // offset: 0xc ordinal: 0xb
} _HEAP_VAMGR_RANGE;

// 0x14 bytes (sizeof)
typedef struct _CM_UOW_KEY_STATE_MODIFICATION {
  ULONG RefCount;           // offset: 0x0 ordinal: 0x0
  ULONG SubKeyListCount[2]; // offset: 0x4 ordinal: 0x1
  ULONG NewSubKeyList[2];   // offset: 0xc ordinal: 0x2
} _CM_UOW_KEY_STATE_MODIFICATION;

// 0x8 bytes (sizeof)
typedef struct _WNF_STATE_NAME {
  ULONG Data[2]; // offset: 0x0 ordinal: 0x0
} _WNF_STATE_NAME;

// 0x8 bytes (sizeof)
typedef struct __WIL__WNF_STATE_NAME {
  ULONG Data[2]; // offset: 0x0 ordinal: 0x0
} __WIL__WNF_STATE_NAME;

// 0x24 bytes (sizeof)
typedef struct _PROC_PERF_HISTORY {
  ULONG Count;                                    // offset: 0x0 ordinal: 0x0
  ULONG Slot;                                     // offset: 0x4 ordinal: 0x1
  ULONG UtilityTotal;                             // offset: 0x8 ordinal: 0x2
  ULONG AffinitizedUtilityTotal;                  // offset: 0xc ordinal: 0x3
  ULONG FrequencyTotal;                           // offset: 0x10 ordinal: 0x4
  ULONG TaggedPercentTotal[2];                    // offset: 0x14 ordinal: 0x5
  struct _PROC_PERF_HISTORY_ENTRY HistoryList[1]; // offset: 0x1c ordinal: 0x6
} _PROC_PERF_HISTORY;

// 0xc bytes (sizeof)
typedef struct _TEB_ACTIVE_FRAME {
  ULONG Flags;                               // offset: 0x0 ordinal: 0x0
  struct _TEB_ACTIVE_FRAME *Previous;        // offset: 0x4 ordinal: 0x1
  struct _TEB_ACTIVE_FRAME_CONTEXT *Context; // offset: 0x8 ordinal: 0x2
} _TEB_ACTIVE_FRAME;

// 0x4e0 bytes (sizeof)
typedef struct _GDI_TEB_BATCH32 {
  ULONG Offset : 31;             // offset: 0x0 ordinal: 0x0
  ULONG HasRenderingCommand : 1; // offset: 0x0 ordinal: 0x1
  ULONG HDC;                     // offset: 0x4 ordinal: 0x2
  ULONG Buffer[310];             // offset: 0x8 ordinal: 0x3
} _GDI_TEB_BATCH32;

// 0x1c bytes (sizeof)
typedef struct _RSDS {
  ULONG Signature;   // offset: 0x0 ordinal: 0x0
  struct _GUID Guid; // offset: 0x4 ordinal: 0x1
  ULONG Age;         // offset: 0x14 ordinal: 0x2
  CHAR PdbName[1];   // offset: 0x18 ordinal: 0x3
} _RSDS;

// 0x1c bytes (sizeof)
typedef union _CVDD {
  ULONG Signature;   // offset: 0x0 ordinal: 0x0
  struct _NB10 NB10; // offset: 0x0 ordinal: 0x1
  struct _RSDS RsDs; // offset: 0x0 ordinal: 0x2
} _CVDD;

// 0x2c bytes (sizeof)
typedef struct _ETW_DEBUGID_TRACKING_ENTRY {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  UCHAR ConsumersNotified;      // offset: 0x8 ordinal: 0x1
  UCHAR Spare[3];               // offset: 0x9 ordinal: 0x2
  ULONG DebugIdSize;            // offset: 0xc ordinal: 0x3
  union _CVDD DebugId;          // offset: 0x10 ordinal: 0x4
} _ETW_DEBUGID_TRACKING_ENTRY;

// 0x10 bytes (sizeof)
typedef struct __anon_3172 {
  struct _GUID DiskId; // offset: 0x0 ordinal: 0x0
} __anon_3172;

// 0x10 bytes (sizeof)
typedef union __anon_3163 {
  struct __anon_3171 Mbr; // offset: 0x0 ordinal: 0x0
  struct __anon_3172 Gpt; // offset: 0x0 ordinal: 0x1
} __anon_3163;

// 0x10 bytes (sizeof)
typedef struct __WIL__WNF_TYPE_ID {
  struct _GUID TypeId; // offset: 0x0 ordinal: 0x0
} __WIL__WNF_TYPE_ID;

// 0x34 bytes (sizeof)
typedef struct _IO_WORKITEM {
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x0 ordinal: 0x0
  VOID(*Routine)
  (VOID *, VOID *, struct _IO_WORKITEM *); // offset: 0x10 ordinal: 0x1
  VOID *IoObject;                          // offset: 0x14 ordinal: 0x2
  VOID *Context;                           // offset: 0x18 ordinal: 0x3
  struct _ETHREAD *WorkOnBehalfThread;     // offset: 0x1c ordinal: 0x4
  ULONG Type;                              // offset: 0x20 ordinal: 0x5
  struct _GUID ActivityId;                 // offset: 0x24 ordinal: 0x6
} _IO_WORKITEM;

typedef VOID (*__anon_3054)(VOID *, VOID *, struct _IO_WORKITEM *);

// 0x40 bytes (sizeof)
typedef struct _PNP_DEVICE_ACTION_ENTRY {
  struct _LIST_ENTRY ListEntry;                // offset: 0x0 ordinal: 0x0
  struct _DEVICE_OBJECT *DeviceObject;         // offset: 0x8 ordinal: 0x1
  enum _PNP_DEVICE_ACTION_REQUEST RequestType; // offset: 0xc ordinal: 0x2
  UCHAR ReorderingBarrier;                     // offset: 0x10 ordinal: 0x3
  ULONG RequestArgument;                       // offset: 0x14 ordinal: 0x4
  struct _KEVENT *CompletionEvent;             // offset: 0x18 ordinal: 0x5
  LONG *CompletionStatus;                      // offset: 0x1c ordinal: 0x6
  struct _GUID ActivityId;                     // offset: 0x20 ordinal: 0x7
  LONG RefCount;                               // offset: 0x30 ordinal: 0x8
  UCHAR Dequeued;                              // offset: 0x34 ordinal: 0x9
  struct _EX_PUSH_LOCK CancelLock;             // offset: 0x38 ordinal: 0xa
  UCHAR CancelRequested;                       // offset: 0x3c ordinal: 0xb
} _PNP_DEVICE_ACTION_ENTRY;

// 0x38 bytes (sizeof)
typedef struct _HEADLESS_LOADER_BLOCK {
  UCHAR UsedBiosSettings;   // offset: 0x0 ordinal: 0x0
  UCHAR DataBits;           // offset: 0x1 ordinal: 0x1
  UCHAR StopBits;           // offset: 0x2 ordinal: 0x2
  UCHAR Parity;             // offset: 0x3 ordinal: 0x3
  ULONG BaudRate;           // offset: 0x4 ordinal: 0x4
  ULONG PortNumber;         // offset: 0x8 ordinal: 0x5
  UCHAR *PortAddress;       // offset: 0xc ordinal: 0x6
  USHORT PciDeviceId;       // offset: 0x10 ordinal: 0x7
  USHORT PciVendorId;       // offset: 0x12 ordinal: 0x8
  UCHAR PciBusNumber;       // offset: 0x14 ordinal: 0x9
  USHORT PciBusSegment;     // offset: 0x16 ordinal: 0xa
  UCHAR PciSlotNumber;      // offset: 0x18 ordinal: 0xb
  UCHAR PciFunctionNumber;  // offset: 0x19 ordinal: 0xc
  ULONG PciFlags;           // offset: 0x1c ordinal: 0xd
  struct _GUID SystemGUID;  // offset: 0x20 ordinal: 0xe
  UCHAR IsMMIODevice;       // offset: 0x30 ordinal: 0xf
  UCHAR TerminalType;       // offset: 0x31 ordinal: 0x10
  UCHAR InterfaceType;      // offset: 0x32 ordinal: 0x11
  UCHAR RegisterBitWidth;   // offset: 0x33 ordinal: 0x12
  UCHAR RegisterAccessSize; // offset: 0x34 ordinal: 0x13
} _HEADLESS_LOADER_BLOCK;

// 0x2c bytes (sizeof)
typedef struct _CMP_VOLUME_CONTEXT {
  struct _LIST_ENTRY VolumeContextListEntry; // offset: 0x0 ordinal: 0x0
  struct _CMP_VOLUME_MANAGER *VolumeManager; // offset: 0x8 ordinal: 0x1
  LONG RefCount;                             // offset: 0xc ordinal: 0x2
  struct _GUID VolumeGuid;                   // offset: 0x10 ordinal: 0x3
  VOID *VolumeFileObject;                    // offset: 0x20 ordinal: 0x4
  struct _CMSI_RW_LOCK VolumeContextLock;    // offset: 0x24 ordinal: 0x5
  UCHAR DeviceUsageNotificationSent;         // offset: 0x28 ordinal: 0x6
} _CMP_VOLUME_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct _WNF_TYPE_ID {
  struct _GUID TypeId; // offset: 0x0 ordinal: 0x0
} _WNF_TYPE_ID;

// 0xc bytes (sizeof)
typedef struct _WNF_STATE_NAME_REGISTRATION {
  ULONG MaxStateSize;                              // offset: 0x0 ordinal: 0x0
  struct _WNF_TYPE_ID *TypeId;                     // offset: 0x4 ordinal: 0x1
  struct _SECURITY_DESCRIPTOR *SecurityDescriptor; // offset: 0x8 ordinal: 0x2
} _WNF_STATE_NAME_REGISTRATION;

// 0x13 bytes (sizeof)
typedef struct _TlgProviderMetadata_t {
  UCHAR Type;              // offset: 0x0 ordinal: 0x0
  struct _GUID ProviderId; // offset: 0x1 ordinal: 0x1
  USHORT RemainingSize;    // offset: 0x11 ordinal: 0x2
} _TlgProviderMetadata_t;

// 0x48 bytes (sizeof)
typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
  ULONG SectionOffset;           // offset: 0x0 ordinal: 0x0
  ULONG SectionLength;           // offset: 0x4 ordinal: 0x1
  union _WHEA_REVISION Revision; // offset: 0x8 ordinal: 0x2
  union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
      ValidBits;  // offset: 0xa ordinal: 0x3
  UCHAR Reserved; // offset: 0xb ordinal: 0x4
  union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
      Flags;                                 // offset: 0xc ordinal: 0x5
  struct _GUID SectionType;                  // offset: 0x10 ordinal: 0x6
  struct _GUID FRUId;                        // offset: 0x20 ordinal: 0x7
  enum _WHEA_ERROR_SEVERITY SectionSeverity; // offset: 0x30 ordinal: 0x8
  CHAR FRUText[20];                          // offset: 0x34 ordinal: 0x9
} _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;

// 0xc4 bytes (sizeof)
typedef struct _AUX_ACCESS_DATA {
  struct _PRIVILEGE_SET *PrivilegesUsed;           // offset: 0x0 ordinal: 0x0
  struct _GENERIC_MAPPING GenericMapping;          // offset: 0x4 ordinal: 0x1
  ULONG AccessesToAudit;                           // offset: 0x14 ordinal: 0x2
  ULONG MaximumAuditMask;                          // offset: 0x18 ordinal: 0x3
  struct _GUID TransactionId;                      // offset: 0x1c ordinal: 0x4
  VOID *NewSecurityDescriptor;                     // offset: 0x2c ordinal: 0x5
  VOID *ExistingSecurityDescriptor;                // offset: 0x30 ordinal: 0x6
  VOID *ParentSecurityDescriptor;                  // offset: 0x34 ordinal: 0x7
  VOID (*DeRefSecurityDescriptor)(VOID *, VOID *); // offset: 0x38 ordinal: 0x8
  VOID *SDLock;                                    // offset: 0x3c ordinal: 0x9
  struct _ACCESS_REASONS AccessReasons;            // offset: 0x40 ordinal: 0xa
  UCHAR GenerateStagingEvents;                     // offset: 0xc0 ordinal: 0xb
} _AUX_ACCESS_DATA;

// 0x30 bytes (sizeof)
typedef struct _CM_KEY_BODY {
  ULONG Type;                                    // offset: 0x0 ordinal: 0x0
  struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock; // offset: 0x4 ordinal: 0x1
  struct _CM_NOTIFY_BLOCK *NotifyBlock;          // offset: 0x8 ordinal: 0x2
  VOID *ProcessID;                               // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY KeyBodyList;                // offset: 0x10 ordinal: 0x4
  ULONG Flags : 16;                              // offset: 0x18 ordinal: 0x5
  ULONG HandleTags : 16;                         // offset: 0x18 ordinal: 0x6
  union _CM_TRANS_PTR Trans;                     // offset: 0x1c ordinal: 0x7
  struct _GUID *KtmUow;                          // offset: 0x20 ordinal: 0x8
  struct _LIST_ENTRY ContextListHead;            // offset: 0x24 ordinal: 0x9
  VOID *EnumerationResumeContext;                // offset: 0x2c ordinal: 0xa
} _CM_KEY_BODY;

// 0x2c bytes (sizeof)
typedef struct _CM_NOTIFY_BLOCK {
  struct _LIST_ENTRY HiveList;                     // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY PostList;                     // offset: 0x8 ordinal: 0x1
  struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock;   // offset: 0x10 ordinal: 0x2
  struct _CM_KEY_BODY *KeyBody;                    // offset: 0x14 ordinal: 0x3
  ULONG Filter : 30;                               // offset: 0x18 ordinal: 0x4
  ULONG WatchTree : 1;                             // offset: 0x18 ordinal: 0x5
  ULONG NotifyPending : 1;                         // offset: 0x18 ordinal: 0x6
  struct _SECURITY_SUBJECT_CONTEXT SubjectContext; // offset: 0x1c ordinal: 0x7
} _CM_NOTIFY_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _PERIODIC_CAPTURE_STATE_GUIDS {
  USHORT ProviderCount;    // offset: 0x0 ordinal: 0x0
  struct _GUID *Providers; // offset: 0x4 ordinal: 0x1
} _PERIODIC_CAPTURE_STATE_GUIDS;

// 0x8 bytes (sizeof)
typedef struct _DISALLOWED_GUIDS {
  USHORT Count;        // offset: 0x0 ordinal: 0x0
  struct _GUID *Guids; // offset: 0x4 ordinal: 0x1
} _DISALLOWED_GUIDS;

// 0x28 bytes (sizeof)
typedef struct _ETW_DECODE_CONTROL_ENTRY {
  struct _ETW_DECODE_CONTROL_ENTRY *Next; // offset: 0x0 ordinal: 0x0
  struct _GUID Decode;                    // offset: 0x4 ordinal: 0x1
  struct _GUID Control;                   // offset: 0x14 ordinal: 0x2
  UCHAR ConsumersNotified;                // offset: 0x24 ordinal: 0x3
} _ETW_DECODE_CONTROL_ENTRY;

// 0x20 bytes (sizeof)
typedef struct __anon_921 {
  struct _GUID PowerSettingGuid; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                   // offset: 0x10 ordinal: 0x1
  ULONG SessionId;               // offset: 0x14 ordinal: 0x2
  ULONG DataLength;              // offset: 0x18 ordinal: 0x3
  UCHAR Data[1];                 // offset: 0x1c ordinal: 0x4
} __anon_921;

// 0x10 bytes (sizeof)
typedef struct __anon_919 {
  struct _GUID BlockedDriverGuid; // offset: 0x0 ordinal: 0x0
} __anon_919;

// 0x14 bytes (sizeof)
typedef struct __anon_913 {
  struct _GUID ClassGuid;    // offset: 0x0 ordinal: 0x0
  WCHAR SymbolicLinkName[1]; // offset: 0x10 ordinal: 0x1
} __anon_913;

// 0x20 bytes (sizeof)
typedef union __anon_842 {
  struct __anon_913 DeviceClass;                // offset: 0x0 ordinal: 0x0
  struct __anon_914 TargetDevice;               // offset: 0x0 ordinal: 0x1
  struct __anon_914 InstallDevice;              // offset: 0x0 ordinal: 0x2
  struct __anon_915 CustomNotification;         // offset: 0x0 ordinal: 0x3
  struct __anon_916 ProfileNotification;        // offset: 0x0 ordinal: 0x4
  struct __anon_917 PowerNotification;          // offset: 0x0 ordinal: 0x5
  struct __anon_918 VetoNotification;           // offset: 0x0 ordinal: 0x6
  struct __anon_919 BlockedDriverNotification;  // offset: 0x0 ordinal: 0x7
  struct __anon_920 InvalidIDNotification;      // offset: 0x0 ordinal: 0x8
  struct __anon_921 PowerSettingNotification;   // offset: 0x0 ordinal: 0x9
  struct __anon_914 PropertyChangeNotification; // offset: 0x0 ordinal: 0xa
  struct __anon_914 DeviceInstanceNotification; // offset: 0x0 ordinal: 0xb
} __anon_842;

// 0x44 bytes (sizeof)
typedef struct _PLUGPLAY_EVENT_BLOCK {
  struct _GUID EventGuid;                      // offset: 0x0 ordinal: 0x0
  enum _PLUGPLAY_EVENT_CATEGORY EventCategory; // offset: 0x10 ordinal: 0x1
  ULONG *Result;                               // offset: 0x14 ordinal: 0x2
  ULONG Flags;                                 // offset: 0x18 ordinal: 0x3
  ULONG TotalSize;                             // offset: 0x1c ordinal: 0x4
  VOID *DeviceObject;                          // offset: 0x20 ordinal: 0x5
  union __anon_842 u;                          // offset: 0x24 ordinal: 0x6
} _PLUGPLAY_EVENT_BLOCK;

// 0x20 bytes (sizeof)
typedef struct _POP_COMPONENT_POWER_PROFILE {
  struct _GUID ComponentGuid;                // offset: 0x0 ordinal: 0x0
  struct _POP_DEVICE_POWER_PROFILE *Device;  // offset: 0x10 ordinal: 0x1
  ULONG FxCount;                             // offset: 0x14 ordinal: 0x2
  struct _PO_POWER_PLANE_PROFILE FxPower[1]; // offset: 0x18 ordinal: 0x3
} _POP_COMPONENT_POWER_PROFILE;

// 0x4e0 bytes (sizeof)
typedef struct _GDI_TEB_BATCH {
  ULONG Offset : 31;             // offset: 0x0 ordinal: 0x0
  ULONG HasRenderingCommand : 1; // offset: 0x0 ordinal: 0x1
  ULONG HDC;                     // offset: 0x4 ordinal: 0x2
  ULONG Buffer[310];             // offset: 0x8 ordinal: 0x3
} _GDI_TEB_BATCH;

// 0x18 bytes (sizeof)
typedef struct _ACTIVATION_CONTEXT_STACK {
  struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
      *ActiveFrame;                  // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY FrameListCache; // offset: 0x4 ordinal: 0x1
  ULONG Flags;                       // offset: 0xc ordinal: 0x2
  ULONG NextCookieSequenceNumber;    // offset: 0x10 ordinal: 0x3
  ULONG StackId;                     // offset: 0x14 ordinal: 0x4
} _ACTIVATION_CONTEXT_STACK;

// 0x6c bytes (sizeof)
typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE {
  ULONG GlobalDeviceMap;      // offset: 0x0 ordinal: 0x0
  ULONG LocalDeviceCount[26]; // offset: 0x4 ordinal: 0x1
} _OBP_SYSTEM_DOS_DEVICE_STATE;

// 0x1a4 bytes (sizeof)
typedef struct _OBP_SILODRIVERSTATE {
  struct _DEVICE_MAP *SystemDeviceMap; // offset: 0x0 ordinal: 0x0
  struct _OBP_SYSTEM_DOS_DEVICE_STATE
      SystemDosDeviceState;           // offset: 0x4 ordinal: 0x1
  struct _EX_PUSH_LOCK DeviceMapLock; // offset: 0x70 ordinal: 0x2
  struct _OBJECT_NAMESPACE_LOOKUPTABLE
      PrivateNamespaceLookupTable; // offset: 0x74 ordinal: 0x3
} _OBP_SILODRIVERSTATE;

// 0x1c bytes (sizeof)
typedef struct _NT_TIB {
  struct _EXCEPTION_REGISTRATION_RECORD
      *ExceptionList; // offset: 0x0 ordinal: 0x0
  VOID *StackBase;    // offset: 0x4 ordinal: 0x1
  VOID *StackLimit;   // offset: 0x8 ordinal: 0x2
  VOID *SubSystemTib; // offset: 0xc ordinal: 0x3
  union {
    VOID *FiberData; // offset: 0x10 ordinal: 0x4
    ULONG Version;   // offset: 0x10 ordinal: 0x5
  };
  VOID *ArbitraryUserPointer; // offset: 0x14 ordinal: 0x6
  struct _NT_TIB *Self;       // offset: 0x18 ordinal: 0x7
} _NT_TIB;

// 0x4 bytes (sizeof)
typedef struct __anon_42 {
  ULONG LongFunction : 1; // offset: 0x0 ordinal: 0x0
  ULONG Persistent : 1;   // offset: 0x0 ordinal: 0x1
  ULONG Private : 30;     // offset: 0x0 ordinal: 0x2
} __anon_42;

// 0x4 bytes (sizeof)
typedef union __anon_43 {
  ULONG Flags;        // offset: 0x0 ordinal: 0x0
  struct __anon_42 s; // offset: 0x0 ordinal: 0x1
} __anon_43;

// 0x28 bytes (sizeof)
typedef struct _TP_CALLBACK_ENVIRON_V3 {
  ULONG Version;                          // offset: 0x0 ordinal: 0x0
  struct _TP_POOL *Pool;                  // offset: 0x4 ordinal: 0x1
  struct _TP_CLEANUP_GROUP *CleanupGroup; // offset: 0x8 ordinal: 0x2
  VOID(*CleanupGroupCancelCallback)
  (VOID *, VOID *);                              // offset: 0xc ordinal: 0x3
  VOID *RaceDll;                                 // offset: 0x10 ordinal: 0x4
  struct _ACTIVATION_CONTEXT *ActivationContext; // offset: 0x14 ordinal: 0x5
  VOID(*FinalizationCallback)
  (struct _TP_CALLBACK_INSTANCE *, VOID *);    // offset: 0x18 ordinal: 0x6
  union __anon_43 u;                           // offset: 0x1c ordinal: 0x7
  enum _TP_CALLBACK_PRIORITY CallbackPriority; // offset: 0x20 ordinal: 0x8
  ULONG Size;                                  // offset: 0x24 ordinal: 0x9
} _TP_CALLBACK_ENVIRON_V3;

// 0x8 bytes (sizeof)
typedef struct __anon_36 {
  ULONG LowPart;  // offset: 0x0 ordinal: 0x0
  ULONG HighPart; // offset: 0x4 ordinal: 0x1
} __anon_36;

// 0x8 bytes (sizeof)
typedef struct _XSTATE_FEATURE {
  ULONG Offset; // offset: 0x0 ordinal: 0x0
  ULONG Size;   // offset: 0x4 ordinal: 0x1
} _XSTATE_FEATURE;

// 0x108 bytes (sizeof)
typedef struct _MI_LARGE_PAGE_CANDIDATES {
  USHORT Hand;             // offset: 0x0 ordinal: 0x0
  USHORT ActiveEntryCount; // offset: 0x2 ordinal: 0x1
  UCHAR Overflowed;        // offset: 0x4 ordinal: 0x2
  ULONG PageFrames[64];    // offset: 0x8 ordinal: 0x3
} _MI_LARGE_PAGE_CANDIDATES;

// 0x128 bytes (sizeof)
typedef struct _KENTROPY_TIMING_STATE {
  ULONG EntropyCount;        // offset: 0x0 ordinal: 0x0
  ULONG Buffer[64];          // offset: 0x4 ordinal: 0x1
  struct _KDPC Dpc;          // offset: 0x104 ordinal: 0x2
  ULONG LastDeliveredBuffer; // offset: 0x124 ordinal: 0x3
} _KENTROPY_TIMING_STATE;

// 0x8 bytes (sizeof)
typedef struct __anon_32 {
  ULONG LowPart; // offset: 0x0 ordinal: 0x0
  LONG HighPart; // offset: 0x4 ordinal: 0x1
} __anon_32;

// 0x8 bytes (sizeof)
typedef union _LARGE_INTEGER {
  ULONG LowPart;      // offset: 0x0 ordinal: 0x0
  LONG HighPart;      // offset: 0x4 ordinal: 0x1
  struct __anon_32 u; // offset: 0x0 ordinal: 0x2
  LONGLONG QuadPart;  // offset: 0x0 ordinal: 0x3
} _LARGE_INTEGER;

// 0x38 bytes (sizeof)
typedef struct _FAST_ERESOURCE {
  VOID *Reserved1[3]; // offset: 0x0 ordinal: 0x0
  ULONG Reserved2;    // offset: 0xc ordinal: 0x1
  VOID *Reserved3[4]; // offset: 0x10 ordinal: 0x2
  ULONG Reserved4[4]; // offset: 0x20 ordinal: 0x3
  VOID *Reserved6[2]; // offset: 0x30 ordinal: 0x4
} _FAST_ERESOURCE;

// 0x38 bytes (sizeof)
typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
  USHORT Magic;                  // offset: 0x0 ordinal: 0x0
  UCHAR MajorLinkerVersion;      // offset: 0x2 ordinal: 0x1
  UCHAR MinorLinkerVersion;      // offset: 0x3 ordinal: 0x2
  ULONG SizeOfCode;              // offset: 0x4 ordinal: 0x3
  ULONG SizeOfInitializedData;   // offset: 0x8 ordinal: 0x4
  ULONG SizeOfUninitializedData; // offset: 0xc ordinal: 0x5
  ULONG AddressOfEntryPoint;     // offset: 0x10 ordinal: 0x6
  ULONG BaseOfCode;              // offset: 0x14 ordinal: 0x7
  ULONG BaseOfData;              // offset: 0x18 ordinal: 0x8
  ULONG BaseOfBss;               // offset: 0x1c ordinal: 0x9
  ULONG GprMask;                 // offset: 0x20 ordinal: 0xa
  ULONG CprMask[4];              // offset: 0x24 ordinal: 0xb
  ULONG GpValue;                 // offset: 0x34 ordinal: 0xc
} _IMAGE_ROM_OPTIONAL_HEADER;

// 0x100 bytes (sizeof)
typedef struct _KNODE {
  ULONG IdleNonParkedCpuSet; // offset: 0x0 ordinal: 0x0
  ULONG IdleSmtSet;          // offset: 0x4 ordinal: 0x1
  ULONG IdleCpuSet;          // offset: 0x8 ordinal: 0x2
  ULONG DeepIdleSet;         // offset: 0x40 ordinal: 0x3
  ULONG IdleConstrainedSet;  // offset: 0x44 ordinal: 0x4
  ULONG NonParkedSet;        // offset: 0x48 ordinal: 0x5
  ULONG NonIsrTargetedSet;   // offset: 0x4c ordinal: 0x6
  LONG ParkLock;             // offset: 0x50 ordinal: 0x7
  USHORT ThreadSeed;         // offset: 0x54 ordinal: 0x8
  USHORT ProcessSeed;        // offset: 0x56 ordinal: 0x9
  ULONG SiblingMask;         // offset: 0x80 ordinal: 0xa
  union {
    struct _GROUP_AFFINITY Affinity; // offset: 0x84 ordinal: 0xb
    UCHAR AffinityFill[6];           // offset: 0x84 ordinal: 0xc
  };
  USHORT NodeNumber;                           // offset: 0x8a ordinal: 0xd
  USHORT PrimaryNodeNumber;                    // offset: 0x8c ordinal: 0xe
  USHORT Spare0;                               // offset: 0x8e ordinal: 0xf
  ULONG SharedReadyQueueMask;                  // offset: 0x90 ordinal: 0x10
  ULONG StrideMask;                            // offset: 0x94 ordinal: 0x11
  ULONG ProximityId;                           // offset: 0x98 ordinal: 0x12
  ULONG Lowest;                                // offset: 0x9c ordinal: 0x13
  ULONG Highest;                               // offset: 0xa0 ordinal: 0x14
  UCHAR MaximumProcessors;                     // offset: 0xa4 ordinal: 0x15
  struct _flags Flags;                         // offset: 0xa5 ordinal: 0x16
  UCHAR Spare10;                               // offset: 0xa6 ordinal: 0x17
  struct _KHETERO_PROCESSOR_SET HeteroSets[5]; // offset: 0xa8 ordinal: 0x18
  ULONG PpmConfiguredQosSets[4];               // offset: 0xe4 ordinal: 0x19
  ULONG LLCLeaders;                            // offset: 0xf4 ordinal: 0x1a
} _KNODE;

// 0x140 bytes (sizeof)
typedef struct _ENODE {
  struct _KNODE Ncb;                               // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem; // offset: 0x100 ordinal: 0x1
} _ENODE;

// 0x1c0 bytes (sizeof)
typedef struct _EX_WORK_QUEUE {
  struct _KPRIQUEUE WorkPriQueue;        // offset: 0x0 ordinal: 0x0
  struct _EX_PARTITION *Partition;       // offset: 0x19c ordinal: 0x1
  struct _ENODE *Node;                   // offset: 0x1a0 ordinal: 0x2
  ULONG WorkItemsProcessed;              // offset: 0x1a4 ordinal: 0x3
  ULONG WorkItemsProcessedLastPass;      // offset: 0x1a8 ordinal: 0x4
  LONG ThreadCount;                      // offset: 0x1ac ordinal: 0x5
  LONG MinThreads : 31;                  // offset: 0x1b0 ordinal: 0x6
  ULONG TryFailed : 1;                   // offset: 0x1b0 ordinal: 0x7
  LONG MaxThreads;                       // offset: 0x1b4 ordinal: 0x8
  enum _EXQUEUEINDEX QueueIndex;         // offset: 0x1b8 ordinal: 0x9
  struct _KEVENT *AllThreadsExitedEvent; // offset: 0x1bc ordinal: 0xa
} _EX_WORK_QUEUE;

// 0x20ac bytes (sizeof)
typedef struct _KTSS {
  USHORT Backlink;                 // offset: 0x0 ordinal: 0x0
  USHORT Reserved0;                // offset: 0x2 ordinal: 0x1
  ULONG Esp0;                      // offset: 0x4 ordinal: 0x2
  USHORT Ss0;                      // offset: 0x8 ordinal: 0x3
  USHORT Reserved1;                // offset: 0xa ordinal: 0x4
  ULONG NotUsed1[4];               // offset: 0xc ordinal: 0x5
  ULONG CR3;                       // offset: 0x1c ordinal: 0x6
  ULONG Eip;                       // offset: 0x20 ordinal: 0x7
  ULONG EFlags;                    // offset: 0x24 ordinal: 0x8
  ULONG Eax;                       // offset: 0x28 ordinal: 0x9
  ULONG Ecx;                       // offset: 0x2c ordinal: 0xa
  ULONG Edx;                       // offset: 0x30 ordinal: 0xb
  ULONG Ebx;                       // offset: 0x34 ordinal: 0xc
  ULONG Esp;                       // offset: 0x38 ordinal: 0xd
  ULONG Ebp;                       // offset: 0x3c ordinal: 0xe
  ULONG Esi;                       // offset: 0x40 ordinal: 0xf
  ULONG Edi;                       // offset: 0x44 ordinal: 0x10
  USHORT Es;                       // offset: 0x48 ordinal: 0x11
  USHORT Reserved2;                // offset: 0x4a ordinal: 0x12
  USHORT Cs;                       // offset: 0x4c ordinal: 0x13
  USHORT Reserved3;                // offset: 0x4e ordinal: 0x14
  USHORT Ss;                       // offset: 0x50 ordinal: 0x15
  USHORT Reserved4;                // offset: 0x52 ordinal: 0x16
  USHORT Ds;                       // offset: 0x54 ordinal: 0x17
  USHORT Reserved5;                // offset: 0x56 ordinal: 0x18
  USHORT Fs;                       // offset: 0x58 ordinal: 0x19
  USHORT Reserved6;                // offset: 0x5a ordinal: 0x1a
  USHORT Gs;                       // offset: 0x5c ordinal: 0x1b
  USHORT Reserved7;                // offset: 0x5e ordinal: 0x1c
  USHORT LDT;                      // offset: 0x60 ordinal: 0x1d
  USHORT Reserved8;                // offset: 0x62 ordinal: 0x1e
  USHORT Flags;                    // offset: 0x64 ordinal: 0x1f
  USHORT IoMapBase;                // offset: 0x66 ordinal: 0x20
  struct _KiIoAccessMap IoMaps[1]; // offset: 0x68 ordinal: 0x21
  UCHAR IntDirectionMap[32];       // offset: 0x208c ordinal: 0x22
} _KTSS;

// 0x40 bytes (sizeof)
typedef struct _MI_SYSTEM_TRIM_STATE {
  ULONG ExpansionLock;                    // offset: 0x0 ordinal: 0x0
  LONG TrimInProgressCount;               // offset: 0x4 ordinal: 0x1
  struct _KEVENT PeriodicWorkingSetEvent; // offset: 0x8 ordinal: 0x2
  ULONG TrimAllPageFaultCount[3];         // offset: 0x18 ordinal: 0x3
} _MI_SYSTEM_TRIM_STATE;

// 0xe8 bytes (sizeof)
typedef struct _SYSTEM_POWER_POLICY {
  ULONG Revision;                               // offset: 0x0 ordinal: 0x0
  struct POWER_ACTION_POLICY PowerButton;       // offset: 0x4 ordinal: 0x1
  struct POWER_ACTION_POLICY SleepButton;       // offset: 0x10 ordinal: 0x2
  struct POWER_ACTION_POLICY LidClose;          // offset: 0x1c ordinal: 0x3
  enum _SYSTEM_POWER_STATE LidOpenWake;         // offset: 0x28 ordinal: 0x4
  ULONG Reserved;                               // offset: 0x2c ordinal: 0x5
  struct POWER_ACTION_POLICY Idle;              // offset: 0x30 ordinal: 0x6
  ULONG IdleTimeout;                            // offset: 0x3c ordinal: 0x7
  UCHAR IdleSensitivity;                        // offset: 0x40 ordinal: 0x8
  UCHAR DynamicThrottle;                        // offset: 0x41 ordinal: 0x9
  UCHAR Spare2[2];                              // offset: 0x42 ordinal: 0xa
  enum _SYSTEM_POWER_STATE MinSleep;            // offset: 0x44 ordinal: 0xb
  enum _SYSTEM_POWER_STATE MaxSleep;            // offset: 0x48 ordinal: 0xc
  enum _SYSTEM_POWER_STATE ReducedLatencySleep; // offset: 0x4c ordinal: 0xd
  ULONG WinLogonFlags;                          // offset: 0x50 ordinal: 0xe
  ULONG Spare3;                                 // offset: 0x54 ordinal: 0xf
  ULONG DozeS4Timeout;                          // offset: 0x58 ordinal: 0x10
  ULONG BroadcastCapacityResolution;            // offset: 0x5c ordinal: 0x11
  struct SYSTEM_POWER_LEVEL DischargePolicy[4]; // offset: 0x60 ordinal: 0x12
  ULONG VideoTimeout;                           // offset: 0xc0 ordinal: 0x13
  UCHAR VideoDimDisplay;                        // offset: 0xc4 ordinal: 0x14
  ULONG VideoReserved[3];                       // offset: 0xc8 ordinal: 0x15
  ULONG SpindownTimeout;                        // offset: 0xd4 ordinal: 0x16
  UCHAR OptimizeForPower;                       // offset: 0xd8 ordinal: 0x17
  UCHAR FanThrottleTolerance;                   // offset: 0xd9 ordinal: 0x18
  UCHAR ForcedThrottle;                         // offset: 0xda ordinal: 0x19
  UCHAR MinThrottle;                            // offset: 0xdb ordinal: 0x1a
  struct POWER_ACTION_POLICY OverThrottled;     // offset: 0xdc ordinal: 0x1b
} _SYSTEM_POWER_POLICY;

// 0x148 bytes (sizeof)
typedef struct _POP_POWER_SETTING_VALUES {
  ULONG StructureSize;                   // offset: 0x0 ordinal: 0x0
  struct _SYSTEM_POWER_POLICY PopPolicy; // offset: 0x4 ordinal: 0x1
  enum SYSTEM_POWER_CONDITION
      CurrentAcDcPowerState;           // offset: 0xec ordinal: 0x2
  UCHAR AwayModeEnabled;               // offset: 0xf0 ordinal: 0x3
  UCHAR AwayModeEngaged;               // offset: 0xf1 ordinal: 0x4
  UCHAR AwayModePolicyAllowed;         // offset: 0xf2 ordinal: 0x5
  LONG AwayModeIgnoreUserPresent;      // offset: 0xf4 ordinal: 0x6
  LONG AwayModeIgnoreAction;           // offset: 0xf8 ordinal: 0x7
  UCHAR DisableFastS4;                 // offset: 0xfc ordinal: 0x8
  UCHAR DisableStandbyStates;          // offset: 0xfd ordinal: 0x9
  ULONG UnattendSleepTimeout;          // offset: 0x100 ordinal: 0xa
  ULONG DiskIgnoreTime;                // offset: 0x104 ordinal: 0xb
  ULONG DeviceIdlePolicy;              // offset: 0x108 ordinal: 0xc
  ULONG VideoDimTimeout;               // offset: 0x10c ordinal: 0xd
  ULONG VideoNormalBrightness;         // offset: 0x110 ordinal: 0xe
  ULONG VideoDimBrightness;            // offset: 0x114 ordinal: 0xf
  ULONG AlsOffset;                     // offset: 0x118 ordinal: 0x10
  ULONG AlsEnabled;                    // offset: 0x11c ordinal: 0x11
  ULONG EsBrightness;                  // offset: 0x120 ordinal: 0x12
  UCHAR SwitchShutdownForced;          // offset: 0x124 ordinal: 0x13
  ULONG SystemCoolingPolicy;           // offset: 0x128 ordinal: 0x14
  UCHAR MediaBufferingEngaged;         // offset: 0x12c ordinal: 0x15
  UCHAR AudioActivity;                 // offset: 0x12d ordinal: 0x16
  UCHAR FullscreenVideoPlayback;       // offset: 0x12e ordinal: 0x17
  ULONG EsBatteryThreshold;            // offset: 0x130 ordinal: 0x18
  UCHAR EsAggressive;                  // offset: 0x134 ordinal: 0x19
  UCHAR EsUserAwaySetting;             // offset: 0x135 ordinal: 0x1a
  ULONG ConnectivityInStandby;         // offset: 0x138 ordinal: 0x1b
  ULONG DisconnectedStandbyMode;       // offset: 0x13c ordinal: 0x1c
  ULONG UserPresencePredictionEnabled; // offset: 0x140 ordinal: 0x1d
  UCHAR AirplaneModeEnabled;           // offset: 0x144 ordinal: 0x1e
  UCHAR BluetoothDeviceCharging;       // offset: 0x145 ordinal: 0x1f
} _POP_POWER_SETTING_VALUES;

// 0xc bytes (sizeof)
typedef struct _MI_PAGE_COLORS {
  ULONG PageSize[3]; // offset: 0x0 ordinal: 0x0
} _MI_PAGE_COLORS;

// 0xc bytes (sizeof)
typedef struct __anon_928 {
  ULONG Data[3]; // offset: 0x0 ordinal: 0x0
} __anon_928;

// 0x14 bytes (sizeof)
typedef struct _PNP_REPLACE_PROCESSOR_LIST {
  ULONG *Affinity;      // offset: 0x0 ordinal: 0x0
  ULONG GroupCount;     // offset: 0x4 ordinal: 0x1
  ULONG AllocatedCount; // offset: 0x8 ordinal: 0x2
  ULONG Count;          // offset: 0xc ordinal: 0x3
  ULONG ApicIds[1];     // offset: 0x10 ordinal: 0x4
} _PNP_REPLACE_PROCESSOR_LIST;

// 0xc bytes (sizeof)
typedef struct _HAL_DP_REPLACE_PARAMETERS {
  ULONG Flags; // offset: 0x0 ordinal: 0x0
  struct _PNP_REPLACE_PROCESSOR_LIST
      *TargetProcessors; // offset: 0x4 ordinal: 0x1
  struct _PNP_REPLACE_PROCESSOR_LIST
      *SpareProcessors; // offset: 0x8 ordinal: 0x2
} _HAL_DP_REPLACE_PARAMETERS;

typedef LONG (*__anon_2463)(struct _HAL_DP_REPLACE_PARAMETERS *, VOID **);

// 0x24 bytes (sizeof)
typedef struct _HEAP_LFH_SUBSEGMENT {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  union {
    struct _HEAP_LFH_SUBSEGMENT_OWNER *Owner;        // offset: 0x8 ordinal: 0x1
    union _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree; // offset: 0x8 ordinal: 0x2
  };
  ULONG CommitLock;  // offset: 0xc ordinal: 0x3
  USHORT FreeCount;  // offset: 0x10 ordinal: 0x4
  USHORT BlockCount; // offset: 0x12 ordinal: 0x5
  union {
    SHORT InterlockedShort; // offset: 0x10 ordinal: 0x6
    LONG InterlockedLong;   // offset: 0x10 ordinal: 0x7
  };
  USHORT FreeHint;         // offset: 0x14 ordinal: 0x8
  UCHAR Location;          // offset: 0x16 ordinal: 0x9
  UCHAR WitheldBlockCount; // offset: 0x17 ordinal: 0xa
  struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
      BlockOffsets;         // offset: 0x18 ordinal: 0xb
  UCHAR CommitUnitShift;    // offset: 0x1c ordinal: 0xc
  UCHAR CommitUnitCount;    // offset: 0x1d ordinal: 0xd
  USHORT CommitStateOffset; // offset: 0x1e ordinal: 0xe
  ULONG BlockBitmap[1];     // offset: 0x20 ordinal: 0xf
} _HEAP_LFH_SUBSEGMENT;

// 0x24 bytes (sizeof)
typedef struct _RTL_CSPARSE_BITMAP {
  ULONG *CommitBitmap;             // offset: 0x0 ordinal: 0x0
  ULONG *UserBitmap;               // offset: 0x4 ordinal: 0x1
  LONG BitCount;                   // offset: 0x8 ordinal: 0x2
  ULONG BitmapLock;                // offset: 0xc ordinal: 0x3
  ULONG DecommitPageIndex;         // offset: 0x10 ordinal: 0x4
  ULONG RtlpCSparseBitmapWakeLock; // offset: 0x14 ordinal: 0x5
  UCHAR LockType;                  // offset: 0x18 ordinal: 0x6
  UCHAR AddressSpace;              // offset: 0x19 ordinal: 0x7
  UCHAR MemType;                   // offset: 0x1a ordinal: 0x8
  UCHAR AllocAlignment;            // offset: 0x1b ordinal: 0x9
  ULONG CommitDirectoryMaxSize;    // offset: 0x1c ordinal: 0xa
  ULONG CommitDirectory[1];        // offset: 0x20 ordinal: 0xb
} _RTL_CSPARSE_BITMAP;

// 0x2c bytes (sizeof)
typedef struct _RTLP_HP_ALLOC_TRACKER {
  ULONG BaseAddress; // offset: 0x0 ordinal: 0x0
  union {
    struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap; // offset: 0x4 ordinal: 0x1
    UCHAR AllocTrackerBitmapBuffer[40];            // offset: 0x4 ordinal: 0x2
  };
} _RTLP_HP_ALLOC_TRACKER;

// 0x2c bytes (sizeof)
typedef struct _RTL_SPARSE_ARRAY {
  ULONG ElementCount;                // offset: 0x0 ordinal: 0x0
  ULONG ElementSizeShift;            // offset: 0x4 ordinal: 0x1
  struct _RTL_CSPARSE_BITMAP Bitmap; // offset: 0x8 ordinal: 0x2
} _RTL_SPARSE_ARRAY;

// 0x34 bytes (sizeof)
typedef struct _HEAP_VAMGR_VASPACE {
  enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType; // offset: 0x0 ordinal: 0x0
  ULONG BaseAddress;                                 // offset: 0x4 ordinal: 0x1
  union {
    struct _RTL_SPARSE_ARRAY VaRangeArray; // offset: 0x8 ordinal: 0x2
    UCHAR VaRangeArrayBuffer[44];          // offset: 0x8 ordinal: 0x3
  };
} _HEAP_VAMGR_VASPACE;

// 0x1c bytes (sizeof)
typedef struct _HEAP_VAMGR_ALLOCATOR {
  ULONG TreeLock;                      // offset: 0x0 ordinal: 0x0
  struct _RTL_RB_TREE FreeRanges;      // offset: 0x4 ordinal: 0x1
  struct _HEAP_VAMGR_VASPACE *VaSpace; // offset: 0xc ordinal: 0x2
  VOID *PartitionHandle;               // offset: 0x10 ordinal: 0x3
  USHORT ChunksPerRegion;              // offset: 0x14 ordinal: 0x4
  USHORT RefCount;                     // offset: 0x16 ordinal: 0x5
  UCHAR AllocatorIndex;                // offset: 0x18 ordinal: 0x6
  UCHAR NumaNode;                      // offset: 0x19 ordinal: 0x7
  UCHAR LockType : 1;                  // offset: 0x1a ordinal: 0x8
  UCHAR MemoryType : 2;                // offset: 0x1a ordinal: 0x9
  UCHAR ConstrainedVA : 1;             // offset: 0x1a ordinal: 0xa
  UCHAR AllowFreeHead : 1;             // offset: 0x1a ordinal: 0xb
  UCHAR Spare0 : 3;                    // offset: 0x1a ordinal: 0xc
  UCHAR Spare1;                        // offset: 0x1b ordinal: 0xd
} _HEAP_VAMGR_ALLOCATOR;

// 0x1c20 bytes (sizeof)
typedef struct _HEAP_VAMGR_CTX {
  struct _HEAP_VAMGR_VASPACE VaSpace;           // offset: 0x0 ordinal: 0x0
  ULONG AllocatorLock;                          // offset: 0x34 ordinal: 0x1
  ULONG AllocatorCount;                         // offset: 0x38 ordinal: 0x2
  struct _HEAP_VAMGR_ALLOCATOR Allocators[255]; // offset: 0x3c ordinal: 0x3
} _HEAP_VAMGR_CTX;

// 0x8 bytes (sizeof)
typedef struct _CM_INDEX_HINT_BLOCK {
  ULONG Count;      // offset: 0x0 ordinal: 0x0
  ULONG HashKey[1]; // offset: 0x4 ordinal: 0x1
} _CM_INDEX_HINT_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _CM_KEY_INDEX {
  USHORT Signature; // offset: 0x0 ordinal: 0x0
  USHORT Count;     // offset: 0x2 ordinal: 0x1
  ULONG List[1];    // offset: 0x4 ordinal: 0x2
} _CM_KEY_INDEX;

// 0x28 bytes (sizeof)
typedef struct _MI_FREE_LARGE_PAGES {
  ULONG LargePageFreeCount[2];    // offset: 0x0 ordinal: 0x0
  ULONG LargePagesCount[2][2][1]; // offset: 0x8 ordinal: 0x1
  struct _MI_FREE_LARGE_PAGE_LIST
      *LargePageEntries[2][2][1]; // offset: 0x18 ordinal: 0x2
} _MI_FREE_LARGE_PAGES;

// 0x140 bytes (sizeof)
typedef struct _MI_NODE_INFORMATION {
  struct _MI_FREE_LARGE_PAGES FreeLargePages[2]; // offset: 0x0 ordinal: 0x0
  struct _MI_REBUILD_LARGE_PAGE_TIMER
      LargePageRebuildTimer;                     // offset: 0x50 ordinal: 0x1
  struct _RTL_BITMAP FreePageListHeadsBitmap[2]; // offset: 0x80 ordinal: 0x2
  ULONG FreePageListHeadsBitmapBuffer[16];       // offset: 0x90 ordinal: 0x3
  ULONG FreeCount[2];                            // offset: 0xd0 ordinal: 0x4
  ULONG TotalPages[1];                           // offset: 0xd8 ordinal: 0x5
  ULONG TotalPagesEntireNode;                    // offset: 0xdc ordinal: 0x6
  ULONG MmShiftedColor;                          // offset: 0xe0 ordinal: 0x7
  ULONG Color;                                   // offset: 0xe4 ordinal: 0x8
  ULONG ChannelFreeCount[1][2];                  // offset: 0xe8 ordinal: 0x9
  struct __anon_1440 Flags;                      // offset: 0xf0 ordinal: 0xa
  struct _EX_PUSH_LOCK NodeLock;                 // offset: 0xf4 ordinal: 0xb
  UCHAR LargeListMoveInProgress;                 // offset: 0xf8 ordinal: 0xc
  UCHAR ChannelStatus;                           // offset: 0xf9 ordinal: 0xd
  UCHAR ChannelOrdering[1];                      // offset: 0xfa ordinal: 0xe
  UCHAR LockedChannelOrdering[1];                // offset: 0xfb ordinal: 0xf
  UCHAR PowerAttribute[1];                       // offset: 0xfc ordinal: 0x10
  ULONG LargePageLock;                           // offset: 0x100 ordinal: 0x11
  struct _MI_PAGE_COLORS PageColorTable;         // offset: 0x104 ordinal: 0x12
} _MI_NODE_INFORMATION;

// 0xe4 bytes (sizeof)
typedef struct _MI_PARTITION_CORE {
  USHORT PartitionId;                           // offset: 0x0 ordinal: 0x0
  union __anon_1374 u;                          // offset: 0x4 ordinal: 0x1
  ULONG Signature;                              // offset: 0x8 ordinal: 0x2
  UCHAR MemoryConfigurationChanged;             // offset: 0xc ordinal: 0x3
  struct _MI_NODE_INFORMATION *NodeInformation; // offset: 0x10 ordinal: 0x4
  struct _RTL_AVL_TREE PageRoot;                // offset: 0x14 ordinal: 0x5
  struct _PHYSICAL_MEMORY_DESCRIPTOR
      *MemoryNodeRuns;                             // offset: 0x18 ordinal: 0x6
  ULONG MemoryBlockReferences;                     // offset: 0x1c ordinal: 0x7
  struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;        // offset: 0x20 ordinal: 0x8
  ULONG PfnUnmapCount;                             // offset: 0x30 ordinal: 0x9
  VOID *PfnUnmapWaitList;                          // offset: 0x34 ordinal: 0xa
  struct _PHYSICAL_MEMORY_DESCRIPTOR *MemoryRuns;  // offset: 0x38 ordinal: 0xb
  struct _KEVENT ExitEvent;                        // offset: 0x3c ordinal: 0xc
  VOID *SystemThreadHandles[5];                    // offset: 0x4c ordinal: 0xd
  struct _EPARTITION *PartitionObject;             // offset: 0x60 ordinal: 0xe
  struct _EX_PUSH_LOCK PartitionSystemThreadsLock; // offset: 0x64 ordinal: 0xf
  struct _EX_PUSH_LOCK DynamicMemoryPushLock;      // offset: 0x68 ordinal: 0x10
  LONG DynamicMemoryLock;                          // offset: 0x6c ordinal: 0x11
  UCHAR PfnUnmapActive;                            // offset: 0x70 ordinal: 0x12
  struct _KEVENT TemporaryMemoryEvent;             // offset: 0x74 ordinal: 0x13
  VOID *RootDirectory;                             // offset: 0x84 ordinal: 0x14
  VOID *KernelObjectsDirectory;                    // offset: 0x88 ordinal: 0x15
  struct _KEVENT *MemoryEvents[11];                // offset: 0x8c ordinal: 0x16
  VOID *MemoryEventHandles[11];                    // offset: 0xb8 ordinal: 0x17
} _MI_PARTITION_CORE;

// 0xc bytes (sizeof)
typedef struct _SID {
  UCHAR Revision;          // offset: 0x0 ordinal: 0x0
  UCHAR SubAuthorityCount; // offset: 0x1 ordinal: 0x1
  struct _SID_IDENTIFIER_AUTHORITY
      IdentifierAuthority; // offset: 0x2 ordinal: 0x2
  ULONG SubAuthority[1];   // offset: 0x8 ordinal: 0x3
} _SID;

// 0x14 bytes (sizeof)
typedef struct _FILE_GET_QUOTA_INFORMATION {
  ULONG NextEntryOffset; // offset: 0x0 ordinal: 0x0
  ULONG SidLength;       // offset: 0x4 ordinal: 0x1
  struct _SID Sid;       // offset: 0x8 ordinal: 0x2
} _FILE_GET_QUOTA_INFORMATION;

// 0x10 bytes (sizeof)
typedef struct __anon_819 {
  ULONG Length;                                // offset: 0x0 ordinal: 0x0
  VOID *StartSid;                              // offset: 0x4 ordinal: 0x1
  struct _FILE_GET_QUOTA_INFORMATION *SidList; // offset: 0x8 ordinal: 0x2
  ULONG SidListLength;                         // offset: 0xc ordinal: 0x3
} __anon_819;

// 0xc bytes (sizeof)
typedef struct _COMPRESSED_DATA_INFO {
  USHORT CompressionFormatAndEngine; // offset: 0x0 ordinal: 0x0
  UCHAR CompressionUnitShift;        // offset: 0x2 ordinal: 0x1
  UCHAR ChunkShift;                  // offset: 0x3 ordinal: 0x2
  UCHAR ClusterShift;                // offset: 0x4 ordinal: 0x3
  UCHAR Reserved;                    // offset: 0x5 ordinal: 0x4
  USHORT NumberOfChunks;             // offset: 0x6 ordinal: 0x5
  ULONG CompressedChunkSizes[1];     // offset: 0x8 ordinal: 0x6
} _COMPRESSED_DATA_INFO;

// 0xc bytes (sizeof)
typedef struct _PERFINFO_PPM_STATE_SELECTION {
  ULONG SelectedState; // offset: 0x0 ordinal: 0x0
  ULONG VetoedStates;  // offset: 0x4 ordinal: 0x1
  ULONG VetoReason[1]; // offset: 0x8 ordinal: 0x2
} _PERFINFO_PPM_STATE_SELECTION;

// 0xc bytes (sizeof)
typedef struct _KAFFINITY_EX {
  USHORT Count;    // offset: 0x0 ordinal: 0x0
  USHORT Size;     // offset: 0x2 ordinal: 0x1
  ULONG Reserved;  // offset: 0x4 ordinal: 0x2
  ULONG Bitmap[1]; // offset: 0x8 ordinal: 0x3
} _KAFFINITY_EX;

typedef LONG (*__anon_2691)(struct _KAFFINITY_EX *, ULONG);

typedef VOID (*__anon_2467)(UCHAR, struct _KAFFINITY_EX *);

// 0xc bytes (sizeof)
typedef struct _KAFFINITY_ENUMERATION_CONTEXT {
  struct _KAFFINITY_EX *Affinity; // offset: 0x0 ordinal: 0x0
  ULONG CurrentMask;              // offset: 0x4 ordinal: 0x1
  USHORT CurrentIndex;            // offset: 0x8 ordinal: 0x2
} _KAFFINITY_ENUMERATION_CONTEXT;

// 0x40 bytes (sizeof)
typedef struct _DEVICE_DESCRIPTION {
  ULONG Version;                      // offset: 0x0 ordinal: 0x0
  UCHAR Master;                       // offset: 0x4 ordinal: 0x1
  UCHAR ScatterGather;                // offset: 0x5 ordinal: 0x2
  UCHAR DemandMode;                   // offset: 0x6 ordinal: 0x3
  UCHAR AutoInitialize;               // offset: 0x7 ordinal: 0x4
  UCHAR Dma32BitAddresses;            // offset: 0x8 ordinal: 0x5
  UCHAR IgnoreCount;                  // offset: 0x9 ordinal: 0x6
  UCHAR Reserved1;                    // offset: 0xa ordinal: 0x7
  UCHAR Dma64BitAddresses;            // offset: 0xb ordinal: 0x8
  ULONG BusNumber;                    // offset: 0xc ordinal: 0x9
  ULONG DmaChannel;                   // offset: 0x10 ordinal: 0xa
  enum _INTERFACE_TYPE InterfaceType; // offset: 0x14 ordinal: 0xb
  enum _DMA_WIDTH DmaWidth;           // offset: 0x18 ordinal: 0xc
  enum _DMA_SPEED DmaSpeed;           // offset: 0x1c ordinal: 0xd
  ULONG MaximumLength;                // offset: 0x20 ordinal: 0xe
  ULONG DmaPort;                      // offset: 0x24 ordinal: 0xf
  ULONG DmaAddressWidth;              // offset: 0x28 ordinal: 0x10
  ULONG DmaControllerInstance;        // offset: 0x2c ordinal: 0x11
  ULONG DmaRequestLine;               // offset: 0x30 ordinal: 0x12
  union _LARGE_INTEGER DeviceAddress; // offset: 0x38 ordinal: 0x13
} _DEVICE_DESCRIPTION;

// 0xa8 bytes (sizeof)
typedef struct _LDR_DATA_TABLE_ENTRY {
  struct _LIST_ENTRY InLoadOrderLinks;           // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY InMemoryOrderLinks;         // offset: 0x8 ordinal: 0x1
  struct _LIST_ENTRY InInitializationOrderLinks; // offset: 0x10 ordinal: 0x2
  VOID *DllBase;                                 // offset: 0x18 ordinal: 0x3
  VOID *EntryPoint;                              // offset: 0x1c ordinal: 0x4
  ULONG SizeOfImage;                             // offset: 0x20 ordinal: 0x5
  struct _UNICODE_STRING FullDllName;            // offset: 0x24 ordinal: 0x6
  struct _UNICODE_STRING BaseDllName;            // offset: 0x2c ordinal: 0x7
  union {
    UCHAR FlagGroup[4];       // offset: 0x34 ordinal: 0x8
    ULONG Flags;              // offset: 0x34 ordinal: 0x9
    ULONG PackagedBinary : 1; // offset: 0x34 ordinal: 0xa
  };
  ULONG MarkedForRemoval : 1;        // offset: 0x34 ordinal: 0xb
  ULONG ImageDll : 1;                // offset: 0x34 ordinal: 0xc
  ULONG LoadNotificationsSent : 1;   // offset: 0x34 ordinal: 0xd
  ULONG TelemetryEntryProcessed : 1; // offset: 0x34 ordinal: 0xe
  ULONG ProcessStaticImport : 1;     // offset: 0x34 ordinal: 0xf
  ULONG InLegacyLists : 1;           // offset: 0x34 ordinal: 0x10
  ULONG InIndexes : 1;               // offset: 0x34 ordinal: 0x11
  ULONG ShimDll : 1;                 // offset: 0x34 ordinal: 0x12
  ULONG InExceptionTable : 1;        // offset: 0x34 ordinal: 0x13
  ULONG ReservedFlags1 : 2;          // offset: 0x34 ordinal: 0x14
  ULONG LoadInProgress : 1;          // offset: 0x34 ordinal: 0x15
  ULONG LoadConfigProcessed : 1;     // offset: 0x34 ordinal: 0x16
  ULONG EntryProcessed : 1;          // offset: 0x34 ordinal: 0x17
  ULONG ProtectDelayLoad : 1;        // offset: 0x34 ordinal: 0x18
  ULONG ReservedFlags3 : 2;          // offset: 0x34 ordinal: 0x19
  ULONG DontCallForThreads : 1;      // offset: 0x34 ordinal: 0x1a
  ULONG ProcessAttachCalled : 1;     // offset: 0x34 ordinal: 0x1b
  ULONG ProcessAttachFailed : 1;     // offset: 0x34 ordinal: 0x1c
  ULONG CorDeferredValidate : 1;     // offset: 0x34 ordinal: 0x1d
  ULONG CorImage : 1;                // offset: 0x34 ordinal: 0x1e
  ULONG DontRelocate : 1;            // offset: 0x34 ordinal: 0x1f
  ULONG CorILOnly : 1;               // offset: 0x34 ordinal: 0x20
  ULONG ChpeImage : 1;               // offset: 0x34 ordinal: 0x21
  ULONG ReservedFlags5 : 2;          // offset: 0x34 ordinal: 0x22
  ULONG Redirected : 1;              // offset: 0x34 ordinal: 0x23
  ULONG ReservedFlags6 : 2;          // offset: 0x34 ordinal: 0x24
  ULONG CompatDatabaseProcessed : 1; // offset: 0x34 ordinal: 0x25
  USHORT ObsoleteLoadCount;          // offset: 0x38 ordinal: 0x26
  USHORT TlsIndex;                   // offset: 0x3a ordinal: 0x27
  struct _LIST_ENTRY HashLinks;      // offset: 0x3c ordinal: 0x28
  ULONG TimeDateStamp;               // offset: 0x44 ordinal: 0x29
  struct _ACTIVATION_CONTEXT
      *EntryPointActivationContext;               // offset: 0x48 ordinal: 0x2a
  VOID *Lock;                                     // offset: 0x4c ordinal: 0x2b
  struct _LDR_DDAG_NODE *DdagNode;                // offset: 0x50 ordinal: 0x2c
  struct _LIST_ENTRY NodeModuleLink;              // offset: 0x54 ordinal: 0x2d
  struct _LDRP_LOAD_CONTEXT *LoadContext;         // offset: 0x5c ordinal: 0x2e
  VOID *ParentDllBase;                            // offset: 0x60 ordinal: 0x2f
  VOID *SwitchBackContext;                        // offset: 0x64 ordinal: 0x30
  struct _RTL_BALANCED_NODE BaseAddressIndexNode; // offset: 0x68 ordinal: 0x31
  struct _RTL_BALANCED_NODE MappingInfoIndexNode; // offset: 0x74 ordinal: 0x32
  ULONG OriginalBase;                             // offset: 0x80 ordinal: 0x33
  union _LARGE_INTEGER LoadTime;                  // offset: 0x88 ordinal: 0x34
  ULONG BaseNameHashValue;                        // offset: 0x90 ordinal: 0x35
  enum _LDR_DLL_LOAD_REASON LoadReason;           // offset: 0x94 ordinal: 0x36
  ULONG ImplicitPathOptions;                      // offset: 0x98 ordinal: 0x37
  ULONG ReferenceCount;                           // offset: 0x9c ordinal: 0x38
  ULONG DependentLoadFlags;                       // offset: 0xa0 ordinal: 0x39
  UCHAR SigningLevel;                             // offset: 0xa4 ordinal: 0x3a
} _LDR_DATA_TABLE_ENTRY;

typedef UCHAR (*__anon_3168)(union _LARGE_INTEGER);

// 0x20 bytes (sizeof)
typedef struct _OBJECT_SYMBOLIC_LINK {
  union _LARGE_INTEGER CreationTime; // offset: 0x0 ordinal: 0x0
  union {
    struct _UNICODE_STRING LinkTarget; // offset: 0x8 ordinal: 0x1
    LONG(*Callback)
    (struct _OBJECT_SYMBOLIC_LINK *, VOID *, struct _UNICODE_STRING *,
     VOID **); // offset: 0x8 ordinal: 0x2
  };
  VOID *CallbackContext;     // offset: 0xc ordinal: 0x3
  ULONG DosDeviceDriveIndex; // offset: 0x10 ordinal: 0x4
  ULONG Flags;               // offset: 0x14 ordinal: 0x5
  ULONG AccessMask;          // offset: 0x18 ordinal: 0x6
} _OBJECT_SYMBOLIC_LINK;

typedef LONG (*__anon_3039)(struct _OBJECT_SYMBOLIC_LINK *, VOID *,
                            struct _UNICODE_STRING *, VOID **);

// 0x28 bytes (sizeof)
typedef struct _MI_BAD_MEMORY_EVENT_ENTRY {
  ULONG BugCheckCode;                   // offset: 0x0 ordinal: 0x0
  LONG Active;                          // offset: 0x4 ordinal: 0x1
  ULONG Data;                           // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER PhysicalAddress; // offset: 0x10 ordinal: 0x3
  struct _WORK_QUEUE_ITEM WorkItem;     // offset: 0x18 ordinal: 0x4
} _MI_BAD_MEMORY_EVENT_ENTRY;

// 0xb0 bytes (sizeof)
typedef struct _MI_ERROR_STATE {
  struct _MI_BAD_MEMORY_EVENT_ENTRY
      BadMemoryEventEntry;                       // offset: 0x0 ordinal: 0x0
  ULONG PageOfInterest;                          // offset: 0x28 ordinal: 0x1
  struct _MI_PROBE_RAISE_TRACKER ProbeRaises;    // offset: 0x2c ordinal: 0x2
  struct _MI_FORCED_COMMITS ForcedCommits;       // offset: 0x70 ordinal: 0x3
  ULONG WsleFailures[1];                         // offset: 0x78 ordinal: 0x4
  ULONG PageHashErrors;                          // offset: 0x7c ordinal: 0x5
  ULONG CheckZeroCount;                          // offset: 0x80 ordinal: 0x6
  LONG ZeroedPageSingleBitErrorsDetected;        // offset: 0x84 ordinal: 0x7
  LONG BadPagesDetected;                         // offset: 0x88 ordinal: 0x8
  LONG ScrubPasses;                              // offset: 0x8c ordinal: 0x9
  LONG ScrubBadPagesFound;                       // offset: 0x90 ordinal: 0xa
  ULONG UserViewFailures;                        // offset: 0x94 ordinal: 0xb
  ULONG UserViewCollisionFailures;               // offset: 0x98 ordinal: 0xc
  ULONG UserAllocateFailures;                    // offset: 0x9c ordinal: 0xd
  ULONG UserAllocateCollisionFailures;           // offset: 0xa0 ordinal: 0xe
  struct _MI_RESAVAIL_FAILURES ResavailFailures; // offset: 0xa4 ordinal: 0xf
  UCHAR PendingBadPages;                         // offset: 0xac ordinal: 0x10
  UCHAR InitFailure;                             // offset: 0xad ordinal: 0x11
  UCHAR StopBadMaps;                             // offset: 0xae ordinal: 0x12
} _MI_ERROR_STATE;

// 0x20 bytes (sizeof)
typedef struct _DOMAIN_CONFIGURATION_ARM64 {
  union _LARGE_INTEGER Ttbr0; // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER Ttbr1; // offset: 0x8 ordinal: 0x1
  ULONG Mair0;                // offset: 0x10 ordinal: 0x2
  ULONG Mair1;                // offset: 0x14 ordinal: 0x3
  UCHAR InputSize0;           // offset: 0x18 ordinal: 0x4
  UCHAR InputSize1;           // offset: 0x19 ordinal: 0x5
  UCHAR CoherentTableWalks;   // offset: 0x1a ordinal: 0x6
  UCHAR TranslationEnabled;   // offset: 0x1b ordinal: 0x7
} _DOMAIN_CONFIGURATION_ARM64;

// 0x28 bytes (sizeof)
typedef struct _DOMAIN_CONFIGURATION {
  enum _DOMAIN_CONFIGURATION_ARCH Type;     // offset: 0x0 ordinal: 0x0
  struct _DOMAIN_CONFIGURATION_ARM64 Arm64; // offset: 0x8 ordinal: 0x1
} _DOMAIN_CONFIGURATION;

typedef LONG (*__anon_2731)(struct _IOMMU_DMA_DOMAIN *,
                            struct _DOMAIN_CONFIGURATION *);

// 0x50 bytes (sizeof)
typedef struct _LOADER_PARAMETER_CI_EXTENSION {
  ULONG CodeIntegrityOptions;                  // offset: 0x0 ordinal: 0x0
  ULONG UpgradeInProgress : 1;                 // offset: 0x4 ordinal: 0x1
  ULONG IsWinPE : 1;                           // offset: 0x4 ordinal: 0x2
  ULONG CustomKernelSignersAllowed : 1;        // offset: 0x4 ordinal: 0x3
  ULONG Reserved : 29;                         // offset: 0x4 ordinal: 0x4
  union _LARGE_INTEGER WhqlEnforcementDate;    // offset: 0x8 ordinal: 0x5
  ULONG RevocationListOffset;                  // offset: 0x10 ordinal: 0x6
  ULONG RevocationListSize;                    // offset: 0x14 ordinal: 0x7
  ULONG CodeIntegrityPolicyOffset;             // offset: 0x18 ordinal: 0x8
  ULONG CodeIntegrityPolicySize;               // offset: 0x1c ordinal: 0x9
  ULONG CodeIntegrityPolicyHashOffset;         // offset: 0x20 ordinal: 0xa
  ULONG CodeIntegrityPolicyHashSize;           // offset: 0x24 ordinal: 0xb
  ULONG CodeIntegrityPolicyOriginalHashOffset; // offset: 0x28 ordinal: 0xc
  ULONG CodeIntegrityPolicyOriginalHashSize;   // offset: 0x2c ordinal: 0xd
  LONG WeakCryptoPolicyLoadStatus;             // offset: 0x30 ordinal: 0xe
  ULONG WeakCryptoPolicyOffset;                // offset: 0x34 ordinal: 0xf
  ULONG WeakCryptoPolicySize;                  // offset: 0x38 ordinal: 0x10
  ULONG SecureBootPolicyOffset;                // offset: 0x3c ordinal: 0x11
  ULONG SecureBootPolicySize;                  // offset: 0x40 ordinal: 0x12
  ULONG Reserved2;                             // offset: 0x44 ordinal: 0x13
  UCHAR SerializedData[1];                     // offset: 0x48 ordinal: 0x14
} _LOADER_PARAMETER_CI_EXTENSION;

// 0x20 bytes (sizeof)
typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 {
  ULONG Version;                         // offset: 0x0 ordinal: 0x0
  ULONG AbnormalResetOccurred;           // offset: 0x4 ordinal: 0x1
  ULONG OfflineMemoryDumpCapable;        // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER ResetDataAddress; // offset: 0x10 ordinal: 0x3
  ULONG ResetDataSize;                   // offset: 0x18 ordinal: 0x4
} _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;

typedef LONG (*__anon_2700)(ULONG, ULONG, union _LARGE_INTEGER, ULONG, ULONG);

// 0x20 bytes (sizeof)
typedef struct DEBUG_MEMORY_REQUIREMENTS {
  union _LARGE_INTEGER Start;  // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER MaxEnd; // offset: 0x8 ordinal: 0x1
  VOID *VirtualAddress;        // offset: 0x10 ordinal: 0x2
  ULONG Length;                // offset: 0x14 ordinal: 0x3
  UCHAR Cached;                // offset: 0x18 ordinal: 0x4
  UCHAR Aligned;               // offset: 0x19 ordinal: 0x5
} DEBUG_MEMORY_REQUIREMENTS;

// 0xa8 bytes (sizeof)
typedef struct _DEBUG_DEVICE_DESCRIPTOR {
  ULONG Bus;       // offset: 0x0 ordinal: 0x0
  ULONG Slot;      // offset: 0x4 ordinal: 0x1
  USHORT Segment;  // offset: 0x8 ordinal: 0x2
  USHORT VendorID; // offset: 0xa ordinal: 0x3
  USHORT DeviceID; // offset: 0xc ordinal: 0x4
  UCHAR BaseClass; // offset: 0xe ordinal: 0x5
  UCHAR SubClass;  // offset: 0xf ordinal: 0x6
  UCHAR ProgIf;    // offset: 0x10 ordinal: 0x7
  union {
    UCHAR Flags;                      // offset: 0x11 ordinal: 0x8
    UCHAR DbgHalScratchAllocated : 1; // offset: 0x11 ordinal: 0x9
  };
  UCHAR DbgBarsMapped : 1;                    // offset: 0x11 ordinal: 0xa
  UCHAR DbgScratchAllocated : 1;              // offset: 0x11 ordinal: 0xb
  UCHAR Initialized;                          // offset: 0x12 ordinal: 0xc
  UCHAR Configured;                           // offset: 0x13 ordinal: 0xd
  struct DEBUG_DEVICE_ADDRESS BaseAddress[6]; // offset: 0x14 ordinal: 0xe
  struct DEBUG_MEMORY_REQUIREMENTS Memory;    // offset: 0x60 ordinal: 0xf
  ULONG Dbg2TableIndex;                       // offset: 0x80 ordinal: 0x10
  USHORT PortType;                            // offset: 0x84 ordinal: 0x11
  USHORT PortSubtype;                         // offset: 0x86 ordinal: 0x12
  VOID *OemData;                              // offset: 0x88 ordinal: 0x13
  ULONG OemDataLength;                        // offset: 0x8c ordinal: 0x14
  enum KD_NAMESPACE_ENUM NameSpace;           // offset: 0x90 ordinal: 0x15
  WCHAR *NameSpacePath;                       // offset: 0x94 ordinal: 0x16
  ULONG NameSpacePathLength;                  // offset: 0x98 ordinal: 0x17
  ULONG TransportType;                        // offset: 0x9c ordinal: 0x18
  struct _DEBUG_TRANSPORT_DATA TransportData; // offset: 0xa0 ordinal: 0x19
} _DEBUG_DEVICE_DESCRIPTOR;

typedef enum KD_CALLBACK_ACTION (*__anon_2571)(
    struct _DEBUG_DEVICE_DESCRIPTOR *);

typedef LONG (*__anon_2497)(
    VOID *, struct _DEBUG_DEVICE_DESCRIPTOR *,
    enum KD_CALLBACK_ACTION (*)(struct _DEBUG_DEVICE_DESCRIPTOR *));

typedef LONG (*__anon_2453)(struct _DEBUG_DEVICE_DESCRIPTOR *);

typedef LONG (*__anon_2452)(VOID *, struct _DEBUG_DEVICE_DESCRIPTOR *);

typedef LONG (*__anon_2500)(VOID *, ULONG, union _LARGE_INTEGER);

typedef VOID (*__anon_2496)(union _LARGE_INTEGER);

typedef LONG (*__anon_2471)(union _LARGE_INTEGER, ULONG, VOID *);

typedef VOID *(*__anon_2456)(union _LARGE_INTEGER, ULONG, UCHAR);

// 0x34 bytes (sizeof)
typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {
  USHORT Type;                                 // offset: 0x0 ordinal: 0x0
  UCHAR Reserved;                              // offset: 0x2 ordinal: 0x1
  UCHAR Enabled;                               // offset: 0x3 ordinal: 0x2
  ULONG ErrStatusBlockLength;                  // offset: 0x4 ordinal: 0x3
  ULONG RelatedErrorSourceId;                  // offset: 0x8 ordinal: 0x4
  UCHAR ErrStatusAddressSpaceID;               // offset: 0xc ordinal: 0x5
  UCHAR ErrStatusAddressBitWidth;              // offset: 0xd ordinal: 0x6
  UCHAR ErrStatusAddressBitOffset;             // offset: 0xe ordinal: 0x7
  UCHAR ErrStatusAddressAccessSize;            // offset: 0xf ordinal: 0x8
  union _LARGE_INTEGER ErrStatusAddress;       // offset: 0x10 ordinal: 0x9
  struct _WHEA_NOTIFICATION_DESCRIPTOR Notify; // offset: 0x18 ordinal: 0xa
} _WHEA_GENERIC_ERROR_DESCRIPTOR;

// 0x110 bytes (sizeof)
typedef struct _TRACE_LOGFILE_HEADER {
  ULONG BufferSize; // offset: 0x0 ordinal: 0x0
  union {
    ULONG Version;                    // offset: 0x4 ordinal: 0x1
    struct __anon_2190 VersionDetail; // offset: 0x4 ordinal: 0x2
  };
  ULONG ProviderVersion;        // offset: 0x8 ordinal: 0x3
  ULONG NumberOfProcessors;     // offset: 0xc ordinal: 0x4
  union _LARGE_INTEGER EndTime; // offset: 0x10 ordinal: 0x5
  ULONG TimerResolution;        // offset: 0x18 ordinal: 0x6
  ULONG MaximumFileSize;        // offset: 0x1c ordinal: 0x7
  ULONG LogFileMode;            // offset: 0x20 ordinal: 0x8
  ULONG BuffersWritten;         // offset: 0x24 ordinal: 0x9
  union {
    struct _GUID LogInstanceGuid; // offset: 0x28 ordinal: 0xa
    ULONG StartBuffers;           // offset: 0x28 ordinal: 0xb
  };
  ULONG PointerSize;                          // offset: 0x2c ordinal: 0xc
  ULONG EventsLost;                           // offset: 0x30 ordinal: 0xd
  ULONG CpuSpeedInMHz;                        // offset: 0x34 ordinal: 0xe
  WCHAR *LoggerName;                          // offset: 0x38 ordinal: 0xf
  WCHAR *LogFileName;                         // offset: 0x3c ordinal: 0x10
  struct _RTL_TIME_ZONE_INFORMATION TimeZone; // offset: 0x40 ordinal: 0x11
  union _LARGE_INTEGER BootTime;              // offset: 0xf0 ordinal: 0x12
  union _LARGE_INTEGER PerfFreq;              // offset: 0xf8 ordinal: 0x13
  union _LARGE_INTEGER StartTime;             // offset: 0x100 ordinal: 0x14
  ULONG ReservedFlags;                        // offset: 0x108 ordinal: 0x15
  ULONG BuffersLost;                          // offset: 0x10c ordinal: 0x16
} _TRACE_LOGFILE_HEADER;

// 0x48 bytes (sizeof)
typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR {
  ULONG Version;                           // offset: 0x0 ordinal: 0x0
  ULONG Size;                              // offset: 0x4 ordinal: 0x1
  ULONG CryptoIndex;                       // offset: 0x8 ordinal: 0x2
  ULONG AlgorithmId;                       // offset: 0xc ordinal: 0x3
  ULONG DataUnitSize;                      // offset: 0x10 ordinal: 0x4
  ULONG KeySize;                           // offset: 0x14 ordinal: 0x5
  UCHAR KeyHash[32];                       // offset: 0x18 ordinal: 0x6
  VOID *KeyVirtualAddress;                 // offset: 0x38 ordinal: 0x7
  union _LARGE_INTEGER KeyPhysicalAddress; // offset: 0x40 ordinal: 0x8
} _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;

// 0x8 bytes (sizeof)
typedef union __anon_1937 {
  union _LARGE_INTEGER FileOffset; // offset: 0x0 ordinal: 0x0
  USHORT ActiveCount;              // offset: 0x0 ordinal: 0x1
  struct _LIST_ENTRY Links;        // offset: 0x0 ordinal: 0x2
} __anon_1937;

// 0x18 bytes (sizeof)
typedef struct _VACB {
  VOID *BaseAddress;                        // offset: 0x0 ordinal: 0x0
  struct _SHARED_CACHE_MAP *SharedCacheMap; // offset: 0x4 ordinal: 0x1
  union __anon_1937 Overlay;                // offset: 0x8 ordinal: 0x2
  struct _VACB_ARRAY_HEADER *ArrayHead;     // offset: 0x10 ordinal: 0x3
} _VACB;

typedef VOID (*__anon_1909)(VOID *, union _LARGE_INTEGER);

// 0x8 bytes (sizeof)
typedef struct _LOGGED_STREAM_CALLBACK_V1 {
  VOID *LogHandle; // offset: 0x0 ordinal: 0x0
  VOID(*FlushToLsnRoutine)
  (VOID *, union _LARGE_INTEGER); // offset: 0x4 ordinal: 0x1
} _LOGGED_STREAM_CALLBACK_V1;

// 0x20 bytes (sizeof)
typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE {
  enum _PEP_ACPI_RESOURCE_TYPE Type;   // offset: 0x0 ordinal: 0x0
  UCHAR Information;                   // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER MinimumAddress; // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER MaximumAddress; // offset: 0x10 ordinal: 0x3
  ULONG Alignment;                     // offset: 0x18 ordinal: 0x4
  ULONG Length;                        // offset: 0x1c ordinal: 0x5
} _PEP_ACPI_IO_MEMORY_RESOURCE;

// 0x20 bytes (sizeof)
typedef struct _HBIN {
  ULONG Signature;                // offset: 0x0 ordinal: 0x0
  ULONG FileOffset;               // offset: 0x4 ordinal: 0x1
  ULONG Size;                     // offset: 0x8 ordinal: 0x2
  ULONG Reserved1[2];             // offset: 0xc ordinal: 0x3
  union _LARGE_INTEGER TimeStamp; // offset: 0x14 ordinal: 0x4
  ULONG Spare;                    // offset: 0x1c ordinal: 0x5
} _HBIN;

// 0x8 bytes (sizeof)
typedef struct __anon_1732 {
  struct _HBIN *Bin;        // offset: 0x0 ordinal: 0x0
  struct _HCELL *CellPoint; // offset: 0x4 ordinal: 0x1
} __anon_1732;

// 0xc bytes (sizeof)
typedef struct __anon_1729 {
  ULONG Space;            // offset: 0x0 ordinal: 0x0
  ULONG MapPoint;         // offset: 0x4 ordinal: 0x1
  struct _HBIN *BinPoint; // offset: 0x8 ordinal: 0x2
} __anon_1729;

// 0x48 bytes (sizeof)
typedef struct _FSRTL_ADVANCED_FCB_HEADER {
  SHORT NodeTypeCode;                   // offset: 0x0 ordinal: 0x0
  SHORT NodeByteSize;                   // offset: 0x2 ordinal: 0x1
  UCHAR Flags;                          // offset: 0x4 ordinal: 0x2
  UCHAR IsFastIoPossible;               // offset: 0x5 ordinal: 0x3
  UCHAR Flags2;                         // offset: 0x6 ordinal: 0x4
  UCHAR Reserved : 4;                   // offset: 0x7 ordinal: 0x5
  UCHAR Version : 4;                    // offset: 0x7 ordinal: 0x6
  struct _ERESOURCE *Resource;          // offset: 0x8 ordinal: 0x7
  struct _ERESOURCE *PagingIoResource;  // offset: 0xc ordinal: 0x8
  union _LARGE_INTEGER AllocationSize;  // offset: 0x10 ordinal: 0x9
  union _LARGE_INTEGER FileSize;        // offset: 0x18 ordinal: 0xa
  union _LARGE_INTEGER ValidDataLength; // offset: 0x20 ordinal: 0xb
  struct _FAST_MUTEX *FastMutex;        // offset: 0x28 ordinal: 0xc
  struct _LIST_ENTRY FilterContexts;    // offset: 0x2c ordinal: 0xd
  struct _EX_PUSH_LOCK PushLock;        // offset: 0x34 ordinal: 0xe
  VOID **FileContextSupportPointer;     // offset: 0x38 ordinal: 0xf
  union {
    VOID *Oplock;            // offset: 0x3c ordinal: 0x10
    VOID *ReservedForRemote; // offset: 0x3c ordinal: 0x11
  };
  VOID *ReservedContext; // offset: 0x40 ordinal: 0x12
} _FSRTL_ADVANCED_FCB_HEADER;

// 0x10 bytes (sizeof)
typedef struct _ETW_REF_CLOCK {
  union _LARGE_INTEGER StartTime;      // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER StartPerfClock; // offset: 0x8 ordinal: 0x1
} _ETW_REF_CLOCK;

// 0x10 bytes (sizeof)
typedef struct _ETW_LAST_ENABLE_INFO {
  union _LARGE_INTEGER EnableFlags; // offset: 0x0 ordinal: 0x0
  USHORT LoggerId;                  // offset: 0x8 ordinal: 0x1
  UCHAR Level;                      // offset: 0xa ordinal: 0x2
  UCHAR Enabled : 1;                // offset: 0xb ordinal: 0x3
  UCHAR InternalFlag : 7;           // offset: 0xb ordinal: 0x4
} _ETW_LAST_ENABLE_INFO;

// 0xc bytes (sizeof)
typedef struct __anon_1006 {
  union _LARGE_INTEGER Start; // offset: 0x0 ordinal: 0x0
  ULONG Length64;             // offset: 0x8 ordinal: 0x1
} __anon_1006;

// 0xc bytes (sizeof)
typedef struct __anon_1005 {
  union _LARGE_INTEGER Start; // offset: 0x0 ordinal: 0x0
  ULONG Length48;             // offset: 0x8 ordinal: 0x1
} __anon_1005;

// 0xc bytes (sizeof)
typedef struct __anon_1004 {
  union _LARGE_INTEGER Start; // offset: 0x0 ordinal: 0x0
  ULONG Length40;             // offset: 0x8 ordinal: 0x1
} __anon_1004;

// 0xc bytes (sizeof)
typedef struct __anon_997 {
  union _LARGE_INTEGER Start; // offset: 0x0 ordinal: 0x0
  ULONG Length;               // offset: 0x8 ordinal: 0x1
} __anon_997;

// 0xc bytes (sizeof)
typedef union __anon_968 {
  struct __anon_997 Generic;             // offset: 0x0 ordinal: 0x0
  struct __anon_997 Port;                // offset: 0x0 ordinal: 0x1
  struct __anon_998 Interrupt;           // offset: 0x0 ordinal: 0x2
  struct __anon_999 MessageInterrupt;    // offset: 0x0 ordinal: 0x3
  struct __anon_997 Memory;              // offset: 0x0 ordinal: 0x4
  struct __anon_1000 Dma;                // offset: 0x0 ordinal: 0x5
  struct __anon_1001 DmaV3;              // offset: 0x0 ordinal: 0x6
  struct __anon_928 DevicePrivate;       // offset: 0x0 ordinal: 0x7
  struct __anon_1002 BusNumber;          // offset: 0x0 ordinal: 0x8
  struct __anon_1003 DeviceSpecificData; // offset: 0x0 ordinal: 0x9
  struct __anon_1004 Memory40;           // offset: 0x0 ordinal: 0xa
  struct __anon_1005 Memory48;           // offset: 0x0 ordinal: 0xb
  struct __anon_1006 Memory64;           // offset: 0x0 ordinal: 0xc
  struct __anon_934 Connection;          // offset: 0x0 ordinal: 0xd
} __anon_968;

// 0x10 bytes (sizeof)
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
  UCHAR Type;             // offset: 0x0 ordinal: 0x0
  UCHAR ShareDisposition; // offset: 0x1 ordinal: 0x1
  USHORT Flags;           // offset: 0x2 ordinal: 0x2
  union __anon_968 u;     // offset: 0x4 ordinal: 0x3
} _CM_PARTIAL_RESOURCE_DESCRIPTOR;

// 0xc bytes (sizeof)
typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
  struct _LIST_ENTRY *ArbitrationList; // offset: 0x0 ordinal: 0x0
  ULONG AllocateFromCount;             // offset: 0x4 ordinal: 0x1
  struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
      *AllocateFrom; // offset: 0x8 ordinal: 0x2
} _ARBITER_RETEST_ALLOCATION_PARAMETERS;

// 0xc bytes (sizeof)
typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
  struct _LIST_ENTRY *ArbitrationList; // offset: 0x0 ordinal: 0x0
  ULONG AllocateFromCount;             // offset: 0x4 ordinal: 0x1
  struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
      *AllocateFrom; // offset: 0x8 ordinal: 0x2
} _ARBITER_TEST_ALLOCATION_PARAMETERS;

// 0x18 bytes (sizeof)
typedef struct _CM_PARTIAL_RESOURCE_LIST {
  USHORT Version;  // offset: 0x0 ordinal: 0x0
  USHORT Revision; // offset: 0x2 ordinal: 0x1
  ULONG Count;     // offset: 0x4 ordinal: 0x2
  struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
      PartialDescriptors[1]; // offset: 0x8 ordinal: 0x3
} _CM_PARTIAL_RESOURCE_LIST;

// 0x4 bytes (sizeof)
typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
  struct _CM_PARTIAL_RESOURCE_LIST *
      *AllocatedResources; // offset: 0x0 ordinal: 0x0
} _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;

// 0x20 bytes (sizeof)
typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
  enum _INTERFACE_TYPE InterfaceType; // offset: 0x0 ordinal: 0x0
  ULONG BusNumber;                    // offset: 0x4 ordinal: 0x1
  struct _CM_PARTIAL_RESOURCE_LIST
      PartialResourceList; // offset: 0x8 ordinal: 0x2
} _CM_FULL_RESOURCE_DESCRIPTOR;

// 0x24 bytes (sizeof)
typedef struct _CM_RESOURCE_LIST {
  ULONG Count;                                 // offset: 0x0 ordinal: 0x0
  struct _CM_FULL_RESOURCE_DESCRIPTOR List[1]; // offset: 0x4 ordinal: 0x1
} _CM_RESOURCE_LIST;

// 0x8 bytes (sizeof)
typedef struct __anon_832 {
  struct _CM_RESOURCE_LIST *AllocatedResources; // offset: 0x0 ordinal: 0x0
  struct _CM_RESOURCE_LIST
      *AllocatedResourcesTranslated; // offset: 0x4 ordinal: 0x1
} __anon_832;

// 0x30 bytes (sizeof)
typedef struct _SEP_RM_LSA_CONNECTION_STATE {
  VOID *LsaProcessHandle;                         // offset: 0x0 ordinal: 0x0
  VOID *LsaCommandPortHandle;                     // offset: 0x4 ordinal: 0x1
  VOID *SepRmThreadHandle;                        // offset: 0x8 ordinal: 0x2
  VOID *RmCommandPortHandle;                      // offset: 0xc ordinal: 0x3
  VOID *RmCommandServerPortHandle;                // offset: 0x10 ordinal: 0x4
  VOID *LsaCommandPortSectionHandle;              // offset: 0x14 ordinal: 0x5
  union _LARGE_INTEGER LsaCommandPortSectionSize; // offset: 0x18 ordinal: 0x6
  VOID *LsaViewPortMemory;                        // offset: 0x20 ordinal: 0x7
  VOID *RmViewPortMemory;                         // offset: 0x24 ordinal: 0x8
  LONG LsaCommandPortMemoryDelta;                 // offset: 0x28 ordinal: 0x9
  UCHAR LsaCommandPortActive;                     // offset: 0x2c ordinal: 0xa
} _SEP_RM_LSA_CONNECTION_STATE;

// 0x18 bytes (sizeof)
typedef struct _MAILSLOT_CREATE_PARAMETERS {
  ULONG MailslotQuota;              // offset: 0x0 ordinal: 0x0
  ULONG MaximumMessageSize;         // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER ReadTimeout; // offset: 0x8 ordinal: 0x2
  UCHAR TimeoutSpecified;           // offset: 0x10 ordinal: 0x3
} _MAILSLOT_CREATE_PARAMETERS;

// 0x10 bytes (sizeof)
typedef struct __anon_802 {
  struct _IO_SECURITY_CONTEXT *SecurityContext;   // offset: 0x0 ordinal: 0x0
  ULONG Options;                                  // offset: 0x4 ordinal: 0x1
  USHORT Reserved;                                // offset: 0x8 ordinal: 0x2
  USHORT ShareAccess;                             // offset: 0xa ordinal: 0x3
  struct _MAILSLOT_CREATE_PARAMETERS *Parameters; // offset: 0xc ordinal: 0x4
} __anon_802;

// 0x28 bytes (sizeof)
typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
  ULONG NamedPipeType;                 // offset: 0x0 ordinal: 0x0
  ULONG ReadMode;                      // offset: 0x4 ordinal: 0x1
  ULONG CompletionMode;                // offset: 0x8 ordinal: 0x2
  ULONG MaximumInstances;              // offset: 0xc ordinal: 0x3
  ULONG InboundQuota;                  // offset: 0x10 ordinal: 0x4
  ULONG OutboundQuota;                 // offset: 0x14 ordinal: 0x5
  union _LARGE_INTEGER DefaultTimeout; // offset: 0x18 ordinal: 0x6
  UCHAR TimeoutSpecified;              // offset: 0x20 ordinal: 0x7
} _NAMED_PIPE_CREATE_PARAMETERS;

// 0x10 bytes (sizeof)
typedef struct __anon_801 {
  struct _IO_SECURITY_CONTEXT *SecurityContext;     // offset: 0x0 ordinal: 0x0
  ULONG Options;                                    // offset: 0x4 ordinal: 0x1
  USHORT Reserved;                                  // offset: 0x8 ordinal: 0x2
  USHORT ShareAccess;                               // offset: 0xa ordinal: 0x3
  struct _NAMED_PIPE_CREATE_PARAMETERS *Parameters; // offset: 0xc ordinal: 0x4
} __anon_801;

// 0x18 bytes (sizeof)
typedef struct __anon_933 {
  ULONG Length64;                      // offset: 0x0 ordinal: 0x0
  ULONG Alignment64;                   // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER MinimumAddress; // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER MaximumAddress; // offset: 0x10 ordinal: 0x3
} __anon_933;

// 0x18 bytes (sizeof)
typedef struct __anon_932 {
  ULONG Length48;                      // offset: 0x0 ordinal: 0x0
  ULONG Alignment48;                   // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER MinimumAddress; // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER MaximumAddress; // offset: 0x10 ordinal: 0x3
} __anon_932;

// 0x18 bytes (sizeof)
typedef struct __anon_931 {
  ULONG Length40;                      // offset: 0x0 ordinal: 0x0
  ULONG Alignment40;                   // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER MinimumAddress; // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER MaximumAddress; // offset: 0x10 ordinal: 0x3
} __anon_931;

// 0x18 bytes (sizeof)
typedef struct __anon_924 {
  ULONG Length;                        // offset: 0x0 ordinal: 0x0
  ULONG Alignment;                     // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER MinimumAddress; // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER MaximumAddress; // offset: 0x10 ordinal: 0x3
} __anon_924;

// 0x18 bytes (sizeof)
typedef union __anon_846 {
  struct __anon_924 Port;          // offset: 0x0 ordinal: 0x0
  struct __anon_924 Memory;        // offset: 0x0 ordinal: 0x1
  struct __anon_925 Interrupt;     // offset: 0x0 ordinal: 0x2
  struct __anon_926 Dma;           // offset: 0x0 ordinal: 0x3
  struct __anon_927 DmaV3;         // offset: 0x0 ordinal: 0x4
  struct __anon_924 Generic;       // offset: 0x0 ordinal: 0x5
  struct __anon_928 DevicePrivate; // offset: 0x0 ordinal: 0x6
  struct __anon_929 BusNumber;     // offset: 0x0 ordinal: 0x7
  struct __anon_930 ConfigData;    // offset: 0x0 ordinal: 0x8
  struct __anon_931 Memory40;      // offset: 0x0 ordinal: 0x9
  struct __anon_932 Memory48;      // offset: 0x0 ordinal: 0xa
  struct __anon_933 Memory64;      // offset: 0x0 ordinal: 0xb
  struct __anon_934 Connection;    // offset: 0x0 ordinal: 0xc
} __anon_846;

// 0x20 bytes (sizeof)
typedef struct _IO_RESOURCE_DESCRIPTOR {
  UCHAR Option;           // offset: 0x0 ordinal: 0x0
  UCHAR Type;             // offset: 0x1 ordinal: 0x1
  UCHAR ShareDisposition; // offset: 0x2 ordinal: 0x2
  UCHAR Spare1;           // offset: 0x3 ordinal: 0x3
  USHORT Flags;           // offset: 0x4 ordinal: 0x4
  USHORT Spare2;          // offset: 0x6 ordinal: 0x5
  union __anon_846 u;     // offset: 0x8 ordinal: 0x6
} _IO_RESOURCE_DESCRIPTOR;

// 0x28 bytes (sizeof)
typedef struct _IO_RESOURCE_LIST {
  USHORT Version;                                // offset: 0x0 ordinal: 0x0
  USHORT Revision;                               // offset: 0x2 ordinal: 0x1
  ULONG Count;                                   // offset: 0x4 ordinal: 0x2
  struct _IO_RESOURCE_DESCRIPTOR Descriptors[1]; // offset: 0x8 ordinal: 0x3
} _IO_RESOURCE_LIST;

// 0x48 bytes (sizeof)
typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
  ULONG ListSize;                     // offset: 0x0 ordinal: 0x0
  enum _INTERFACE_TYPE InterfaceType; // offset: 0x4 ordinal: 0x1
  ULONG BusNumber;                    // offset: 0x8 ordinal: 0x2
  ULONG SlotNumber;                   // offset: 0xc ordinal: 0x3
  ULONG Reserved[3];                  // offset: 0x10 ordinal: 0x4
  ULONG AlternativeLists;             // offset: 0x1c ordinal: 0x5
  struct _IO_RESOURCE_LIST List[1];   // offset: 0x20 ordinal: 0x6
} _IO_RESOURCE_REQUIREMENTS_LIST;

typedef LONG (*__anon_2667)(struct _BUS_HANDLER *, struct _BUS_HANDLER *,
                            struct _IO_RESOURCE_REQUIREMENTS_LIST **);

// 0x28 bytes (sizeof)
typedef struct _PNP_RESOURCE_REQUEST {
  struct _DEVICE_OBJECT *PhysicalDevice;       // offset: 0x0 ordinal: 0x0
  ULONG Flags;                                 // offset: 0x4 ordinal: 0x1
  enum _ARBITER_REQUEST_SOURCE AllocationType; // offset: 0x8 ordinal: 0x2
  ULONG Priority;                              // offset: 0xc ordinal: 0x3
  ULONG Position;                              // offset: 0x10 ordinal: 0x4
  struct _IO_RESOURCE_REQUIREMENTS_LIST
      *ResourceRequirements;                    // offset: 0x14 ordinal: 0x5
  VOID *ReqList;                                // offset: 0x18 ordinal: 0x6
  struct _CM_RESOURCE_LIST *ResourceAssignment; // offset: 0x1c ordinal: 0x7
  struct _CM_RESOURCE_LIST
      *TranslatedResourceAssignment; // offset: 0x20 ordinal: 0x8
  LONG Status;                       // offset: 0x24 ordinal: 0x9
} _PNP_RESOURCE_REQUEST;

// 0x4 bytes (sizeof)
typedef struct __anon_823 {
  struct _IO_RESOURCE_REQUIREMENTS_LIST
      *IoResourceRequirementList; // offset: 0x0 ordinal: 0x0
} __anon_823;

// 0x38 bytes (sizeof)
typedef struct _ARBITER_LIST_ENTRY {
  struct _LIST_ENTRY ListEntry;                 // offset: 0x0 ordinal: 0x0
  ULONG AlternativeCount;                       // offset: 0x8 ordinal: 0x1
  struct _IO_RESOURCE_DESCRIPTOR *Alternatives; // offset: 0xc ordinal: 0x2
  struct _DEVICE_OBJECT *PhysicalDeviceObject;  // offset: 0x10 ordinal: 0x3
  enum _ARBITER_REQUEST_SOURCE RequestSource;   // offset: 0x14 ordinal: 0x4
  ULONG Flags;                                  // offset: 0x18 ordinal: 0x5
  LONG WorkSpace;                               // offset: 0x1c ordinal: 0x6
  enum _INTERFACE_TYPE InterfaceType;           // offset: 0x20 ordinal: 0x7
  ULONG SlotNumber;                             // offset: 0x24 ordinal: 0x8
  ULONG BusNumber;                              // offset: 0x28 ordinal: 0x9
  struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
      *Assignment; // offset: 0x2c ordinal: 0xa
  struct _IO_RESOURCE_DESCRIPTOR
      *SelectedAlternative;    // offset: 0x30 ordinal: 0xb
  enum _ARBITER_RESULT Result; // offset: 0x34 ordinal: 0xc
} _ARBITER_LIST_ENTRY;

typedef LONG (*__anon_2942)(struct _IO_RESOURCE_DESCRIPTOR *);

// 0x10 bytes (sizeof)
typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT {
  UCHAR ResourceType;                               // offset: 0x0 ordinal: 0x0
  ULONG AlternativeCount;                           // offset: 0x4 ordinal: 0x1
  struct _IO_RESOURCE_DESCRIPTOR *ResourceRequests; // offset: 0x8 ordinal: 0x2
  VOID *ArbiterInstance;                            // offset: 0xc ordinal: 0x3
} _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT;

// 0x38 bytes (sizeof)
typedef struct _FILE_NETWORK_OPEN_INFORMATION {
  union _LARGE_INTEGER CreationTime;   // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER LastAccessTime; // offset: 0x8 ordinal: 0x1
  union _LARGE_INTEGER LastWriteTime;  // offset: 0x10 ordinal: 0x2
  union _LARGE_INTEGER ChangeTime;     // offset: 0x18 ordinal: 0x3
  union _LARGE_INTEGER AllocationSize; // offset: 0x20 ordinal: 0x4
  union _LARGE_INTEGER EndOfFile;      // offset: 0x28 ordinal: 0x5
  ULONG FileAttributes;                // offset: 0x30 ordinal: 0x6
} _FILE_NETWORK_OPEN_INFORMATION;

typedef UCHAR (*__anon_712)(struct _FILE_OBJECT *, UCHAR,
                            struct _FILE_NETWORK_OPEN_INFORMATION *,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

// 0x18 bytes (sizeof)
typedef struct _FILE_STANDARD_INFORMATION {
  union _LARGE_INTEGER AllocationSize; // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER EndOfFile;      // offset: 0x8 ordinal: 0x1
  ULONG NumberOfLinks;                 // offset: 0x10 ordinal: 0x2
  UCHAR DeletePending;                 // offset: 0x14 ordinal: 0x3
  UCHAR Directory;                     // offset: 0x15 ordinal: 0x4
} _FILE_STANDARD_INFORMATION;

typedef UCHAR (*__anon_704)(struct _FILE_OBJECT *, UCHAR,
                            struct _FILE_STANDARD_INFORMATION *,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

// 0x28 bytes (sizeof)
typedef struct _FILE_BASIC_INFORMATION {
  union _LARGE_INTEGER CreationTime;   // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER LastAccessTime; // offset: 0x8 ordinal: 0x1
  union _LARGE_INTEGER LastWriteTime;  // offset: 0x10 ordinal: 0x2
  union _LARGE_INTEGER ChangeTime;     // offset: 0x18 ordinal: 0x3
  ULONG FileAttributes;                // offset: 0x20 ordinal: 0x4
} _FILE_BASIC_INFORMATION;

// 0x88 bytes (sizeof)
typedef struct _OPEN_PACKET {
  SHORT Type;                      // offset: 0x0 ordinal: 0x0
  SHORT Size;                      // offset: 0x2 ordinal: 0x1
  struct _FILE_OBJECT *FileObject; // offset: 0x4 ordinal: 0x2
  LONG FinalStatus;                // offset: 0x8 ordinal: 0x3
  ULONG Information;               // offset: 0xc ordinal: 0x4
  ULONG ParseCheck;                // offset: 0x10 ordinal: 0x5
  union {
    struct _FILE_OBJECT *RelatedFileObject;        // offset: 0x14 ordinal: 0x6
    struct _DEVICE_OBJECT *ReferencedDeviceObject; // offset: 0x14 ordinal: 0x7
  };
  struct _OBJECT_ATTRIBUTES *OriginalAttributes; // offset: 0x18 ordinal: 0x8
  union _LARGE_INTEGER AllocationSize;           // offset: 0x20 ordinal: 0x9
  ULONG CreateOptions;                           // offset: 0x28 ordinal: 0xa
  USHORT FileAttributes;                         // offset: 0x2c ordinal: 0xb
  USHORT ShareAccess;                            // offset: 0x2e ordinal: 0xc
  VOID *EaBuffer;                                // offset: 0x30 ordinal: 0xd
  ULONG EaLength;                                // offset: 0x34 ordinal: 0xe
  ULONG Options;                                 // offset: 0x38 ordinal: 0xf
  ULONG Disposition;                             // offset: 0x3c ordinal: 0x10
  struct _FILE_BASIC_INFORMATION
      *BasicInformation; // offset: 0x40 ordinal: 0x11
  struct _FILE_NETWORK_OPEN_INFORMATION
      *NetworkInformation;                    // offset: 0x44 ordinal: 0x12
  VOID *FileInformation;                      // offset: 0x48 ordinal: 0x13
  enum _CREATE_FILE_TYPE CreateFileType;      // offset: 0x4c ordinal: 0x14
  VOID *MailslotOrPipeParameters;             // offset: 0x50 ordinal: 0x15
  UCHAR Override;                             // offset: 0x54 ordinal: 0x16
  UCHAR QueryOnly;                            // offset: 0x55 ordinal: 0x17
  UCHAR DeleteOnly;                           // offset: 0x56 ordinal: 0x18
  UCHAR FullAttributes;                       // offset: 0x57 ordinal: 0x19
  struct _DUMMY_FILE_OBJECT *LocalFileObject; // offset: 0x58 ordinal: 0x1a
  ULONG InternalFlags;                        // offset: 0x5c ordinal: 0x1b
  CHAR AccessMode;                            // offset: 0x60 ordinal: 0x1c
  struct _IO_DRIVER_CREATE_CONTEXT
      DriverCreateContext; // offset: 0x64 ordinal: 0x1d
  enum _FILE_INFORMATION_CLASS
      FileInformationClass;    // offset: 0x78 ordinal: 0x1e
  ULONG FileInformationLength; // offset: 0x7c ordinal: 0x1f
  UCHAR FilterQuery;           // offset: 0x80 ordinal: 0x20
} _OPEN_PACKET;

typedef UCHAR (*__anon_703)(struct _FILE_OBJECT *, UCHAR,
                            struct _FILE_BASIC_INFORMATION *,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

// 0x10 bytes (sizeof)
typedef struct __anon_803 {
  ULONG Length;                    // offset: 0x0 ordinal: 0x0
  ULONG Key;                       // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER ByteOffset; // offset: 0x8 ordinal: 0x2
} __anon_803;

typedef LONG (*__anon_3173)(LONG, union _LARGE_INTEGER *, struct _MDL *);

typedef LONG (*__anon_3170)(LONG, union _LARGE_INTEGER *, struct _MDL *,
                            VOID *);

typedef LONG (*__anon_3169)(union _LARGE_INTEGER *, struct _MDL *);

// 0xc0 bytes (sizeof)
typedef struct _DUMP_INITIALIZATION_CONTEXT {
  ULONG Length;                               // offset: 0x0 ordinal: 0x0
  ULONG Reserved;                             // offset: 0x4 ordinal: 0x1
  VOID *MemoryBlock;                          // offset: 0x8 ordinal: 0x2
  VOID *CommonBuffer[2];                      // offset: 0xc ordinal: 0x3
  union _LARGE_INTEGER PhysicalAddress[2];    // offset: 0x18 ordinal: 0x4
  VOID (*StallRoutine)(ULONG);                // offset: 0x28 ordinal: 0x5
  UCHAR (*OpenRoutine)(union _LARGE_INTEGER); // offset: 0x2c ordinal: 0x6
  LONG(*WriteRoutine)
  (union _LARGE_INTEGER *, struct _MDL *); // offset: 0x30 ordinal: 0x7
  VOID (*FinishRoutine)();                 // offset: 0x34 ordinal: 0x8
  struct _ADAPTER_OBJECT *AdapterObject;   // offset: 0x38 ordinal: 0x9
  VOID *MappedRegisterBase;                // offset: 0x3c ordinal: 0xa
  VOID *PortConfiguration;                 // offset: 0x40 ordinal: 0xb
  UCHAR CrashDump;                         // offset: 0x44 ordinal: 0xc
  UCHAR MarkMemoryOnly;                    // offset: 0x45 ordinal: 0xd
  UCHAR HiberResume;                       // offset: 0x46 ordinal: 0xe
  UCHAR Reserved1;                         // offset: 0x47 ordinal: 0xf
  ULONG MaximumTransferSize;               // offset: 0x48 ordinal: 0x10
  ULONG CommonBufferSize;                  // offset: 0x4c ordinal: 0x11
  VOID *TargetAddress;                     // offset: 0x50 ordinal: 0x12
  LONG(*WritePendingRoutine)
  (LONG, union _LARGE_INTEGER *, struct _MDL *,
   VOID *);                   // offset: 0x54 ordinal: 0x13
  ULONG PartitionStyle;       // offset: 0x58 ordinal: 0x14
  union __anon_3163 DiskInfo; // offset: 0x5c ordinal: 0x15
  LONG(*ReadRoutine)
  (LONG, union _LARGE_INTEGER *, struct _MDL *); // offset: 0x6c ordinal: 0x16
  LONG(*GetDriveTelemetryRoutine)
  (ULONG, ULONG, VOID *, ULONG); // offset: 0x70 ordinal: 0x17
  ULONG LogSectionTruncateSize;  // offset: 0x74 ordinal: 0x18
  ULONG Parameters[16];          // offset: 0x78 ordinal: 0x19
  VOID(*GetTransferSizesRoutine)
  (ULONG *, ULONG *); // offset: 0xb8 ordinal: 0x1a
  VOID(*DumpNotifyRoutine)
  (enum _DUMP_EVENTS, VOID *, ULONG); // offset: 0xbc ordinal: 0x1b
} _DUMP_INITIALIZATION_CONTEXT;

// 0x100 bytes (sizeof)
typedef struct _DUMP_STACK_CONTEXT {
  struct _DUMP_INITIALIZATION_CONTEXT Init; // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER PartitionOffset;     // offset: 0xc0 ordinal: 0x1
  union {
    VOID *DumpPointers; // offset: 0xc8 ordinal: 0x2
    VOID *StorageInfo;  // offset: 0xc8 ordinal: 0x3
  };
  UCHAR UseStorageInfo;                           // offset: 0xcc ordinal: 0x4
  ULONG PointersLength;                           // offset: 0xd0 ordinal: 0x5
  WCHAR *ModulePrefix;                            // offset: 0xd4 ordinal: 0x6
  struct _LIST_ENTRY DriverList;                  // offset: 0xd8 ordinal: 0x7
  struct _STRING InitMsg;                         // offset: 0xe0 ordinal: 0x8
  struct _STRING ProgMsg;                         // offset: 0xe8 ordinal: 0x9
  struct _STRING DoneMsg;                         // offset: 0xf0 ordinal: 0xa
  VOID *FileObject;                               // offset: 0xf8 ordinal: 0xb
  enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType; // offset: 0xfc ordinal: 0xc
} _DUMP_STACK_CONTEXT;

typedef UCHAR (*__anon_2669)(struct _BUS_HANDLER *, struct _BUS_HANDLER *,
                             union _LARGE_INTEGER, ULONG *,
                             union _LARGE_INTEGER *);

typedef LONG (*__anon_2494)(union _LARGE_INTEGER *);

typedef UCHAR (*__anon_2449)(union _LARGE_INTEGER, ULONG *,
                             union _LARGE_INTEGER *, ULONG *, UCHAR);

typedef UCHAR (*__anon_2447)(enum _INTERFACE_TYPE, ULONG, union _LARGE_INTEGER,
                             ULONG *, union _LARGE_INTEGER *);

typedef LONG (*__anon_1695)(struct _KENLISTMENT *, VOID *, VOID *, ULONG,
                            union _LARGE_INTEGER *, ULONG, VOID *);

// 0x8 bytes (sizeof)
typedef struct __anon_1042 {
  union _LARGE_INTEGER *EndingOffset;    // offset: 0x0 ordinal: 0x0
  struct _ERESOURCE **ResourceToRelease; // offset: 0x4 ordinal: 0x1
} __anon_1042;

// 0x10 bytes (sizeof)
typedef struct __anon_813 {
  union _LARGE_INTEGER *Length;    // offset: 0x0 ordinal: 0x0
  ULONG Key;                       // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER ByteOffset; // offset: 0x8 ordinal: 0x2
} __anon_813;

// 0x10 bytes (sizeof)
typedef union __anon_752 {
  struct __anon_800 Create;                     // offset: 0x0 ordinal: 0x0
  struct __anon_801 CreatePipe;                 // offset: 0x0 ordinal: 0x1
  struct __anon_802 CreateMailslot;             // offset: 0x0 ordinal: 0x2
  struct __anon_803 Read;                       // offset: 0x0 ordinal: 0x3
  struct __anon_803 Write;                      // offset: 0x0 ordinal: 0x4
  struct __anon_804 QueryDirectory;             // offset: 0x0 ordinal: 0x5
  struct __anon_805 NotifyDirectory;            // offset: 0x0 ordinal: 0x6
  struct __anon_806 NotifyDirectoryEx;          // offset: 0x0 ordinal: 0x7
  struct __anon_807 QueryFile;                  // offset: 0x0 ordinal: 0x8
  struct __anon_808 SetFile;                    // offset: 0x0 ordinal: 0x9
  struct __anon_809 QueryEa;                    // offset: 0x0 ordinal: 0xa
  struct __anon_810 SetEa;                      // offset: 0x0 ordinal: 0xb
  struct __anon_811 QueryVolume;                // offset: 0x0 ordinal: 0xc
  struct __anon_811 SetVolume;                  // offset: 0x0 ordinal: 0xd
  struct __anon_812 FileSystemControl;          // offset: 0x0 ordinal: 0xe
  struct __anon_813 LockControl;                // offset: 0x0 ordinal: 0xf
  struct __anon_814 DeviceIoControl;            // offset: 0x0 ordinal: 0x10
  struct __anon_815 QuerySecurity;              // offset: 0x0 ordinal: 0x11
  struct __anon_816 SetSecurity;                // offset: 0x0 ordinal: 0x12
  struct __anon_817 MountVolume;                // offset: 0x0 ordinal: 0x13
  struct __anon_817 VerifyVolume;               // offset: 0x0 ordinal: 0x14
  struct __anon_818 Scsi;                       // offset: 0x0 ordinal: 0x15
  struct __anon_819 QueryQuota;                 // offset: 0x0 ordinal: 0x16
  struct __anon_810 SetQuota;                   // offset: 0x0 ordinal: 0x17
  struct __anon_820 QueryDeviceRelations;       // offset: 0x0 ordinal: 0x18
  struct __anon_821 QueryInterface;             // offset: 0x0 ordinal: 0x19
  struct __anon_822 DeviceCapabilities;         // offset: 0x0 ordinal: 0x1a
  struct __anon_823 FilterResourceRequirements; // offset: 0x0 ordinal: 0x1b
  struct __anon_824 ReadWriteConfig;            // offset: 0x0 ordinal: 0x1c
  struct __anon_825 SetLock;                    // offset: 0x0 ordinal: 0x1d
  struct __anon_826 QueryId;                    // offset: 0x0 ordinal: 0x1e
  struct __anon_827 QueryDeviceText;            // offset: 0x0 ordinal: 0x1f
  struct __anon_828 UsageNotification;          // offset: 0x0 ordinal: 0x20
  struct __anon_829 WaitWake;                   // offset: 0x0 ordinal: 0x21
  struct __anon_830 PowerSequence;              // offset: 0x0 ordinal: 0x22
  struct __anon_831 Power;                      // offset: 0x0 ordinal: 0x23
  struct __anon_832 StartDevice;                // offset: 0x0 ordinal: 0x24
  struct __anon_833 WMI;                        // offset: 0x0 ordinal: 0x25
  struct __anon_834 Others;                     // offset: 0x0 ordinal: 0x26
} __anon_752;

typedef UCHAR (*__anon_717)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            ULONG, ULONG, VOID *, struct _MDL **,
                            struct _IO_STATUS_BLOCK *,
                            struct _COMPRESSED_DATA_INFO *, ULONG,
                            struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_716)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            struct _MDL *, struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_714)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            ULONG, ULONG, struct _MDL **,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

typedef LONG (*__anon_713)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                           struct _ERESOURCE **, struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_702)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            ULONG, UCHAR, ULONG, VOID *,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_701)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            ULONG, UCHAR, ULONG, UCHAR,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

// 0x80 bytes (sizeof)
typedef struct _FILE_OBJECT {
  SHORT Type;                          // offset: 0x0 ordinal: 0x0
  SHORT Size;                          // offset: 0x2 ordinal: 0x1
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x4 ordinal: 0x2
  struct _VPB *Vpb;                    // offset: 0x8 ordinal: 0x3
  VOID *FsContext;                     // offset: 0xc ordinal: 0x4
  VOID *FsContext2;                    // offset: 0x10 ordinal: 0x5
  struct _SECTION_OBJECT_POINTERS
      *SectionObjectPointer;              // offset: 0x14 ordinal: 0x6
  VOID *PrivateCacheMap;                  // offset: 0x18 ordinal: 0x7
  LONG FinalStatus;                       // offset: 0x1c ordinal: 0x8
  struct _FILE_OBJECT *RelatedFileObject; // offset: 0x20 ordinal: 0x9
  UCHAR LockOperation;                    // offset: 0x24 ordinal: 0xa
  UCHAR DeletePending;                    // offset: 0x25 ordinal: 0xb
  UCHAR ReadAccess;                       // offset: 0x26 ordinal: 0xc
  UCHAR WriteAccess;                      // offset: 0x27 ordinal: 0xd
  UCHAR DeleteAccess;                     // offset: 0x28 ordinal: 0xe
  UCHAR SharedRead;                       // offset: 0x29 ordinal: 0xf
  UCHAR SharedWrite;                      // offset: 0x2a ordinal: 0x10
  UCHAR SharedDelete;                     // offset: 0x2b ordinal: 0x11
  ULONG Flags;                            // offset: 0x2c ordinal: 0x12
  struct _UNICODE_STRING FileName;        // offset: 0x30 ordinal: 0x13
  union _LARGE_INTEGER CurrentByteOffset; // offset: 0x38 ordinal: 0x14
  ULONG Waiters;                          // offset: 0x40 ordinal: 0x15
  ULONG Busy;                             // offset: 0x44 ordinal: 0x16
  VOID *LastLock;                         // offset: 0x48 ordinal: 0x17
  struct _KEVENT Lock;                    // offset: 0x4c ordinal: 0x18
  struct _KEVENT Event;                   // offset: 0x5c ordinal: 0x19
  struct _IO_COMPLETION_CONTEXT
      *CompletionContext;     // offset: 0x6c ordinal: 0x1a
  ULONG IrpListLock;          // offset: 0x70 ordinal: 0x1b
  struct _LIST_ENTRY IrpList; // offset: 0x74 ordinal: 0x1c
  VOID *FileObjectExtension;  // offset: 0x7c ordinal: 0x1d
} _FILE_OBJECT;

// 0x10 bytes (sizeof)
typedef struct __anon_672 {
  union _LARGE_INTEGER Address; // offset: 0x0 ordinal: 0x0
  ULONG DataPayload;            // offset: 0x8 ordinal: 0x1
} __anon_672;

// 0x8 bytes (sizeof)
typedef union __anon_508 {
  struct __anon_567 AsynchronousParameters; // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER AllocationSize;      // offset: 0x0 ordinal: 0x1
} __anon_508;

// 0x70 bytes (sizeof)
typedef struct _IRP {
  SHORT Type;                         // offset: 0x0 ordinal: 0x0
  USHORT Size;                        // offset: 0x2 ordinal: 0x1
  struct _MDL *MdlAddress;            // offset: 0x4 ordinal: 0x2
  ULONG Flags;                        // offset: 0x8 ordinal: 0x3
  union __anon_505 AssociatedIrp;     // offset: 0xc ordinal: 0x4
  struct _LIST_ENTRY ThreadListEntry; // offset: 0x10 ordinal: 0x5
  struct _IO_STATUS_BLOCK IoStatus;   // offset: 0x18 ordinal: 0x6
  CHAR RequestorMode;                 // offset: 0x20 ordinal: 0x7
  UCHAR PendingReturned;              // offset: 0x21 ordinal: 0x8
  CHAR StackCount;                    // offset: 0x22 ordinal: 0x9
  CHAR CurrentLocation;               // offset: 0x23 ordinal: 0xa
  UCHAR Cancel;                       // offset: 0x24 ordinal: 0xb
  UCHAR CancelIrql;                   // offset: 0x25 ordinal: 0xc
  CHAR ApcEnvironment;                // offset: 0x26 ordinal: 0xd
  UCHAR AllocationFlags;              // offset: 0x27 ordinal: 0xe
  struct _IO_STATUS_BLOCK *UserIosb;  // offset: 0x28 ordinal: 0xf
  struct _KEVENT *UserEvent;          // offset: 0x2c ordinal: 0x10
  union __anon_508 Overlay;           // offset: 0x30 ordinal: 0x11
  VOID(*CancelRoutine)
  (struct _DEVICE_OBJECT *, struct _IRP *); // offset: 0x38 ordinal: 0x12
  VOID *UserBuffer;                         // offset: 0x3c ordinal: 0x13
  union __anon_510 Tail;                    // offset: 0x40 ordinal: 0x14
} _IRP;

// 0x14 bytes (sizeof)
typedef struct _VF_WATCHDOG_IRP {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;             // offset: 0x8 ordinal: 0x1
  ULONG DueTickCount;           // offset: 0xc ordinal: 0x2
  UCHAR Inserted;               // offset: 0x10 ordinal: 0x3
  CHAR TrackedStackLocation;    // offset: 0x11 ordinal: 0x4
  USHORT CancelTimeoutTicks;    // offset: 0x12 ordinal: 0x5
} _VF_WATCHDOG_IRP;

typedef VOID (*__anon_3181)(VOID *, struct _IRP *);

// 0x24 bytes (sizeof)
typedef struct _WAITING_IRP {
  struct _LIST_ENTRY Links;                         // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;                                 // offset: 0x8 ordinal: 0x1
  VOID (*CompletionRoutine)(VOID *, struct _IRP *); // offset: 0xc ordinal: 0x2
  VOID *Context;                                    // offset: 0x10 ordinal: 0x3
  struct _KEVENT *Event;                            // offset: 0x14 ordinal: 0x4
  ULONG Information;                                // offset: 0x18 ordinal: 0x5
  UCHAR BreakAllRH;                                 // offset: 0x1c ordinal: 0x6
  UCHAR OplockBreakNotify;                          // offset: 0x1d ordinal: 0x7
  struct _FILE_OBJECT *FileObject;                  // offset: 0x20 ordinal: 0x8
} _WAITING_IRP;

// 0x100 bytes (sizeof)
typedef struct _IOV_FORCED_PENDING_TRACE {
  struct _IRP *Irp;        // offset: 0x0 ordinal: 0x0
  struct _ETHREAD *Thread; // offset: 0x4 ordinal: 0x1
  VOID *StackTrace[62];    // offset: 0x8 ordinal: 0x2
} _IOV_FORCED_PENDING_TRACE;

// 0x40 bytes (sizeof)
typedef struct _IOV_IRP_TRACE {
  struct _IRP *Irp;         // offset: 0x0 ordinal: 0x0
  struct _KTHREAD *Thread;  // offset: 0x4 ordinal: 0x1
  SHORT KernelApcDisable;   // offset: 0x8 ordinal: 0x2
  SHORT SpecialApcDisable;  // offset: 0xa ordinal: 0x3
  ULONG CombinedApcDisable; // offset: 0x8 ordinal: 0x4
  UCHAR Irql;               // offset: 0xc ordinal: 0x5
  VOID *StackTrace[12];     // offset: 0x10 ordinal: 0x6
} _IOV_IRP_TRACE;

// 0x10 bytes (sizeof)
typedef struct _TRIAGE_POP_IRP_DATA {
  struct _LIST_ENTRY Link;    // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;           // offset: 0x8 ordinal: 0x1
  struct _DEVICE_OBJECT *Pdo; // offset: 0xc ordinal: 0x2
} _TRIAGE_POP_IRP_DATA;

// 0x20 bytes (sizeof)
typedef struct _TRIAGE_POP_FX_DEVICE {
  struct _LIST_ENTRY Link;                // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;                       // offset: 0x8 ordinal: 0x1
  struct _TRIAGE_POP_IRP_DATA *IrpData;   // offset: 0xc ordinal: 0x2
  LONG Status;                            // offset: 0x10 ordinal: 0x3
  LONG PowerReqCall;                      // offset: 0x14 ordinal: 0x4
  LONG PowerNotReqCall;                   // offset: 0x18 ordinal: 0x5
  struct _TRIAGE_DEVICE_NODE *DeviceNode; // offset: 0x1c ordinal: 0x6
} _TRIAGE_POP_FX_DEVICE;

// 0x2c bytes (sizeof)
typedef struct _TRIAGE_DEVICE_NODE {
  struct _TRIAGE_DEVICE_NODE *Sibling;         // offset: 0x0 ordinal: 0x0
  struct _TRIAGE_DEVICE_NODE *Child;           // offset: 0x4 ordinal: 0x1
  struct _TRIAGE_DEVICE_NODE *Parent;          // offset: 0x8 ordinal: 0x2
  struct _TRIAGE_DEVICE_NODE *LastChild;       // offset: 0xc ordinal: 0x3
  struct _DEVICE_OBJECT *PhysicalDeviceObject; // offset: 0x10 ordinal: 0x4
  struct _UNICODE_STRING InstancePath;         // offset: 0x14 ordinal: 0x5
  struct _UNICODE_STRING ServiceName;          // offset: 0x1c ordinal: 0x6
  struct _IRP *PendingIrp;                     // offset: 0x24 ordinal: 0x7
  struct _TRIAGE_POP_FX_DEVICE *FxDevice;      // offset: 0x28 ordinal: 0x8
} _TRIAGE_DEVICE_NODE;

// 0x20 bytes (sizeof)
typedef struct _POP_POLICY_DEVICE {
  struct _LIST_ENTRY Link;                  // offset: 0x0 ordinal: 0x0
  enum POWER_POLICY_DEVICE_TYPE DeviceType; // offset: 0x8 ordinal: 0x1
  VOID *Notification;                       // offset: 0xc ordinal: 0x2
  struct _UNICODE_STRING Name;              // offset: 0x10 ordinal: 0x3
  struct _DEVICE_OBJECT *Device;            // offset: 0x18 ordinal: 0x4
  struct _IRP *Irp;                         // offset: 0x1c ordinal: 0x5
} _POP_POLICY_DEVICE;

// 0x18 bytes (sizeof)
typedef struct _POP_IRP_WORKER_ENTRY {
  struct _LIST_ENTRY Link;       // offset: 0x0 ordinal: 0x0
  struct _ETHREAD *Thread;       // offset: 0x8 ordinal: 0x1
  struct _IRP *Irp;              // offset: 0xc ordinal: 0x2
  struct _DEVICE_OBJECT *Device; // offset: 0x10 ordinal: 0x3
  UCHAR Static;                  // offset: 0x14 ordinal: 0x4
} _POP_IRP_WORKER_ENTRY;

// 0x14 bytes (sizeof)
typedef struct __anon_1045 {
  struct _IRP *Irp;                                  // offset: 0x0 ordinal: 0x0
  VOID *FileInformation;                             // offset: 0x4 ordinal: 0x1
  ULONG *Length;                                     // offset: 0x8 ordinal: 0x2
  enum _FILE_INFORMATION_CLASS FileInformationClass; // offset: 0xc ordinal: 0x3
  LONG CompletionStatus; // offset: 0x10 ordinal: 0x4
} __anon_1045;

// 0x14 bytes (sizeof)
typedef union _FS_FILTER_PARAMETERS {
  struct __anon_1042 AcquireForModifiedPageWriter; // offset: 0x0 ordinal: 0x0
  struct __anon_1043 ReleaseForModifiedPageWriter; // offset: 0x0 ordinal: 0x1
  struct __anon_1044
      AcquireForSectionSynchronization; // offset: 0x0 ordinal: 0x2
  struct __anon_1045 QueryOpen;         // offset: 0x0 ordinal: 0x3
  struct __anon_1046 Others;            // offset: 0x0 ordinal: 0x4
} _FS_FILTER_PARAMETERS;

// 0x24 bytes (sizeof)
typedef struct _FS_FILTER_CALLBACK_DATA {
  ULONG SizeOfFsFilterCallbackData;       // offset: 0x0 ordinal: 0x0
  UCHAR Operation;                        // offset: 0x4 ordinal: 0x1
  UCHAR Reserved;                         // offset: 0x5 ordinal: 0x2
  struct _DEVICE_OBJECT *DeviceObject;    // offset: 0x8 ordinal: 0x3
  struct _FILE_OBJECT *FileObject;        // offset: 0xc ordinal: 0x4
  union _FS_FILTER_PARAMETERS Parameters; // offset: 0x10 ordinal: 0x5
} _FS_FILTER_CALLBACK_DATA;

typedef VOID (*__anon_851)(struct _FS_FILTER_CALLBACK_DATA *, LONG, VOID *);

typedef LONG (*__anon_850)(struct _FS_FILTER_CALLBACK_DATA *, VOID **);

// 0x40 bytes (sizeof)
typedef struct _FS_FILTER_CALLBACKS {
  ULONG SizeOfFsFilterCallbacks; // offset: 0x0 ordinal: 0x0
  ULONG Reserved;                // offset: 0x4 ordinal: 0x1
  LONG(*PreAcquireForSectionSynchronization)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x8 ordinal: 0x2
  VOID(*PostAcquireForSectionSynchronization)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG, VOID *); // offset: 0xc ordinal: 0x3
  LONG(*PreReleaseForSectionSynchronization)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x10 ordinal: 0x4
  VOID(*PostReleaseForSectionSynchronization)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x14 ordinal: 0x5
  LONG(*PreAcquireForCcFlush)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x18 ordinal: 0x6
  VOID(*PostAcquireForCcFlush)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x1c ordinal: 0x7
  LONG(*PreReleaseForCcFlush)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x20 ordinal: 0x8
  VOID(*PostReleaseForCcFlush)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x24 ordinal: 0x9
  LONG(*PreAcquireForModifiedPageWriter)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x28 ordinal: 0xa
  VOID(*PostAcquireForModifiedPageWriter)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x2c ordinal: 0xb
  LONG(*PreReleaseForModifiedPageWriter)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x30 ordinal: 0xc
  VOID(*PostReleaseForModifiedPageWriter)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x34 ordinal: 0xd
  LONG(*PreQueryOpen)
  (struct _FS_FILTER_CALLBACK_DATA *, VOID **); // offset: 0x38 ordinal: 0xe
  VOID(*PostQueryOpen)
  (struct _FS_FILTER_CALLBACK_DATA *, LONG,
   VOID *); // offset: 0x3c ordinal: 0xf
} _FS_FILTER_CALLBACKS;

typedef LONG (*__anon_835)(struct _DEVICE_OBJECT *, struct _IRP *, VOID *);

// 0x24 bytes (sizeof)
typedef struct _IO_STACK_LOCATION {
  UCHAR MajorFunction;                 // offset: 0x0 ordinal: 0x0
  UCHAR MinorFunction;                 // offset: 0x1 ordinal: 0x1
  UCHAR Flags;                         // offset: 0x2 ordinal: 0x2
  UCHAR Control;                       // offset: 0x3 ordinal: 0x3
  union __anon_752 Parameters;         // offset: 0x4 ordinal: 0x4
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x14 ordinal: 0x5
  struct _FILE_OBJECT *FileObject;     // offset: 0x18 ordinal: 0x6
  LONG(*CompletionRoutine)
  (struct _DEVICE_OBJECT *, struct _IRP *, VOID *); // offset: 0x1c ordinal: 0x7
  VOID *Context;                                    // offset: 0x20 ordinal: 0x8
} _IO_STACK_LOCATION;

typedef UCHAR (*__anon_718)(struct _IRP *,
                            struct _FILE_NETWORK_OPEN_INFORMATION *,
                            struct _DEVICE_OBJECT *);

typedef enum _IO_ALLOCATION_ACTION (*__anon_691)(struct _DEVICE_OBJECT *,
                                                 struct _IRP *, VOID *, VOID *);

// 0x28 bytes (sizeof)
typedef struct _WAIT_CONTEXT_BLOCK {
  union {
    struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry; // offset: 0x0 ordinal: 0x0
    struct _LIST_ENTRY DmaWaitEntry;            // offset: 0x0 ordinal: 0x1
  };
  ULONG NumberOfChannels;        // offset: 0x8 ordinal: 0x2
  ULONG SyncCallback : 1;        // offset: 0xc ordinal: 0x3
  ULONG DmaContext : 1;          // offset: 0xc ordinal: 0x4
  ULONG ZeroMapRegisters : 1;    // offset: 0xc ordinal: 0x5
  ULONG Reserved : 9;            // offset: 0xc ordinal: 0x6
  ULONG NumberOfRemapPages : 20; // offset: 0xc ordinal: 0x7
  enum _IO_ALLOCATION_ACTION (*DeviceRoutine)(
      struct _DEVICE_OBJECT *, struct _IRP *, VOID *,
      VOID *);                     // offset: 0x10 ordinal: 0x8
  VOID *DeviceContext;             // offset: 0x14 ordinal: 0x9
  ULONG NumberOfMapRegisters;      // offset: 0x18 ordinal: 0xa
  VOID *DeviceObject;              // offset: 0x1c ordinal: 0xb
  VOID *CurrentIrp;                // offset: 0x20 ordinal: 0xc
  struct _KDPC *BufferChainingDpc; // offset: 0x24 ordinal: 0xd
} _WAIT_CONTEXT_BLOCK;

// 0x28 bytes (sizeof)
typedef union __anon_534 {
  struct _LIST_ENTRY ListEntry;   // offset: 0x0 ordinal: 0x0
  struct _WAIT_CONTEXT_BLOCK Wcb; // offset: 0x0 ordinal: 0x1
} __anon_534;

typedef LONG (*__anon_665)(struct _DEVICE_OBJECT *, struct _IRP *);

// 0x44 bytes (sizeof)
typedef struct _PENDING_RELATIONS_LIST_ENTRY {
  struct _LIST_ENTRY Link;                     // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM WorkItem;            // offset: 0x8 ordinal: 0x1
  struct _PNP_DEVICE_EVENT_ENTRY *DeviceEvent; // offset: 0x18 ordinal: 0x2
  struct _DEVICE_OBJECT *DeviceObject;         // offset: 0x1c ordinal: 0x3
  struct _RELATION_LIST *RelationsList;        // offset: 0x20 ordinal: 0x4
  struct _IRP *EjectIrp;                       // offset: 0x24 ordinal: 0x5
  enum IRPLOCK Lock;                           // offset: 0x28 ordinal: 0x6
  ULONG Problem;                               // offset: 0x2c ordinal: 0x7
  UCHAR ProfileChangingEject;                  // offset: 0x30 ordinal: 0x8
  UCHAR DisplaySafeRemovalDialog;              // offset: 0x31 ordinal: 0x9
  enum _SYSTEM_POWER_STATE LightestSleepState; // offset: 0x34 ordinal: 0xa
  struct DOCK_INTERFACE *DockInterface;        // offset: 0x38 ordinal: 0xb
  UCHAR DequeuePending;                        // offset: 0x3c ordinal: 0xc
  enum _PNP_DEVICE_DELETE_TYPE DeleteType;     // offset: 0x40 ordinal: 0xd
} _PENDING_RELATIONS_LIST_ENTRY;

// 0x8 bytes (sizeof)
typedef struct _PO_IRP_QUEUE {
  struct _IRP *CurrentIrp;     // offset: 0x0 ordinal: 0x0
  struct _IRP *PendingIrpList; // offset: 0x4 ordinal: 0x1
} _PO_IRP_QUEUE;

// 0x10 bytes (sizeof)
typedef struct _PO_IRP_MANAGER {
  struct _PO_IRP_QUEUE DeviceIrpQueue; // offset: 0x0 ordinal: 0x0
  struct _PO_IRP_QUEUE SystemIrpQueue; // offset: 0x8 ordinal: 0x1
} _PO_IRP_MANAGER;

typedef VOID (*__anon_568)(struct _DEVICE_OBJECT *, struct _IRP *);

// 0x10 bytes (sizeof)
typedef struct _LEAP_SECOND_DATA {
  UCHAR Enabled;                // offset: 0x0 ordinal: 0x0
  ULONG Count;                  // offset: 0x4 ordinal: 0x1
  union _LARGE_INTEGER Data[1]; // offset: 0x8 ordinal: 0x2
} _LEAP_SECOND_DATA;

// 0x8 bytes (sizeof)
typedef struct LIST_ENTRY32 {
  ULONG Flink; // offset: 0x0 ordinal: 0x0
  ULONG Blink; // offset: 0x4 ordinal: 0x1
} LIST_ENTRY32;

// 0x18 bytes (sizeof)
typedef struct _ACTIVATION_CONTEXT_STACK32 {
  ULONG ActiveFrame;                  // offset: 0x0 ordinal: 0x0
  struct LIST_ENTRY32 FrameListCache; // offset: 0x4 ordinal: 0x1
  ULONG Flags;                        // offset: 0xc ordinal: 0x2
  ULONG NextCookieSequenceNumber;     // offset: 0x10 ordinal: 0x3
  ULONG StackId;                      // offset: 0x14 ordinal: 0x4
} _ACTIVATION_CONTEXT_STACK32;

// 0x38 bytes (sizeof)
typedef struct _MI_TRIAGE_DUMP_DATA {
  ULONG BadPageCount;                     // offset: 0x0 ordinal: 0x0
  LONG BadPagesDetected;                  // offset: 0x4 ordinal: 0x1
  LONG ZeroedPageSingleBitErrorsDetected; // offset: 0x8 ordinal: 0x2
  LONG ScrubPasses;                       // offset: 0xc ordinal: 0x3
  LONG ScrubBadPagesFound;                // offset: 0x10 ordinal: 0x4
  ULONG PageHashErrors;                   // offset: 0x14 ordinal: 0x5
  ULONGLONG FeatureBits;                  // offset: 0x18 ordinal: 0x6
  ULONG TimeZoneId;                       // offset: 0x20 ordinal: 0x7
  union _MI_FLAGS Flags;                  // offset: 0x24 ordinal: 0x8
  VOID *VsmConnection;                    // offset: 0x28 ordinal: 0x9
  struct _EXCEPTION_REGISTRATION_RECORD
      *ExceptionChainTerminator; // offset: 0x2c ordinal: 0xa
  struct _EXCEPTION_REGISTRATION_RECORD
      ExceptionChainTerminatorRecord; // offset: 0x30 ordinal: 0xb
} _MI_TRIAGE_DUMP_DATA;

// 0x28 bytes (sizeof)
typedef struct _RTLP_RANGE_LIST_ENTRY {
  ULONGLONG Start; // offset: 0x0 ordinal: 0x0
  ULONGLONG End;   // offset: 0x8 ordinal: 0x1
  union {
    struct __anon_3229 Allocated; // offset: 0x10 ordinal: 0x2
    struct __anon_3230 Merged;    // offset: 0x10 ordinal: 0x3
  };
  UCHAR Attributes;             // offset: 0x18 ordinal: 0x4
  UCHAR PublicFlags;            // offset: 0x19 ordinal: 0x5
  USHORT PrivateFlags;          // offset: 0x1a ordinal: 0x6
  struct _LIST_ENTRY ListEntry; // offset: 0x1c ordinal: 0x7
} _RTLP_RANGE_LIST_ENTRY;

// 0xf0 bytes (sizeof)
typedef struct _ETW_WMITRACE_WORK {
  ULONG LoggerId;        // offset: 0x0 ordinal: 0x0
  ULONG SiloSessionId;   // offset: 0x4 ordinal: 0x1
  CHAR LoggerName[65];   // offset: 0x8 ordinal: 0x2
  CHAR FileName[129];    // offset: 0x49 ordinal: 0x3
  ULONG MaximumFileSize; // offset: 0xcc ordinal: 0x4
  ULONG MinBuffers;      // offset: 0xd0 ordinal: 0x5
  ULONG MaxBuffers;      // offset: 0xd4 ordinal: 0x6
  ULONG BufferSize;      // offset: 0xd8 ordinal: 0x7
  ULONG Mode;            // offset: 0xdc ordinal: 0x8
  ULONG FlushTimer;      // offset: 0xe0 ordinal: 0x9
  ULONGLONG MatchAny;    // offset: 0x8 ordinal: 0xa
  ULONGLONG MatchAll;    // offset: 0x10 ordinal: 0xb
  ULONG EnableProperty;  // offset: 0x18 ordinal: 0xc
  struct _GUID Guid;     // offset: 0x1c ordinal: 0xd
  UCHAR Level;           // offset: 0x2c ordinal: 0xe
  LONG Status;           // offset: 0xe8 ordinal: 0xf
} _ETW_WMITRACE_WORK;

// 0x10 bytes (sizeof)
typedef struct _KTIMER2_COLLECTION {
  struct _RTL_RB_TREE Tree; // offset: 0x0 ordinal: 0x0
  ULONGLONG NextDueTime;    // offset: 0x8 ordinal: 0x1
} _KTIMER2_COLLECTION;

// 0x28 bytes (sizeof)
typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA {
  struct _GUID ReportId;             // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING ModuleName; // offset: 0x10 ordinal: 0x1
  ULONG ModuleTimestamp;             // offset: 0x18 ordinal: 0x2
  ULONG ModuleSize;                  // offset: 0x1c ordinal: 0x3
  ULONGLONG Offset;                  // offset: 0x20 ordinal: 0x4
} _CRITICAL_PROCESS_EXCEPTION_DATA;

// 0x8 bytes (sizeof)
typedef struct _HARDWARE_PTE {
  ULONGLONG Valid : 1;            // offset: 0x0 ordinal: 0x0
  ULONGLONG Write : 1;            // offset: 0x0 ordinal: 0x1
  ULONGLONG Owner : 1;            // offset: 0x0 ordinal: 0x2
  ULONGLONG WriteThrough : 1;     // offset: 0x0 ordinal: 0x3
  ULONGLONG CacheDisable : 1;     // offset: 0x0 ordinal: 0x4
  ULONGLONG Accessed : 1;         // offset: 0x0 ordinal: 0x5
  ULONGLONG Dirty : 1;            // offset: 0x0 ordinal: 0x6
  ULONGLONG LargePage : 1;        // offset: 0x0 ordinal: 0x7
  ULONGLONG Global : 1;           // offset: 0x0 ordinal: 0x8
  ULONGLONG CopyOnWrite : 1;      // offset: 0x0 ordinal: 0x9
  ULONGLONG Prototype : 1;        // offset: 0x0 ordinal: 0xa
  ULONGLONG reserved0 : 1;        // offset: 0x0 ordinal: 0xb
  ULONGLONG PageFrameNumber : 26; // offset: 0x0 ordinal: 0xc
  ULONGLONG reserved1 : 25;       // offset: 0x0 ordinal: 0xd
  ULONGLONG NoExecute : 1;        // offset: 0x0 ordinal: 0xe
  ULONG LowPart;                  // offset: 0x0 ordinal: 0xf
  ULONG HighPart;                 // offset: 0x4 ordinal: 0x10
} _HARDWARE_PTE;

// 0x1f8 bytes (sizeof)
typedef struct _PO_HIBER_PERF {
  ULONGLONG HiberIoTicks;                          // offset: 0x0 ordinal: 0x0
  ULONGLONG HiberIoCpuTicks;                       // offset: 0x8 ordinal: 0x1
  ULONGLONG HiberInitTicks;                        // offset: 0x10 ordinal: 0x2
  ULONGLONG HiberHiberFileTicks;                   // offset: 0x18 ordinal: 0x3
  ULONGLONG HiberCompressTicks;                    // offset: 0x20 ordinal: 0x4
  ULONGLONG HiberSharedBufferTicks;                // offset: 0x28 ordinal: 0x5
  ULONGLONG HiberChecksumTicks;                    // offset: 0x30 ordinal: 0x6
  ULONGLONG HiberChecksumIoTicks;                  // offset: 0x38 ordinal: 0x7
  union _LARGE_INTEGER TotalHibernateTime;         // offset: 0x40 ordinal: 0x8
  union _LARGE_INTEGER HibernateCompleteTimestamp; // offset: 0x48 ordinal: 0x9
  ULONG POSTTime;                                  // offset: 0x50 ordinal: 0xa
  ULONG ResumeBootMgrTime;                         // offset: 0x54 ordinal: 0xb
  ULONG BootmgrUserInputTime;                      // offset: 0x58 ordinal: 0xc
  ULONGLONG ResumeAppTicks;                        // offset: 0x60 ordinal: 0xd
  ULONGLONG ResumeAppStartTimestamp;               // offset: 0x68 ordinal: 0xe
  ULONGLONG ResumeLibraryInitTicks;                // offset: 0x70 ordinal: 0xf
  ULONGLONG ResumeInitTicks;                       // offset: 0x78 ordinal: 0x10
  ULONGLONG ResumeRestoreImageStartTimestamp;      // offset: 0x80 ordinal: 0x11
  ULONGLONG ResumeHiberFileTicks;                  // offset: 0x88 ordinal: 0x12
  ULONGLONG ResumeIoTicks;                         // offset: 0x90 ordinal: 0x13
  ULONGLONG ResumeDecompressTicks;                 // offset: 0x98 ordinal: 0x14
  ULONGLONG ResumeAllocateTicks;                   // offset: 0xa0 ordinal: 0x15
  ULONGLONG ResumeUserInOutTicks;                  // offset: 0xa8 ordinal: 0x16
  ULONGLONG ResumeMapTicks;                        // offset: 0xb0 ordinal: 0x17
  ULONGLONG ResumeUnmapTicks;                      // offset: 0xb8 ordinal: 0x18
  ULONGLONG ResumeChecksumTicks;                   // offset: 0xc0 ordinal: 0x19
  ULONGLONG ResumeChecksumIoTicks;                 // offset: 0xc8 ordinal: 0x1a
  ULONGLONG ResumeKernelSwitchTimestamp;           // offset: 0xd0 ordinal: 0x1b
  ULONGLONG CyclesPerMs;                           // offset: 0xd8 ordinal: 0x1c
  ULONGLONG WriteLogDataTimestamp;                 // offset: 0xe0 ordinal: 0x1d
  ULONGLONG KernelReturnFromHandler;               // offset: 0xe8 ordinal: 0x1e
  ULONGLONG TimeStampCounterAtSwitchTime;          // offset: 0xf0 ordinal: 0x1f
  ULONGLONG HalTscOffset;                          // offset: 0xf8 ordinal: 0x20
  ULONGLONG HvlTscOffset;            // offset: 0x100 ordinal: 0x21
  ULONGLONG SleeperThreadEnd;        // offset: 0x108 ordinal: 0x22
  ULONGLONG PostCmosUpdateTimestamp; // offset: 0x110 ordinal: 0x23
  ULONGLONG
  KernelReturnSystemPowerStateTimestamp; // offset: 0x118 ordinal: 0x24
  ULONGLONG IoBoundedness;               // offset: 0x120 ordinal: 0x25
  ULONGLONG KernelDecompressTicks;       // offset: 0x128 ordinal: 0x26
  ULONGLONG KernelIoTicks;               // offset: 0x130 ordinal: 0x27
  ULONGLONG KernelCopyTicks;             // offset: 0x138 ordinal: 0x28
  ULONGLONG ReadCheckCount;              // offset: 0x140 ordinal: 0x29
  ULONGLONG KernelInitTicks;             // offset: 0x148 ordinal: 0x2a
  ULONGLONG KernelResumeHiberFileTicks;  // offset: 0x150 ordinal: 0x2b
  ULONGLONG KernelIoCpuTicks;            // offset: 0x158 ordinal: 0x2c
  ULONGLONG KernelSharedBufferTicks;     // offset: 0x160 ordinal: 0x2d
  ULONGLONG KernelAnimationTicks;        // offset: 0x168 ordinal: 0x2e
  ULONGLONG KernelChecksumTicks;         // offset: 0x170 ordinal: 0x2f
  ULONGLONG KernelChecksumIoTicks;       // offset: 0x178 ordinal: 0x30
  union _LARGE_INTEGER AnimationStart;   // offset: 0x180 ordinal: 0x31
  union _LARGE_INTEGER AnimationStop;    // offset: 0x188 ordinal: 0x32
  ULONG DeviceResumeTime;                // offset: 0x190 ordinal: 0x33
  ULONGLONG SecurePagesProcessed;        // offset: 0x198 ordinal: 0x34
  ULONGLONG BootPagesProcessed;          // offset: 0x1a0 ordinal: 0x35
  ULONGLONG KernelPagesProcessed;        // offset: 0x1a8 ordinal: 0x36
  ULONGLONG BootBytesWritten;            // offset: 0x1b0 ordinal: 0x37
  ULONGLONG KernelBytesWritten;          // offset: 0x1b8 ordinal: 0x38
  ULONGLONG BootPagesWritten;            // offset: 0x1c0 ordinal: 0x39
  ULONGLONG KernelPagesWritten;          // offset: 0x1c8 ordinal: 0x3a
  ULONGLONG BytesWritten;                // offset: 0x1d0 ordinal: 0x3b
  ULONG PagesWritten;                    // offset: 0x1d8 ordinal: 0x3c
  ULONG FileRuns;                        // offset: 0x1dc ordinal: 0x3d
  ULONG NoMultiStageResumeReason;        // offset: 0x1e0 ordinal: 0x3e
  ULONG MaxHuffRatio;                    // offset: 0x1e4 ordinal: 0x3f
  ULONGLONG AdjustedTotalResumeTime;     // offset: 0x1e8 ordinal: 0x40
  ULONGLONG ResumeCompleteTimestamp;     // offset: 0x1f0 ordinal: 0x41
} _PO_HIBER_PERF;

// 0x340 bytes (sizeof)
typedef struct PO_MEMORY_IMAGE {
  ULONG Signature;                           // offset: 0x0 ordinal: 0x0
  ULONG ImageType;                           // offset: 0x4 ordinal: 0x1
  ULONG CheckSum;                            // offset: 0x8 ordinal: 0x2
  ULONG LengthSelf;                          // offset: 0xc ordinal: 0x3
  ULONG PageSelf;                            // offset: 0x10 ordinal: 0x4
  ULONG PageSize;                            // offset: 0x14 ordinal: 0x5
  union _LARGE_INTEGER SystemTime;           // offset: 0x18 ordinal: 0x6
  ULONGLONG InterruptTime;                   // offset: 0x20 ordinal: 0x7
  ULONGLONG FeatureFlags;                    // offset: 0x28 ordinal: 0x8
  UCHAR HiberFlags;                          // offset: 0x30 ordinal: 0x9
  UCHAR spare[3];                            // offset: 0x31 ordinal: 0xa
  ULONG NoHiberPtes;                         // offset: 0x34 ordinal: 0xb
  ULONG HiberVa;                             // offset: 0x38 ordinal: 0xc
  ULONG NoFreePages;                         // offset: 0x3c ordinal: 0xd
  ULONG FreeMapCheck;                        // offset: 0x40 ordinal: 0xe
  ULONG WakeCheck;                           // offset: 0x44 ordinal: 0xf
  ULONGLONG NumPagesForLoader;               // offset: 0x48 ordinal: 0x10
  ULONG FirstBootRestorePage;                // offset: 0x50 ordinal: 0x11
  ULONG FirstKernelRestorePage;              // offset: 0x54 ordinal: 0x12
  ULONG FirstChecksumRestorePage;            // offset: 0x58 ordinal: 0x13
  ULONGLONG NoChecksumEntries;               // offset: 0x60 ordinal: 0x14
  struct _PO_HIBER_PERF PerfInfo;            // offset: 0x68 ordinal: 0x15
  ULONG FirmwareRuntimeInformationPages;     // offset: 0x260 ordinal: 0x16
  ULONG FirmwareRuntimeInformation[1];       // offset: 0x264 ordinal: 0x17
  ULONG SpareUlong;                          // offset: 0x268 ordinal: 0x18
  ULONG NoBootLoaderLogPages;                // offset: 0x26c ordinal: 0x19
  ULONG BootLoaderLogPages[24];              // offset: 0x270 ordinal: 0x1a
  ULONG NotUsed;                             // offset: 0x2d0 ordinal: 0x1b
  ULONG ResumeContextCheck;                  // offset: 0x2d4 ordinal: 0x1c
  ULONG ResumeContextPages;                  // offset: 0x2d8 ordinal: 0x1d
  UCHAR Hiberboot;                           // offset: 0x2dc ordinal: 0x1e
  UCHAR SecureLaunched;                      // offset: 0x2dd ordinal: 0x1f
  UCHAR SecureBoot;                          // offset: 0x2de ordinal: 0x20
  ULONGLONG HvPageTableRoot;                 // offset: 0x2e0 ordinal: 0x21
  ULONGLONG HvEntryPoint;                    // offset: 0x2e8 ordinal: 0x22
  ULONGLONG HvReservedTransitionAddress;     // offset: 0x2f0 ordinal: 0x23
  ULONGLONG HvReservedTransitionAddressSize; // offset: 0x2f8 ordinal: 0x24
  ULONGLONG BootFlags;                       // offset: 0x300 ordinal: 0x25
  ULONGLONG RestoreProcessorStateRoutine;    // offset: 0x308 ordinal: 0x26
  ULONG HighestPhysicalPage;                 // offset: 0x310 ordinal: 0x27
  ULONG BitlockerKeyPfns[4];                 // offset: 0x314 ordinal: 0x28
  ULONG HardwareSignature;                   // offset: 0x324 ordinal: 0x29
  union _LARGE_INTEGER
      SMBiosTablePhysicalAddress;   // offset: 0x328 ordinal: 0x2a
  ULONG SMBiosTableLength;          // offset: 0x330 ordinal: 0x2b
  UCHAR SMBiosMajorVersion;         // offset: 0x334 ordinal: 0x2c
  UCHAR SMBiosMinorVersion;         // offset: 0x335 ordinal: 0x2d
  UCHAR HiberResumeXhciHandoffSkip; // offset: 0x336 ordinal: 0x2e
  UCHAR InitializeUSBCore;          // offset: 0x337 ordinal: 0x2f
  UCHAR ValidUSBCoreId;             // offset: 0x338 ordinal: 0x30
  UCHAR USBCoreId;                  // offset: 0x339 ordinal: 0x31
  UCHAR SkipMemoryMapValidation;    // offset: 0x33a ordinal: 0x32
} PO_MEMORY_IMAGE;

// 0x60 bytes (sizeof)
typedef struct _POP_IO_INFO {
  struct _MDL *DumpMdl;            // offset: 0x0 ordinal: 0x0
  enum _POP_IO_STATUS IoStatus;    // offset: 0x4 ordinal: 0x1
  ULONGLONG IoStartCount;          // offset: 0x8 ordinal: 0x2
  ULONGLONG IoBytesCompleted;      // offset: 0x10 ordinal: 0x3
  ULONGLONG IoBytesInProgress;     // offset: 0x18 ordinal: 0x4
  ULONGLONG RequestSize;           // offset: 0x20 ordinal: 0x5
  union _LARGE_INTEGER IoLocation; // offset: 0x28 ordinal: 0x6
  ULONGLONG FileOffset;            // offset: 0x30 ordinal: 0x7
  VOID *Buffer;                    // offset: 0x38 ordinal: 0x8
  UCHAR AsyncCapable;              // offset: 0x3c ordinal: 0x9
  ULONGLONG BytesToRead;           // offset: 0x40 ordinal: 0xa
  ULONG Pages;                     // offset: 0x48 ordinal: 0xb
  ULONGLONG HighestChecksumIndex;  // offset: 0x50 ordinal: 0xc
  USHORT PreviousChecksum;         // offset: 0x58 ordinal: 0xd
} _POP_IO_INFO;

// 0x18 bytes (sizeof)
typedef struct __anon_3137 {
  ULONGLONG RequestedTime;              // offset: 0x0 ordinal: 0x0
  ULONGLONG ProgrammedTime;             // offset: 0x8 ordinal: 0x1
  struct _DIAGNOSTIC_BUFFER *TimerInfo; // offset: 0x10 ordinal: 0x2
} __anon_3137;

// 0x8 bytes (sizeof)
typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES {
  ULONGLONG DelayMs : 30;            // offset: 0x0 ordinal: 0x0
  ULONGLONG CoalescingWindowMs : 30; // offset: 0x0 ordinal: 0x1
  ULONGLONG Reserved : 1;            // offset: 0x0 ordinal: 0x2
  ULONGLONG NewTimerWheel : 1;       // offset: 0x0 ordinal: 0x3
  ULONGLONG Retry : 1;               // offset: 0x0 ordinal: 0x4
  ULONGLONG Locked : 1;              // offset: 0x0 ordinal: 0x5
  ULONGLONG All;                     // offset: 0x0 ordinal: 0x6
} _PS_INTERLOCKED_TIMER_DELAY_VALUES;

// 0x48 bytes (sizeof)
typedef struct _ETWP_NOTIFICATION_HEADER {
  enum _ETW_NOTIFICATION_TYPE NotificationType; // offset: 0x0 ordinal: 0x0
  ULONG NotificationSize;                       // offset: 0x4 ordinal: 0x1
  LONG RefCount;                                // offset: 0x8 ordinal: 0x2
  UCHAR ReplyRequested;                         // offset: 0xc ordinal: 0x3
  union {
    ULONG ReplyIndex; // offset: 0x10 ordinal: 0x4
    ULONG Timeout;    // offset: 0x10 ordinal: 0x5
  };
  union {
    ULONG ReplyCount;    // offset: 0x14 ordinal: 0x6
    ULONG NotifyeeCount; // offset: 0x14 ordinal: 0x7
  };
  union {
    ULONGLONG ReplyHandle; // offset: 0x18 ordinal: 0x8
    VOID *ReplyObject;     // offset: 0x18 ordinal: 0x9
    ULONG RegIndex;        // offset: 0x18 ordinal: 0xa
  };
  ULONG TargetPID;              // offset: 0x20 ordinal: 0xb
  ULONG SourcePID;              // offset: 0x24 ordinal: 0xc
  struct _GUID DestinationGuid; // offset: 0x28 ordinal: 0xd
  struct _GUID SourceGuid;      // offset: 0x38 ordinal: 0xe
} _ETWP_NOTIFICATION_HEADER;

// 0x100 bytes (sizeof)
typedef union _LFH_RANDOM_DATA {
  UCHAR Bytes[256];        // offset: 0x0 ordinal: 0x0
  USHORT Words[128];       // offset: 0x0 ordinal: 0x1
  ULONGLONG Quadwords[32]; // offset: 0x0 ordinal: 0x2
} _LFH_RANDOM_DATA;

// 0x8 bytes (sizeof)
typedef struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES {
  ULONGLONG NumberOfPtes : 6;   // offset: 0x0 ordinal: 0x0
  ULONGLONG PartitionId : 10;   // offset: 0x0 ordinal: 0x1
  ULONGLONG SectionOffset : 48; // offset: 0x0 ordinal: 0x2
} _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES;

// 0x8 bytes (sizeof)
typedef union _WHEA_ERROR_STATUS {
  ULONGLONG ErrorStatus;    // offset: 0x0 ordinal: 0x0
  ULONGLONG Reserved1 : 8;  // offset: 0x0 ordinal: 0x1
  ULONGLONG ErrorType : 8;  // offset: 0x0 ordinal: 0x2
  ULONGLONG Address : 1;    // offset: 0x0 ordinal: 0x3
  ULONGLONG Control : 1;    // offset: 0x0 ordinal: 0x4
  ULONGLONG Data : 1;       // offset: 0x0 ordinal: 0x5
  ULONGLONG Responder : 1;  // offset: 0x0 ordinal: 0x6
  ULONGLONG Requester : 1;  // offset: 0x0 ordinal: 0x7
  ULONGLONG FirstError : 1; // offset: 0x0 ordinal: 0x8
  ULONGLONG Overflow : 1;   // offset: 0x0 ordinal: 0x9
  ULONGLONG Reserved2 : 41; // offset: 0x0 ordinal: 0xa
} _WHEA_ERROR_STATUS;

// 0x8 bytes (sizeof)
typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
  ULONGLONG ErrorStatus : 1;         // offset: 0x0 ordinal: 0x0
  ULONGLONG PhysicalAddress : 1;     // offset: 0x0 ordinal: 0x1
  ULONGLONG PhysicalAddressMask : 1; // offset: 0x0 ordinal: 0x2
  ULONGLONG Node : 1;                // offset: 0x0 ordinal: 0x3
  ULONGLONG Card : 1;                // offset: 0x0 ordinal: 0x4
  ULONGLONG Module : 1;              // offset: 0x0 ordinal: 0x5
  ULONGLONG Bank : 1;                // offset: 0x0 ordinal: 0x6
  ULONGLONG Device : 1;              // offset: 0x0 ordinal: 0x7
  ULONGLONG Row : 1;                 // offset: 0x0 ordinal: 0x8
  ULONGLONG Column : 1;              // offset: 0x0 ordinal: 0x9
  ULONGLONG BitPosition : 1;         // offset: 0x0 ordinal: 0xa
  ULONGLONG RequesterId : 1;         // offset: 0x0 ordinal: 0xb
  ULONGLONG ResponderId : 1;         // offset: 0x0 ordinal: 0xc
  ULONGLONG TargetId : 1;            // offset: 0x0 ordinal: 0xd
  ULONGLONG ErrorType : 1;           // offset: 0x0 ordinal: 0xe
  ULONGLONG RankNumber : 1;          // offset: 0x0 ordinal: 0xf
  ULONGLONG CardHandle : 1;          // offset: 0x0 ordinal: 0x10
  ULONGLONG ModuleHandle : 1;        // offset: 0x0 ordinal: 0x11
  ULONGLONG ExtendedRow : 1;         // offset: 0x0 ordinal: 0x12
  ULONGLONG BankGroup : 1;           // offset: 0x0 ordinal: 0x13
  ULONGLONG BankAddress : 1;         // offset: 0x0 ordinal: 0x14
  ULONGLONG ChipIdentification : 1;  // offset: 0x0 ordinal: 0x15
  ULONGLONG Reserved : 42;           // offset: 0x0 ordinal: 0x16
  ULONGLONG ValidBits;               // offset: 0x0 ordinal: 0x17
} _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;

// 0x50 bytes (sizeof)
typedef struct _WHEA_MEMORY_ERROR_SECTION {
  union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
      ValidBits;                        // offset: 0x0 ordinal: 0x0
  union _WHEA_ERROR_STATUS ErrorStatus; // offset: 0x8 ordinal: 0x1
  ULONGLONG PhysicalAddress;            // offset: 0x10 ordinal: 0x2
  ULONGLONG PhysicalAddressMask;        // offset: 0x18 ordinal: 0x3
  USHORT Node;                          // offset: 0x20 ordinal: 0x4
  USHORT Card;                          // offset: 0x22 ordinal: 0x5
  USHORT Module;                        // offset: 0x24 ordinal: 0x6
  USHORT Bank;                          // offset: 0x26 ordinal: 0x7
  USHORT Device;                        // offset: 0x28 ordinal: 0x8
  USHORT Row;                           // offset: 0x2a ordinal: 0x9
  USHORT Column;                        // offset: 0x2c ordinal: 0xa
  USHORT BitPosition;                   // offset: 0x2e ordinal: 0xb
  ULONGLONG RequesterId;                // offset: 0x30 ordinal: 0xc
  ULONGLONG ResponderId;                // offset: 0x38 ordinal: 0xd
  ULONGLONG TargetId;                   // offset: 0x40 ordinal: 0xe
  UCHAR ErrorType;                      // offset: 0x48 ordinal: 0xf
  UCHAR Extended;                       // offset: 0x49 ordinal: 0x10
  USHORT RankNumber;                    // offset: 0x4a ordinal: 0x11
  USHORT CardHandle;                    // offset: 0x4c ordinal: 0x12
  USHORT ModuleHandle;                  // offset: 0x4e ordinal: 0x13
} _WHEA_MEMORY_ERROR_SECTION;

// 0x10 bytes (sizeof)
typedef struct _TraceLoggingMetadata_t {
  ULONG Signature; // offset: 0x0 ordinal: 0x0
  USHORT Size;     // offset: 0x4 ordinal: 0x1
  UCHAR Version;   // offset: 0x6 ordinal: 0x2
  UCHAR Flags;     // offset: 0x7 ordinal: 0x3
  ULONGLONG Magic; // offset: 0x8 ordinal: 0x4
} _TraceLoggingMetadata_t;

// 0x30 bytes (sizeof)
typedef struct _WNF_DELIVERY_DESCRIPTOR {
  ULONGLONG SubscriptionId;         // offset: 0x0 ordinal: 0x0
  struct _WNF_STATE_NAME StateName; // offset: 0x8 ordinal: 0x1
  ULONG ChangeStamp;                // offset: 0x10 ordinal: 0x2
  ULONG StateDataSize;              // offset: 0x14 ordinal: 0x3
  ULONG EventMask;                  // offset: 0x18 ordinal: 0x4
  struct _WNF_TYPE_ID TypeId;       // offset: 0x1c ordinal: 0x5
  ULONG StateDataOffset;            // offset: 0x2c ordinal: 0x6
} _WNF_DELIVERY_DESCRIPTOR;

// 0x218 bytes (sizeof)
typedef struct _POP_THERMAL_TELEMETRY_TRACKER {
  UCHAR AccountingDisabled;        // offset: 0x0 ordinal: 0x0
  UCHAR ActiveLevels;              // offset: 0x1 ordinal: 0x1
  ULONGLONG LastPassiveUpdateTime; // offset: 0x8 ordinal: 0x2
  ULONGLONG LastActiveUpdateTime;  // offset: 0x10 ordinal: 0x3
  ULONGLONG TotalPassiveTime[21];  // offset: 0x18 ordinal: 0x4
  ULONGLONG PassiveTimeSnap[21];   // offset: 0xc0 ordinal: 0x5
  ULONGLONG TotalActiveTime[10];   // offset: 0x168 ordinal: 0x6
  ULONGLONG ActiveTimeSnap[10];    // offset: 0x1b8 ordinal: 0x7
  ULONGLONG TotalTime;             // offset: 0x208 ordinal: 0x8
  ULONGLONG TotalTimeSnap;         // offset: 0x210 ordinal: 0x9
} _POP_THERMAL_TELEMETRY_TRACKER;

// 0x18 bytes (sizeof)
typedef struct _ARBITER_CONFLICT_INFO {
  struct _DEVICE_OBJECT *OwningObject; // offset: 0x0 ordinal: 0x0
  ULONGLONG Start;                     // offset: 0x8 ordinal: 0x1
  ULONGLONG End;                       // offset: 0x10 ordinal: 0x2
} _ARBITER_CONFLICT_INFO;

// 0x10 bytes (sizeof)
typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
  struct _DEVICE_OBJECT *PhysicalDeviceObject; // offset: 0x0 ordinal: 0x0
  struct _IO_RESOURCE_DESCRIPTOR
      *ConflictingResource;                  // offset: 0x4 ordinal: 0x1
  ULONG *ConflictCount;                      // offset: 0x8 ordinal: 0x2
  struct _ARBITER_CONFLICT_INFO **Conflicts; // offset: 0xc ordinal: 0x3
} _ARBITER_QUERY_CONFLICT_PARAMETERS;

// 0x10 bytes (sizeof)
typedef union __anon_2986 {
  struct _ARBITER_TEST_ALLOCATION_PARAMETERS
      TestAllocation; // offset: 0x0 ordinal: 0x0
  struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
      RetestAllocation; // offset: 0x0 ordinal: 0x1
  struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
      BootAllocation; // offset: 0x0 ordinal: 0x2
  struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
      QueryAllocatedResources; // offset: 0x0 ordinal: 0x3
  struct _ARBITER_QUERY_CONFLICT_PARAMETERS
      QueryConflict; // offset: 0x0 ordinal: 0x4
  struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
      QueryArbitrate; // offset: 0x0 ordinal: 0x5
  struct _ARBITER_ADD_RESERVED_PARAMETERS
      AddReserved; // offset: 0x0 ordinal: 0x6
} __anon_2986;

// 0x10 bytes (sizeof)
typedef struct _ARBITER_PARAMETERS {
  union __anon_2986 Parameters; // offset: 0x0 ordinal: 0x0
} _ARBITER_PARAMETERS;

typedef LONG (*__anon_2970)(VOID *, enum _ARBITER_ACTION,
                            struct _ARBITER_PARAMETERS *);

// 0x18 bytes (sizeof)
typedef struct _ARBITER_INTERFACE {
  USHORT Size;                          // offset: 0x0 ordinal: 0x0
  USHORT Version;                       // offset: 0x2 ordinal: 0x1
  VOID *Context;                        // offset: 0x4 ordinal: 0x2
  VOID (*InterfaceReference)(VOID *);   // offset: 0x8 ordinal: 0x3
  VOID (*InterfaceDereference)(VOID *); // offset: 0xc ordinal: 0x4
  LONG(*ArbiterHandler)
  (VOID *, enum _ARBITER_ACTION,
   struct _ARBITER_PARAMETERS *); // offset: 0x10 ordinal: 0x5
  ULONG Flags;                    // offset: 0x14 ordinal: 0x6
} _ARBITER_INTERFACE;

// 0x38 bytes (sizeof)
typedef struct _PI_RESOURCE_ARBITER_ENTRY {
  struct _LIST_ENTRY DeviceArbiterList;        // offset: 0x0 ordinal: 0x0
  UCHAR ResourceType;                          // offset: 0x8 ordinal: 0x1
  struct _ARBITER_INTERFACE *ArbiterInterface; // offset: 0xc ordinal: 0x2
  struct _DEVICE_NODE *DeviceNode;             // offset: 0x10 ordinal: 0x3
  struct _LIST_ENTRY ResourceList;             // offset: 0x14 ordinal: 0x4
  struct _LIST_ENTRY BestResourceList;         // offset: 0x1c ordinal: 0x5
  struct _LIST_ENTRY BestConfig;               // offset: 0x24 ordinal: 0x6
  struct _LIST_ENTRY ActiveArbiterList;        // offset: 0x2c ordinal: 0x7
  UCHAR State;                                 // offset: 0x34 ordinal: 0x8
  UCHAR ResourcesChanged;                      // offset: 0x35 ordinal: 0x9
} _PI_RESOURCE_ARBITER_ENTRY;

// 0x20 bytes (sizeof)
typedef struct _RTL_RANGE {
  ULONGLONG Start;  // offset: 0x0 ordinal: 0x0
  ULONGLONG End;    // offset: 0x8 ordinal: 0x1
  VOID *UserData;   // offset: 0x10 ordinal: 0x2
  VOID *Owner;      // offset: 0x14 ordinal: 0x3
  UCHAR Attributes; // offset: 0x18 ordinal: 0x4
  UCHAR Flags;      // offset: 0x19 ordinal: 0x5
} _RTL_RANGE;

typedef UCHAR (*__anon_2956)(VOID *, struct _RTL_RANGE *);

// 0x38 bytes (sizeof)
typedef struct _ARBITER_ALTERNATIVE {
  ULONGLONG Minimum;                          // offset: 0x0 ordinal: 0x0
  ULONGLONG Maximum;                          // offset: 0x8 ordinal: 0x1
  ULONGLONG Length;                           // offset: 0x10 ordinal: 0x2
  ULONGLONG Alignment;                        // offset: 0x18 ordinal: 0x3
  LONG Priority;                              // offset: 0x20 ordinal: 0x4
  ULONG Flags;                                // offset: 0x24 ordinal: 0x5
  struct _IO_RESOURCE_DESCRIPTOR *Descriptor; // offset: 0x28 ordinal: 0x6
  ULONG Reserved[3];                          // offset: 0x2c ordinal: 0x7
} _ARBITER_ALTERNATIVE;

// 0x10 bytes (sizeof)
typedef struct _ARBITER_ORDERING {
  ULONGLONG Start; // offset: 0x0 ordinal: 0x0
  ULONGLONG End;   // offset: 0x8 ordinal: 0x1
} _ARBITER_ORDERING;

// 0x8 bytes (sizeof)
typedef struct _ARBITER_ORDERING_LIST {
  USHORT Count;                        // offset: 0x0 ordinal: 0x0
  USHORT Maximum;                      // offset: 0x2 ordinal: 0x1
  struct _ARBITER_ORDERING *Orderings; // offset: 0x4 ordinal: 0x2
} _ARBITER_ORDERING_LIST;

typedef LONG (*__anon_2940)(struct _IO_RESOURCE_DESCRIPTOR *, ULONGLONG,
                            struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *);

// 0x38 bytes (sizeof)
typedef struct _ARBITER_ALLOCATION_STATE {
  ULONGLONG Start;                                 // offset: 0x0 ordinal: 0x0
  ULONGLONG End;                                   // offset: 0x8 ordinal: 0x1
  ULONGLONG CurrentMinimum;                        // offset: 0x10 ordinal: 0x2
  ULONGLONG CurrentMaximum;                        // offset: 0x18 ordinal: 0x3
  struct _ARBITER_LIST_ENTRY *Entry;               // offset: 0x20 ordinal: 0x4
  struct _ARBITER_ALTERNATIVE *CurrentAlternative; // offset: 0x24 ordinal: 0x5
  ULONG AlternativeCount;                          // offset: 0x28 ordinal: 0x6
  struct _ARBITER_ALTERNATIVE *Alternatives;       // offset: 0x2c ordinal: 0x7
  USHORT Flags;                                    // offset: 0x30 ordinal: 0x8
  UCHAR RangeAttributes;                           // offset: 0x32 ordinal: 0x9
  UCHAR RangeAvailableAttributes;                  // offset: 0x33 ordinal: 0xa
  ULONG WorkSpace;                                 // offset: 0x34 ordinal: 0xb
} _ARBITER_ALLOCATION_STATE;

// 0x20 bytes (sizeof)
typedef struct _NON_PAGED_DEBUG_INFO {
  USHORT Signature;       // offset: 0x0 ordinal: 0x0
  USHORT Flags;           // offset: 0x2 ordinal: 0x1
  ULONG Size;             // offset: 0x4 ordinal: 0x2
  USHORT Machine;         // offset: 0x8 ordinal: 0x3
  USHORT Characteristics; // offset: 0xa ordinal: 0x4
  ULONG TimeDateStamp;    // offset: 0xc ordinal: 0x5
  ULONG CheckSum;         // offset: 0x10 ordinal: 0x6
  ULONG SizeOfImage;      // offset: 0x14 ordinal: 0x7
  ULONGLONG ImageBase;    // offset: 0x18 ordinal: 0x8
} _NON_PAGED_DEBUG_INFO;

// 0x5c bytes (sizeof)
typedef struct _KLDR_DATA_TABLE_ENTRY {
  struct _LIST_ENTRY InLoadOrderLinks;             // offset: 0x0 ordinal: 0x0
  VOID *ExceptionTable;                            // offset: 0x8 ordinal: 0x1
  ULONG ExceptionTableSize;                        // offset: 0xc ordinal: 0x2
  VOID *GpValue;                                   // offset: 0x10 ordinal: 0x3
  struct _NON_PAGED_DEBUG_INFO *NonPagedDebugInfo; // offset: 0x14 ordinal: 0x4
  VOID *DllBase;                                   // offset: 0x18 ordinal: 0x5
  VOID *EntryPoint;                                // offset: 0x1c ordinal: 0x6
  ULONG SizeOfImage;                               // offset: 0x20 ordinal: 0x7
  struct _UNICODE_STRING FullDllName;              // offset: 0x24 ordinal: 0x8
  struct _UNICODE_STRING BaseDllName;              // offset: 0x2c ordinal: 0x9
  ULONG Flags;                                     // offset: 0x34 ordinal: 0xa
  USHORT LoadCount;                                // offset: 0x38 ordinal: 0xb
  union __anon_2889 u1;                            // offset: 0x3a ordinal: 0xc
  VOID *SectionPointer;                            // offset: 0x3c ordinal: 0xd
  ULONG CheckSum;                                  // offset: 0x40 ordinal: 0xe
  ULONG CoverageSectionSize;                       // offset: 0x44 ordinal: 0xf
  VOID *CoverageSection;                           // offset: 0x48 ordinal: 0x10
  VOID *LoadedImports;                             // offset: 0x4c ordinal: 0x11
  VOID *Spare;                                     // offset: 0x50 ordinal: 0x12
  ULONG SizeOfImageNotRounded;                     // offset: 0x54 ordinal: 0x13
  ULONG TimeDateStamp;                             // offset: 0x58 ordinal: 0x14
} _KLDR_DATA_TABLE_ENTRY;

// 0x5c bytes (sizeof)
typedef struct _MI_SYSTEM_IMAGE_STATE {
  struct _LIST_ENTRY FixupList;                 // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK LoadLock;                // offset: 0x8 ordinal: 0x1
  struct _ETHREAD *LoadLockOwner;               // offset: 0xc ordinal: 0x2
  ULONG LoadLockCount;                          // offset: 0x10 ordinal: 0x3
  LONG FixupLock;                               // offset: 0x14 ordinal: 0x4
  UCHAR FirstLoadEver;                          // offset: 0x18 ordinal: 0x5
  UCHAR LargePageAll;                           // offset: 0x19 ordinal: 0x6
  ULONG LastPage;                               // offset: 0x1c ordinal: 0x7
  struct _LIST_ENTRY LargePageList;             // offset: 0x20 ordinal: 0x8
  struct _LIST_ENTRY StrongCodeLoadFailureList; // offset: 0x28 ordinal: 0x9
  struct _KLDR_DATA_TABLE_ENTRY *BeingDeleted;  // offset: 0x30 ordinal: 0xa
  struct _EX_PUSH_LOCK MappingRangesPushLock;   // offset: 0x34 ordinal: 0xb
  struct _MI_DRIVER_VA *MappingRanges[2];       // offset: 0x38 ordinal: 0xc
  ULONG PageCount;                              // offset: 0x40 ordinal: 0xd
  struct _MM_SYSTEM_PAGE_COUNTS PageCounts;     // offset: 0x44 ordinal: 0xe
  struct _EX_PUSH_LOCK CollidedLock;            // offset: 0x54 ordinal: 0xf
  struct _RTL_AVL_TREE ImageTree;               // offset: 0x58 ordinal: 0x10
} _MI_SYSTEM_IMAGE_STATE;

// 0x10 bytes (sizeof)
typedef struct _MI_ZERO_COST_COUNTS {
  ULONGLONG NativeSum; // offset: 0x0 ordinal: 0x0
  ULONGLONG CachedSum; // offset: 0x8 ordinal: 0x1
} _MI_ZERO_COST_COUNTS;

// 0x28 bytes (sizeof)
typedef struct _SECTION {
  struct _RTL_BALANCED_NODE SectionNode; // offset: 0x0 ordinal: 0x0
  ULONG StartingVpn;                     // offset: 0xc ordinal: 0x1
  ULONG EndingVpn;                       // offset: 0x10 ordinal: 0x2
  union __anon_2887 u1;                  // offset: 0x14 ordinal: 0x3
  ULONGLONG SizeOfSection;               // offset: 0x18 ordinal: 0x4
  union __anon_1475 u;                   // offset: 0x20 ordinal: 0x5
  ULONG InitialPageProtection : 12;      // offset: 0x24 ordinal: 0x6
  ULONG SessionId : 19;                  // offset: 0x24 ordinal: 0x7
  ULONG NoValidationNeeded : 1;          // offset: 0x24 ordinal: 0x8
} _SECTION;

// 0x20 bytes (sizeof)
typedef struct _MI_COMBINE_STATE {
  LONG ActiveSpinLock;                   // offset: 0x0 ordinal: 0x0
  ULONG CombiningThreadCount;            // offset: 0x4 ordinal: 0x1
  struct _RTL_AVL_TREE ActiveThreadTree; // offset: 0x8 ordinal: 0x2
  ULONGLONG CommonPageCombineDomain;     // offset: 0x10 ordinal: 0x3
  ULONG CommonCombineDomainAssigned;     // offset: 0x18 ordinal: 0x4
} _MI_COMBINE_STATE;

// 0x68 bytes (sizeof)
typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT {
  enum _BOOT_ENTROPY_SOURCE_ID SourceId;            // offset: 0x0 ordinal: 0x0
  ULONGLONG Policy;                                 // offset: 0x8 ordinal: 0x1
  enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode; // offset: 0x10 ordinal: 0x2
  LONG ResultStatus;                                // offset: 0x14 ordinal: 0x3
  ULONGLONG Time;                                   // offset: 0x18 ordinal: 0x4
  ULONG EntropyLength;                              // offset: 0x20 ordinal: 0x5
  UCHAR EntropyData[64];                            // offset: 0x24 ordinal: 0x6
} _BOOT_ENTROPY_SOURCE_LDR_RESULT;

// 0x868 bytes (sizeof)
typedef struct _BOOT_ENTROPY_LDR_RESULT {
  ULONG maxEntropySources; // offset: 0x0 ordinal: 0x0
  struct _BOOT_ENTROPY_SOURCE_LDR_RESULT
      EntropySourceResult[10];     // offset: 0x8 ordinal: 0x1
  UCHAR SeedBytesForCng[48];       // offset: 0x418 ordinal: 0x2
  UCHAR RngBytesForNtoskrnl[1024]; // offset: 0x448 ordinal: 0x3
  UCHAR KdEntropy[32];             // offset: 0x848 ordinal: 0x4
} _BOOT_ENTROPY_LDR_RESULT;

// 0x20 bytes (sizeof)
typedef struct _WHEA_RECOVERY_CONTEXT {
  union {
    struct __anon_2793 MemoryError; // offset: 0x0 ordinal: 0x0
    struct __anon_2794 PmemError;   // offset: 0x0 ordinal: 0x1
  };
  ULONGLONG PartitionId;                            // offset: 0x10 ordinal: 0x2
  ULONG VpIndex;                                    // offset: 0x18 ordinal: 0x3
  enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType; // offset: 0x1c ordinal: 0x4
} _WHEA_RECOVERY_CONTEXT;

typedef LONG (*__anon_2690)(struct _WHEA_RECOVERY_CONTEXT *, UCHAR, UCHAR);

// 0x8 bytes (sizeof)
typedef union __anon_2778 {
  struct __anon_2791 Component; // offset: 0x0 ordinal: 0x0
  ULONGLONG AsULONG64;          // offset: 0x0 ordinal: 0x1
  UCHAR AsBytes[8];             // offset: 0x0 ordinal: 0x2
} __anon_2778;

// 0x30 bytes (sizeof)
typedef struct _LOADER_RESET_REASON {
  UCHAR Supplied;          // offset: 0x0 ordinal: 0x0
  union __anon_2778 Basic; // offset: 0x8 ordinal: 0x1
  ULONG AdditionalInfo[8]; // offset: 0x10 ordinal: 0x2
} _LOADER_RESET_REASON;

// 0x18 bytes (sizeof)
typedef struct _SMBIOS3_TABLE_HEADER {
  UCHAR Signature[5];              // offset: 0x0 ordinal: 0x0
  UCHAR Checksum;                  // offset: 0x5 ordinal: 0x1
  UCHAR Length;                    // offset: 0x6 ordinal: 0x2
  UCHAR MajorVersion;              // offset: 0x7 ordinal: 0x3
  UCHAR MinorVersion;              // offset: 0x8 ordinal: 0x4
  UCHAR Docrev;                    // offset: 0x9 ordinal: 0x5
  UCHAR EntryPointRevision;        // offset: 0xa ordinal: 0x6
  UCHAR Reserved;                  // offset: 0xb ordinal: 0x7
  ULONG StructureTableMaximumSize; // offset: 0xc ordinal: 0x8
  ULONGLONG StructureTableAddress; // offset: 0x10 ordinal: 0x9
} _SMBIOS3_TABLE_HEADER;

// 0x40 bytes (sizeof)
typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION {
  ULONG InitialHypervisorCrashdumpAreaPageCount; // offset: 0x0 ordinal: 0x0
  ULONG HypervisorCrashdumpAreaPageCount;        // offset: 0x4 ordinal: 0x1
  ULONGLONG InitialHypervisorCrashdumpAreaSpa;   // offset: 0x8 ordinal: 0x2
  ULONGLONG HypervisorCrashdumpAreaSpa;          // offset: 0x10 ordinal: 0x3
  ULONGLONG HypervisorLaunchStatus;              // offset: 0x18 ordinal: 0x4
  ULONGLONG HypervisorLaunchStatusArg1;          // offset: 0x20 ordinal: 0x5
  ULONGLONG HypervisorLaunchStatusArg2;          // offset: 0x28 ordinal: 0x6
  ULONGLONG HypervisorLaunchStatusArg3;          // offset: 0x30 ordinal: 0x7
  ULONGLONG HypervisorLaunchStatusArg4;          // offset: 0x38 ordinal: 0x8
} _LOADER_PARAMETER_HYPERVISOR_EXTENSION;

// 0x60 bytes (sizeof)
typedef struct _LOADER_PERFORMANCE_DATA {
  ULONGLONG StartTime;                  // offset: 0x0 ordinal: 0x0
  ULONGLONG EndTime;                    // offset: 0x8 ordinal: 0x1
  ULONGLONG PreloadEndTime;             // offset: 0x10 ordinal: 0x2
  ULONGLONG TcbLoaderStartTime;         // offset: 0x18 ordinal: 0x3
  ULONGLONG LoadHypervisorTime;         // offset: 0x20 ordinal: 0x4
  ULONGLONG LaunchHypervisorTime;       // offset: 0x28 ordinal: 0x5
  ULONGLONG LoadVsmTime;                // offset: 0x30 ordinal: 0x6
  ULONGLONG LaunchVsmTime;              // offset: 0x38 ordinal: 0x7
  ULONGLONG ExecuteTransitionStartTime; // offset: 0x40 ordinal: 0x8
  ULONGLONG ExecuteTransitionEndTime;   // offset: 0x48 ordinal: 0x9
  ULONGLONG LoadDriversTime;            // offset: 0x50 ordinal: 0xa
  ULONGLONG CleanupVsmTime;             // offset: 0x58 ordinal: 0xb
} _LOADER_PERFORMANCE_DATA;

typedef LONG (*__anon_2733)(ULONG, ULONG, ULONGLONG, ULONGLONG);

typedef LONG (*__anon_2727)(struct _IOMMU_DMA_DOMAIN *, ULONGLONG, ULONGLONG);

typedef LONG (*__anon_2726)(struct _IOMMU_DMA_DOMAIN *, ULONG, struct _MDL *,
                            ULONGLONG);

// 0x38 bytes (sizeof)
typedef struct _DMA_IOMMU_INTERFACE {
  ULONG Version; // offset: 0x0 ordinal: 0x0
  LONG(*CreateDomain)
  (UCHAR, struct _IOMMU_DMA_DOMAIN **);             // offset: 0x4 ordinal: 0x1
  LONG (*DeleteDomain)(struct _IOMMU_DMA_DOMAIN *); // offset: 0x8 ordinal: 0x2
  LONG(*AttachDevice)
  (struct _IOMMU_DMA_DOMAIN *, struct _DEVICE_OBJECT *, ULONG,
   ULONG); // offset: 0xc ordinal: 0x3
  LONG(*DetachDevice)
  (struct _IOMMU_DMA_DOMAIN *, struct _DEVICE_OBJECT *,
   ULONG);                                         // offset: 0x10 ordinal: 0x4
  LONG (*FlushDomain)(struct _IOMMU_DMA_DOMAIN *); // offset: 0x14 ordinal: 0x5
  LONG(*FlushDomainByVaList)
  (struct _IOMMU_DMA_DOMAIN *, UCHAR, ULONG,
   VOID *); // offset: 0x18 ordinal: 0x6
  LONG(*QueryInputMappings)
  (struct _DEVICE_OBJECT *, struct _INPUT_MAPPING_ELEMENT *, ULONG,
   ULONG *); // offset: 0x1c ordinal: 0x7
  LONG(*MapLogicalRange)
  (struct _IOMMU_DMA_DOMAIN *, ULONG, struct _MDL *,
   ULONGLONG); // offset: 0x20 ordinal: 0x8
  LONG(*UnmapLogicalRange)
  (struct _IOMMU_DMA_DOMAIN *, ULONGLONG,
   ULONGLONG); // offset: 0x24 ordinal: 0x9
  LONG(*MapIdentityRange)
  (struct _IOMMU_DMA_DOMAIN *, ULONG,
   struct _MDL *); // offset: 0x28 ordinal: 0xa
  LONG(*UnmapIdentityRange)
  (struct _IOMMU_DMA_DOMAIN *, struct _MDL *); // offset: 0x2c ordinal: 0xb
  LONG(*SetDeviceFaultReporting)
  (struct _DEVICE_OBJECT *, ULONG, UCHAR,
   struct _DEVICE_FAULT_CONFIGURATION *); // offset: 0x30 ordinal: 0xc
  LONG(*ConfigureDomain)
  (struct _IOMMU_DMA_DOMAIN *,
   struct _DOMAIN_CONFIGURATION *); // offset: 0x34 ordinal: 0xd
} _DMA_IOMMU_INTERFACE;

typedef LONG (*__anon_2521)(ULONG, struct _DMA_IOMMU_INTERFACE *);

typedef LONG (*__anon_2696)(ULONG, ULONG, ULONGLONG);

typedef LONG (*__anon_2689)(ULONGLONG);

typedef LONG (*__anon_2685)(union _LARGE_INTEGER, ULONG, ULONGLONG, UCHAR,
                            VOID *);

typedef LONG (*__anon_2684)(ULONGLONG, VOID *, VOID *, struct _GROUP_AFFINITY *,
                            VOID *);

typedef LONG (*__anon_2683)(ULONGLONG, VOID *);

typedef LONG (*__anon_2682)(ULONGLONG, VOID *, struct _GROUP_AFFINITY *,
                            VOID *);

// 0x8 bytes (sizeof)
typedef struct _EXT_IOMMU_DEVICE_ID_TEST {
  ULONGLONG UniqueId; // offset: 0x0 ordinal: 0x0
} _EXT_IOMMU_DEVICE_ID_TEST;

// 0x10 bytes (sizeof)
typedef struct _EXT_IOMMU_DEVICE_ID_PCI {
  union {
    ULONGLONG AsUINT64;      // offset: 0x0 ordinal: 0x0
    USHORT PciSegmentNumber; // offset: 0x0 ordinal: 0x1
  };
  USHORT PhantomFunctionBits : 2; // offset: 0x2 ordinal: 0x2
  USHORT BusRange : 1;            // offset: 0x2 ordinal: 0x3
  USHORT DevicePathLength : 5;    // offset: 0x2 ordinal: 0x4
  USHORT StartBusNumber : 8;      // offset: 0x2 ordinal: 0x5
  union {
    USHORT Bdf;           // offset: 0x4 ordinal: 0x6
    UCHAR SubordinateBus; // offset: 0x4 ordinal: 0x7
  };
  UCHAR SecondaryBus; // offset: 0x5 ordinal: 0x8
  WCHAR *DevicePath;  // offset: 0x8 ordinal: 0x9
} _EXT_IOMMU_DEVICE_ID_PCI;

// 0x8 bytes (sizeof)
typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS {
  ULONGLONG ProcessorType : 1;      // offset: 0x0 ordinal: 0x0
  ULONGLONG InstructionSet : 1;     // offset: 0x0 ordinal: 0x1
  ULONGLONG ErrorType : 1;          // offset: 0x0 ordinal: 0x2
  ULONGLONG Operation : 1;          // offset: 0x0 ordinal: 0x3
  ULONGLONG Flags : 1;              // offset: 0x0 ordinal: 0x4
  ULONGLONG Level : 1;              // offset: 0x0 ordinal: 0x5
  ULONGLONG CPUVersion : 1;         // offset: 0x0 ordinal: 0x6
  ULONGLONG CPUBrandString : 1;     // offset: 0x0 ordinal: 0x7
  ULONGLONG ProcessorId : 1;        // offset: 0x0 ordinal: 0x8
  ULONGLONG TargetAddress : 1;      // offset: 0x0 ordinal: 0x9
  ULONGLONG RequesterId : 1;        // offset: 0x0 ordinal: 0xa
  ULONGLONG ResponderId : 1;        // offset: 0x0 ordinal: 0xb
  ULONGLONG InstructionPointer : 1; // offset: 0x0 ordinal: 0xc
  ULONGLONG Reserved : 51;          // offset: 0x0 ordinal: 0xd
  ULONGLONG ValidBits;              // offset: 0x0 ordinal: 0xe
} _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;

// 0x18 bytes (sizeof)
typedef struct _EXT_IOMMU_DEVICE_ID {
  enum _EXT_IOMMU_DEVICE_TYPE DeviceType; // offset: 0x0 ordinal: 0x0
  union {
    struct _EXT_IOMMU_DEVICE_ID_PCI Pci;   // offset: 0x8 ordinal: 0x1
    struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi; // offset: 0x8 ordinal: 0x2
    UCHAR IoApicId;                        // offset: 0x8 ordinal: 0x3
    ULONGLONG LogicalId;                   // offset: 0x8 ordinal: 0x4
    struct _EXT_IOMMU_DEVICE_ID_TEST Test; // offset: 0x8 ordinal: 0x5
    struct _EXT_IOMMU_DEVICE_ID_GIC Gic;   // offset: 0x8 ordinal: 0x6
  };
} _EXT_IOMMU_DEVICE_ID;

typedef LONG (*__anon_2714)(VOID *, struct _EXT_IOMMU_DEVICE_ID *,
                            union _IOMMU_SVM_CAPABILITIES *, VOID **);

// 0x4c bytes (sizeof)
typedef struct _HAL_IOMMU_DISPATCH {
  UCHAR (*HalIommuSupportEnabled)(); // offset: 0x0 ordinal: 0x0
  LONG(*HalIommuGetConfiguration)
  (ULONG, ULONG *, ULONG *, VOID **); // offset: 0x4 ordinal: 0x1
  LONG(*HalIommuGetLibraryContext)
  (ULONG, ULONG, VOID **); // offset: 0x8 ordinal: 0x2
  LONG(*HalIommuMapDevice)
  (VOID *, struct _EXT_IOMMU_DEVICE_ID *, union _IOMMU_SVM_CAPABILITIES *,
   VOID **); // offset: 0xc ordinal: 0x3
  LONG(*HalIommuEnableDevicePasid)
  (VOID *, VOID *);                               // offset: 0x10 ordinal: 0x4
  LONG (*HalIommuSetAddressSpace)(VOID *, ULONG); // offset: 0x14 ordinal: 0x5
  LONG(*HalIommuDisableDevicePasid)
  (VOID *, VOID *);                            // offset: 0x18 ordinal: 0x6
  LONG (*HalIommuUnmapDevice)(VOID *, VOID *); // offset: 0x1c ordinal: 0x7
  LONG (*HalIommuFreeLibraryContext)(VOID *);  // offset: 0x20 ordinal: 0x8
  VOID(*HalIommuFlushTb)
  (VOID *, ULONG, struct _KTB_FLUSH_VA *); // offset: 0x24 ordinal: 0x9
  VOID(*HalIommuFlushAllPasid)
  (VOID *, ULONG, struct _KTB_FLUSH_VA *);         // offset: 0x28 ordinal: 0xa
  UCHAR (*HalIommuProcessPageRequestQueue)(ULONG); // offset: 0x2c ordinal: 0xb
  VOID (*HalIommuFaultRoutine)(ULONG);             // offset: 0x30 ordinal: 0xc
  VOID *(*HalIommuReferenceAsid)(ULONG);           // offset: 0x34 ordinal: 0xd
  VOID (*HalIommuDereferenceAsid)(ULONG);          // offset: 0x38 ordinal: 0xe
  LONG(*HalIommuServicePageFault)
  (ULONG, VOID *, ULONG); // offset: 0x3c ordinal: 0xf
  LONG(*HalIommuDevicePowerChange)
  (VOID *, VOID *, UCHAR); // offset: 0x40 ordinal: 0x10
  LONG(*HalIommuBeginDeviceReset)
  (VOID *, ULONG *);                           // offset: 0x44 ordinal: 0x11
  LONG (*HalIommuFinalizeDeviceReset)(VOID *); // offset: 0x48 ordinal: 0x12
} _HAL_IOMMU_DISPATCH;

typedef VOID (*__anon_2506)(struct _HAL_IOMMU_DISPATCH *);

typedef LONG (*__anon_2704)(struct _EXT_IOMMU_DEVICE_ID *,
                            struct _HAL_HV_DMA_DOMAIN_INFO *);

typedef LONG (*__anon_2702)(struct _EXT_IOMMU_DEVICE_ID *, ULONGLONG);

typedef LONG (*__anon_2520)(struct _EXT_IOMMU_DEVICE_ID *, VOID **);

// 0x20 bytes (sizeof)
typedef struct _HAL_CLOCK_TIMER_CONFIGURATION {
  union {
    UCHAR Flags;             // offset: 0x0 ordinal: 0x0
    UCHAR AlwaysOnTimer : 1; // offset: 0x0 ordinal: 0x1
  };
  UCHAR HighLatency : 1;          // offset: 0x0 ordinal: 0x2
  UCHAR PerCpuTimer : 1;          // offset: 0x0 ordinal: 0x3
  UCHAR DynamicTickSupported : 1; // offset: 0x0 ordinal: 0x4
  ULONG KnownType;                // offset: 0x4 ordinal: 0x5
  ULONG Capabilities;             // offset: 0x8 ordinal: 0x6
  ULONGLONG MaxIncrement;         // offset: 0x10 ordinal: 0x7
  ULONG MinIncrement;             // offset: 0x18 ordinal: 0x8
} _HAL_CLOCK_TIMER_CONFIGURATION;

typedef VOID (*__anon_2502)(struct _HAL_CLOCK_TIMER_CONFIGURATION *);

// 0xc0 bytes (sizeof)
typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION {
  union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
      ValidBits;                // offset: 0x0 ordinal: 0x0
  UCHAR ProcessorType;          // offset: 0x8 ordinal: 0x1
  UCHAR InstructionSet;         // offset: 0x9 ordinal: 0x2
  UCHAR ErrorType;              // offset: 0xa ordinal: 0x3
  UCHAR Operation;              // offset: 0xb ordinal: 0x4
  UCHAR Flags;                  // offset: 0xc ordinal: 0x5
  UCHAR Level;                  // offset: 0xd ordinal: 0x6
  USHORT Reserved;              // offset: 0xe ordinal: 0x7
  ULONGLONG CPUVersion;         // offset: 0x10 ordinal: 0x8
  UCHAR CPUBrandString[128];    // offset: 0x18 ordinal: 0x9
  ULONGLONG ProcessorId;        // offset: 0x98 ordinal: 0xa
  ULONGLONG TargetAddress;      // offset: 0xa0 ordinal: 0xb
  ULONGLONG RequesterId;        // offset: 0xa8 ordinal: 0xc
  ULONGLONG ResponderId;        // offset: 0xb0 ordinal: 0xd
  ULONGLONG InstructionPointer; // offset: 0xb8 ordinal: 0xe
} _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;

typedef LONG (*__anon_2469)(struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *,
                            struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION *);

typedef LONG (*__anon_2525)(ULONG, ULONGLONG);

typedef ULONGLONG (*__anon_2515)();

typedef VOID *(*__anon_2475)(ULONGLONG, ULONG, ULONG);

typedef LONG (*__anon_2446)(ULONGLONG, ULONGLONG);

// 0x30 bytes (sizeof)
typedef struct _POOL_TRACKER_TABLE {
  LONG Key;                 // offset: 0x0 ordinal: 0x0
  ULONG NonPagedBytes;      // offset: 0x4 ordinal: 0x1
  ULONGLONG NonPagedAllocs; // offset: 0x8 ordinal: 0x2
  ULONGLONG NonPagedFrees;  // offset: 0x10 ordinal: 0x3
  ULONG PagedBytes;         // offset: 0x18 ordinal: 0x4
  ULONGLONG PagedAllocs;    // offset: 0x20 ordinal: 0x5
  ULONGLONG PagedFrees;     // offset: 0x28 ordinal: 0x6
} _POOL_TRACKER_TABLE;

// 0x8 bytes (sizeof)
typedef struct _WNF_STATE_NAME_STRUCT {
  ULONGLONG Version : 4;       // offset: 0x0 ordinal: 0x0
  ULONGLONG NameLifetime : 2;  // offset: 0x0 ordinal: 0x1
  ULONGLONG DataScope : 4;     // offset: 0x0 ordinal: 0x2
  ULONGLONG PermanentData : 1; // offset: 0x0 ordinal: 0x3
  ULONGLONG Sequence : 53;     // offset: 0x0 ordinal: 0x4
} _WNF_STATE_NAME_STRUCT;

// 0x1c bytes (sizeof)
typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
  UCHAR BankNumber;               // offset: 0x0 ordinal: 0x0
  UCHAR ClearOnInitialization;    // offset: 0x1 ordinal: 0x1
  UCHAR StatusDataFormat;         // offset: 0x2 ordinal: 0x2
  union _XPF_MC_BANK_FLAGS Flags; // offset: 0x3 ordinal: 0x3
  ULONG ControlMsr;               // offset: 0x4 ordinal: 0x4
  ULONG StatusMsr;                // offset: 0x8 ordinal: 0x5
  ULONG AddressMsr;               // offset: 0xc ordinal: 0x6
  ULONG MiscMsr;                  // offset: 0x10 ordinal: 0x7
  ULONGLONG ControlData;          // offset: 0x14 ordinal: 0x8
} _WHEA_XPF_MC_BANK_DESCRIPTOR;

// 0x3a4 bytes (sizeof)
typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
  USHORT Type;                                   // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                                 // offset: 0x2 ordinal: 0x1
  UCHAR NumberOfBanks;                           // offset: 0x3 ordinal: 0x2
  ULONG Reserved;                                // offset: 0x4 ordinal: 0x3
  struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;   // offset: 0x8 ordinal: 0x4
  struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32]; // offset: 0x24 ordinal: 0x5
} _WHEA_XPF_CMC_DESCRIPTOR;

// 0x50 bytes (sizeof)
typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
  USHORT Type;                                 // offset: 0x0 ordinal: 0x0
  UCHAR Reserved;                              // offset: 0x2 ordinal: 0x1
  UCHAR Enabled;                               // offset: 0x3 ordinal: 0x2
  ULONG ErrStatusBlockLength;                  // offset: 0x4 ordinal: 0x3
  ULONG RelatedErrorSourceId;                  // offset: 0x8 ordinal: 0x4
  UCHAR ErrStatusAddressSpaceID;               // offset: 0xc ordinal: 0x5
  UCHAR ErrStatusAddressBitWidth;              // offset: 0xd ordinal: 0x6
  UCHAR ErrStatusAddressBitOffset;             // offset: 0xe ordinal: 0x7
  UCHAR ErrStatusAddressAccessSize;            // offset: 0xf ordinal: 0x8
  union _LARGE_INTEGER ErrStatusAddress;       // offset: 0x10 ordinal: 0x9
  struct _WHEA_NOTIFICATION_DESCRIPTOR Notify; // offset: 0x18 ordinal: 0xa
  UCHAR ReadAckAddressSpaceID;                 // offset: 0x34 ordinal: 0xb
  UCHAR ReadAckAddressBitWidth;                // offset: 0x35 ordinal: 0xc
  UCHAR ReadAckAddressBitOffset;               // offset: 0x36 ordinal: 0xd
  UCHAR ReadAckAddressAccessSize;              // offset: 0x37 ordinal: 0xe
  union _LARGE_INTEGER ReadAckAddress;         // offset: 0x38 ordinal: 0xf
  ULONGLONG ReadAckPreserveMask;               // offset: 0x40 ordinal: 0x10
  ULONGLONG ReadAckWriteMask;                  // offset: 0x48 ordinal: 0x11
} _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;

// 0x398 bytes (sizeof)
typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
  USHORT Type;                                   // offset: 0x0 ordinal: 0x0
  UCHAR Enabled;                                 // offset: 0x2 ordinal: 0x1
  UCHAR NumberOfBanks;                           // offset: 0x3 ordinal: 0x2
  union _XPF_MCE_FLAGS Flags;                    // offset: 0x4 ordinal: 0x3
  ULONGLONG MCG_Capability;                      // offset: 0x8 ordinal: 0x4
  ULONGLONG MCG_GlobalControl;                   // offset: 0x10 ordinal: 0x5
  struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32]; // offset: 0x18 ordinal: 0x6
} _WHEA_XPF_MCE_DESCRIPTOR;

// 0x3a4 bytes (sizeof)
typedef union __anon_2245 {
  struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor; // offset: 0x0 ordinal: 0x0
  struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor; // offset: 0x0 ordinal: 0x1
  struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor; // offset: 0x0 ordinal: 0x2
  struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor; // offset: 0x0 ordinal: 0x3
  struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor; // offset: 0x0 ordinal: 0x4
  struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor; // offset: 0x0 ordinal: 0x5
  struct _WHEA_AER_ROOTPORT_DESCRIPTOR
      AerRootportDescriptor; // offset: 0x0 ordinal: 0x6
  struct _WHEA_AER_ENDPOINT_DESCRIPTOR
      AerEndpointDescriptor; // offset: 0x0 ordinal: 0x7
  struct _WHEA_AER_BRIDGE_DESCRIPTOR
      AerBridgeDescriptor; // offset: 0x0 ordinal: 0x8
  struct _WHEA_GENERIC_ERROR_DESCRIPTOR
      GenErrDescriptor; // offset: 0x0 ordinal: 0x9
  struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
      GenErrDescriptorV2; // offset: 0x0 ordinal: 0xa
  struct _WHEA_DEVICE_DRIVER_DESCRIPTOR
      DeviceDriverDescriptor; // offset: 0x0 ordinal: 0xb
} __anon_2245;

// 0x3cc bytes (sizeof)
typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
  ULONG Length;                        // offset: 0x0 ordinal: 0x0
  ULONG Version;                       // offset: 0x4 ordinal: 0x1
  enum _WHEA_ERROR_SOURCE_TYPE Type;   // offset: 0x8 ordinal: 0x2
  enum _WHEA_ERROR_SOURCE_STATE State; // offset: 0xc ordinal: 0x3
  ULONG MaxRawDataLength;              // offset: 0x10 ordinal: 0x4
  ULONG NumRecordsToPreallocate;       // offset: 0x14 ordinal: 0x5
  ULONG MaxSectionsPerRecord;          // offset: 0x18 ordinal: 0x6
  ULONG ErrorSourceId;                 // offset: 0x1c ordinal: 0x7
  ULONG PlatformErrorSourceId;         // offset: 0x20 ordinal: 0x8
  ULONG Flags;                         // offset: 0x24 ordinal: 0x9
  union __anon_2245 Info;              // offset: 0x28 ordinal: 0xa
} _WHEA_ERROR_SOURCE_DESCRIPTOR;

// 0x28 bytes (sizeof)
typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY {
  struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // offset: 0x0 ordinal: 0x0
  LONG ReferenceCount;                            // offset: 0xc ordinal: 0x1
  ULONGLONG Luid;                                 // offset: 0x10 ordinal: 0x2
  ULONGLONG IndexIntoGlobalSingletonTable;        // offset: 0x18 ordinal: 0x3
  UCHAR MarkedForDeletion;                        // offset: 0x20 ordinal: 0x4
} _SEP_LUID_TO_INDEX_MAP_ENTRY;

// 0x18 bytes (sizeof)
typedef struct _SEP_TOKEN_PRIVILEGES {
  ULONGLONG Present;          // offset: 0x0 ordinal: 0x0
  ULONGLONG Enabled;          // offset: 0x8 ordinal: 0x1
  ULONGLONG EnabledByDefault; // offset: 0x10 ordinal: 0x2
} _SEP_TOKEN_PRIVILEGES;

// 0x2a8 bytes (sizeof)
typedef struct _TOKEN {
  struct _TOKEN_SOURCE TokenSource;           // offset: 0x0 ordinal: 0x0
  struct _LUID TokenId;                       // offset: 0x10 ordinal: 0x1
  struct _LUID AuthenticationId;              // offset: 0x18 ordinal: 0x2
  struct _LUID ParentTokenId;                 // offset: 0x20 ordinal: 0x3
  union _LARGE_INTEGER ExpirationTime;        // offset: 0x28 ordinal: 0x4
  struct _ERESOURCE *TokenLock;               // offset: 0x30 ordinal: 0x5
  struct _LUID ModifiedId;                    // offset: 0x34 ordinal: 0x6
  struct _SEP_TOKEN_PRIVILEGES Privileges;    // offset: 0x40 ordinal: 0x7
  struct _SEP_AUDIT_POLICY AuditPolicy;       // offset: 0x58 ordinal: 0x8
  ULONG SessionId;                            // offset: 0x78 ordinal: 0x9
  ULONG UserAndGroupCount;                    // offset: 0x7c ordinal: 0xa
  ULONG RestrictedSidCount;                   // offset: 0x80 ordinal: 0xb
  ULONG VariableLength;                       // offset: 0x84 ordinal: 0xc
  ULONG DynamicCharged;                       // offset: 0x88 ordinal: 0xd
  ULONG DynamicAvailable;                     // offset: 0x8c ordinal: 0xe
  ULONG DefaultOwnerIndex;                    // offset: 0x90 ordinal: 0xf
  struct _SID_AND_ATTRIBUTES *UserAndGroups;  // offset: 0x94 ordinal: 0x10
  struct _SID_AND_ATTRIBUTES *RestrictedSids; // offset: 0x98 ordinal: 0x11
  VOID *PrimaryGroup;                         // offset: 0x9c ordinal: 0x12
  ULONG *DynamicPart;                         // offset: 0xa0 ordinal: 0x13
  struct _ACL *DefaultDacl;                   // offset: 0xa4 ordinal: 0x14
  enum _TOKEN_TYPE TokenType;                 // offset: 0xa8 ordinal: 0x15
  enum _SECURITY_IMPERSONATION_LEVEL
      ImpersonationLevel;    // offset: 0xac ordinal: 0x16
  ULONG TokenFlags;          // offset: 0xb0 ordinal: 0x17
  UCHAR TokenInUse;          // offset: 0xb4 ordinal: 0x18
  ULONG IntegrityLevelIndex; // offset: 0xb8 ordinal: 0x19
  ULONG MandatoryPolicy;     // offset: 0xbc ordinal: 0x1a
  struct _SEP_LOGON_SESSION_REFERENCES
      *LogonSession;                       // offset: 0xc0 ordinal: 0x1b
  struct _LUID OriginatingLogonSession;    // offset: 0xc4 ordinal: 0x1c
  struct _SID_AND_ATTRIBUTES_HASH SidHash; // offset: 0xcc ordinal: 0x1d
  struct _SID_AND_ATTRIBUTES_HASH
      RestrictedSidHash; // offset: 0x154 ordinal: 0x1e
  struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
      *pSecurityAttributes;                 // offset: 0x1dc ordinal: 0x1f
  VOID *Package;                            // offset: 0x1e0 ordinal: 0x20
  struct _SID_AND_ATTRIBUTES *Capabilities; // offset: 0x1e4 ordinal: 0x21
  ULONG CapabilityCount;                    // offset: 0x1e8 ordinal: 0x22
  struct _SID_AND_ATTRIBUTES_HASH
      CapabilitiesHash; // offset: 0x1ec ordinal: 0x23
  struct _SEP_LOWBOX_NUMBER_ENTRY
      *LowboxNumberEntry; // offset: 0x274 ordinal: 0x24
  struct _SEP_CACHED_HANDLES_ENTRY
      *LowboxHandlesEntry; // offset: 0x278 ordinal: 0x25
  struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
      *pClaimAttributes;                        // offset: 0x27c ordinal: 0x26
  VOID *TrustLevelSid;                          // offset: 0x280 ordinal: 0x27
  struct _TOKEN *TrustLinkedToken;              // offset: 0x284 ordinal: 0x28
  VOID *IntegrityLevelSidValue;                 // offset: 0x288 ordinal: 0x29
  struct _SEP_SID_VALUES_BLOCK *TokenSidValues; // offset: 0x28c ordinal: 0x2a
  struct _SEP_LUID_TO_INDEX_MAP_ENTRY
      *IndexEntry; // offset: 0x290 ordinal: 0x2b
  struct _SEP_TOKEN_DIAG_TRACK_ENTRY
      *DiagnosticInfo; // offset: 0x294 ordinal: 0x2c
  struct _SEP_CACHED_HANDLES_ENTRY
      *BnoIsolationHandlesEntry; // offset: 0x298 ordinal: 0x2d
  VOID *SessionObject;           // offset: 0x29c ordinal: 0x2e
  ULONG VariablePart;            // offset: 0x2a0 ordinal: 0x2f
} _TOKEN;

// 0x8 bytes (sizeof)
typedef union _FILE_SEGMENT_ELEMENT {
  VOID *Buffer;        // offset: 0x0 ordinal: 0x0
  ULONGLONG Alignment; // offset: 0x0 ordinal: 0x1
} _FILE_SEGMENT_ELEMENT;

// 0x10 bytes (sizeof)
typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS {
  ULONGLONG Tweak; // offset: 0x0 ordinal: 0x0
  struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
      *KeyDescriptor; // offset: 0x8 ordinal: 0x1
} _IO_ADAPTER_CRYPTO_PARAMETERS;

// 0x8 bytes (sizeof)
typedef union __anon_2164 {
  ULONGLONG Value;            // offset: 0x0 ordinal: 0x0
  ULONGLONG UserFlags : 32;   // offset: 0x0 ordinal: 0x1
  ULONGLONG SystemFlags : 16; // offset: 0x0 ordinal: 0x2
  ULONGLONG UserFlagsId : 16; // offset: 0x0 ordinal: 0x3
} __anon_2164;

// 0x38 bytes (sizeof)
typedef struct _IOP_IRP_EXTENSION {
  union {
    USHORT ExtensionFlags; // offset: 0x0 ordinal: 0x0
    USHORT Allocated : 1;  // offset: 0x0 ordinal: 0x1
  };
  USHORT PropagateId : 1;        // offset: 0x0 ordinal: 0x2
  USHORT SpareBits : 14;         // offset: 0x0 ordinal: 0x3
  USHORT TypesAllocated;         // offset: 0x2 ordinal: 0x4
  UCHAR GenericExtension[4];     // offset: 0x4 ordinal: 0x5
  VOID *VerifierContext;         // offset: 0x8 ordinal: 0x6
  ULONG DiskIoAttributionHandle; // offset: 0xc ordinal: 0x7
  struct _GUID ActivityId;       // offset: 0x10 ordinal: 0x8
  union {
    union _LARGE_INTEGER Timestamp; // offset: 0x20 ordinal: 0x9
    ULONG ZeroingOffset;            // offset: 0x20 ordinal: 0xa
    struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
        *FsTrackOffsetBlob; // offset: 0x20 ordinal: 0xb
  };
  LONGLONG FsTrackedOffset; // offset: 0x24 ordinal: 0xc
  struct _IO_ADAPTER_CRYPTO_PARAMETERS
      AdapterCryptoParameters;   // offset: 0x20 ordinal: 0xd
  union __anon_2164 DriverFlags; // offset: 0x30 ordinal: 0xe
} _IOP_IRP_EXTENSION;

// 0x8 bytes (sizeof)
typedef struct __anon_2129 {
  ULONGLONG Head : 24;              // offset: 0x0 ordinal: 0x0
  ULONGLONG Tail : 24;              // offset: 0x0 ordinal: 0x1
  ULONGLONG ActiveThreadCount : 16; // offset: 0x0 ordinal: 0x2
} __anon_2129;

// 0x8 bytes (sizeof)
typedef union __anon_2124 {
  struct __anon_2129 s1; // offset: 0x0 ordinal: 0x0
  LONGLONG Value;        // offset: 0x0 ordinal: 0x1
} __anon_2124;

// 0x8 bytes (sizeof)
typedef struct _ALPC_COMPLETION_LIST_STATE {
  union __anon_2124 u1; // offset: 0x0 ordinal: 0x0
} _ALPC_COMPLETION_LIST_STATE;

// 0x180 bytes (sizeof)
typedef struct _ALPC_COMPLETION_LIST_HEADER {
  ULONGLONG StartMagic;                     // offset: 0x0 ordinal: 0x0
  ULONG TotalSize;                          // offset: 0x8 ordinal: 0x1
  ULONG ListOffset;                         // offset: 0xc ordinal: 0x2
  ULONG ListSize;                           // offset: 0x10 ordinal: 0x3
  ULONG BitmapOffset;                       // offset: 0x14 ordinal: 0x4
  ULONG BitmapSize;                         // offset: 0x18 ordinal: 0x5
  ULONG DataOffset;                         // offset: 0x1c ordinal: 0x6
  ULONG DataSize;                           // offset: 0x20 ordinal: 0x7
  ULONG AttributeFlags;                     // offset: 0x24 ordinal: 0x8
  ULONG AttributeSize;                      // offset: 0x28 ordinal: 0x9
  struct _ALPC_COMPLETION_LIST_STATE State; // offset: 0x40 ordinal: 0xa
  ULONG LastMessageId;                      // offset: 0x48 ordinal: 0xb
  ULONG LastCallbackId;                     // offset: 0x4c ordinal: 0xc
  ULONG PostCount;                          // offset: 0x80 ordinal: 0xd
  ULONG ReturnCount;                        // offset: 0xc0 ordinal: 0xe
  ULONG LogSequenceNumber;                  // offset: 0x100 ordinal: 0xf
  struct _RTL_SRWLOCK UserLock;             // offset: 0x140 ordinal: 0x10
  ULONGLONG EndMagic;                       // offset: 0x148 ordinal: 0x11
} _ALPC_COMPLETION_LIST_HEADER;

// 0x8 bytes (sizeof)
typedef struct _HEAP_ENTRY_EXTRA {
  USHORT AllocatorBackTraceIndex; // offset: 0x0 ordinal: 0x0
  USHORT TagIndex;                // offset: 0x2 ordinal: 0x1
  ULONG Settable;                 // offset: 0x4 ordinal: 0x2
  ULONGLONG ZeroInit;             // offset: 0x0 ordinal: 0x3
} _HEAP_ENTRY_EXTRA;

// 0x8 bytes (sizeof)
typedef struct _HEAP_ENTRY {
  union {
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry; // offset: 0x0 ordinal: 0x0
    USHORT Size;                               // offset: 0x0 ordinal: 0x1
  };
  UCHAR Flags;          // offset: 0x2 ordinal: 0x2
  UCHAR SmallTagIndex;  // offset: 0x3 ordinal: 0x3
  ULONG SubSegmentCode; // offset: 0x0 ordinal: 0x4
  USHORT PreviousSize;  // offset: 0x4 ordinal: 0x5
  union {
    UCHAR SegmentOffset; // offset: 0x6 ordinal: 0x6
    UCHAR LFHFlags;      // offset: 0x6 ordinal: 0x7
  };
  UCHAR UnusedBytes; // offset: 0x7 ordinal: 0x8
  union {
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry; // offset: 0x0 ordinal: 0x9
    USHORT FunctionIndex;                      // offset: 0x0 ordinal: 0xa
  };
  USHORT ContextValue;          // offset: 0x2 ordinal: 0xb
  ULONG InterceptorValue;       // offset: 0x0 ordinal: 0xc
  USHORT UnusedBytesLength;     // offset: 0x4 ordinal: 0xd
  UCHAR EntryOffset;            // offset: 0x6 ordinal: 0xe
  UCHAR ExtendedBlockSignature; // offset: 0x7 ordinal: 0xf
  ULONG Code1;                  // offset: 0x0 ordinal: 0x10
  USHORT Code2;                 // offset: 0x4 ordinal: 0x11
  UCHAR Code3;                  // offset: 0x6 ordinal: 0x12
  UCHAR Code4;                  // offset: 0x7 ordinal: 0x13
  ULONG Code234;                // offset: 0x4 ordinal: 0x14
  ULONGLONG AgregateCode;       // offset: 0x0 ordinal: 0x15
} _HEAP_ENTRY;

// 0x10 bytes (sizeof)
typedef struct _HEAP_FREE_ENTRY {
  union {
    struct _HEAP_ENTRY HeapEntry;              // offset: 0x0 ordinal: 0x0
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry; // offset: 0x0 ordinal: 0x1
    USHORT Size;                               // offset: 0x0 ordinal: 0x2
  };
  UCHAR Flags;          // offset: 0x2 ordinal: 0x3
  UCHAR SmallTagIndex;  // offset: 0x3 ordinal: 0x4
  ULONG SubSegmentCode; // offset: 0x0 ordinal: 0x5
  USHORT PreviousSize;  // offset: 0x4 ordinal: 0x6
  union {
    UCHAR SegmentOffset; // offset: 0x6 ordinal: 0x7
    UCHAR LFHFlags;      // offset: 0x6 ordinal: 0x8
  };
  UCHAR UnusedBytes; // offset: 0x7 ordinal: 0x9
  union {
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry; // offset: 0x0 ordinal: 0xa
    USHORT FunctionIndex;                      // offset: 0x0 ordinal: 0xb
  };
  USHORT ContextValue;          // offset: 0x2 ordinal: 0xc
  ULONG InterceptorValue;       // offset: 0x0 ordinal: 0xd
  USHORT UnusedBytesLength;     // offset: 0x4 ordinal: 0xe
  UCHAR EntryOffset;            // offset: 0x6 ordinal: 0xf
  UCHAR ExtendedBlockSignature; // offset: 0x7 ordinal: 0x10
  ULONG Code1;                  // offset: 0x0 ordinal: 0x11
  USHORT Code2;                 // offset: 0x4 ordinal: 0x12
  UCHAR Code3;                  // offset: 0x6 ordinal: 0x13
  UCHAR Code4;                  // offset: 0x7 ordinal: 0x14
  ULONG Code234;                // offset: 0x4 ordinal: 0x15
  ULONGLONG AgregateCode;       // offset: 0x0 ordinal: 0x16
  struct _LIST_ENTRY FreeList;  // offset: 0x8 ordinal: 0x17
} _HEAP_FREE_ENTRY;

// 0x20 bytes (sizeof)
typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY {
  struct _LIST_ENTRY Entry;            // offset: 0x0 ordinal: 0x0
  struct _HEAP_ENTRY_EXTRA ExtraStuff; // offset: 0x8 ordinal: 0x1
  ULONG CommitSize;                    // offset: 0x10 ordinal: 0x2
  ULONG ReserveSize;                   // offset: 0x14 ordinal: 0x3
  struct _HEAP_ENTRY BusyBlock;        // offset: 0x18 ordinal: 0x4
} _HEAP_VIRTUAL_ALLOC_ENTRY;

// 0x40 bytes (sizeof)
typedef struct _HEAP_SEGMENT {
  struct _HEAP_ENTRY Entry;              // offset: 0x0 ordinal: 0x0
  ULONG SegmentSignature;                // offset: 0x8 ordinal: 0x1
  ULONG SegmentFlags;                    // offset: 0xc ordinal: 0x2
  struct _LIST_ENTRY SegmentListEntry;   // offset: 0x10 ordinal: 0x3
  struct _HEAP *Heap;                    // offset: 0x18 ordinal: 0x4
  VOID *BaseAddress;                     // offset: 0x1c ordinal: 0x5
  ULONG NumberOfPages;                   // offset: 0x20 ordinal: 0x6
  struct _HEAP_ENTRY *FirstEntry;        // offset: 0x24 ordinal: 0x7
  struct _HEAP_ENTRY *LastValidEntry;    // offset: 0x28 ordinal: 0x8
  ULONG NumberOfUnCommittedPages;        // offset: 0x2c ordinal: 0x9
  ULONG NumberOfUnCommittedRanges;       // offset: 0x30 ordinal: 0xa
  USHORT SegmentAllocatorBackTraceIndex; // offset: 0x34 ordinal: 0xb
  USHORT Reserved;                       // offset: 0x36 ordinal: 0xc
  struct _LIST_ENTRY UCRSegmentList;     // offset: 0x38 ordinal: 0xd
} _HEAP_SEGMENT;

// 0x258 bytes (sizeof)
typedef struct _HEAP {
  union {
    struct _HEAP_SEGMENT Segment; // offset: 0x0 ordinal: 0x0
    struct _HEAP_ENTRY Entry;     // offset: 0x0 ordinal: 0x1
  };
  ULONG SegmentSignature;                          // offset: 0x8 ordinal: 0x2
  ULONG SegmentFlags;                              // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY SegmentListEntry;             // offset: 0x10 ordinal: 0x4
  struct _HEAP *Heap;                              // offset: 0x18 ordinal: 0x5
  VOID *BaseAddress;                               // offset: 0x1c ordinal: 0x6
  ULONG NumberOfPages;                             // offset: 0x20 ordinal: 0x7
  struct _HEAP_ENTRY *FirstEntry;                  // offset: 0x24 ordinal: 0x8
  struct _HEAP_ENTRY *LastValidEntry;              // offset: 0x28 ordinal: 0x9
  ULONG NumberOfUnCommittedPages;                  // offset: 0x2c ordinal: 0xa
  ULONG NumberOfUnCommittedRanges;                 // offset: 0x30 ordinal: 0xb
  USHORT SegmentAllocatorBackTraceIndex;           // offset: 0x34 ordinal: 0xc
  USHORT Reserved;                                 // offset: 0x36 ordinal: 0xd
  struct _LIST_ENTRY UCRSegmentList;               // offset: 0x38 ordinal: 0xe
  ULONG Flags;                                     // offset: 0x40 ordinal: 0xf
  ULONG ForceFlags;                                // offset: 0x44 ordinal: 0x10
  ULONG CompatibilityFlags;                        // offset: 0x48 ordinal: 0x11
  ULONG EncodeFlagMask;                            // offset: 0x4c ordinal: 0x12
  struct _HEAP_ENTRY Encoding;                     // offset: 0x50 ordinal: 0x13
  ULONG Interceptor;                               // offset: 0x58 ordinal: 0x14
  ULONG VirtualMemoryThreshold;                    // offset: 0x5c ordinal: 0x15
  ULONG Signature;                                 // offset: 0x60 ordinal: 0x16
  ULONG SegmentReserve;                            // offset: 0x64 ordinal: 0x17
  ULONG SegmentCommit;                             // offset: 0x68 ordinal: 0x18
  ULONG DeCommitFreeBlockThreshold;                // offset: 0x6c ordinal: 0x19
  ULONG DeCommitTotalFreeThreshold;                // offset: 0x70 ordinal: 0x1a
  ULONG TotalFreeSize;                             // offset: 0x74 ordinal: 0x1b
  ULONG MaximumAllocationSize;                     // offset: 0x78 ordinal: 0x1c
  USHORT ProcessHeapsListIndex;                    // offset: 0x7c ordinal: 0x1d
  USHORT HeaderValidateLength;                     // offset: 0x7e ordinal: 0x1e
  VOID *HeaderValidateCopy;                        // offset: 0x80 ordinal: 0x1f
  USHORT NextAvailableTagIndex;                    // offset: 0x84 ordinal: 0x20
  USHORT MaximumTagIndex;                          // offset: 0x86 ordinal: 0x21
  struct _HEAP_TAG_ENTRY *TagEntries;              // offset: 0x88 ordinal: 0x22
  struct _LIST_ENTRY UCRList;                      // offset: 0x8c ordinal: 0x23
  ULONG AlignRound;                                // offset: 0x94 ordinal: 0x24
  ULONG AlignMask;                                 // offset: 0x98 ordinal: 0x25
  struct _LIST_ENTRY VirtualAllocdBlocks;          // offset: 0x9c ordinal: 0x26
  struct _LIST_ENTRY SegmentList;                  // offset: 0xa4 ordinal: 0x27
  USHORT AllocatorBackTraceIndex;                  // offset: 0xac ordinal: 0x28
  ULONG NonDedicatedListLength;                    // offset: 0xb0 ordinal: 0x29
  VOID *BlocksIndex;                               // offset: 0xb4 ordinal: 0x2a
  VOID *UCRIndex;                                  // offset: 0xb8 ordinal: 0x2b
  struct _HEAP_PSEUDO_TAG_ENTRY *PseudoTagEntries; // offset: 0xbc ordinal: 0x2c
  struct _LIST_ENTRY FreeLists;                    // offset: 0xc0 ordinal: 0x2d
  struct _HEAP_LOCK *LockVariable;                 // offset: 0xc8 ordinal: 0x2e
  LONG (*CommitRoutine)(VOID *, VOID **, ULONG *); // offset: 0xcc ordinal: 0x2f
  union _RTL_RUN_ONCE StackTraceInitVar;           // offset: 0xd0 ordinal: 0x30
  struct _RTL_HEAP_MEMORY_LIMIT_DATA
      CommitLimitData;                 // offset: 0xd4 ordinal: 0x31
  VOID *FrontEndHeap;                  // offset: 0xe4 ordinal: 0x32
  USHORT FrontHeapLockCount;           // offset: 0xe8 ordinal: 0x33
  UCHAR FrontEndHeapType;              // offset: 0xea ordinal: 0x34
  UCHAR RequestedFrontEndHeapType;     // offset: 0xeb ordinal: 0x35
  WCHAR *FrontEndHeapUsageData;        // offset: 0xec ordinal: 0x36
  USHORT FrontEndHeapMaximumIndex;     // offset: 0xf0 ordinal: 0x37
  UCHAR FrontEndHeapStatusBitmap[257]; // offset: 0xf2 ordinal: 0x38
  struct _HEAP_COUNTERS Counters;      // offset: 0x1f4 ordinal: 0x39
  struct _HEAP_TUNING_PARAMETERS
      TuningParameters; // offset: 0x250 ordinal: 0x3a
} _HEAP;

// 0x18 bytes (sizeof)
typedef struct _HEAP_VS_SUBSEGMENT {
  struct _LIST_ENTRY ListEntry; // offset: 0x0 ordinal: 0x0
  ULONGLONG CommitBitmap;       // offset: 0x8 ordinal: 0x1
  ULONG CommitLock;             // offset: 0x10 ordinal: 0x2
  USHORT Size;                  // offset: 0x14 ordinal: 0x3
  USHORT Signature : 15;        // offset: 0x16 ordinal: 0x4
  USHORT FullCommit : 1;        // offset: 0x16 ordinal: 0x5
} _HEAP_VS_SUBSEGMENT;

// 0x68 bytes (sizeof)
typedef struct _PRIVATE_CACHE_MAP {
  union {
    SHORT NodeTypeCode;                    // offset: 0x0 ordinal: 0x0
    struct _PRIVATE_CACHE_MAP_FLAGS Flags; // offset: 0x0 ordinal: 0x1
  };
  ULONG ReadAheadMask;                          // offset: 0x4 ordinal: 0x2
  struct _FILE_OBJECT *FileObject;              // offset: 0x8 ordinal: 0x3
  union _LARGE_INTEGER FileOffset1;             // offset: 0x10 ordinal: 0x4
  union _LARGE_INTEGER BeyondLastByte1;         // offset: 0x18 ordinal: 0x5
  union _LARGE_INTEGER FileOffset2;             // offset: 0x20 ordinal: 0x6
  union _LARGE_INTEGER BeyondLastByte2;         // offset: 0x28 ordinal: 0x7
  ULONG SequentialReadCount;                    // offset: 0x30 ordinal: 0x8
  ULONG ReadAheadLength;                        // offset: 0x34 ordinal: 0x9
  union _LARGE_INTEGER ReadAheadOffset;         // offset: 0x38 ordinal: 0xa
  union _LARGE_INTEGER ReadAheadBeyondLastByte; // offset: 0x40 ordinal: 0xb
  ULONGLONG PrevReadAheadBeyondLastByte;        // offset: 0x48 ordinal: 0xc
  ULONG ReadAheadSpinLock;                      // offset: 0x50 ordinal: 0xd
  ULONG PipelinedReadAheadRequestSize;          // offset: 0x54 ordinal: 0xe
  ULONG ReadAheadGrowth;                        // offset: 0x58 ordinal: 0xf
  struct _LIST_ENTRY PrivateLinks;              // offset: 0x5c ordinal: 0x10
  VOID *ReadAheadWorkItem;                      // offset: 0x64 ordinal: 0x11
} _PRIVATE_CACHE_MAP;

// 0x28 bytes (sizeof)
typedef struct _DIRTY_PAGE_THRESHOLDS {
  ULONG DirtyPageThreshold;          // offset: 0x0 ordinal: 0x0
  ULONG DirtyPageThresholdTop;       // offset: 0x4 ordinal: 0x1
  ULONG DirtyPageThresholdBottom;    // offset: 0x8 ordinal: 0x2
  ULONG DirtyPageTarget;             // offset: 0xc ordinal: 0x3
  ULONGLONG AggregateAvailablePages; // offset: 0x10 ordinal: 0x4
  ULONGLONG AggregateDirtyPages;     // offset: 0x18 ordinal: 0x5
  ULONG AvailableHistory;            // offset: 0x20 ordinal: 0x6
} _DIRTY_PAGE_THRESHOLDS;

// 0x68 bytes (sizeof)
typedef struct _LOG_HANDLE_CONTEXT {
  VOID *LogHandle; // offset: 0x0 ordinal: 0x0
  VOID(*FlushToLsnRoutine)
  (VOID *, union _LARGE_INTEGER); // offset: 0x4 ordinal: 0x1
  VOID(*QueryLogHandleInfoRoutine)
  (VOID *, WCHAR *);                                 // offset: 0x8 ordinal: 0x2
  struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics; // offset: 0xc ordinal: 0x3
  struct _DIRTY_PAGE_THRESHOLDS
      DirtyPageThresholds;                         // offset: 0x18 ordinal: 0x4
  ULONG AdditionalPagesToWrite;                    // offset: 0x40 ordinal: 0x5
  ULONG CcLWScanDPThreshold;                       // offset: 0x44 ordinal: 0x6
  union _LARGE_INTEGER LargestLsnForCurrentLWScan; // offset: 0x48 ordinal: 0x7
  struct _FILE_OBJECT *RelatedFileObject;          // offset: 0x50 ordinal: 0x8
  ULONG LargestLsnFileObjectKey;                   // offset: 0x54 ordinal: 0x9
  union _LARGE_INTEGER LastLWTimeStamp;            // offset: 0x58 ordinal: 0xa
  ULONG Flags;                                     // offset: 0x60 ordinal: 0xb
} _LOG_HANDLE_CONTEXT;

// 0x4 bytes (sizeof)
typedef struct _LOGGED_STREAM_CALLBACK_V2 {
  struct _LOG_HANDLE_CONTEXT *LogHandleContext; // offset: 0x0 ordinal: 0x0
} _LOGGED_STREAM_CALLBACK_V2;

// 0x90 bytes (sizeof)
typedef struct _VOLUME_CACHE_MAP {
  SHORT NodeTypeCode;                          // offset: 0x0 ordinal: 0x0
  SHORT NodeByteCode;                          // offset: 0x2 ordinal: 0x1
  ULONG UseCount;                              // offset: 0x4 ordinal: 0x2
  struct _DEVICE_OBJECT *DeviceObject;         // offset: 0x8 ordinal: 0x3
  struct _LIST_ENTRY VolumeCacheMapLinks;      // offset: 0xc ordinal: 0x4
  ULONG DirtyPages;                            // offset: 0x14 ordinal: 0x5
  struct _LOG_HANDLE_CONTEXT LogHandleContext; // offset: 0x18 ordinal: 0x6
  ULONG Flags;                                 // offset: 0x80 ordinal: 0x7
  ULONG PagesQueuedToDisk;                     // offset: 0x84 ordinal: 0x8
  ULONG LoggedPagesQueuedToDisk;               // offset: 0x88 ordinal: 0x9
} _VOLUME_CACHE_MAP;

// 0x8 bytes (sizeof)
typedef union _PPM_POLICY_SETTINGS_MASK {
  ULONGLONG Value;                               // offset: 0x0 ordinal: 0x0
  ULONG PerfDecreaseTime : 1;                    // offset: 0x0 ordinal: 0x1
  ULONG PerfIncreaseTime : 1;                    // offset: 0x0 ordinal: 0x2
  ULONG PerfDecreasePolicy : 1;                  // offset: 0x0 ordinal: 0x3
  ULONG PerfIncreasePolicy : 1;                  // offset: 0x0 ordinal: 0x4
  ULONG PerfDecreaseThreshold : 1;               // offset: 0x0 ordinal: 0x5
  ULONG PerfIncreaseThreshold : 1;               // offset: 0x0 ordinal: 0x6
  ULONG PerfMinPolicy : 1;                       // offset: 0x0 ordinal: 0x7
  ULONG PerfMaxPolicy : 1;                       // offset: 0x0 ordinal: 0x8
  ULONG PerfTimeCheck : 1;                       // offset: 0x0 ordinal: 0x9
  ULONG PerfBoostPolicy : 1;                     // offset: 0x0 ordinal: 0xa
  ULONG PerfBoostMode : 1;                       // offset: 0x0 ordinal: 0xb
  ULONG AllowThrottling : 1;                     // offset: 0x0 ordinal: 0xc
  ULONG PerfHistoryCount : 1;                    // offset: 0x0 ordinal: 0xd
  ULONG ParkingPerfState : 1;                    // offset: 0x0 ordinal: 0xe
  ULONG LatencyHintPerf : 1;                     // offset: 0x0 ordinal: 0xf
  ULONG LatencyHintUnpark : 1;                   // offset: 0x0 ordinal: 0x10
  ULONG CoreParkingMinCores : 1;                 // offset: 0x0 ordinal: 0x11
  ULONG CoreParkingMaxCores : 1;                 // offset: 0x0 ordinal: 0x12
  ULONG CoreParkingDecreasePolicy : 1;           // offset: 0x0 ordinal: 0x13
  ULONG CoreParkingIncreasePolicy : 1;           // offset: 0x0 ordinal: 0x14
  ULONG CoreParkingDecreaseTime : 1;             // offset: 0x0 ordinal: 0x15
  ULONG CoreParkingIncreaseTime : 1;             // offset: 0x0 ordinal: 0x16
  ULONG CoreParkingOverUtilizationThreshold : 1; // offset: 0x0 ordinal: 0x17
  ULONG CoreParkingDistributeUtility : 1;        // offset: 0x0 ordinal: 0x18
  ULONG CoreParkingConcurrencyThreshold : 1;     // offset: 0x0 ordinal: 0x19
  ULONG CoreParkingHeadroomThreshold : 1;        // offset: 0x0 ordinal: 0x1a
  ULONG CoreParkingDistributionThreshold : 1;    // offset: 0x0 ordinal: 0x1b
  ULONG IdleAllowScaling : 1;                    // offset: 0x0 ordinal: 0x1c
  ULONG IdleDisable : 1;                         // offset: 0x0 ordinal: 0x1d
  ULONG IdleTimeCheck : 1;                       // offset: 0x0 ordinal: 0x1e
  ULONG IdleDemoteThreshold : 1;                 // offset: 0x0 ordinal: 0x1f
  ULONG IdlePromoteThreshold : 1;                // offset: 0x0 ordinal: 0x20
  ULONG HeteroDecreaseTime : 1;                  // offset: 0x4 ordinal: 0x21
  ULONG HeteroIncreaseTime : 1;                  // offset: 0x4 ordinal: 0x22
  ULONG HeteroDecreaseThreshold : 1;             // offset: 0x4 ordinal: 0x23
  ULONG HeteroIncreaseThreshold : 1;             // offset: 0x4 ordinal: 0x24
  ULONG Class0FloorPerformance : 1;              // offset: 0x4 ordinal: 0x25
  ULONG Class1InitialPerformance : 1;            // offset: 0x4 ordinal: 0x26
  ULONG EnergyPerfPreference : 1;                // offset: 0x4 ordinal: 0x27
  ULONG AutonomousActivityWindow : 1;            // offset: 0x4 ordinal: 0x28
  ULONG AutonomousMode : 1;                      // offset: 0x4 ordinal: 0x29
  ULONG DutyCycling : 1;                         // offset: 0x4 ordinal: 0x2a
  ULONG FrequencyCap : 1;                        // offset: 0x4 ordinal: 0x2b
  ULONG ThreadPolicy : 1;                        // offset: 0x4 ordinal: 0x2c
  ULONG ShortThreadPolicy : 1;                   // offset: 0x4 ordinal: 0x2d
  ULONG IdleStateMax : 1;                        // offset: 0x4 ordinal: 0x2e
  ULONG ResponsivenessDisableThreshold : 1;      // offset: 0x4 ordinal: 0x2f
  ULONG ResponsivenessEnableThreshold : 1;       // offset: 0x4 ordinal: 0x30
  ULONG ResponsivenessDisableTime : 1;           // offset: 0x4 ordinal: 0x31
  ULONG ResponsivenessEnableTime : 1;            // offset: 0x4 ordinal: 0x32
  ULONG ResponsivenessEppCeiling : 1;            // offset: 0x4 ordinal: 0x33
  ULONG ResponsivenessPerfFloor : 1;             // offset: 0x4 ordinal: 0x34
  ULONG Spare : 12;                              // offset: 0x4 ordinal: 0x35
} _PPM_POLICY_SETTINGS_MASK;

// 0xe8 bytes (sizeof)
typedef struct _PPM_ENGINE_SETTINGS {
  union _PPM_POLICY_SETTINGS_MASK
      ExplicitSetting[2];                     // offset: 0x0 ordinal: 0x0
  UCHAR ThrottlingPolicy;                     // offset: 0x10 ordinal: 0x1
  ULONG PerfTimeCheck;                        // offset: 0x14 ordinal: 0x2
  UCHAR PerfHistoryCount[2];                  // offset: 0x18 ordinal: 0x3
  UCHAR PerfMinPolicy[2];                     // offset: 0x1a ordinal: 0x4
  UCHAR PerfMaxPolicy[2];                     // offset: 0x1c ordinal: 0x5
  UCHAR PerfDecreaseTime[2];                  // offset: 0x1e ordinal: 0x6
  UCHAR PerfIncreaseTime[2];                  // offset: 0x20 ordinal: 0x7
  UCHAR PerfDecreasePolicy[2];                // offset: 0x22 ordinal: 0x8
  UCHAR PerfIncreasePolicy[2];                // offset: 0x24 ordinal: 0x9
  UCHAR PerfDecreaseThreshold[2];             // offset: 0x26 ordinal: 0xa
  UCHAR PerfIncreaseThreshold[2];             // offset: 0x28 ordinal: 0xb
  ULONG PerfFrequencyCap[2];                  // offset: 0x2c ordinal: 0xc
  ULONG PerfBoostPolicy;                      // offset: 0x34 ordinal: 0xd
  ULONG PerfBoostMode;                        // offset: 0x38 ordinal: 0xe
  ULONG PerfReductionTolerance;               // offset: 0x3c ordinal: 0xf
  ULONG EnergyPerfPreference[2];              // offset: 0x40 ordinal: 0x10
  ULONG AutonomousActivityWindow;             // offset: 0x48 ordinal: 0x11
  UCHAR AutonomousPreference;                 // offset: 0x4c ordinal: 0x12
  UCHAR LatencyHintPerf[2];                   // offset: 0x4d ordinal: 0x13
  UCHAR LatencyHintUnpark[2];                 // offset: 0x4f ordinal: 0x14
  ULONG ResponsivenessDisableThreshold[2];    // offset: 0x54 ordinal: 0x15
  ULONG ResponsivenessEnableThreshold[2];     // offset: 0x5c ordinal: 0x16
  UCHAR ResponsivenessDisableTime[2];         // offset: 0x64 ordinal: 0x17
  UCHAR ResponsivenessEnableTime[2];          // offset: 0x66 ordinal: 0x18
  ULONG ResponsivenessEppCeiling[2];          // offset: 0x68 ordinal: 0x19
  ULONG ResponsivenessPerfFloor[2];           // offset: 0x70 ordinal: 0x1a
  UCHAR DutyCycling;                          // offset: 0x78 ordinal: 0x1b
  UCHAR ParkingPerfState[2];                  // offset: 0x79 ordinal: 0x1c
  UCHAR DistributeUtility;                    // offset: 0x7b ordinal: 0x1d
  UCHAR CoreParkingOverUtilizationThreshold;  // offset: 0x7c ordinal: 0x1e
  UCHAR CoreParkingConcurrencyThreshold;      // offset: 0x7d ordinal: 0x1f
  UCHAR CoreParkingHeadroomThreshold;         // offset: 0x7e ordinal: 0x20
  UCHAR CoreParkingDistributionThreshold;     // offset: 0x7f ordinal: 0x21
  UCHAR CoreParkingDecreasePolicy;            // offset: 0x80 ordinal: 0x22
  UCHAR CoreParkingIncreasePolicy;            // offset: 0x81 ordinal: 0x23
  ULONG CoreParkingDecreaseTime;              // offset: 0x84 ordinal: 0x24
  ULONG CoreParkingIncreaseTime;              // offset: 0x88 ordinal: 0x25
  UCHAR CoreParkingMinCores[2];               // offset: 0x8c ordinal: 0x26
  UCHAR CoreParkingMaxCores[2];               // offset: 0x8e ordinal: 0x27
  UCHAR AllowScaling;                         // offset: 0x90 ordinal: 0x28
  UCHAR IdleDisabled;                         // offset: 0x91 ordinal: 0x29
  ULONG IdleTimeCheck;                        // offset: 0x94 ordinal: 0x2a
  UCHAR IdleDemotePercent;                    // offset: 0x98 ordinal: 0x2b
  UCHAR IdlePromotePercent;                   // offset: 0x99 ordinal: 0x2c
  UCHAR IdleStateMax;                         // offset: 0x9a ordinal: 0x2d
  UCHAR HeteroDecreaseTime;                   // offset: 0x9b ordinal: 0x2e
  UCHAR HeteroIncreaseTime;                   // offset: 0x9c ordinal: 0x2f
  UCHAR HeteroDecreaseThreshold[32];          // offset: 0x9d ordinal: 0x30
  UCHAR HeteroIncreaseThreshold[32];          // offset: 0xbd ordinal: 0x31
  UCHAR Class0FloorPerformance;               // offset: 0xdd ordinal: 0x32
  UCHAR Class1InitialPerformance;             // offset: 0xde ordinal: 0x33
  enum _KHETERO_CPU_POLICY ThreadPolicies[2]; // offset: 0xe0 ordinal: 0x34
} _PPM_ENGINE_SETTINGS;

// 0x218 bytes (sizeof)
typedef struct _POP_PPM_PROFILE {
  WCHAR *Name;                             // offset: 0x0 ordinal: 0x0
  UCHAR Id;                                // offset: 0x4 ordinal: 0x1
  struct _GUID Guid;                       // offset: 0x8 ordinal: 0x2
  ULONG Flags;                             // offset: 0x18 ordinal: 0x3
  UCHAR Priority;                          // offset: 0x1c ordinal: 0x4
  struct _PPM_ENGINE_SETTINGS Settings[2]; // offset: 0x20 ordinal: 0x5
  ULONGLONG StartTime;                     // offset: 0x1f0 ordinal: 0x6
  ULONGLONG Count;                         // offset: 0x1f8 ordinal: 0x7
  ULONGLONG MaxDuration;                   // offset: 0x200 ordinal: 0x8
  ULONGLONG MinDuration;                   // offset: 0x208 ordinal: 0x9
  ULONGLONG TotalDuration;                 // offset: 0x210 ordinal: 0xa
} _POP_PPM_PROFILE;

// 0x10 bytes (sizeof)
typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY {
  ULONGLONG Residency;       // offset: 0x0 ordinal: 0x0
  ULONGLONG TransitionCount; // offset: 0x8 ordinal: 0x1
} _PROCESSOR_PLATFORM_STATE_RESIDENCY;

// 0x18 bytes (sizeof)
typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES {
  ULONG Count; // offset: 0x0 ordinal: 0x0
  struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
      States[1]; // offset: 0x8 ordinal: 0x1
} _PROCESSOR_PLATFORM_STATE_RESIDENCIES;

typedef LONG (*__anon_1879)(VOID *,
                            struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES *);

// 0x48 bytes (sizeof)
typedef struct _PEP_ACPI_EXTENDED_ADDRESS {
  enum _PEP_ACPI_RESOURCE_TYPE Type;      // offset: 0x0 ordinal: 0x0
  union _PEP_ACPI_RESOURCE_FLAGS Flags;   // offset: 0x4 ordinal: 0x1
  UCHAR ResourceFlags;                    // offset: 0x8 ordinal: 0x2
  UCHAR GeneralFlags;                     // offset: 0x9 ordinal: 0x3
  UCHAR TypeSpecificFlags;                // offset: 0xa ordinal: 0x4
  UCHAR RevisionId;                       // offset: 0xb ordinal: 0x5
  UCHAR Reserved;                         // offset: 0xc ordinal: 0x6
  ULONGLONG Granularity;                  // offset: 0x10 ordinal: 0x7
  ULONGLONG MinimumAddress;               // offset: 0x18 ordinal: 0x8
  ULONGLONG MaximumAddress;               // offset: 0x20 ordinal: 0x9
  ULONGLONG TranslationAddress;           // offset: 0x28 ordinal: 0xa
  ULONGLONG AddressLength;                // offset: 0x30 ordinal: 0xb
  ULONGLONG TypeAttribute;                // offset: 0x38 ordinal: 0xc
  struct _UNICODE_STRING *DescriptorName; // offset: 0x40 ordinal: 0xd
} _PEP_ACPI_EXTENDED_ADDRESS;

// 0x48 bytes (sizeof)
typedef union _PEP_ACPI_RESOURCE {
  enum _PEP_ACPI_RESOURCE_TYPE Type;                 // offset: 0x0 ordinal: 0x0
  struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;      // offset: 0x0 ordinal: 0x1
  struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;     // offset: 0x0 ordinal: 0x2
  struct _PEP_ACPI_GPIO_RESOURCE Gpio;               // offset: 0x0 ordinal: 0x3
  struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;          // offset: 0x0 ordinal: 0x4
  struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;          // offset: 0x0 ordinal: 0x5
  struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;        // offset: 0x0 ordinal: 0x6
  struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress; // offset: 0x0 ordinal: 0x7
} _PEP_ACPI_RESOURCE;

// 0x10 bytes (sizeof)
typedef struct _DEVICE_DATA_SET_RANGE {
  LONGLONG StartingOffset; // offset: 0x0 ordinal: 0x0
  ULONGLONG LengthInBytes; // offset: 0x8 ordinal: 0x1
} _DEVICE_DATA_SET_RANGE;

// 0x18 bytes (sizeof)
typedef struct _ARM64_DBGKD_CONTROL_SET {
  ULONG Continue;               // offset: 0x0 ordinal: 0x0
  ULONG TraceFlag;              // offset: 0x4 ordinal: 0x1
  ULONGLONG CurrentSymbolStart; // offset: 0x8 ordinal: 0x2
  ULONGLONG CurrentSymbolEnd;   // offset: 0x10 ordinal: 0x3
} _ARM64_DBGKD_CONTROL_SET;

// 0x1c bytes (sizeof)
typedef struct _AMD64_DBGKD_CONTROL_SET {
  ULONG TraceFlag;              // offset: 0x0 ordinal: 0x0
  ULONGLONG Dr7;                // offset: 0x4 ordinal: 0x1
  ULONGLONG CurrentSymbolStart; // offset: 0xc ordinal: 0x2
  ULONGLONG CurrentSymbolEnd;   // offset: 0x14 ordinal: 0x3
} _AMD64_DBGKD_CONTROL_SET;

// 0x14 bytes (sizeof)
typedef struct _IA64_DBGKD_CONTROL_SET {
  ULONG Continue;               // offset: 0x0 ordinal: 0x0
  ULONGLONG CurrentSymbolStart; // offset: 0x4 ordinal: 0x1
  ULONGLONG CurrentSymbolEnd;   // offset: 0xc ordinal: 0x2
} _IA64_DBGKD_CONTROL_SET;

// 0x1c bytes (sizeof)
typedef struct _DBGKD_ANY_CONTROL_SET {
  union {
    struct _X86_DBGKD_CONTROL_SET X86ControlSet;     // offset: 0x0 ordinal: 0x0
    ULONG AlphaControlSet;                           // offset: 0x0 ordinal: 0x1
    struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;   // offset: 0x0 ordinal: 0x2
    struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet; // offset: 0x0 ordinal: 0x3
    struct _ARM_DBGKD_CONTROL_SET ArmControlSet;     // offset: 0x0 ordinal: 0x4
    struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet; // offset: 0x0 ordinal: 0x5
    struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet; // offset: 0x0 ordinal: 0x6
    struct _PPC_DBGKD_CONTROL_SET PpcControlSet;     // offset: 0x0 ordinal: 0x7
  };
} _DBGKD_ANY_CONTROL_SET;

// 0x20 bytes (sizeof)
typedef struct _DBGKD_CONTINUE2 {
  LONG ContinueStatus; // offset: 0x0 ordinal: 0x0
  union {
    struct _X86_DBGKD_CONTROL_SET ControlSet;    // offset: 0x4 ordinal: 0x1
    struct _DBGKD_ANY_CONTROL_SET AnyControlSet; // offset: 0x4 ordinal: 0x2
  };
} _DBGKD_CONTINUE2;

// 0x18 bytes (sizeof)
typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT {
  ULONGLONG BreakPointAddress;          // offset: 0x0 ordinal: 0x0
  ULONGLONG BreakPointInstruction;      // offset: 0x8 ordinal: 0x1
  ULONG BreakPointHandle;               // offset: 0x10 ordinal: 0x2
  UCHAR BreakPointInstructionSize;      // offset: 0x14 ordinal: 0x3
  UCHAR BreakPointInstructionAlignment; // offset: 0x15 ordinal: 0x4
} _DBGKD_WRITE_CUSTOM_BREAKPOINT;

// 0x18 bytes (sizeof)
typedef struct _DBGKD_QUERY_MEMORY {
  ULONGLONG Address;  // offset: 0x0 ordinal: 0x0
  ULONGLONG Reserved; // offset: 0x8 ordinal: 0x1
  ULONG AddressSpace; // offset: 0x10 ordinal: 0x2
  ULONG Flags;        // offset: 0x14 ordinal: 0x3
} _DBGKD_QUERY_MEMORY;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_FILL_MEMORY {
  ULONGLONG Address;    // offset: 0x0 ordinal: 0x0
  ULONG Length;         // offset: 0x8 ordinal: 0x1
  USHORT Flags;         // offset: 0xc ordinal: 0x2
  USHORT PatternLength; // offset: 0xe ordinal: 0x3
} _DBGKD_FILL_MEMORY;

// 0x18 bytes (sizeof)
typedef struct _DBGKD_SEARCH_MEMORY {
  union {
    ULONGLONG SearchAddress; // offset: 0x0 ordinal: 0x0
    ULONGLONG FoundAddress;  // offset: 0x0 ordinal: 0x1
  };
  ULONGLONG SearchLength; // offset: 0x8 ordinal: 0x2
  ULONG PatternLength;    // offset: 0x10 ordinal: 0x3
} _DBGKD_SEARCH_MEMORY;

// 0x28 bytes (sizeof)
typedef struct _DBGKD_GET_VERSION64 {
  USHORT MajorVersion;          // offset: 0x0 ordinal: 0x0
  USHORT MinorVersion;          // offset: 0x2 ordinal: 0x1
  UCHAR ProtocolVersion;        // offset: 0x4 ordinal: 0x2
  UCHAR KdSecondaryVersion;     // offset: 0x5 ordinal: 0x3
  USHORT Flags;                 // offset: 0x6 ordinal: 0x4
  USHORT MachineType;           // offset: 0x8 ordinal: 0x5
  UCHAR MaxPacketType;          // offset: 0xa ordinal: 0x6
  UCHAR MaxStateChange;         // offset: 0xb ordinal: 0x7
  UCHAR MaxManipulate;          // offset: 0xc ordinal: 0x8
  UCHAR Simulation;             // offset: 0xd ordinal: 0x9
  USHORT Unused[1];             // offset: 0xe ordinal: 0xa
  ULONGLONG KernBase;           // offset: 0x10 ordinal: 0xb
  ULONGLONG PsLoadedModuleList; // offset: 0x18 ordinal: 0xc
  ULONGLONG DebuggerDataList;   // offset: 0x20 ordinal: 0xd
} _DBGKD_GET_VERSION64;

// 0x20 bytes (sizeof)
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64 {
  ULONGLONG BreakpointAddress; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                 // offset: 0x8 ordinal: 0x1
  ULONG Calls;                 // offset: 0xc ordinal: 0x2
  ULONG MaxCallsPerPeriod;     // offset: 0x10 ordinal: 0x3
  ULONG MinInstructions;       // offset: 0x14 ordinal: 0x4
  ULONG MaxInstructions;       // offset: 0x18 ordinal: 0x5
  ULONG TotalInstructions;     // offset: 0x1c ordinal: 0x6
} _DBGKD_GET_INTERNAL_BREAKPOINT64;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64 {
  ULONGLONG BreakpointAddress; // offset: 0x0 ordinal: 0x0
  ULONG Flags;                 // offset: 0x8 ordinal: 0x1
} _DBGKD_SET_INTERNAL_BREAKPOINT64;

// 0x8 bytes (sizeof)
typedef struct _DBGKD_SET_SPECIAL_CALL64 {
  ULONGLONG SpecialCall; // offset: 0x0 ordinal: 0x0
} _DBGKD_SET_SPECIAL_CALL64;

// 0x20 bytes (sizeof)
typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64 {
  ULONG DataSize;      // offset: 0x0 ordinal: 0x0
  ULONG InterfaceType; // offset: 0x4 ordinal: 0x1
  ULONG BusNumber;     // offset: 0x8 ordinal: 0x2
  ULONG AddressSpace;  // offset: 0xc ordinal: 0x3
  ULONGLONG IoAddress; // offset: 0x10 ordinal: 0x4
  ULONG DataValue;     // offset: 0x18 ordinal: 0x5
} _DBGKD_READ_WRITE_IO_EXTENDED64;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_READ_WRITE_IO64 {
  ULONGLONG IoAddress; // offset: 0x0 ordinal: 0x0
  ULONG DataSize;      // offset: 0x8 ordinal: 0x1
  ULONG DataValue;     // offset: 0xc ordinal: 0x2
} _DBGKD_READ_WRITE_IO64;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_WRITE_BREAKPOINT64 {
  ULONGLONG BreakPointAddress; // offset: 0x0 ordinal: 0x0
  ULONG BreakPointHandle;      // offset: 0x8 ordinal: 0x1
} _DBGKD_WRITE_BREAKPOINT64;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_WRITE_MEMORY64 {
  ULONGLONG TargetBaseAddress; // offset: 0x0 ordinal: 0x0
  ULONG TransferCount;         // offset: 0x8 ordinal: 0x1
  ULONG ActualBytesWritten;    // offset: 0xc ordinal: 0x2
} _DBGKD_WRITE_MEMORY64;

// 0x10 bytes (sizeof)
typedef struct _DBGKD_READ_MEMORY64 {
  ULONGLONG TargetBaseAddress; // offset: 0x0 ordinal: 0x0
  ULONG TransferCount;         // offset: 0x8 ordinal: 0x1
  ULONG ActualBytesRead;       // offset: 0xc ordinal: 0x2
} _DBGKD_READ_MEMORY64;

// 0x28 bytes (sizeof)
typedef union __anon_1855 {
  struct _DBGKD_READ_MEMORY32 ReadMemory;           // offset: 0x0 ordinal: 0x0
  struct _DBGKD_WRITE_MEMORY32 WriteMemory;         // offset: 0x0 ordinal: 0x1
  struct _DBGKD_READ_MEMORY64 ReadMemory64;         // offset: 0x0 ordinal: 0x2
  struct _DBGKD_WRITE_MEMORY64 WriteMemory64;       // offset: 0x0 ordinal: 0x3
  struct _DBGKD_GET_CONTEXT GetContext;             // offset: 0x0 ordinal: 0x4
  struct _DBGKD_SET_CONTEXT SetContext;             // offset: 0x0 ordinal: 0x5
  struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint; // offset: 0x0 ordinal: 0x6
  struct _DBGKD_RESTORE_BREAKPOINT
      RestoreBreakPoint;                     // offset: 0x0 ordinal: 0x7
  struct _DBGKD_CONTINUE Continue;           // offset: 0x0 ordinal: 0x8
  struct _DBGKD_CONTINUE2 Continue2;         // offset: 0x0 ordinal: 0x9
  struct _DBGKD_READ_WRITE_IO32 ReadWriteIo; // offset: 0x0 ordinal: 0xa
  struct _DBGKD_READ_WRITE_IO_EXTENDED32
      ReadWriteIoExtended; // offset: 0x0 ordinal: 0xb
  struct _DBGKD_QUERY_SPECIAL_CALLS
      QuerySpecialCalls;                           // offset: 0x0 ordinal: 0xc
  struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall; // offset: 0x0 ordinal: 0xd
  struct _DBGKD_SET_INTERNAL_BREAKPOINT32
      SetInternalBreakpoint; // offset: 0x0 ordinal: 0xe
  struct _DBGKD_GET_INTERNAL_BREAKPOINT32
      GetInternalBreakpoint;                 // offset: 0x0 ordinal: 0xf
  struct _DBGKD_GET_VERSION32 GetVersion32;  // offset: 0x0 ordinal: 0x10
  struct _DBGKD_BREAKPOINTEX BreakPointEx;   // offset: 0x0 ordinal: 0x11
  struct _DBGKD_READ_WRITE_MSR ReadWriteMsr; // offset: 0x0 ordinal: 0x12
  struct _DBGKD_SEARCH_MEMORY SearchMemory;  // offset: 0x0 ordinal: 0x13
  struct _DBGKD_CONTEXT_EX GetContextEx;     // offset: 0x0 ordinal: 0x14
  struct _DBGKD_CONTEXT_EX SetContextEx;     // offset: 0x0 ordinal: 0x15
} __anon_1855;

// 0x34 bytes (sizeof)
typedef struct _DBGKD_MANIPULATE_STATE32 {
  ULONG ApiNumber;       // offset: 0x0 ordinal: 0x0
  USHORT ProcessorLevel; // offset: 0x4 ordinal: 0x1
  USHORT Processor;      // offset: 0x6 ordinal: 0x2
  LONG ReturnStatus;     // offset: 0x8 ordinal: 0x3
  union __anon_1855 u;   // offset: 0xc ordinal: 0x4
} _DBGKD_MANIPULATE_STATE32;

// 0x28 bytes (sizeof)
typedef union __anon_1829 {
  struct _DBGKD_READ_MEMORY64 ReadMemory;           // offset: 0x0 ordinal: 0x0
  struct _DBGKD_WRITE_MEMORY64 WriteMemory;         // offset: 0x0 ordinal: 0x1
  struct _DBGKD_GET_CONTEXT GetContext;             // offset: 0x0 ordinal: 0x2
  struct _DBGKD_SET_CONTEXT SetContext;             // offset: 0x0 ordinal: 0x3
  struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint; // offset: 0x0 ordinal: 0x4
  struct _DBGKD_RESTORE_BREAKPOINT
      RestoreBreakPoint;                     // offset: 0x0 ordinal: 0x5
  struct _DBGKD_CONTINUE Continue;           // offset: 0x0 ordinal: 0x6
  struct _DBGKD_CONTINUE2 Continue2;         // offset: 0x0 ordinal: 0x7
  struct _DBGKD_READ_WRITE_IO64 ReadWriteIo; // offset: 0x0 ordinal: 0x8
  struct _DBGKD_READ_WRITE_IO_EXTENDED64
      ReadWriteIoExtended; // offset: 0x0 ordinal: 0x9
  struct _DBGKD_QUERY_SPECIAL_CALLS
      QuerySpecialCalls;                           // offset: 0x0 ordinal: 0xa
  struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall; // offset: 0x0 ordinal: 0xb
  struct _DBGKD_SET_INTERNAL_BREAKPOINT64
      SetInternalBreakpoint; // offset: 0x0 ordinal: 0xc
  struct _DBGKD_GET_INTERNAL_BREAKPOINT64
      GetInternalBreakpoint;                      // offset: 0x0 ordinal: 0xd
  struct _DBGKD_GET_VERSION64 GetVersion64;       // offset: 0x0 ordinal: 0xe
  struct _DBGKD_BREAKPOINTEX BreakPointEx;        // offset: 0x0 ordinal: 0xf
  struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;      // offset: 0x0 ordinal: 0x10
  struct _DBGKD_SEARCH_MEMORY SearchMemory;       // offset: 0x0 ordinal: 0x11
  struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;   // offset: 0x0 ordinal: 0x12
  struct _DBGKD_FILL_MEMORY FillMemory;           // offset: 0x0 ordinal: 0x13
  struct _DBGKD_QUERY_MEMORY QueryMemory;         // offset: 0x0 ordinal: 0x14
  struct _DBGKD_SWITCH_PARTITION SwitchPartition; // offset: 0x0 ordinal: 0x15
  struct _DBGKD_CONTEXT_EX GetContextEx;          // offset: 0x0 ordinal: 0x16
  struct _DBGKD_CONTEXT_EX SetContextEx;          // offset: 0x0 ordinal: 0x17
  struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
      WriteCustomBreakPoint; // offset: 0x0 ordinal: 0x18
} __anon_1829;

// 0x38 bytes (sizeof)
typedef struct _DBGKD_MANIPULATE_STATE64 {
  ULONG ApiNumber;       // offset: 0x0 ordinal: 0x0
  USHORT ProcessorLevel; // offset: 0x4 ordinal: 0x1
  USHORT Processor;      // offset: 0x6 ordinal: 0x2
  LONG ReturnStatus;     // offset: 0x8 ordinal: 0x3
  union __anon_1829 u;   // offset: 0x10 ordinal: 0x4
} _DBGKD_MANIPULATE_STATE64;

// 0x28 bytes (sizeof)
typedef struct _DBGKD_LOAD_SYMBOLS64 {
  ULONG PathNameLength; // offset: 0x0 ordinal: 0x0
  ULONGLONG BaseOfDll;  // offset: 0x8 ordinal: 0x1
  ULONGLONG ProcessId;  // offset: 0x10 ordinal: 0x2
  ULONG CheckSum;       // offset: 0x18 ordinal: 0x3
  ULONG SizeOfImage;    // offset: 0x1c ordinal: 0x4
  UCHAR UnloadSymbols;  // offset: 0x20 ordinal: 0x5
} _DBGKD_LOAD_SYMBOLS64;

// 0x98 bytes (sizeof)
typedef struct _EXCEPTION_RECORD64 {
  LONG ExceptionCode;                 // offset: 0x0 ordinal: 0x0
  ULONG ExceptionFlags;               // offset: 0x4 ordinal: 0x1
  ULONGLONG ExceptionRecord;          // offset: 0x8 ordinal: 0x2
  ULONGLONG ExceptionAddress;         // offset: 0x10 ordinal: 0x3
  ULONG NumberParameters;             // offset: 0x18 ordinal: 0x4
  ULONG __unusedAlignment;            // offset: 0x1c ordinal: 0x5
  ULONGLONG ExceptionInformation[15]; // offset: 0x20 ordinal: 0x6
} _EXCEPTION_RECORD64;

// 0xa0 bytes (sizeof)
typedef struct _DBGKM_EXCEPTION64 {
  struct _EXCEPTION_RECORD64 ExceptionRecord; // offset: 0x0 ordinal: 0x0
  ULONG FirstChance;                          // offset: 0x98 ordinal: 0x1
} _DBGKM_EXCEPTION64;

// 0x38 bytes (sizeof)
typedef struct _MCGEN_TRACE_CONTEXT {
  ULONGLONG RegistrationHandle; // offset: 0x0 ordinal: 0x0
  ULONGLONG Logger;             // offset: 0x8 ordinal: 0x1
  ULONGLONG MatchAnyKeyword;    // offset: 0x10 ordinal: 0x2
  ULONGLONG MatchAllKeyword;    // offset: 0x18 ordinal: 0x3
  ULONG Flags;                  // offset: 0x20 ordinal: 0x4
  ULONG IsEnabled;              // offset: 0x24 ordinal: 0x5
  UCHAR Level;                  // offset: 0x28 ordinal: 0x6
  UCHAR Reserve;                // offset: 0x29 ordinal: 0x7
  USHORT EnableBitsCount;       // offset: 0x2a ordinal: 0x8
  ULONG *EnableBitMask;         // offset: 0x2c ordinal: 0x9
  ULONGLONG *EnableKeyWords;    // offset: 0x30 ordinal: 0xa
  UCHAR *EnableLevel;           // offset: 0x34 ordinal: 0xb
} _MCGEN_TRACE_CONTEXT;

// 0x8 bytes (sizeof)
typedef union _ULARGE_INTEGER {
  ULONG LowPart;      // offset: 0x0 ordinal: 0x0
  ULONG HighPart;     // offset: 0x4 ordinal: 0x1
  struct __anon_36 u; // offset: 0x0 ordinal: 0x2
  ULONGLONG QuadPart; // offset: 0x0 ordinal: 0x3
} _ULARGE_INTEGER;

// 0x8 bytes (sizeof)
typedef union _HV_PARTITION_PRIVILEGE_MASK {
  ULONGLONG AsUINT64;                            // offset: 0x0 ordinal: 0x0
  ULONGLONG AccessVpRunTimeReg : 1;              // offset: 0x0 ordinal: 0x1
  ULONGLONG AccessPartitionReferenceCounter : 1; // offset: 0x0 ordinal: 0x2
  ULONGLONG AccessSynicRegs : 1;                 // offset: 0x0 ordinal: 0x3
  ULONGLONG AccessSyntheticTimerRegs : 1;        // offset: 0x0 ordinal: 0x4
  ULONGLONG AccessIntrCtrlRegs : 1;              // offset: 0x0 ordinal: 0x5
  ULONGLONG AccessHypercallMsrs : 1;             // offset: 0x0 ordinal: 0x6
  ULONGLONG AccessVpIndex : 1;                   // offset: 0x0 ordinal: 0x7
  ULONGLONG AccessResetReg : 1;                  // offset: 0x0 ordinal: 0x8
  ULONGLONG AccessStatsReg : 1;                  // offset: 0x0 ordinal: 0x9
  ULONGLONG AccessPartitionReferenceTsc : 1;     // offset: 0x0 ordinal: 0xa
  ULONGLONG AccessGuestIdleReg : 1;              // offset: 0x0 ordinal: 0xb
  ULONGLONG AccessFrequencyRegs : 1;             // offset: 0x0 ordinal: 0xc
  ULONGLONG AccessDebugRegs : 1;                 // offset: 0x0 ordinal: 0xd
  ULONGLONG AccessReenlightenmentControls : 1;   // offset: 0x0 ordinal: 0xe
  ULONGLONG AccessRootSchedulerReg : 1;          // offset: 0x0 ordinal: 0xf
  ULONGLONG Reserved1 : 17;                      // offset: 0x0 ordinal: 0x10
  ULONGLONG CreatePartitions : 1;                // offset: 0x0 ordinal: 0x11
  ULONGLONG AccessPartitionId : 1;               // offset: 0x0 ordinal: 0x12
  ULONGLONG AccessMemoryPool : 1;                // offset: 0x0 ordinal: 0x13
  ULONGLONG AdjustMessageBuffers : 1;            // offset: 0x0 ordinal: 0x14
  ULONGLONG PostMessages : 1;                    // offset: 0x0 ordinal: 0x15
  ULONGLONG SignalEvents : 1;                    // offset: 0x0 ordinal: 0x16
  ULONGLONG CreatePort : 1;                      // offset: 0x0 ordinal: 0x17
  ULONGLONG ConnectPort : 1;                     // offset: 0x0 ordinal: 0x18
  ULONGLONG AccessStats : 1;                     // offset: 0x0 ordinal: 0x19
  ULONGLONG Reserved2 : 2;                       // offset: 0x0 ordinal: 0x1a
  ULONGLONG Debugging : 1;                       // offset: 0x0 ordinal: 0x1b
  ULONGLONG CpuManagement : 1;                   // offset: 0x0 ordinal: 0x1c
  ULONGLONG ConfigureProfiler : 1;               // offset: 0x0 ordinal: 0x1d
  ULONGLONG AccessVpExitTracing : 1;             // offset: 0x0 ordinal: 0x1e
  ULONGLONG
  EnableExtendedGvaRangesForFlushVirtualAddressList : 1; // offset: 0x0
                                                         // ordinal: 0x1f
  ULONGLONG AccessVsm : 1;                // offset: 0x0 ordinal: 0x20
  ULONGLONG AccessVpRegisters : 1;        // offset: 0x0 ordinal: 0x21
  ULONGLONG UnusedBit : 1;                // offset: 0x0 ordinal: 0x22
  ULONGLONG FastHypercallOutput : 1;      // offset: 0x0 ordinal: 0x23
  ULONGLONG EnableExtendedHypercalls : 1; // offset: 0x0 ordinal: 0x24
  ULONGLONG StartVirtualProcessor : 1;    // offset: 0x0 ordinal: 0x25
  ULONGLONG Isolation : 1;                // offset: 0x0 ordinal: 0x26
  ULONGLONG Reserved3 : 9;                // offset: 0x0 ordinal: 0x27
} _HV_PARTITION_PRIVILEGE_MASK;

// 0x10 bytes (sizeof)
typedef struct _HV_X64_HYPERVISOR_FEATURES {
  union _HV_PARTITION_PRIVILEGE_MASK
      PartitionPrivileges;                         // offset: 0x0 ordinal: 0x0
  ULONG MaxSupportedCState : 4;                    // offset: 0x8 ordinal: 0x1
  ULONG HpetNeededForC3PowerState_Deprecated : 1;  // offset: 0x8 ordinal: 0x2
  ULONG Reserved : 27;                             // offset: 0x8 ordinal: 0x3
  ULONG MwaitAvailable_Deprecated : 1;             // offset: 0xc ordinal: 0x4
  ULONG GuestDebuggingAvailable : 1;               // offset: 0xc ordinal: 0x5
  ULONG PerformanceMonitorsAvailable : 1;          // offset: 0xc ordinal: 0x6
  ULONG CpuDynamicPartitioningAvailable : 1;       // offset: 0xc ordinal: 0x7
  ULONG XmmRegistersForFastHypercallAvailable : 1; // offset: 0xc ordinal: 0x8
  ULONG GuestIdleAvailable : 1;                    // offset: 0xc ordinal: 0x9
  ULONG HypervisorSleepStateSupportAvailable : 1;  // offset: 0xc ordinal: 0xa
  ULONG NumaDistanceQueryAvailable : 1;            // offset: 0xc ordinal: 0xb
  ULONG FrequencyRegsAvailable : 1;                // offset: 0xc ordinal: 0xc
  ULONG SyntheticMachineCheckAvailable : 1;        // offset: 0xc ordinal: 0xd
  ULONG GuestCrashRegsAvailable : 1;               // offset: 0xc ordinal: 0xe
  ULONG DebugRegsAvailable : 1;                    // offset: 0xc ordinal: 0xf
  ULONG Npiep1Available : 1;                       // offset: 0xc ordinal: 0x10
  ULONG DisableHypervisorAvailable : 1;            // offset: 0xc ordinal: 0x11
  ULONG
  ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1; // offset: 0xc
                                                            // ordinal: 0x12
  ULONG FastHypercallOutputAvailable : 1;        // offset: 0xc ordinal: 0x13
  ULONG SvmFeaturesAvailable : 1;                // offset: 0xc ordinal: 0x14
  ULONG SintPollingModeAvailable : 1;            // offset: 0xc ordinal: 0x15
  ULONG HypercallMsrLockAvailable : 1;           // offset: 0xc ordinal: 0x16
  ULONG DirectSyntheticTimers : 1;               // offset: 0xc ordinal: 0x17
  ULONG RegisterPatAvailable : 1;                // offset: 0xc ordinal: 0x18
  ULONG RegisterBndcfgsAvailable : 1;            // offset: 0xc ordinal: 0x19
  ULONG WatchdogTimerAvailable : 1;              // offset: 0xc ordinal: 0x1a
  ULONG SyntheticTimeUnhaltedTimerAvailable : 1; // offset: 0xc ordinal: 0x1b
  ULONG DeviceDomainsAvailable : 1;              // offset: 0xc ordinal: 0x1c
  ULONG S1DeviceDomainsAvailable : 1;            // offset: 0xc ordinal: 0x1d
  ULONG LbrAvailable : 1;                        // offset: 0xc ordinal: 0x1e
  ULONG IptAvailable : 1;                        // offset: 0xc ordinal: 0x1f
  ULONG CrossVtlFlushAvailable : 1;              // offset: 0xc ordinal: 0x20
  ULONG Reserved1 : 3;                           // offset: 0xc ordinal: 0x21
} _HV_X64_HYPERVISOR_FEATURES;

// 0x10 bytes (sizeof)
typedef struct _STRING64 {
  USHORT Length;        // offset: 0x0 ordinal: 0x0
  USHORT MaximumLength; // offset: 0x2 ordinal: 0x1
  ULONGLONG Buffer;     // offset: 0x8 ordinal: 0x2
} _STRING64;

// 0x4e8 bytes (sizeof)
typedef struct _GDI_TEB_BATCH64 {
  ULONG Offset : 31;             // offset: 0x0 ordinal: 0x0
  ULONG HasRenderingCommand : 1; // offset: 0x0 ordinal: 0x1
  ULONGLONG HDC;                 // offset: 0x8 ordinal: 0x2
  ULONG Buffer[310];             // offset: 0x10 ordinal: 0x3
} _GDI_TEB_BATCH64;

// 0x10 bytes (sizeof)
typedef struct _CLIENT_ID64 {
  ULONGLONG UniqueProcess; // offset: 0x0 ordinal: 0x0
  ULONGLONG UniqueThread;  // offset: 0x8 ordinal: 0x1
} _CLIENT_ID64;

// 0x38 bytes (sizeof)
typedef struct _NT_TIB64 {
  ULONGLONG ExceptionList; // offset: 0x0 ordinal: 0x0
  ULONGLONG StackBase;     // offset: 0x8 ordinal: 0x1
  ULONGLONG StackLimit;    // offset: 0x10 ordinal: 0x2
  ULONGLONG SubSystemTib;  // offset: 0x18 ordinal: 0x3
  union {
    ULONGLONG FiberData; // offset: 0x20 ordinal: 0x4
    ULONG Version;       // offset: 0x20 ordinal: 0x5
  };
  ULONGLONG ArbitraryUserPointer; // offset: 0x28 ordinal: 0x6
  ULONGLONG Self;                 // offset: 0x30 ordinal: 0x7
} _NT_TIB64;

// 0x1000 bytes (sizeof)
typedef struct _TEB32 {
  struct _NT_TIB32 NtTib;                       // offset: 0x0 ordinal: 0x0
  ULONG EnvironmentPointer;                     // offset: 0x1c ordinal: 0x1
  struct _CLIENT_ID32 ClientId;                 // offset: 0x20 ordinal: 0x2
  ULONG ActiveRpcHandle;                        // offset: 0x28 ordinal: 0x3
  ULONG ThreadLocalStoragePointer;              // offset: 0x2c ordinal: 0x4
  ULONG ProcessEnvironmentBlock;                // offset: 0x30 ordinal: 0x5
  ULONG LastErrorValue;                         // offset: 0x34 ordinal: 0x6
  ULONG CountOfOwnedCriticalSections;           // offset: 0x38 ordinal: 0x7
  ULONG CsrClientThread;                        // offset: 0x3c ordinal: 0x8
  ULONG Win32ThreadInfo;                        // offset: 0x40 ordinal: 0x9
  ULONG User32Reserved[26];                     // offset: 0x44 ordinal: 0xa
  ULONG UserReserved[5];                        // offset: 0xac ordinal: 0xb
  ULONG WOW32Reserved;                          // offset: 0xc0 ordinal: 0xc
  ULONG CurrentLocale;                          // offset: 0xc4 ordinal: 0xd
  ULONG FpSoftwareStatusRegister;               // offset: 0xc8 ordinal: 0xe
  ULONG ReservedForDebuggerInstrumentation[16]; // offset: 0xcc ordinal: 0xf
  ULONG SystemReserved1[26];                    // offset: 0x10c ordinal: 0x10
  CHAR PlaceholderCompatibilityMode;            // offset: 0x174 ordinal: 0x11
  UCHAR PlaceholderHydrationAlwaysExplicit;     // offset: 0x175 ordinal: 0x12
  CHAR PlaceholderReserved[10];                 // offset: 0x176 ordinal: 0x13
  ULONG ProxiedProcessId;                       // offset: 0x180 ordinal: 0x14
  struct _ACTIVATION_CONTEXT_STACK32
      _ActivationStack;                    // offset: 0x184 ordinal: 0x15
  UCHAR WorkingOnBehalfTicket[8];          // offset: 0x19c ordinal: 0x16
  LONG ExceptionCode;                      // offset: 0x1a4 ordinal: 0x17
  ULONG ActivationContextStackPointer;     // offset: 0x1a8 ordinal: 0x18
  ULONG InstrumentationCallbackSp;         // offset: 0x1ac ordinal: 0x19
  ULONG InstrumentationCallbackPreviousPc; // offset: 0x1b0 ordinal: 0x1a
  ULONG InstrumentationCallbackPreviousSp; // offset: 0x1b4 ordinal: 0x1b
  UCHAR InstrumentationCallbackDisabled;   // offset: 0x1b8 ordinal: 0x1c
  UCHAR SpareBytes[23];                    // offset: 0x1b9 ordinal: 0x1d
  ULONG TxFsContext;                       // offset: 0x1d0 ordinal: 0x1e
  struct _GDI_TEB_BATCH32 GdiTebBatch;     // offset: 0x1d4 ordinal: 0x1f
  struct _CLIENT_ID32 RealClientId;        // offset: 0x6b4 ordinal: 0x20
  ULONG GdiCachedProcessHandle;            // offset: 0x6bc ordinal: 0x21
  ULONG GdiClientPID;                      // offset: 0x6c0 ordinal: 0x22
  ULONG GdiClientTID;                      // offset: 0x6c4 ordinal: 0x23
  ULONG GdiThreadLocalInfo;                // offset: 0x6c8 ordinal: 0x24
  ULONG Win32ClientInfo[62];               // offset: 0x6cc ordinal: 0x25
  ULONG glDispatchTable[233];              // offset: 0x7c4 ordinal: 0x26
  ULONG glReserved1[29];                   // offset: 0xb68 ordinal: 0x27
  ULONG glReserved2;                       // offset: 0xbdc ordinal: 0x28
  ULONG glSectionInfo;                     // offset: 0xbe0 ordinal: 0x29
  ULONG glSection;                         // offset: 0xbe4 ordinal: 0x2a
  ULONG glTable;                           // offset: 0xbe8 ordinal: 0x2b
  ULONG glCurrentRC;                       // offset: 0xbec ordinal: 0x2c
  ULONG glContext;                         // offset: 0xbf0 ordinal: 0x2d
  ULONG LastStatusValue;                   // offset: 0xbf4 ordinal: 0x2e
  struct _STRING32 StaticUnicodeString;    // offset: 0xbf8 ordinal: 0x2f
  WCHAR StaticUnicodeBuffer[261];          // offset: 0xc00 ordinal: 0x30
  ULONG DeallocationStack;                 // offset: 0xe0c ordinal: 0x31
  ULONG TlsSlots[64];                      // offset: 0xe10 ordinal: 0x32
  struct LIST_ENTRY32 TlsLinks;            // offset: 0xf10 ordinal: 0x33
  ULONG Vdm;                               // offset: 0xf18 ordinal: 0x34
  ULONG ReservedForNtRpc;                  // offset: 0xf1c ordinal: 0x35
  ULONG DbgSsReserved[2];                  // offset: 0xf20 ordinal: 0x36
  ULONG HardErrorMode;                     // offset: 0xf28 ordinal: 0x37
  ULONG Instrumentation[9];                // offset: 0xf2c ordinal: 0x38
  struct _GUID ActivityId;                 // offset: 0xf50 ordinal: 0x39
  ULONG SubProcessTag;                     // offset: 0xf60 ordinal: 0x3a
  ULONG PerflibData;                       // offset: 0xf64 ordinal: 0x3b
  ULONG EtwTraceData;                      // offset: 0xf68 ordinal: 0x3c
  ULONG WinSockData;                       // offset: 0xf6c ordinal: 0x3d
  ULONG GdiBatchCount;                     // offset: 0xf70 ordinal: 0x3e
  union {
    struct _PROCESSOR_NUMBER
        CurrentIdealProcessor; // offset: 0xf74 ordinal: 0x3f
    ULONG IdealProcessorValue; // offset: 0xf74 ordinal: 0x40
    UCHAR ReservedPad0;        // offset: 0xf74 ordinal: 0x41
  };
  UCHAR ReservedPad1;             // offset: 0xf75 ordinal: 0x42
  UCHAR ReservedPad2;             // offset: 0xf76 ordinal: 0x43
  UCHAR IdealProcessor;           // offset: 0xf77 ordinal: 0x44
  ULONG GuaranteedStackBytes;     // offset: 0xf78 ordinal: 0x45
  ULONG ReservedForPerf;          // offset: 0xf7c ordinal: 0x46
  ULONG ReservedForOle;           // offset: 0xf80 ordinal: 0x47
  ULONG WaitingOnLoaderLock;      // offset: 0xf84 ordinal: 0x48
  ULONG SavedPriorityState;       // offset: 0xf88 ordinal: 0x49
  ULONG ReservedForCodeCoverage;  // offset: 0xf8c ordinal: 0x4a
  ULONG ThreadPoolData;           // offset: 0xf90 ordinal: 0x4b
  ULONG TlsExpansionSlots;        // offset: 0xf94 ordinal: 0x4c
  ULONG MuiGeneration;            // offset: 0xf98 ordinal: 0x4d
  ULONG IsImpersonating;          // offset: 0xf9c ordinal: 0x4e
  ULONG NlsCache;                 // offset: 0xfa0 ordinal: 0x4f
  ULONG pShimData;                // offset: 0xfa4 ordinal: 0x50
  ULONG HeapData;                 // offset: 0xfa8 ordinal: 0x51
  ULONG CurrentTransactionHandle; // offset: 0xfac ordinal: 0x52
  ULONG ActiveFrame;              // offset: 0xfb0 ordinal: 0x53
  ULONG FlsData;                  // offset: 0xfb4 ordinal: 0x54
  ULONG PreferredLanguages;       // offset: 0xfb8 ordinal: 0x55
  ULONG UserPrefLanguages;        // offset: 0xfbc ordinal: 0x56
  ULONG MergedPrefLanguages;      // offset: 0xfc0 ordinal: 0x57
  ULONG MuiImpersonation;         // offset: 0xfc4 ordinal: 0x58
  union {
    USHORT CrossTebFlags;          // offset: 0xfc8 ordinal: 0x59
    USHORT SpareCrossTebBits : 16; // offset: 0xfc8 ordinal: 0x5a
  };
  union {
    USHORT SameTebFlags;      // offset: 0xfca ordinal: 0x5b
    USHORT SafeThunkCall : 1; // offset: 0xfca ordinal: 0x5c
  };
  USHORT InDebugPrint : 1;           // offset: 0xfca ordinal: 0x5d
  USHORT HasFiberData : 1;           // offset: 0xfca ordinal: 0x5e
  USHORT SkipThreadAttach : 1;       // offset: 0xfca ordinal: 0x5f
  USHORT WerInShipAssertCode : 1;    // offset: 0xfca ordinal: 0x60
  USHORT RanProcessInit : 1;         // offset: 0xfca ordinal: 0x61
  USHORT ClonedThread : 1;           // offset: 0xfca ordinal: 0x62
  USHORT SuppressDebugMsg : 1;       // offset: 0xfca ordinal: 0x63
  USHORT DisableUserStackWalk : 1;   // offset: 0xfca ordinal: 0x64
  USHORT RtlExceptionAttached : 1;   // offset: 0xfca ordinal: 0x65
  USHORT InitialThread : 1;          // offset: 0xfca ordinal: 0x66
  USHORT SessionAware : 1;           // offset: 0xfca ordinal: 0x67
  USHORT LoadOwner : 1;              // offset: 0xfca ordinal: 0x68
  USHORT LoaderWorker : 1;           // offset: 0xfca ordinal: 0x69
  USHORT SkipLoaderInit : 1;         // offset: 0xfca ordinal: 0x6a
  USHORT SpareSameTebBits : 1;       // offset: 0xfca ordinal: 0x6b
  ULONG TxnScopeEnterCallback;       // offset: 0xfcc ordinal: 0x6c
  ULONG TxnScopeExitCallback;        // offset: 0xfd0 ordinal: 0x6d
  ULONG TxnScopeContext;             // offset: 0xfd4 ordinal: 0x6e
  ULONG LockCount;                   // offset: 0xfd8 ordinal: 0x6f
  LONG WowTebOffset;                 // offset: 0xfdc ordinal: 0x70
  ULONG ResourceRetValue;            // offset: 0xfe0 ordinal: 0x71
  ULONG ReservedForWdf;              // offset: 0xfe4 ordinal: 0x72
  ULONGLONG ReservedForCrt;          // offset: 0xfe8 ordinal: 0x73
  struct _GUID EffectiveContainerId; // offset: 0xff0 ordinal: 0x74
} _TEB32;

// 0x10 bytes (sizeof)
typedef struct _FILESYSTEM_DISK_COUNTERS {
  ULONGLONG FsBytesRead;    // offset: 0x0 ordinal: 0x0
  ULONGLONG FsBytesWritten; // offset: 0x8 ordinal: 0x1
} _FILESYSTEM_DISK_COUNTERS;

// 0x18 bytes (sizeof)
typedef struct _ETW_SESSION_PERF_COUNTERS {
  LONG BufferMemoryPagedPool;    // offset: 0x0 ordinal: 0x0
  LONG BufferMemoryNonPagedPool; // offset: 0x4 ordinal: 0x1
  ULONGLONG EventsLoggedCount;   // offset: 0x8 ordinal: 0x2
  LONG EventsLost;               // offset: 0x10 ordinal: 0x3
  LONG NumConsumers;             // offset: 0x14 ordinal: 0x4
} _ETW_SESSION_PERF_COUNTERS;

// 0xc0 bytes (sizeof)
typedef struct _PCW_PROCESSOR_INFO {
  ULONGLONG IdleTime;               // offset: 0x0 ordinal: 0x0
  ULONGLONG AvailableTime;          // offset: 0x8 ordinal: 0x1
  ULONGLONG UserTime;               // offset: 0x10 ordinal: 0x2
  ULONGLONG KernelTime;             // offset: 0x18 ordinal: 0x3
  ULONG Interrupts;                 // offset: 0x20 ordinal: 0x4
  ULONGLONG DpcTime;                // offset: 0x28 ordinal: 0x5
  ULONGLONG InterruptTime;          // offset: 0x30 ordinal: 0x6
  ULONG ClockInterrupts;            // offset: 0x38 ordinal: 0x7
  ULONG DpcCount;                   // offset: 0x3c ordinal: 0x8
  ULONG DpcRate;                    // offset: 0x40 ordinal: 0x9
  ULONGLONG C1Time;                 // offset: 0x48 ordinal: 0xa
  ULONGLONG C2Time;                 // offset: 0x50 ordinal: 0xb
  ULONGLONG C3Time;                 // offset: 0x58 ordinal: 0xc
  ULONGLONG C1Transitions;          // offset: 0x60 ordinal: 0xd
  ULONGLONG C2Transitions;          // offset: 0x68 ordinal: 0xe
  ULONGLONG C3Transitions;          // offset: 0x70 ordinal: 0xf
  ULONGLONG StallTime;              // offset: 0x78 ordinal: 0x10
  ULONG ParkingStatus;              // offset: 0x80 ordinal: 0x11
  ULONG CurrentFrequency;           // offset: 0x84 ordinal: 0x12
  ULONG PercentMaxFrequency;        // offset: 0x88 ordinal: 0x13
  ULONG StateFlags;                 // offset: 0x8c ordinal: 0x14
  ULONG NominalThroughput;          // offset: 0x90 ordinal: 0x15
  ULONG ActiveThroughput;           // offset: 0x94 ordinal: 0x16
  ULONGLONG ScaledThroughput;       // offset: 0x98 ordinal: 0x17
  ULONGLONG ScaledKernelThroughput; // offset: 0xa0 ordinal: 0x18
  ULONGLONG AverageIdleTime;        // offset: 0xa8 ordinal: 0x19
  ULONGLONG IdleBreakEvents;        // offset: 0xb0 ordinal: 0x1a
  ULONG PerformanceLimit;           // offset: 0xb8 ordinal: 0x1b
  ULONG PerformanceLimitFlags;      // offset: 0xbc ordinal: 0x1c
} _PCW_PROCESSOR_INFO;

// 0x20 bytes (sizeof)
typedef struct _PCW_MASK_INFORMATION {
  ULONGLONG CounterMask;                // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING *InstanceMask; // offset: 0x8 ordinal: 0x1
  ULONG InstanceId;                     // offset: 0xc ordinal: 0x2
  UCHAR CollectMultiple;                // offset: 0x10 ordinal: 0x3
  struct _PCW_BUFFER *Buffer;           // offset: 0x14 ordinal: 0x4
  struct _KEVENT *CancelEvent;          // offset: 0x18 ordinal: 0x5
} _PCW_MASK_INFORMATION;

// 0x10 bytes (sizeof)
typedef struct _PCW_COUNTER_INFORMATION {
  ULONGLONG CounterMask;                // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING *InstanceMask; // offset: 0x8 ordinal: 0x1
} _PCW_COUNTER_INFORMATION;

// 0x20 bytes (sizeof)
typedef union _PCW_CALLBACK_INFORMATION {
  struct _PCW_COUNTER_INFORMATION AddCounter;      // offset: 0x0 ordinal: 0x0
  struct _PCW_COUNTER_INFORMATION RemoveCounter;   // offset: 0x0 ordinal: 0x1
  struct _PCW_MASK_INFORMATION EnumerateInstances; // offset: 0x0 ordinal: 0x2
  struct _PCW_MASK_INFORMATION CollectData;        // offset: 0x0 ordinal: 0x3
} _PCW_CALLBACK_INFORMATION;

typedef LONG (*__anon_1747)(enum _PCW_CALLBACK_TYPE,
                            union _PCW_CALLBACK_INFORMATION *, VOID *);

// 0x18 bytes (sizeof)
typedef struct _PCW_REGISTRATION_INFORMATION {
  ULONG Version;                            // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING *Name;             // offset: 0x4 ordinal: 0x1
  ULONG CounterCount;                       // offset: 0x8 ordinal: 0x2
  struct _PCW_COUNTER_DESCRIPTOR *Counters; // offset: 0xc ordinal: 0x3
  LONG(*Callback)
  (enum _PCW_CALLBACK_TYPE, union _PCW_CALLBACK_INFORMATION *,
   VOID *);              // offset: 0x10 ordinal: 0x4
  VOID *CallbackContext; // offset: 0x14 ordinal: 0x5
} _PCW_REGISTRATION_INFORMATION;

// 0x340 bytes (sizeof)
typedef struct tagSWITCH_CONTEXT_DATA {
  ULONGLONG ullOsMaxVersionTested; // offset: 0x0 ordinal: 0x0
  ULONG ulTargetPlatform;          // offset: 0x8 ordinal: 0x1
  ULONGLONG ullContextMinimum;     // offset: 0x10 ordinal: 0x2
  struct _GUID guPlatform;         // offset: 0x18 ordinal: 0x3
  struct _GUID guMinPlatform;      // offset: 0x28 ordinal: 0x4
  ULONG ulContextSource;           // offset: 0x38 ordinal: 0x5
  ULONG ulElementCount;            // offset: 0x3c ordinal: 0x6
  struct _GUID guElements[48];     // offset: 0x40 ordinal: 0x7
} tagSWITCH_CONTEXT_DATA;

// 0x18 bytes (sizeof)
typedef struct tagSWITCH_CONTEXT_ATTRIBUTE {
  ULONGLONG ulContextUpdateCounter; // offset: 0x0 ordinal: 0x0
  LONG fAllowContextUpdate;         // offset: 0x8 ordinal: 0x1
  LONG fEnableTrace;                // offset: 0xc ordinal: 0x2
  ULONGLONG EtwHandle;              // offset: 0x10 ordinal: 0x3
} tagSWITCH_CONTEXT_ATTRIBUTE;

// 0x358 bytes (sizeof)
typedef struct tagSWITCH_CONTEXT {
  struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute; // offset: 0x0 ordinal: 0x0
  struct tagSWITCH_CONTEXT_DATA Data;           // offset: 0x18 ordinal: 0x1
} tagSWITCH_CONTEXT;

// 0x8 bytes (sizeof)
typedef union _CLS_LSN {
  struct __anon_1698 offset; // offset: 0x0 ordinal: 0x0
  ULONGLONG ullOffset;       // offset: 0x0 ordinal: 0x1
} _CLS_LSN;

// 0x1000 bytes (sizeof)
typedef struct _HBASE_BLOCK {
  ULONG Signature;                // offset: 0x0 ordinal: 0x0
  ULONG Sequence1;                // offset: 0x4 ordinal: 0x1
  ULONG Sequence2;                // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER TimeStamp; // offset: 0xc ordinal: 0x3
  ULONG Major;                    // offset: 0x14 ordinal: 0x4
  ULONG Minor;                    // offset: 0x18 ordinal: 0x5
  ULONG Type;                     // offset: 0x1c ordinal: 0x6
  ULONG Format;                   // offset: 0x20 ordinal: 0x7
  ULONG RootCell;                 // offset: 0x24 ordinal: 0x8
  ULONG Length;                   // offset: 0x28 ordinal: 0x9
  ULONG Cluster;                  // offset: 0x2c ordinal: 0xa
  UCHAR FileName[64];             // offset: 0x30 ordinal: 0xb
  struct _GUID RmId;              // offset: 0x70 ordinal: 0xc
  struct _GUID LogId;             // offset: 0x80 ordinal: 0xd
  ULONG Flags;                    // offset: 0x90 ordinal: 0xe
  struct _GUID TmId;              // offset: 0x94 ordinal: 0xf
  ULONG GuidSignature;            // offset: 0xa4 ordinal: 0x10
  ULONGLONG LastReorganizeTime;   // offset: 0xa8 ordinal: 0x11
  ULONG Reserved1[83];            // offset: 0xb0 ordinal: 0x12
  ULONG CheckSum;                 // offset: 0x1fc ordinal: 0x13
  ULONG Reserved2[882];           // offset: 0x200 ordinal: 0x14
  struct _GUID ThawTmId;          // offset: 0xfc8 ordinal: 0x15
  struct _GUID ThawRmId;          // offset: 0xfd8 ordinal: 0x16
  struct _GUID ThawLogId;         // offset: 0xfe8 ordinal: 0x17
  ULONG BootType;                 // offset: 0xff8 ordinal: 0x18
  ULONG BootRecover;              // offset: 0xffc ordinal: 0x19
} _HBASE_BLOCK;

// 0x400 bytes (sizeof)
typedef struct _HHIVE {
  ULONG Signature; // offset: 0x0 ordinal: 0x0
  struct _CELL_DATA *(*GetCellRoutine)(
      struct _HHIVE *, ULONG,
      struct _HV_GET_CELL_CONTEXT *); // offset: 0x4 ordinal: 0x1
  VOID(*ReleaseCellRoutine)
  (struct _HHIVE *, struct _HV_GET_CELL_CONTEXT *); // offset: 0x8 ordinal: 0x2
  VOID *(*Allocate)(ULONG, UCHAR, ULONG);           // offset: 0xc ordinal: 0x3
  VOID (*Free)(VOID *, ULONG);                      // offset: 0x10 ordinal: 0x4
  LONG(*FileWrite)
  (struct _HHIVE *, ULONG, struct CMP_OFFSET_ARRAY *, ULONG,
   ULONG); // offset: 0x14 ordinal: 0x5
  LONG(*FileRead)
  (struct _HHIVE *, ULONG, ULONG, VOID *, ULONG); // offset: 0x18 ordinal: 0x6
  VOID *HiveLoadFailure;                          // offset: 0x1c ordinal: 0x7
  struct _HBASE_BLOCK *BaseBlock;                 // offset: 0x20 ordinal: 0x8
  struct _CMSI_RW_LOCK FlusherLock;               // offset: 0x24 ordinal: 0x9
  struct _CMSI_RW_LOCK WriterLock;                // offset: 0x28 ordinal: 0xa
  struct _RTL_BITMAP DirtyVector;                 // offset: 0x2c ordinal: 0xb
  ULONG DirtyCount;                               // offset: 0x34 ordinal: 0xc
  ULONG DirtyAlloc;                               // offset: 0x38 ordinal: 0xd
  struct _RTL_BITMAP UnreconciledVector;          // offset: 0x3c ordinal: 0xe
  ULONG UnreconciledCount;                        // offset: 0x44 ordinal: 0xf
  ULONG BaseBlockAlloc;                           // offset: 0x48 ordinal: 0x10
  ULONG Cluster;                                  // offset: 0x4c ordinal: 0x11
  UCHAR Flat : 1;                                 // offset: 0x50 ordinal: 0x12
  UCHAR ReadOnly : 1;                             // offset: 0x50 ordinal: 0x13
  UCHAR Reserved : 6;                             // offset: 0x50 ordinal: 0x14
  UCHAR DirtyFlag;                                // offset: 0x51 ordinal: 0x15
  ULONG HvBinHeadersUse;                          // offset: 0x54 ordinal: 0x16
  ULONG HvFreeCellsUse;                           // offset: 0x58 ordinal: 0x17
  ULONG HvUsedCellsUse;                           // offset: 0x5c ordinal: 0x18
  ULONG CmUsedCellsUse;                           // offset: 0x60 ordinal: 0x19
  ULONG HiveFlags;                                // offset: 0x64 ordinal: 0x1a
  ULONG CurrentLog;                               // offset: 0x68 ordinal: 0x1b
  ULONG CurrentLogSequence;                       // offset: 0x6c ordinal: 0x1c
  ULONG CurrentLogMinimumSequence;                // offset: 0x70 ordinal: 0x1d
  ULONG CurrentLogOffset;                         // offset: 0x74 ordinal: 0x1e
  ULONG MinimumLogSequence;                       // offset: 0x78 ordinal: 0x1f
  ULONG LogFileSizeCap;                           // offset: 0x7c ordinal: 0x20
  UCHAR LogDataPresent[2];                        // offset: 0x80 ordinal: 0x21
  UCHAR PrimaryFileValid;                         // offset: 0x82 ordinal: 0x22
  UCHAR BaseBlockDirty;                           // offset: 0x83 ordinal: 0x23
  union _LARGE_INTEGER LastLogSwapTime;           // offset: 0x88 ordinal: 0x24
  USHORT FirstLogFile : 3;                        // offset: 0x90 ordinal: 0x25
  USHORT SecondLogFile : 3;                       // offset: 0x90 ordinal: 0x26
  USHORT HeaderRecovered : 1;                     // offset: 0x90 ordinal: 0x27
  USHORT LegacyRecoveryIndicated : 1;             // offset: 0x90 ordinal: 0x28
  USHORT RecoveryInformationReserved : 8;         // offset: 0x90 ordinal: 0x29
  USHORT RecoveryInformation;                     // offset: 0x90 ordinal: 0x2a
  UCHAR LogEntriesRecovered[2];                   // offset: 0x92 ordinal: 0x2b
  ULONG RefreshCount;                             // offset: 0x94 ordinal: 0x2c
  ULONG StorageTypeCount;                         // offset: 0x98 ordinal: 0x2d
  ULONG Version;                                  // offset: 0x9c ordinal: 0x2e
  struct _HVP_VIEW_MAP ViewMap;                   // offset: 0xa0 ordinal: 0x2f
  struct _DUAL Storage[2];                        // offset: 0xc8 ordinal: 0x30
} _HHIVE;

// 0xc00 bytes (sizeof)
typedef struct _CMHIVE {
  struct _HHIVE Hive;                             // offset: 0x0 ordinal: 0x0
  VOID *FileHandles[6];                           // offset: 0x400 ordinal: 0x1
  struct _LIST_ENTRY NotifyList;                  // offset: 0x418 ordinal: 0x2
  struct _LIST_ENTRY HiveList;                    // offset: 0x420 ordinal: 0x3
  struct _LIST_ENTRY PreloadedHiveList;           // offset: 0x428 ordinal: 0x4
  struct _EX_RUNDOWN_REF HiveRundown;             // offset: 0x430 ordinal: 0x5
  struct _CM_KEY_HASH_TABLE_ENTRY *KcbCacheTable; // offset: 0x434 ordinal: 0x6
  ULONG KcbCacheTableSize;                        // offset: 0x438 ordinal: 0x7
  struct _CM_KEY_HASH_TABLE_ENTRY
      *DeletedKcbTable;                // offset: 0x43c ordinal: 0x8
  ULONG DeletedKcbTableSize;           // offset: 0x440 ordinal: 0x9
  ULONG Identity;                      // offset: 0x444 ordinal: 0xa
  struct _CMSI_RW_LOCK HiveLock;       // offset: 0x448 ordinal: 0xb
  struct _RTL_BITMAP FlushDirtyVector; // offset: 0x44c ordinal: 0xc
  ULONG FlushDirtyVectorSize;          // offset: 0x454 ordinal: 0xd
  struct CMP_OFFSET_ARRAY
      *FlushLogEntryOffsetArray;                 // offset: 0x458 ordinal: 0xe
  ULONG FlushLogEntryOffsetArrayCount;           // offset: 0x45c ordinal: 0xf
  ULONG FlushLogEntrySize;                       // offset: 0x460 ordinal: 0x10
  ULONG FlushHiveTruncated;                      // offset: 0x464 ordinal: 0x11
  UCHAR FlushBaseBlockDirty;                     // offset: 0x468 ordinal: 0x12
  struct _RTL_BITMAP CapturedUnreconciledVector; // offset: 0x46c ordinal: 0x13
  ULONG CapturedUnreconciledVectorSize;          // offset: 0x474 ordinal: 0x14
  struct CMP_OFFSET_ARRAY
      *UnreconciledOffsetArray;               // offset: 0x478 ordinal: 0x15
  ULONG UnreconciledOffsetArrayCount;         // offset: 0x47c ordinal: 0x16
  struct _HBASE_BLOCK *UnreconciledBaseBlock; // offset: 0x480 ordinal: 0x17
  struct _EX_PUSH_LOCK SecurityLock;          // offset: 0x484 ordinal: 0x18
  ULONG LastShrinkHiveSize;                   // offset: 0x488 ordinal: 0x19
  union _LARGE_INTEGER ActualFileSize;        // offset: 0x490 ordinal: 0x1a
  union _LARGE_INTEGER LogFileSizes[2];       // offset: 0x498 ordinal: 0x1b
  struct _UNICODE_STRING FileFullPath;        // offset: 0x4a8 ordinal: 0x1c
  struct _UNICODE_STRING FileUserName;        // offset: 0x4b0 ordinal: 0x1d
  struct _UNICODE_STRING HiveRootPath;        // offset: 0x4b8 ordinal: 0x1e
  ULONG SecurityCount;                        // offset: 0x4c0 ordinal: 0x1f
  ULONG SecurityCacheSize;                    // offset: 0x4c4 ordinal: 0x20
  LONG SecurityHitHint;                       // offset: 0x4c8 ordinal: 0x21
  struct _CM_KEY_SECURITY_CACHE_ENTRY
      *SecurityCache;                           // offset: 0x4cc ordinal: 0x22
  struct _LIST_ENTRY SecurityHash[64];          // offset: 0x4d0 ordinal: 0x23
  ULONG UnloadEventCount;                       // offset: 0x6d0 ordinal: 0x24
  struct _KEVENT **UnloadEventArray;            // offset: 0x6d4 ordinal: 0x25
  struct _CM_KEY_CONTROL_BLOCK *RootKcb;        // offset: 0x6d8 ordinal: 0x26
  UCHAR Frozen;                                 // offset: 0x6dc ordinal: 0x27
  struct _CM_WORKITEM *UnloadWorkItem;          // offset: 0x6e0 ordinal: 0x28
  struct _CM_WORKITEM UnloadWorkItemHolder;     // offset: 0x6e4 ordinal: 0x29
  struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;   // offset: 0x6f8 ordinal: 0x2a
  ULONG Flags;                                  // offset: 0x980 ordinal: 0x2b
  struct _LIST_ENTRY TrustClassEntry;           // offset: 0x984 ordinal: 0x2c
  ULONGLONG DirtyTime;                          // offset: 0x990 ordinal: 0x2d
  ULONGLONG UnreconciledTime;                   // offset: 0x998 ordinal: 0x2e
  struct _CM_RM *CmRm;                          // offset: 0x9a0 ordinal: 0x2f
  ULONG CmRmInitFailPoint;                      // offset: 0x9a4 ordinal: 0x30
  LONG CmRmInitFailStatus;                      // offset: 0x9a8 ordinal: 0x31
  struct _KTHREAD *CreatorOwner;                // offset: 0x9ac ordinal: 0x32
  struct _KTHREAD *RundownThread;               // offset: 0x9b0 ordinal: 0x33
  union _LARGE_INTEGER LastWriteTime;           // offset: 0x9b8 ordinal: 0x34
  struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;     // offset: 0x9c0 ordinal: 0x35
  struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue; // offset: 0x9c8 ordinal: 0x36
  union {
    ULONG FlushFlags;            // offset: 0x9d0 ordinal: 0x37
    ULONG PrimaryFilePurged : 1; // offset: 0x9d0 ordinal: 0x38
  };
  ULONG DiskFileBad : 1;                        // offset: 0x9d0 ordinal: 0x39
  ULONG PrimaryFileSizeBeforeLastFlush;         // offset: 0x9d4 ordinal: 0x3a
  LONG ReferenceCount;                          // offset: 0x9d8 ordinal: 0x3b
  LONG UnloadHistoryIndex;                      // offset: 0x9dc ordinal: 0x3c
  ULONG UnloadHistory[128];                     // offset: 0x9e0 ordinal: 0x3d
  ULONG BootStart;                              // offset: 0xbe0 ordinal: 0x3e
  ULONG UnaccessedStart;                        // offset: 0xbe4 ordinal: 0x3f
  ULONG UnaccessedEnd;                          // offset: 0xbe8 ordinal: 0x40
  ULONG LoadedKeyCount;                         // offset: 0xbec ordinal: 0x41
  ULONG HandleClosePending;                     // offset: 0xbf0 ordinal: 0x42
  struct _EX_PUSH_LOCK HandleClosePendingEvent; // offset: 0xbf4 ordinal: 0x43
  UCHAR FinalFlushSucceeded;                    // offset: 0xbf8 ordinal: 0x44
  struct _CMP_VOLUME_CONTEXT *VolumeContext;    // offset: 0xbfc ordinal: 0x45
} _CMHIVE;

// 0x60 bytes (sizeof)
typedef struct _HIVE_LIST_ENTRY {
  WCHAR *FileName;                 // offset: 0x0 ordinal: 0x0
  WCHAR *BaseName;                 // offset: 0x4 ordinal: 0x1
  WCHAR *RegRootName;              // offset: 0x8 ordinal: 0x2
  struct _CMHIVE *CmHive;          // offset: 0xc ordinal: 0x3
  ULONG HHiveFlags;                // offset: 0x10 ordinal: 0x4
  ULONG CmHiveFlags;               // offset: 0x14 ordinal: 0x5
  ULONG CmKcbCacheSize;            // offset: 0x18 ordinal: 0x6
  struct _CMHIVE *CmHive2;         // offset: 0x1c ordinal: 0x7
  UCHAR HiveMounted;               // offset: 0x20 ordinal: 0x8
  UCHAR ThreadFinished;            // offset: 0x21 ordinal: 0x9
  UCHAR ThreadStarted;             // offset: 0x22 ordinal: 0xa
  UCHAR Allocate;                  // offset: 0x23 ordinal: 0xb
  UCHAR WinPERequired;             // offset: 0x24 ordinal: 0xc
  struct _KEVENT StartEvent;       // offset: 0x28 ordinal: 0xd
  struct _KEVENT FinishedEvent;    // offset: 0x38 ordinal: 0xe
  struct _KEVENT MountLock;        // offset: 0x48 ordinal: 0xf
  struct _UNICODE_STRING FilePath; // offset: 0x58 ordinal: 0x10
} _HIVE_LIST_ENTRY;

// 0x58 bytes (sizeof)
typedef struct _CM_RM {
  struct _LIST_ENTRY RmListEntry;         // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY TransactionListHead; // offset: 0x8 ordinal: 0x1
  VOID *TmHandle;                         // offset: 0x10 ordinal: 0x2
  VOID *Tm;                               // offset: 0x14 ordinal: 0x3
  VOID *RmHandle;                         // offset: 0x18 ordinal: 0x4
  VOID *KtmRm;                            // offset: 0x1c ordinal: 0x5
  ULONG RefCount;                         // offset: 0x20 ordinal: 0x6
  ULONG ContainerNum;                     // offset: 0x24 ordinal: 0x7
  ULONGLONG ContainerSize;                // offset: 0x28 ordinal: 0x8
  struct _CMHIVE *CmHive;                 // offset: 0x30 ordinal: 0x9
  VOID *LogFileObject;                    // offset: 0x34 ordinal: 0xa
  VOID *MarshallingContext;               // offset: 0x38 ordinal: 0xb
  ULONG RmFlags;                          // offset: 0x3c ordinal: 0xc
  LONG LogStartStatus1;                   // offset: 0x40 ordinal: 0xd
  LONG LogStartStatus2;                   // offset: 0x44 ordinal: 0xe
  ULONGLONG BaseLsn;                      // offset: 0x48 ordinal: 0xf
  struct _ERESOURCE *RmLock;              // offset: 0x50 ordinal: 0x10
} _CM_RM;

// 0x70 bytes (sizeof)
typedef struct _CM_TRANS {
  struct _LIST_ENTRY TransactionListEntry;  // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY KCBUoWListHead;        // offset: 0x8 ordinal: 0x1
  struct _LIST_ENTRY LazyCommitListEntry;   // offset: 0x10 ordinal: 0x2
  ULONG Prepared : 1;                       // offset: 0x18 ordinal: 0x3
  ULONG Aborted : 1;                        // offset: 0x18 ordinal: 0x4
  ULONG Committed : 1;                      // offset: 0x18 ordinal: 0x5
  ULONG Initializing : 1;                   // offset: 0x18 ordinal: 0x6
  ULONG Invalid : 1;                        // offset: 0x18 ordinal: 0x7
  ULONG UseReservation : 1;                 // offset: 0x18 ordinal: 0x8
  ULONG TmCallbacksActive : 1;              // offset: 0x18 ordinal: 0x9
  ULONG LightWeight : 1;                    // offset: 0x18 ordinal: 0xa
  ULONG Freed1 : 1;                         // offset: 0x18 ordinal: 0xb
  ULONG Freed2 : 1;                         // offset: 0x18 ordinal: 0xc
  ULONG Spare1 : 2;                         // offset: 0x18 ordinal: 0xd
  ULONG Freed : 1;                          // offset: 0x18 ordinal: 0xe
  ULONG Spare : 19;                         // offset: 0x18 ordinal: 0xf
  ULONG TransState;                         // offset: 0x18 ordinal: 0x10
  union _CM_TRANS_PTR Trans;                // offset: 0x1c ordinal: 0x11
  struct _CM_RM *CmRm;                      // offset: 0x20 ordinal: 0x12
  struct _KENLISTMENT *KtmEnlistmentObject; // offset: 0x24 ordinal: 0x13
  VOID *KtmEnlistmentHandle;                // offset: 0x28 ordinal: 0x14
  struct _GUID KtmUow;                      // offset: 0x2c ordinal: 0x15
  ULONGLONG StartLsn;                       // offset: 0x40 ordinal: 0x16
  ULONG HiveCount;                          // offset: 0x48 ordinal: 0x17
  struct _CMHIVE *HiveArray[8];             // offset: 0x4c ordinal: 0x18
} _CM_TRANS;

// 0x40 bytes (sizeof)
typedef struct _CM_KCB_UOW {
  struct _LIST_ENTRY TransactionListEntry;       // offset: 0x0 ordinal: 0x0
  struct _CM_INTENT_LOCK *KCBLock;               // offset: 0x8 ordinal: 0x1
  struct _CM_INTENT_LOCK *KeyLock;               // offset: 0xc ordinal: 0x2
  struct _LIST_ENTRY KCBListEntry;               // offset: 0x10 ordinal: 0x3
  struct _CM_KEY_CONTROL_BLOCK *KeyControlBlock; // offset: 0x18 ordinal: 0x4
  struct _CM_TRANS *Transaction;                 // offset: 0x1c ordinal: 0x5
  ULONG UoWState;                                // offset: 0x20 ordinal: 0x6
  enum UoWActionType ActionType;                 // offset: 0x24 ordinal: 0x7
  enum HSTORAGE_TYPE StorageType;                // offset: 0x28 ordinal: 0x8
  struct _CM_KCB_UOW *ParentUoW;                 // offset: 0x2c ordinal: 0x9
  union {
    struct _CM_KEY_CONTROL_BLOCK *ChildKCB; // offset: 0x30 ordinal: 0xa
    ULONG VolatileKeyCell;                  // offset: 0x30 ordinal: 0xb
    ULONG OldValueCell;                     // offset: 0x30 ordinal: 0xc
  };
  ULONG NewValueCell; // offset: 0x34 ordinal: 0xd
  union {
    ULONG UserFlags;                    // offset: 0x30 ordinal: 0xe
    union _LARGE_INTEGER LastWriteTime; // offset: 0x30 ordinal: 0xf
    struct _CM_KEY_SECURITY_CACHE
        *TxCachedSecurity; // offset: 0x30 ordinal: 0x10
  };
  ULONG TxSecurityCell;                        // offset: 0x34 ordinal: 0x11
  struct _CM_KEY_CONTROL_BLOCK *OldChildKCB;   // offset: 0x30 ordinal: 0x12
  struct _CM_KEY_CONTROL_BLOCK *NewChildKCB;   // offset: 0x34 ordinal: 0x13
  struct _CM_KEY_CONTROL_BLOCK *OtherChildKCB; // offset: 0x30 ordinal: 0x14
  ULONG ThisVolatileKeyCell;                   // offset: 0x34 ordinal: 0x15
  union {
    VOID *PrepareDataPointer;                 // offset: 0x38 ordinal: 0x16
    struct _CM_UOW_SET_SD_DATA *SecurityData; // offset: 0x38 ordinal: 0x17
    struct _CM_UOW_KEY_STATE_MODIFICATION
        *ModifyKeysData; // offset: 0x38 ordinal: 0x18
    struct _CM_UOW_SET_VALUE_LIST_DATA
        *SetValueData; // offset: 0x38 ordinal: 0x19
  };
  union {
    struct _CM_UOW_SET_VALUE_KEY_DATA *ValueData; // offset: 0x3c ordinal: 0x1a
    struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
        *DiscardReplaceContext; // offset: 0x3c ordinal: 0x1b
  };
} _CM_KCB_UOW;

// 0x10 bytes (sizeof)
typedef struct _CM_KEY_HASH {
  struct _CM_PATH_HASH ConvKey;  // offset: 0x0 ordinal: 0x0
  struct _CM_KEY_HASH *NextHash; // offset: 0x4 ordinal: 0x1
  struct _HHIVE *KeyHive;        // offset: 0x8 ordinal: 0x2
  ULONG KeyCell;                 // offset: 0xc ordinal: 0x3
} _CM_KEY_HASH;

// 0xb0 bytes (sizeof)
typedef struct _CM_KEY_CONTROL_BLOCK {
  ULONG RefCount;           // offset: 0x0 ordinal: 0x0
  ULONG ExtFlags : 16;      // offset: 0x4 ordinal: 0x1
  ULONG Freed : 1;          // offset: 0x4 ordinal: 0x2
  ULONG Discarded : 1;      // offset: 0x4 ordinal: 0x3
  ULONG HiveUnloaded : 1;   // offset: 0x4 ordinal: 0x4
  ULONG Decommissioned : 1; // offset: 0x4 ordinal: 0x5
  ULONG SpareExtFlag : 1;   // offset: 0x4 ordinal: 0x6
  ULONG TotalLevels : 10;   // offset: 0x4 ordinal: 0x7
  union {
    struct _CM_KEY_HASH KeyHash;  // offset: 0x8 ordinal: 0x8
    struct _CM_PATH_HASH ConvKey; // offset: 0x8 ordinal: 0x9
  };
  struct _CM_KEY_HASH *NextHash;    // offset: 0xc ordinal: 0xa
  struct _HHIVE *KeyHive;           // offset: 0x10 ordinal: 0xb
  ULONG KeyCell;                    // offset: 0x14 ordinal: 0xc
  struct _EX_PUSH_LOCK KcbPushlock; // offset: 0x18 ordinal: 0xd
  union {
    struct _KTHREAD *Owner; // offset: 0x1c ordinal: 0xe
    LONG SharedCount;       // offset: 0x1c ordinal: 0xf
  };
  UCHAR DelayedDeref : 1;                        // offset: 0x20 ordinal: 0x10
  UCHAR DelayedClose : 1;                        // offset: 0x20 ordinal: 0x11
  UCHAR Parking : 1;                             // offset: 0x20 ordinal: 0x12
  UCHAR LayerSemantics;                          // offset: 0x21 ordinal: 0x13
  SHORT LayerHeight;                             // offset: 0x22 ordinal: 0x14
  struct _CM_KEY_CONTROL_BLOCK *ParentKcb;       // offset: 0x24 ordinal: 0x15
  struct _CM_NAME_CONTROL_BLOCK *NameBlock;      // offset: 0x28 ordinal: 0x16
  struct _CM_KEY_SECURITY_CACHE *CachedSecurity; // offset: 0x2c ordinal: 0x17
  struct _CHILD_LIST ValueList;                  // offset: 0x30 ordinal: 0x18
  struct _CM_KEY_CONTROL_BLOCK *LinkTarget;      // offset: 0x38 ordinal: 0x19
  union {
    struct _CM_INDEX_HINT_BLOCK *IndexHint; // offset: 0x3c ordinal: 0x1a
    ULONG HashKey;                          // offset: 0x3c ordinal: 0x1b
    ULONG SubKeyCount;                      // offset: 0x3c ordinal: 0x1c
  };
  union {
    struct _LIST_ENTRY KeyBodyListHead; // offset: 0x40 ordinal: 0x1d
    struct _LIST_ENTRY ClonedListEntry; // offset: 0x40 ordinal: 0x1e
  };
  struct _CM_KEY_BODY *KeyBodyArray[4];  // offset: 0x48 ordinal: 0x1f
  union _LARGE_INTEGER KcbLastWriteTime; // offset: 0x58 ordinal: 0x20
  USHORT KcbMaxNameLen;                  // offset: 0x60 ordinal: 0x21
  USHORT KcbMaxValueNameLen;             // offset: 0x62 ordinal: 0x22
  ULONG KcbMaxValueDataLen;              // offset: 0x64 ordinal: 0x23
  ULONG KcbUserFlags : 4;                // offset: 0x68 ordinal: 0x24
  ULONG KcbVirtControlFlags : 4;         // offset: 0x68 ordinal: 0x25
  ULONG KcbDebug : 8;                    // offset: 0x68 ordinal: 0x26
  ULONG Flags : 16;                      // offset: 0x68 ordinal: 0x27
  struct _CM_KCB_LAYER_INFO *LayerInfo;  // offset: 0x6c ordinal: 0x28
  struct _LIST_ENTRY KCBUoWListHead;     // offset: 0x70 ordinal: 0x29
  union {
    struct _LIST_ENTRY DelayQueueEntry; // offset: 0x78 ordinal: 0x2a
    UCHAR *Stolen;                      // offset: 0x78 ordinal: 0x2b
  };
  struct _CM_TRANS *TransKCBOwner;       // offset: 0x80 ordinal: 0x2c
  struct _CM_INTENT_LOCK KCBLock;        // offset: 0x84 ordinal: 0x2d
  struct _CM_INTENT_LOCK KeyLock;        // offset: 0x8c ordinal: 0x2e
  struct _CHILD_LIST TransValueCache;    // offset: 0x94 ordinal: 0x2f
  struct _CM_TRANS *TransValueListOwner; // offset: 0x9c ordinal: 0x30
  union {
    struct _UNICODE_STRING *FullKCBName; // offset: 0xa0 ordinal: 0x31
    ULONG FullKCBNameStale : 1;          // offset: 0xa0 ordinal: 0x32
  };
  ULONG Reserved : 31;      // offset: 0xa0 ordinal: 0x33
  ULONGLONG SequenceNumber; // offset: 0xa8 ordinal: 0x34
} _CM_KEY_CONTROL_BLOCK;

// 0x8 bytes (sizeof)
typedef struct _CM_KEY_REFERENCE {
  ULONG KeyCell;          // offset: 0x0 ordinal: 0x0
  struct _HHIVE *KeyHive; // offset: 0x4 ordinal: 0x1
} _CM_KEY_REFERENCE;

// 0x50 bytes (sizeof)
typedef struct _CM_KEY_NODE {
  USHORT Signature;                            // offset: 0x0 ordinal: 0x0
  USHORT Flags;                                // offset: 0x2 ordinal: 0x1
  union _LARGE_INTEGER LastWriteTime;          // offset: 0x4 ordinal: 0x2
  UCHAR AccessBits;                            // offset: 0xc ordinal: 0x3
  UCHAR LayerSemantics : 2;                    // offset: 0xd ordinal: 0x4
  UCHAR Spare1 : 5;                            // offset: 0xd ordinal: 0x5
  UCHAR InheritClass : 1;                      // offset: 0xd ordinal: 0x6
  USHORT Spare2;                               // offset: 0xe ordinal: 0x7
  ULONG Parent;                                // offset: 0x10 ordinal: 0x8
  ULONG SubKeyCounts[2];                       // offset: 0x14 ordinal: 0x9
  ULONG SubKeyLists[2];                        // offset: 0x1c ordinal: 0xa
  struct _CHILD_LIST ValueList;                // offset: 0x24 ordinal: 0xb
  struct _CM_KEY_REFERENCE ChildHiveReference; // offset: 0x1c ordinal: 0xc
  ULONG Security;                              // offset: 0x2c ordinal: 0xd
  ULONG Class;                                 // offset: 0x30 ordinal: 0xe
  ULONG MaxNameLen : 16;                       // offset: 0x34 ordinal: 0xf
  ULONG UserFlags : 4;                         // offset: 0x34 ordinal: 0x10
  ULONG VirtControlFlags : 4;                  // offset: 0x34 ordinal: 0x11
  ULONG Debug : 8;                             // offset: 0x34 ordinal: 0x12
  ULONG MaxClassLen;                           // offset: 0x38 ordinal: 0x13
  ULONG MaxValueNameLen;                       // offset: 0x3c ordinal: 0x14
  ULONG MaxValueDataLen;                       // offset: 0x40 ordinal: 0x15
  ULONG WorkVar;                               // offset: 0x44 ordinal: 0x16
  USHORT NameLength;                           // offset: 0x48 ordinal: 0x17
  USHORT ClassLength;                          // offset: 0x4a ordinal: 0x18
  WCHAR Name[1];                               // offset: 0x4c ordinal: 0x19
} _CM_KEY_NODE;

// 0x50 bytes (sizeof)
typedef union _u {
  struct _CM_KEY_NODE KeyNode;         // offset: 0x0 ordinal: 0x0
  struct _CM_KEY_VALUE KeyValue;       // offset: 0x0 ordinal: 0x1
  struct _CM_KEY_SECURITY KeySecurity; // offset: 0x0 ordinal: 0x2
  struct _CM_KEY_INDEX KeyIndex;       // offset: 0x0 ordinal: 0x3
  struct _CM_BIG_DATA ValueData;       // offset: 0x0 ordinal: 0x4
  ULONG KeyList[1];                    // offset: 0x0 ordinal: 0x5
  WCHAR KeyString[1];                  // offset: 0x0 ordinal: 0x6
} _u;

// 0x50 bytes (sizeof)
typedef struct _CELL_DATA {
  union _u u; // offset: 0x0 ordinal: 0x0
} _CELL_DATA;

// 0x10 bytes (sizeof)
typedef struct __anon_1728 {
  struct _CELL_DATA *List;      // offset: 0x0 ordinal: 0x0
  ULONG Index;                  // offset: 0x4 ordinal: 0x1
  ULONG Cell;                   // offset: 0x8 ordinal: 0x2
  struct _CELL_DATA *CellPoint; // offset: 0xc ordinal: 0x3
} __anon_1728;

// 0x10 bytes (sizeof)
typedef struct __anon_1727 {
  ULONG Cell;                   // offset: 0x0 ordinal: 0x0
  struct _CELL_DATA *CellPoint; // offset: 0x4 ordinal: 0x1
  VOID *RootPoint;              // offset: 0x8 ordinal: 0x2
  ULONG Index;                  // offset: 0xc ordinal: 0x3
} __anon_1727;

// 0x11c bytes (sizeof)
typedef struct _HIVE_LOAD_FAILURE {
  struct _HHIVE *Hive;                        // offset: 0x0 ordinal: 0x0
  USHORT Index;                               // offset: 0x4 ordinal: 0x1
  USHORT RecoverableIndex;                    // offset: 0x6 ordinal: 0x2
  struct __anon_1723 Locations[8];            // offset: 0x8 ordinal: 0x3
  struct __anon_1723 RecoverableLocations[8]; // offset: 0x68 ordinal: 0x4
  struct __anon_1725 RegistryIO;              // offset: 0xc8 ordinal: 0x5
  struct __anon_1726 CheckRegistry2;          // offset: 0xd4 ordinal: 0x6
  struct __anon_1727 CheckKey;                // offset: 0xd8 ordinal: 0x7
  struct __anon_1728 CheckValueList;          // offset: 0xe8 ordinal: 0x8
  struct __anon_1729 CheckHive;               // offset: 0xf8 ordinal: 0x9
  struct __anon_1729 CheckHive1;              // offset: 0x104 ordinal: 0xa
  struct __anon_1732 CheckBin;                // offset: 0x110 ordinal: 0xb
  struct __anon_1738 RecoverData;             // offset: 0x118 ordinal: 0xc
} _HIVE_LOAD_FAILURE;

typedef LONG (*__anon_1576)(struct _HHIVE *, ULONG, ULONG, VOID *, ULONG);

typedef LONG (*__anon_1575)(struct _HHIVE *, ULONG, struct CMP_OFFSET_ARRAY *,
                            ULONG, ULONG);

typedef VOID (*__anon_1573)(struct _HHIVE *, struct _HV_GET_CELL_CONTEXT *);

typedef struct _CELL_DATA *(*__anon_1572)(struct _HHIVE *, ULONG,
                                          struct _HV_GET_CELL_CONTEXT *);

// 0x10 bytes (sizeof)
typedef struct _MMEXTEND_INFO {
  ULONGLONG CommittedSize; // offset: 0x0 ordinal: 0x0
  ULONG ReferenceCount;    // offset: 0x8 ordinal: 0x1
} _MMEXTEND_INFO;

// 0x20 bytes (sizeof)
typedef struct _MAPPED_FILE_SEGMENT {
  struct _CONTROL_AREA *ControlArea;  // offset: 0x0 ordinal: 0x0
  ULONG TotalNumberOfPtes;            // offset: 0x4 ordinal: 0x1
  struct _SEGMENT_FLAGS SegmentFlags; // offset: 0x8 ordinal: 0x2
  ULONG NumberOfCommittedPages;       // offset: 0xc ordinal: 0x3
  ULONGLONG SizeOfSegment;            // offset: 0x10 ordinal: 0x4
  union {
    struct _MMEXTEND_INFO *ExtendInfo; // offset: 0x18 ordinal: 0x5
    VOID *BasedAddress;                // offset: 0x18 ordinal: 0x6
  };
  struct _EX_PUSH_LOCK SegmentLock; // offset: 0x1c ordinal: 0x7
} _MAPPED_FILE_SEGMENT;

// 0x4 bytes (sizeof)
typedef union __anon_1559 {
  struct _MI_VAD_SEQUENTIAL_INFO SequentialVa; // offset: 0x0 ordinal: 0x0
  struct _MMEXTEND_INFO *ExtendedInfo;         // offset: 0x0 ordinal: 0x1
} __anon_1559;

// 0x48 bytes (sizeof)
typedef struct _MI_SLAB_ALLOCATOR_CONTEXT {
  struct _RTL_RB_TREE AllocationsTree;            // offset: 0x0 ordinal: 0x0
  LONG Lock;                                      // offset: 0x8 ordinal: 0x1
  struct _MI_SLAB_ALLOCATOR_ENTRY *SlabEntryHint; // offset: 0xc ordinal: 0x2
  ULONG FreePageCount;                            // offset: 0x10 ordinal: 0x3
  ULONG SlabEntryCount;                           // offset: 0x14 ordinal: 0x4
  enum _MI_SLAB_ALLOCATOR_TYPE Type;              // offset: 0x18 ordinal: 0x5
  enum _MI_SLAB_ALLOCATOR_PROTECTION Protection;  // offset: 0x1c ordinal: 0x6
  union __anon_1460 Flags;                        // offset: 0x20 ordinal: 0x7
  struct _MMPFNLIST StandbyList;                  // offset: 0x24 ordinal: 0x8
  ULONGLONG LastReplenishTime;                    // offset: 0x38 ordinal: 0x9
  ULONGLONG LastFailureTime;                      // offset: 0x40 ordinal: 0xa
} _MI_SLAB_ALLOCATOR_CONTEXT;

// 0x28 bytes (sizeof)
typedef struct _MI_PAGE_COMBINE_STATISTICS {
  ULONGLONG PagesScannedActive;         // offset: 0x0 ordinal: 0x0
  ULONGLONG PagesScannedStandby;        // offset: 0x8 ordinal: 0x1
  ULONGLONG PagesCombined;              // offset: 0x10 ordinal: 0x2
  ULONG CombineScanCount;               // offset: 0x18 ordinal: 0x3
  LONG CombinedBlocksInUse;             // offset: 0x1c ordinal: 0x4
  LONG SumCombinedBlocksReferenceCount; // offset: 0x20 ordinal: 0x5
} _MI_PAGE_COMBINE_STATISTICS;

// 0x30 bytes (sizeof)
typedef struct _MI_MODWRITE_DATA {
  LONG PagesLoad;                        // offset: 0x0 ordinal: 0x0
  ULONG PagesAverage;                    // offset: 0x4 ordinal: 0x1
  ULONG AverageAvailablePages;           // offset: 0x8 ordinal: 0x2
  ULONG PagesWritten;                    // offset: 0xc ordinal: 0x3
  ULONG WritesIssued;                    // offset: 0x10 ordinal: 0x4
  ULONG IgnoredReservationsCount;        // offset: 0x14 ordinal: 0x5
  ULONG FreedReservationsCount;          // offset: 0x18 ordinal: 0x6
  ULONG WriteBurstCount;                 // offset: 0x1c ordinal: 0x7
  ULONGLONG IgnoreReservationsStartTime; // offset: 0x20 ordinal: 0x8
  union _MI_RESERVATION_CLUSTER_INFO
      ReservationClusterInfo;    // offset: 0x28 ordinal: 0x9
  USHORT IgnoreReservations : 1; // offset: 0x2c ordinal: 0xa
  USHORT Spare : 15;             // offset: 0x2c ordinal: 0xb
  USHORT Spare1;                 // offset: 0x2e ordinal: 0xc
} _MI_MODWRITE_DATA;

// 0xe0 bytes (sizeof)
typedef struct _MI_PAGE_COMBINING_SUPPORT {
  struct _MI_PARTITION *Partition;                 // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ArbitraryPfnMapList;          // offset: 0x4 ordinal: 0x1
  struct _MI_COMBINE_WORKITEM FreeCombinePoolItem; // offset: 0xc ordinal: 0x2
  ULONG CombiningThreadCount;                      // offset: 0x20 ordinal: 0x3
  struct _LIST_ENTRY CombinePageFreeList;          // offset: 0x24 ordinal: 0x4
  ULONG CombineFreeListLock;                       // offset: 0x2c ordinal: 0x5
  struct _MI_COMBINE_PAGE_LISTHEAD
      CombinePageListHeads[16];      // offset: 0x30 ordinal: 0x6
  ULONGLONG CommonPageCombineDomain; // offset: 0xb0 ordinal: 0x7
  struct _MI_PAGE_COMBINE_STATISTICS
      PageCombineStats; // offset: 0xb8 ordinal: 0x8
} _MI_PAGE_COMBINING_SUPPORT;

// 0x34 bytes (sizeof)
typedef struct _MMPAGE_FILE_EXPANSION {
  struct _SEGMENT *Segment;           // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY DereferenceList; // offset: 0x4 ordinal: 0x1
  struct _MI_PARTITION *Partition;    // offset: 0xc ordinal: 0x2
  ULONG RequestedExpansionSize;       // offset: 0x10 ordinal: 0x3
  ULONG ActualExpansion;              // offset: 0x14 ordinal: 0x4
  struct _KEVENT Event;               // offset: 0x18 ordinal: 0x5
  LONG InProgress;                    // offset: 0x28 ordinal: 0x6
  union __anon_1419 u1;               // offset: 0x2c ordinal: 0x7
  VOID **ActiveEntry;                 // offset: 0x30 ordinal: 0x8
} _MMPAGE_FILE_EXPANSION;

// 0x1d0 bytes (sizeof)
typedef struct _MI_PARTITION_MODWRITES {
  struct _MMPAGE_FILE_EXPANSION
      AttemptForCantExtend;                       // offset: 0x0 ordinal: 0x0
  struct _MMPAGE_FILE_EXPANSION PageFileContract; // offset: 0x34 ordinal: 0x1
  ULONG NumberOfMappedMdls;                       // offset: 0x68 ordinal: 0x2
  LONG NumberOfMappedMdlsInUse;                   // offset: 0x6c ordinal: 0x3
  ULONG NumberOfMappedMdlsInUsePeak;              // offset: 0x70 ordinal: 0x4
  struct _MMMOD_WRITER_LISTHEAD MappedFileHeader; // offset: 0x74 ordinal: 0x5
  UCHAR NeedMappedMdl;                            // offset: 0x8c ordinal: 0x6
  UCHAR NeedPageFileMdl;                          // offset: 0x8d ordinal: 0x7
  UCHAR ModwriterActive;                          // offset: 0x8e ordinal: 0x8
  UCHAR TransitionInserted;                       // offset: 0x8f ordinal: 0x9
  LONG LastModifiedWriteError;                    // offset: 0x90 ordinal: 0xa
  LONG LastMappedWriteError;                      // offset: 0x94 ordinal: 0xb
  ULONG MappedFileWriteSucceeded;                 // offset: 0x98 ordinal: 0xc
  ULONG MappedWriteBurstCount;                    // offset: 0x9c ordinal: 0xd
  ULONG LowPriorityModWritesOutstanding;          // offset: 0xa0 ordinal: 0xe
  struct _KEVENT BoostModWriteIoPriorityEvent;    // offset: 0xa4 ordinal: 0xf
  LONG ModifiedWriterThreadPriority;              // offset: 0xb4 ordinal: 0x10
  ULONG ModifiedPagesLowPriorityGoal;             // offset: 0xb8 ordinal: 0x11
  struct _KEVENT ModifiedPageWriterEvent;         // offset: 0xbc ordinal: 0x12
  struct _KEVENT ModifiedWriterExitedEvent;       // offset: 0xcc ordinal: 0x13
  LONG WriteAllPagefilePages;                     // offset: 0xdc ordinal: 0x14
  LONG WriteAllMappedPages;                       // offset: 0xe0 ordinal: 0x15
  struct _KEVENT MappedPageWriterEvent;           // offset: 0xe4 ordinal: 0x16
  struct _MI_MODWRITE_DATA ModWriteData;          // offset: 0xf8 ordinal: 0x17
  struct _KEVENT RescanPageFilesEvent;            // offset: 0x128 ordinal: 0x18
  struct _MMMOD_WRITER_LISTHEAD PagingFileHeader; // offset: 0x138 ordinal: 0x19
  struct _ETHREAD *ModifiedPageWriterThread;      // offset: 0x150 ordinal: 0x1a
  struct _EX_RUNDOWN_REF
      ModifiedPageWriterRundown;                // offset: 0x154 ordinal: 0x1b
  struct _WORK_QUEUE_ITEM PagefileScanWorkItem; // offset: 0x158 ordinal: 0x1c
  ULONG PagefileScanCount;                      // offset: 0x168 ordinal: 0x1d
  LONG ClusterRestrictionLock;                  // offset: 0x16c ordinal: 0x1e
  struct _MI_RESTRICTED_MODWRITES
      ClusterRestrictions[2];                   // offset: 0x170 ordinal: 0x1f
  struct _KEVENT NotifyStoreMemoryConditions;   // offset: 0x178 ordinal: 0x20
  UCHAR DelayMappedWrite;                       // offset: 0x188 ordinal: 0x21
  ULONG PagefileReservationsEnabled;            // offset: 0x18c ordinal: 0x22
  struct _EX_PUSH_LOCK PageFileCreationLock;    // offset: 0x190 ordinal: 0x23
  struct _WORK_QUEUE_ITEM TrimPagefileWorkItem; // offset: 0x194 ordinal: 0x24
  ULONGLONG LastTrimPagefileTime;               // offset: 0x1a8 ordinal: 0x25
  struct _WORK_QUEUE_ITEM
      WsSwapPagefileContractWorkItem;       // offset: 0x1b0 ordinal: 0x26
  LONG WsSwapPageFileContractionInProgress; // offset: 0x1c0 ordinal: 0x27
  struct _EX_PUSH_LOCK WorkingSetSwapLock;  // offset: 0x1c4 ordinal: 0x28
  LONG WorkingSetInswapLock;                // offset: 0x1c8 ordinal: 0x29
} _MI_PARTITION_MODWRITES;

// 0x10 bytes (sizeof)
typedef struct _EVENT_FILTER_DESCRIPTOR {
  ULONGLONG Ptr; // offset: 0x0 ordinal: 0x0
  ULONG Size;    // offset: 0x8 ordinal: 0x1
  ULONG Type;    // offset: 0xc ordinal: 0x2
} _EVENT_FILTER_DESCRIPTOR;

typedef VOID (*__anon_1304)(struct _GUID *, ULONG, UCHAR, ULONGLONG, ULONGLONG,
                            struct _EVENT_FILTER_DESCRIPTOR *, VOID *);

// 0x28 bytes (sizeof)
typedef struct _TlgProvider_t {
  ULONG LevelPlus1;            // offset: 0x0 ordinal: 0x0
  USHORT *ProviderMetadataPtr; // offset: 0x4 ordinal: 0x1
  ULONGLONG KeywordAny;        // offset: 0x8 ordinal: 0x2
  ULONGLONG KeywordAll;        // offset: 0x10 ordinal: 0x3
  ULONGLONG RegHandle;         // offset: 0x18 ordinal: 0x4
  VOID(*EnableCallback)
  (struct _GUID *, ULONG, UCHAR, ULONGLONG, ULONGLONG,
   struct _EVENT_FILTER_DESCRIPTOR *, VOID *); // offset: 0x20 ordinal: 0x5
  VOID *CallbackContext;                       // offset: 0x24 ordinal: 0x6
} _TlgProvider_t;

// 0x8 bytes (sizeof)
typedef union _WHEA_PERSISTENCE_INFO {
  ULONGLONG Signature : 16;  // offset: 0x0 ordinal: 0x0
  ULONGLONG Length : 24;     // offset: 0x0 ordinal: 0x1
  ULONGLONG Identifier : 16; // offset: 0x0 ordinal: 0x2
  ULONGLONG Attributes : 2;  // offset: 0x0 ordinal: 0x3
  ULONGLONG DoNotLog : 1;    // offset: 0x0 ordinal: 0x4
  ULONGLONG Reserved : 5;    // offset: 0x0 ordinal: 0x5
  ULONGLONG AsULONGLONG;     // offset: 0x0 ordinal: 0x6
} _WHEA_PERSISTENCE_INFO;

// 0x8 bytes (sizeof)
typedef union _WHEA_TIMESTAMP {
  ULONGLONG Seconds : 8;                // offset: 0x0 ordinal: 0x0
  ULONGLONG Minutes : 8;                // offset: 0x0 ordinal: 0x1
  ULONGLONG Hours : 8;                  // offset: 0x0 ordinal: 0x2
  ULONGLONG Precise : 1;                // offset: 0x0 ordinal: 0x3
  ULONGLONG Reserved : 7;               // offset: 0x0 ordinal: 0x4
  ULONGLONG Day : 8;                    // offset: 0x0 ordinal: 0x5
  ULONGLONG Month : 8;                  // offset: 0x0 ordinal: 0x6
  ULONGLONG Year : 8;                   // offset: 0x0 ordinal: 0x7
  ULONGLONG Century : 8;                // offset: 0x0 ordinal: 0x8
  union _LARGE_INTEGER AsLARGE_INTEGER; // offset: 0x0 ordinal: 0x9
} _WHEA_TIMESTAMP;

// 0x80 bytes (sizeof)
typedef struct _WHEA_ERROR_RECORD_HEADER {
  ULONG Signature;                    // offset: 0x0 ordinal: 0x0
  union _WHEA_REVISION Revision;      // offset: 0x4 ordinal: 0x1
  ULONG SignatureEnd;                 // offset: 0x6 ordinal: 0x2
  USHORT SectionCount;                // offset: 0xa ordinal: 0x3
  enum _WHEA_ERROR_SEVERITY Severity; // offset: 0xc ordinal: 0x4
  union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
      ValidBits;                                // offset: 0x10 ordinal: 0x5
  ULONG Length;                                 // offset: 0x14 ordinal: 0x6
  union _WHEA_TIMESTAMP Timestamp;              // offset: 0x18 ordinal: 0x7
  struct _GUID PlatformId;                      // offset: 0x20 ordinal: 0x8
  struct _GUID PartitionId;                     // offset: 0x30 ordinal: 0x9
  struct _GUID CreatorId;                       // offset: 0x40 ordinal: 0xa
  struct _GUID NotifyType;                      // offset: 0x50 ordinal: 0xb
  ULONGLONG RecordId;                           // offset: 0x60 ordinal: 0xc
  union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;  // offset: 0x68 ordinal: 0xd
  union _WHEA_PERSISTENCE_INFO PersistenceInfo; // offset: 0x6c ordinal: 0xe
  UCHAR Reserved[12];                           // offset: 0x74 ordinal: 0xf
} _WHEA_ERROR_RECORD_HEADER;

// 0xc8 bytes (sizeof)
typedef struct _WHEA_ERROR_RECORD {
  struct _WHEA_ERROR_RECORD_HEADER Header; // offset: 0x0 ordinal: 0x0
  struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
      SectionDescriptor[1]; // offset: 0x80 ordinal: 0x1
} _WHEA_ERROR_RECORD;

// 0xe4 bytes (sizeof)
typedef struct _WHEAP_ERROR_RECORD_WRAPPER {
  struct _LIST_ENTRY WorkEntry;                  // offset: 0x0 ordinal: 0x0
  ULONG Length;                                  // offset: 0x8 ordinal: 0x1
  ULONG ProcessorNumber;                         // offset: 0xc ordinal: 0x2
  union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags; // offset: 0x10 ordinal: 0x3
  LONG InUse;                                    // offset: 0x14 ordinal: 0x4
  struct _WHEAP_ERROR_SOURCE *ErrorSource;       // offset: 0x18 ordinal: 0x5
  struct _WHEA_ERROR_RECORD ErrorRecord;         // offset: 0x1c ordinal: 0x6
} _WHEAP_ERROR_RECORD_WRAPPER;

// 0x420 bytes (sizeof)
typedef struct _WHEAP_ERROR_SOURCE {
  struct _LIST_ENTRY ListEntry;                    // offset: 0x0 ordinal: 0x0
  ULONG FailedAllocations;                         // offset: 0x8 ordinal: 0x1
  ULONG PlatformErrorSourceId;                     // offset: 0xc ordinal: 0x2
  LONG ErrorCount;                                 // offset: 0x10 ordinal: 0x3
  ULONG RecordCount;                               // offset: 0x14 ordinal: 0x4
  ULONG RecordLength;                              // offset: 0x18 ordinal: 0x5
  ULONG PoolTag;                                   // offset: 0x1c ordinal: 0x6
  enum _WHEA_ERROR_SOURCE_TYPE Type;               // offset: 0x20 ordinal: 0x7
  struct _WHEAP_ERROR_RECORD_WRAPPER *Records;     // offset: 0x24 ordinal: 0x8
  VOID *Context;                                   // offset: 0x28 ordinal: 0x9
  ULONG SectionCount;                              // offset: 0x2c ordinal: 0xa
  ULONG SectionLength;                             // offset: 0x30 ordinal: 0xb
  union _LARGE_INTEGER TickCountAtLastError;       // offset: 0x38 ordinal: 0xc
  ULONG AccumulatedErrors;                         // offset: 0x40 ordinal: 0xd
  ULONG TotalErrors;                               // offset: 0x44 ordinal: 0xe
  UCHAR Deferred;                                  // offset: 0x48 ordinal: 0xf
  LONG Busy;                                       // offset: 0x4c ordinal: 0x10
  struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor; // offset: 0x50 ordinal: 0x11
} _WHEAP_ERROR_SOURCE;

// 0x50 bytes (sizeof)
typedef struct _WHEA_ERROR_PACKET_V2 {
  ULONG Signature;                                // offset: 0x0 ordinal: 0x0
  ULONG Version;                                  // offset: 0x4 ordinal: 0x1
  ULONG Length;                                   // offset: 0x8 ordinal: 0x2
  union _WHEA_ERROR_PACKET_FLAGS Flags;           // offset: 0xc ordinal: 0x3
  enum _WHEA_ERROR_TYPE ErrorType;                // offset: 0x10 ordinal: 0x4
  enum _WHEA_ERROR_SEVERITY ErrorSeverity;        // offset: 0x14 ordinal: 0x5
  ULONG ErrorSourceId;                            // offset: 0x18 ordinal: 0x6
  enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;   // offset: 0x1c ordinal: 0x7
  struct _GUID NotifyType;                        // offset: 0x20 ordinal: 0x8
  ULONGLONG Context;                              // offset: 0x30 ordinal: 0x9
  enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat; // offset: 0x38 ordinal: 0xa
  ULONG Reserved1;                                // offset: 0x3c ordinal: 0xb
  ULONG DataOffset;                               // offset: 0x40 ordinal: 0xc
  ULONG DataLength;                               // offset: 0x44 ordinal: 0xd
  ULONG PshedDataOffset;                          // offset: 0x48 ordinal: 0xe
  ULONG PshedDataLength;                          // offset: 0x4c ordinal: 0xf
} _WHEA_ERROR_PACKET_V2;

// 0x8 bytes (sizeof)
typedef struct _MM_PAGE_ACCESS_INFO {
  union {
    union _MM_PAGE_ACCESS_INFO_FLAGS Flags; // offset: 0x0 ordinal: 0x0
    ULONGLONG FileOffset;                   // offset: 0x0 ordinal: 0x1
    VOID *VirtualAddress;                   // offset: 0x0 ordinal: 0x2
    ULONG DontUse0 : 3;                     // offset: 0x0 ordinal: 0x3
  };
  ULONG Spare0 : 29;     // offset: 0x0 ordinal: 0x4
  VOID *PointerProtoPte; // offset: 0x4 ordinal: 0x5
} _MM_PAGE_ACCESS_INFO;

// 0x10 bytes (sizeof)
typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM {
  USHORT Reserved1;      // offset: 0x0 ordinal: 0x0
  USHORT ExtType;        // offset: 0x2 ordinal: 0x1
  USHORT Linkage : 1;    // offset: 0x4 ordinal: 0x2
  USHORT Reserved2 : 15; // offset: 0x4 ordinal: 0x3
  USHORT DataSize;       // offset: 0x6 ordinal: 0x4
  ULONGLONG DataPtr;     // offset: 0x8 ordinal: 0x5
} _EVENT_HEADER_EXTENDED_DATA_ITEM;

// 0x10 bytes (sizeof)
typedef struct _EVENT_DESCRIPTOR {
  USHORT Id;         // offset: 0x0 ordinal: 0x0
  UCHAR Version;     // offset: 0x2 ordinal: 0x1
  UCHAR Channel;     // offset: 0x3 ordinal: 0x2
  UCHAR Level;       // offset: 0x4 ordinal: 0x3
  UCHAR Opcode;      // offset: 0x5 ordinal: 0x4
  USHORT Task;       // offset: 0x6 ordinal: 0x5
  ULONGLONG Keyword; // offset: 0x8 ordinal: 0x6
} _EVENT_DESCRIPTOR;

// 0x50 bytes (sizeof)
typedef struct _EVENT_HEADER {
  USHORT Size;                              // offset: 0x0 ordinal: 0x0
  USHORT HeaderType;                        // offset: 0x2 ordinal: 0x1
  USHORT Flags;                             // offset: 0x4 ordinal: 0x2
  USHORT EventProperty;                     // offset: 0x6 ordinal: 0x3
  ULONG ThreadId;                           // offset: 0x8 ordinal: 0x4
  ULONG ProcessId;                          // offset: 0xc ordinal: 0x5
  union _LARGE_INTEGER TimeStamp;           // offset: 0x10 ordinal: 0x6
  struct _GUID ProviderId;                  // offset: 0x18 ordinal: 0x7
  struct _EVENT_DESCRIPTOR EventDescriptor; // offset: 0x28 ordinal: 0x8
  ULONG KernelTime;                         // offset: 0x38 ordinal: 0x9
  ULONG UserTime;                           // offset: 0x3c ordinal: 0xa
  ULONGLONG ProcessorTime;                  // offset: 0x38 ordinal: 0xb
  struct _GUID ActivityId;                  // offset: 0x40 ordinal: 0xc
} _EVENT_HEADER;

// 0x68 bytes (sizeof)
typedef struct _EVENT_RECORD {
  struct _EVENT_HEADER EventHeader;         // offset: 0x0 ordinal: 0x0
  struct _ETW_BUFFER_CONTEXT BufferContext; // offset: 0x50 ordinal: 0x1
  USHORT ExtendedDataCount;                 // offset: 0x54 ordinal: 0x2
  USHORT UserDataLength;                    // offset: 0x56 ordinal: 0x3
  struct _EVENT_HEADER_EXTENDED_DATA_ITEM
      *ExtendedData; // offset: 0x58 ordinal: 0x4
  VOID *UserData;    // offset: 0x5c ordinal: 0x5
  VOID *UserContext; // offset: 0x60 ordinal: 0x6
} _EVENT_RECORD;

// 0x10 bytes (sizeof)
typedef struct _EVENT_DATA_DESCRIPTOR {
  ULONGLONG Ptr; // offset: 0x0 ordinal: 0x0
  ULONG Size;    // offset: 0x8 ordinal: 0x1
  union {
    ULONG Reserved; // offset: 0xc ordinal: 0x2
    UCHAR Type;     // offset: 0xc ordinal: 0x3
  };
  UCHAR Reserved1;  // offset: 0xd ordinal: 0x4
  USHORT Reserved2; // offset: 0xe ordinal: 0x5
} _EVENT_DATA_DESCRIPTOR;

typedef LONG (*__anon_1202)(ULONGLONG, VOID **);

// 0xc bytes (sizeof)
typedef struct _ETW_HW_TRACE_EXT_INTERFACE {
  LONG(*StartProcessorTraceOnEachCore)
  (ULONGLONG, VOID **);                         // offset: 0x0 ordinal: 0x0
  LONG (*StopProcessorTraceOnEachCore)(VOID *); // offset: 0x4 ordinal: 0x1
  LONG(*LogProcessorTraceOnCurrentCore)
  (VOID *, VOID *); // offset: 0x8 ordinal: 0x2
} _ETW_HW_TRACE_EXT_INTERFACE;

// 0x20 bytes (sizeof)
typedef struct _ETW_IPT_SUPPORT {
  VOID *IptHandle;     // offset: 0x0 ordinal: 0x0
  ULONGLONG IptOption; // offset: 0x8 ordinal: 0x1
  struct _ETW_HW_TRACE_EXT_INTERFACE
      *EtwHwTraceExtInterface; // offset: 0x10 ordinal: 0x2
  ULONG HookIdCount;           // offset: 0x14 ordinal: 0x3
  USHORT HookId[4];            // offset: 0x18 ordinal: 0x4
} _ETW_IPT_SUPPORT;

// 0x48 bytes (sizeof)
typedef struct _WMI_BUFFER_HEADER {
  ULONG BufferSize;               // offset: 0x0 ordinal: 0x0
  ULONG SavedOffset;              // offset: 0x4 ordinal: 0x1
  ULONG CurrentOffset;            // offset: 0x8 ordinal: 0x2
  LONG ReferenceCount;            // offset: 0xc ordinal: 0x3
  union _LARGE_INTEGER TimeStamp; // offset: 0x10 ordinal: 0x4
  LONGLONG SequenceNumber;        // offset: 0x18 ordinal: 0x5
  ULONGLONG ClockType : 3;        // offset: 0x20 ordinal: 0x6
  ULONGLONG Frequency : 61;       // offset: 0x20 ordinal: 0x7
  union {
    struct _SINGLE_LIST_ENTRY SlistEntry;  // offset: 0x20 ordinal: 0x8
    struct _WMI_BUFFER_HEADER *NextBuffer; // offset: 0x20 ordinal: 0x9
  };
  struct _ETW_BUFFER_CONTEXT ClientContext; // offset: 0x28 ordinal: 0xa
  enum _ETW_BUFFER_STATE State;             // offset: 0x2c ordinal: 0xb
  ULONG Offset;                             // offset: 0x30 ordinal: 0xc
  USHORT BufferFlag;                        // offset: 0x34 ordinal: 0xd
  USHORT BufferType;                        // offset: 0x36 ordinal: 0xe
  union {
    ULONG Padding1[4];                   // offset: 0x38 ordinal: 0xf
    struct _ETW_REF_CLOCK ReferenceTime; // offset: 0x38 ordinal: 0x10
    struct _LIST_ENTRY GlobalEntry;      // offset: 0x38 ordinal: 0x11
    VOID *Pointer0;                      // offset: 0x38 ordinal: 0x12
  };
  VOID *Pointer1; // offset: 0x3c ordinal: 0x13
} _WMI_BUFFER_HEADER;

// 0x18 bytes (sizeof)
typedef struct _EVENT_FILTER_HEADER {
  USHORT Id;            // offset: 0x0 ordinal: 0x0
  UCHAR Version;        // offset: 0x2 ordinal: 0x1
  UCHAR Reserved[5];    // offset: 0x3 ordinal: 0x2
  ULONGLONG InstanceId; // offset: 0x8 ordinal: 0x3
  ULONG Size;           // offset: 0x10 ordinal: 0x4
  ULONG NextOffset;     // offset: 0x14 ordinal: 0x5
} _EVENT_FILTER_HEADER;

// 0x18 bytes (sizeof)
typedef struct _EVENT_FILTER_LEVEL_KW {
  ULONGLONG MatchAnyKeyword; // offset: 0x0 ordinal: 0x0
  ULONGLONG MatchAllKeyword; // offset: 0x8 ordinal: 0x1
  UCHAR Level;               // offset: 0x10 ordinal: 0x2
  UCHAR FilterIn;            // offset: 0x11 ordinal: 0x3
} _EVENT_FILTER_LEVEL_KW;

// 0x28 bytes (sizeof)
typedef struct _ETW_FILTER_EVENT_NAME_DATA {
  UCHAR FilterIn;                   // offset: 0x0 ordinal: 0x0
  UCHAR Level;                      // offset: 0x1 ordinal: 0x1
  ULONGLONG MatchAnyKeyword;        // offset: 0x8 ordinal: 0x2
  ULONGLONG MatchAllKeyword;        // offset: 0x10 ordinal: 0x3
  struct _RTL_HASH_TABLE NameTable; // offset: 0x18 ordinal: 0x4
} _ETW_FILTER_EVENT_NAME_DATA;

// 0x20 bytes (sizeof)
typedef struct _TRACE_ENABLE_INFO {
  ULONG IsEnabled;           // offset: 0x0 ordinal: 0x0
  UCHAR Level;               // offset: 0x4 ordinal: 0x1
  UCHAR Reserved1;           // offset: 0x5 ordinal: 0x2
  USHORT LoggerId;           // offset: 0x6 ordinal: 0x3
  ULONG EnableProperty;      // offset: 0x8 ordinal: 0x4
  ULONG Reserved2;           // offset: 0xc ordinal: 0x5
  ULONGLONG MatchAnyKeyword; // offset: 0x10 ordinal: 0x6
  ULONGLONG MatchAllKeyword; // offset: 0x18 ordinal: 0x7
} _TRACE_ENABLE_INFO;

// 0x10 bytes (sizeof)
typedef struct _PO_FX_PERF_STATE {
  ULONGLONG Value; // offset: 0x0 ordinal: 0x0
  VOID *Context;   // offset: 0x8 ordinal: 0x1
} _PO_FX_PERF_STATE;

// 0x8 bytes (sizeof)
typedef struct __anon_975 {
  ULONG Count;                      // offset: 0x0 ordinal: 0x0
  struct _PO_FX_PERF_STATE *States; // offset: 0x4 ordinal: 0x1
} __anon_975;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_LIST {
  ULONGLONG Valid : 1;      // offset: 0x0 ordinal: 0x0
  ULONGLONG OneEntry : 1;   // offset: 0x0 ordinal: 0x1
  ULONGLONG filler0 : 2;    // offset: 0x0 ordinal: 0x2
  ULONGLONG SwizzleBit : 1; // offset: 0x0 ordinal: 0x3
  ULONGLONG Protection : 5; // offset: 0x0 ordinal: 0x4
  ULONGLONG Prototype : 1;  // offset: 0x0 ordinal: 0x5
  ULONGLONG Transition : 1; // offset: 0x0 ordinal: 0x6
  ULONGLONG filler2 : 20;   // offset: 0x0 ordinal: 0x7
  ULONGLONG NextEntry : 32; // offset: 0x0 ordinal: 0x8
} _MMPTE_LIST;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_SUBSECTION {
  ULONGLONG Valid : 1;              // offset: 0x0 ordinal: 0x0
  ULONGLONG Unused0 : 3;            // offset: 0x0 ordinal: 0x1
  ULONGLONG SwizzleBit : 1;         // offset: 0x0 ordinal: 0x2
  ULONGLONG Protection : 5;         // offset: 0x0 ordinal: 0x3
  ULONGLONG Prototype : 1;          // offset: 0x0 ordinal: 0x4
  ULONGLONG Unused1 : 21;           // offset: 0x0 ordinal: 0x5
  ULONGLONG SubsectionAddress : 32; // offset: 0x0 ordinal: 0x6
} _MMPTE_SUBSECTION;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_TRANSITION {
  ULONGLONG Valid : 1;            // offset: 0x0 ordinal: 0x0
  ULONGLONG Write : 1;            // offset: 0x0 ordinal: 0x1
  ULONGLONG Spare : 1;            // offset: 0x0 ordinal: 0x2
  ULONGLONG IoTracker : 1;        // offset: 0x0 ordinal: 0x3
  ULONGLONG SwizzleBit : 1;       // offset: 0x0 ordinal: 0x4
  ULONGLONG Protection : 5;       // offset: 0x0 ordinal: 0x5
  ULONGLONG Prototype : 1;        // offset: 0x0 ordinal: 0x6
  ULONGLONG Transition : 1;       // offset: 0x0 ordinal: 0x7
  ULONGLONG PageFrameNumber : 26; // offset: 0x0 ordinal: 0x8
  ULONGLONG Unused : 26;          // offset: 0x0 ordinal: 0x9
} _MMPTE_TRANSITION;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_TIMESTAMP {
  ULONGLONG MustBeZero : 1;       // offset: 0x0 ordinal: 0x0
  ULONGLONG Unused0 : 3;          // offset: 0x0 ordinal: 0x1
  ULONGLONG SwizzleBit : 1;       // offset: 0x0 ordinal: 0x2
  ULONGLONG Protection : 5;       // offset: 0x0 ordinal: 0x3
  ULONGLONG Prototype : 1;        // offset: 0x0 ordinal: 0x4
  ULONGLONG Transition : 1;       // offset: 0x0 ordinal: 0x5
  ULONGLONG PageFileLow : 4;      // offset: 0x0 ordinal: 0x6
  ULONGLONG Unused1 : 16;         // offset: 0x0 ordinal: 0x7
  ULONGLONG GlobalTimeStamp : 32; // offset: 0x0 ordinal: 0x8
} _MMPTE_TIMESTAMP;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_SOFTWARE {
  ULONGLONG Valid : 1;             // offset: 0x0 ordinal: 0x0
  ULONGLONG PageFileReserved : 1;  // offset: 0x0 ordinal: 0x1
  ULONGLONG PageFileAllocated : 1; // offset: 0x0 ordinal: 0x2
  ULONGLONG Unused0 : 1;           // offset: 0x0 ordinal: 0x3
  ULONGLONG SwizzleBit : 1;        // offset: 0x0 ordinal: 0x4
  ULONGLONG Protection : 5;        // offset: 0x0 ordinal: 0x5
  ULONGLONG Prototype : 1;         // offset: 0x0 ordinal: 0x6
  ULONGLONG Transition : 1;        // offset: 0x0 ordinal: 0x7
  ULONGLONG PageFileLow : 4;       // offset: 0x0 ordinal: 0x8
  ULONGLONG Unused1 : 16;          // offset: 0x0 ordinal: 0x9
  ULONGLONG PageFileHigh : 32;     // offset: 0x0 ordinal: 0xa
} _MMPTE_SOFTWARE;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_PROTOTYPE {
  ULONGLONG Valid : 1;                // offset: 0x0 ordinal: 0x0
  ULONGLONG DemandFillProto : 1;      // offset: 0x0 ordinal: 0x1
  ULONGLONG HiberVerifyConverted : 1; // offset: 0x0 ordinal: 0x2
  ULONGLONG ReadOnly : 1;             // offset: 0x0 ordinal: 0x3
  ULONGLONG SwizzleBit : 1;           // offset: 0x0 ordinal: 0x4
  ULONGLONG Protection : 5;           // offset: 0x0 ordinal: 0x5
  ULONGLONG Prototype : 1;            // offset: 0x0 ordinal: 0x6
  ULONGLONG Combined : 1;             // offset: 0x0 ordinal: 0x7
  ULONGLONG Unused : 20;              // offset: 0x0 ordinal: 0x8
  ULONGLONG ProtoAddress : 32;        // offset: 0x0 ordinal: 0x9
} _MMPTE_PROTOTYPE;

// 0x8 bytes (sizeof)
typedef struct _MMPTE_HARDWARE {
  ULONGLONG Valid : 1;            // offset: 0x0 ordinal: 0x0
  ULONGLONG Dirty1 : 1;           // offset: 0x0 ordinal: 0x1
  ULONGLONG Owner : 1;            // offset: 0x0 ordinal: 0x2
  ULONGLONG WriteThrough : 1;     // offset: 0x0 ordinal: 0x3
  ULONGLONG CacheDisable : 1;     // offset: 0x0 ordinal: 0x4
  ULONGLONG Accessed : 1;         // offset: 0x0 ordinal: 0x5
  ULONGLONG Dirty : 1;            // offset: 0x0 ordinal: 0x6
  ULONGLONG LargePage : 1;        // offset: 0x0 ordinal: 0x7
  ULONGLONG Global : 1;           // offset: 0x0 ordinal: 0x8
  ULONGLONG CopyOnWrite : 1;      // offset: 0x0 ordinal: 0x9
  ULONGLONG Unused : 1;           // offset: 0x0 ordinal: 0xa
  ULONGLONG Write : 1;            // offset: 0x0 ordinal: 0xb
  ULONGLONG PageFrameNumber : 26; // offset: 0x0 ordinal: 0xc
  ULONGLONG reserved1 : 25;       // offset: 0x0 ordinal: 0xd
  ULONGLONG NoExecute : 1;        // offset: 0x0 ordinal: 0xe
} _MMPTE_HARDWARE;

// 0x8 bytes (sizeof)
typedef union _ENERGY_STATE_DURATION {
  ULONGLONG Value;      // offset: 0x0 ordinal: 0x0
  ULONG LastChangeTime; // offset: 0x0 ordinal: 0x1
  ULONG Duration : 31;  // offset: 0x4 ordinal: 0x2
  ULONG IsInState : 1;  // offset: 0x4 ordinal: 0x3
} _ENERGY_STATE_DURATION;

// 0x8 bytes (sizeof)
typedef union __anon_989 {
  ULONGLONG Long;                    // offset: 0x0 ordinal: 0x0
  ULONGLONG VolatileLong;            // offset: 0x0 ordinal: 0x1
  struct _MMPTE_HIGHLOW HighLow;     // offset: 0x0 ordinal: 0x2
  struct _MMPTE_HARDWARE Hard;       // offset: 0x0 ordinal: 0x3
  struct _MMPTE_PROTOTYPE Proto;     // offset: 0x0 ordinal: 0x4
  struct _MMPTE_SOFTWARE Soft;       // offset: 0x0 ordinal: 0x5
  struct _MMPTE_TIMESTAMP TimeStamp; // offset: 0x0 ordinal: 0x6
  struct _MMPTE_TRANSITION Trans;    // offset: 0x0 ordinal: 0x7
  struct _MMPTE_SUBSECTION Subsect;  // offset: 0x0 ordinal: 0x8
  struct _MMPTE_LIST List;           // offset: 0x0 ordinal: 0x9
} __anon_989;

// 0x8 bytes (sizeof)
typedef struct _MMPTE {
  union __anon_989 u; // offset: 0x0 ordinal: 0x0
} _MMPTE;

// 0x20 bytes (sizeof)
typedef struct _PAE_ENTRY {
  union {
    struct _MMPTE PteEntry[4];         // offset: 0x0 ordinal: 0x0
    struct _PAE_PAGEINFO PaeEntry;     // offset: 0x0 ordinal: 0x1
    struct _SINGLE_LIST_ENTRY NextPae; // offset: 0x0 ordinal: 0x2
  };
} _PAE_ENTRY;

// 0x10 bytes (sizeof)
typedef struct _MMCLONE_BLOCK {
  struct _MMPTE ProtoPte; // offset: 0x0 ordinal: 0x0
  union {
    ULONG CloneCommitCount;          // offset: 0x8 ordinal: 0x1
    struct _MI_CLONE_BLOCK_FLAGS u1; // offset: 0x8 ordinal: 0x2
  };
  ULONG CloneRefCount; // offset: 0xc ordinal: 0x3
} _MMCLONE_BLOCK;

// 0x18 bytes (sizeof)
typedef struct _MI_DRIVER_VA {
  struct _MI_DRIVER_VA *Next; // offset: 0x0 ordinal: 0x0
  struct _MMPTE *PointerPte;  // offset: 0x4 ordinal: 0x1
  struct _RTL_BITMAP BitMap;  // offset: 0x8 ordinal: 0x2
  ULONG Hint;                 // offset: 0x10 ordinal: 0x3
  ULONG Flags;                // offset: 0x14 ordinal: 0x4
} _MI_DRIVER_VA;

// 0x90 bytes (sizeof)
typedef struct _MI_DEBUGGER_STATE {
  UCHAR TransientWrite;    // offset: 0x0 ordinal: 0x0
  UCHAR CodePageEdited;    // offset: 0x1 ordinal: 0x1
  struct _MMPTE *DebugPte; // offset: 0x4 ordinal: 0x2
  ULONG PoisonedTb;        // offset: 0x8 ordinal: 0x3
  LONG InDebugger;         // offset: 0xc ordinal: 0x4
  VOID *Pfns[32];          // offset: 0x10 ordinal: 0x5
} _MI_DEBUGGER_STATE;

// 0x48 bytes (sizeof)
typedef struct _MI_SHUTDOWN_STATE {
  UCHAR CrashDumpInitialized;            // offset: 0x0 ordinal: 0x0
  UCHAR ConnectedStandbyActive;          // offset: 0x1 ordinal: 0x1
  UCHAR ZeroPageFileAtShutdown;          // offset: 0x2 ordinal: 0x2
  ULONG SystemShutdown;                  // offset: 0x4 ordinal: 0x3
  LONG ShutdownFlushInProgress;          // offset: 0x8 ordinal: 0x4
  ULONG MirroringActive;                 // offset: 0xc ordinal: 0x5
  struct _MI_RESUME_WORKITEM ResumeItem; // offset: 0x10 ordinal: 0x6
  struct _ETHREAD *MirrorHoldsPfn;       // offset: 0x30 ordinal: 0x7
  struct _RTL_BITMAP MirrorBitMaps[2];   // offset: 0x34 ordinal: 0x8
  struct _MMPTE *CrashDumpPte;           // offset: 0x44 ordinal: 0x9
} _MI_SHUTDOWN_STATE;

// 0x2c bytes (sizeof)
typedef struct _MI_PER_SESSION_PROTOS {
  union {
    struct _RTL_BALANCED_NODE SessionProtoNode; // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY FreeList;         // offset: 0x0 ordinal: 0x1
    VOID *DriverAddress;                        // offset: 0x0 ordinal: 0x2
  };
  struct _MI_PROTOTYPE_PTES_NODE ProtosNode; // offset: 0xc ordinal: 0x3
  ULONG NumberOfPtes;                        // offset: 0x1c ordinal: 0x4
  union {
    ULONG SessionId;                // offset: 0x20 ordinal: 0x5
    struct _SUBSECTION *Subsection; // offset: 0x20 ordinal: 0x6
  };
  struct _MMPTE *SubsectionBase; // offset: 0x24 ordinal: 0x7
  union __anon_1542 u2;          // offset: 0x28 ordinal: 0x8
} _MI_PER_SESSION_PROTOS;

// 0x28 bytes (sizeof)
typedef struct _SUBSECTION {
  struct _CONTROL_AREA *ControlArea;  // offset: 0x0 ordinal: 0x0
  struct _MMPTE *SubsectionBase;      // offset: 0x4 ordinal: 0x1
  struct _SUBSECTION *NextSubsection; // offset: 0x8 ordinal: 0x2
  union {
    struct _RTL_AVL_TREE GlobalPerSessionHead; // offset: 0xc ordinal: 0x3
    struct _MI_CONTROL_AREA_WAIT_BLOCK
        *CreationWaitList; // offset: 0xc ordinal: 0x4
    struct _MI_PER_SESSION_PROTOS
        *SessionDriverProtos; // offset: 0xc ordinal: 0x5
  };
  union __anon_1537 u;         // offset: 0x10 ordinal: 0x6
  ULONG StartingSector;        // offset: 0x14 ordinal: 0x7
  ULONG NumberOfFullSectors;   // offset: 0x18 ordinal: 0x8
  ULONG PtesInSubsection;      // offset: 0x1c ordinal: 0x9
  union __anon_1538 u1;        // offset: 0x20 ordinal: 0xa
  ULONG UnusedPtes : 30;       // offset: 0x24 ordinal: 0xb
  ULONG ExtentQueryNeeded : 1; // offset: 0x24 ordinal: 0xc
  ULONG DirtyPages : 1;        // offset: 0x24 ordinal: 0xd
} _SUBSECTION;

// 0x54 bytes (sizeof)
typedef struct _MSUBSECTION {
  struct _SUBSECTION Core;                   // offset: 0x0 ordinal: 0x0
  struct _RTL_BALANCED_NODE SubsectionNode;  // offset: 0x28 ordinal: 0x1
  struct _LIST_ENTRY DereferenceList;        // offset: 0x34 ordinal: 0x2
  ULONG NumberOfMappedViews;                 // offset: 0x3c ordinal: 0x3
  ULONG NumberOfPfnReferences;               // offset: 0x40 ordinal: 0x4
  struct _MI_PROTOTYPE_PTES_NODE ProtosNode; // offset: 0x44 ordinal: 0x5
} _MSUBSECTION;

// 0x1c bytes (sizeof)
typedef struct _MMPFN {
  union {
    struct _LIST_ENTRY ListEntry;       // offset: 0x0 ordinal: 0x0
    struct _RTL_BALANCED_NODE TreeNode; // offset: 0x0 ordinal: 0x1
    union __anon_1496 u1;               // offset: 0x0 ordinal: 0x2
  };
  union {
    struct _MMPTE *PteAddress; // offset: 0x4 ordinal: 0x3
    ULONG PteLong;             // offset: 0x4 ordinal: 0x4
  };
  struct _MMPTE OriginalPte; // offset: 0x8 ordinal: 0x5
  struct _MIPFNBLINK u2;     // offset: 0x10 ordinal: 0x6
  union __anon_1502 u3;      // offset: 0x14 ordinal: 0x7
  union __anon_1505 u4;      // offset: 0x18 ordinal: 0x8
} _MMPFN;

// 0x40 bytes (sizeof)
typedef struct _MI_COMMON_PAGE_STATE {
  struct _MMPFN *PageOfOnesPfn; // offset: 0x0 ordinal: 0x0
  ULONG PageOfOnes;             // offset: 0x4 ordinal: 0x1
  struct _MMPFN *DummyPagePfn;  // offset: 0x8 ordinal: 0x2
  ULONG DummyPage;              // offset: 0xc ordinal: 0x3
  ULONG PageOfZeroes;           // offset: 0x10 ordinal: 0x4
  VOID *ZeroMapping;            // offset: 0x14 ordinal: 0x5
  VOID *OnesMapping;            // offset: 0x18 ordinal: 0x6
  ULONGLONG ZeroCrc;            // offset: 0x20 ordinal: 0x7
  ULONGLONG OnesCrc;            // offset: 0x28 ordinal: 0x8
  ULONG BitmapGapFrames[2];     // offset: 0x30 ordinal: 0x9
  ULONG PfnGapFrames[2];        // offset: 0x38 ordinal: 0xa
} _MI_COMMON_PAGE_STATE;

// 0x8 bytes (sizeof)
typedef struct _MI_HARD_FAULT_STATE {
  struct _MMPFN *SwapPfn;                            // offset: 0x0 ordinal: 0x0
  struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags; // offset: 0x4 ordinal: 0x1
} _MI_HARD_FAULT_STATE;

// 0x30 bytes (sizeof)
typedef struct _SEGMENT {
  struct _CONTROL_AREA *ControlArea;  // offset: 0x0 ordinal: 0x0
  ULONG TotalNumberOfPtes;            // offset: 0x4 ordinal: 0x1
  struct _SEGMENT_FLAGS SegmentFlags; // offset: 0x8 ordinal: 0x2
  ULONG NumberOfCommittedPages;       // offset: 0xc ordinal: 0x3
  ULONGLONG SizeOfSegment;            // offset: 0x10 ordinal: 0x4
  union {
    struct _MMEXTEND_INFO *ExtendInfo; // offset: 0x18 ordinal: 0x5
    VOID *BasedAddress;                // offset: 0x18 ordinal: 0x6
  };
  struct _EX_PUSH_LOCK SegmentLock; // offset: 0x1c ordinal: 0x7
  union __anon_1454 u1;             // offset: 0x20 ordinal: 0x8
  union __anon_1455 u2;             // offset: 0x24 ordinal: 0x9
  struct _MMPTE *PrototypePte;      // offset: 0x28 ordinal: 0xa
} _SEGMENT;

// 0x50 bytes (sizeof)
typedef struct _CONTROL_AREA {
  struct _SEGMENT *Segment; // offset: 0x0 ordinal: 0x0
  union {
    struct _LIST_ENTRY ListHead; // offset: 0x4 ordinal: 0x1
    VOID *AweContext;            // offset: 0x4 ordinal: 0x2
  };
  ULONG NumberOfSectionReferences;              // offset: 0xc ordinal: 0x3
  ULONG NumberOfPfnReferences;                  // offset: 0x10 ordinal: 0x4
  ULONG NumberOfMappedViews;                    // offset: 0x14 ordinal: 0x5
  ULONG NumberOfUserReferences;                 // offset: 0x18 ordinal: 0x6
  union __anon_1475 u;                          // offset: 0x1c ordinal: 0x7
  struct _EX_FAST_REF FilePointer;              // offset: 0x20 ordinal: 0x8
  LONG ControlAreaLock;                         // offset: 0x24 ordinal: 0x9
  ULONG ModifiedWriteCount;                     // offset: 0x28 ordinal: 0xa
  struct _MI_CONTROL_AREA_WAIT_BLOCK *WaitList; // offset: 0x2c ordinal: 0xb
  union __anon_1477 u2;                         // offset: 0x30 ordinal: 0xc
  struct _EX_PUSH_LOCK FileObjectLock;          // offset: 0x3c ordinal: 0xd
  ULONGLONG LockedPages;                        // offset: 0x40 ordinal: 0xe
  union __anon_1478 u3;                         // offset: 0x48 ordinal: 0xf
} _CONTROL_AREA;

// 0x180 bytes (sizeof)
typedef struct _MI_SECTION_STATE {
  LONG SectionObjectPointersLock;                  // offset: 0x0 ordinal: 0x0
  struct _RTL_AVL_TREE SectionBasedRoot;           // offset: 0x4 ordinal: 0x1
  struct _EX_PUSH_LOCK SectionBasedLock;           // offset: 0x8 ordinal: 0x2
  ULONG UnusedSegmentPagedPool;                    // offset: 0xc ordinal: 0x3
  ULONG DataSectionProtectionMask;                 // offset: 0x10 ordinal: 0x4
  VOID *HighSectionBase;                           // offset: 0x14 ordinal: 0x5
  struct _MSUBSECTION PhysicalSubsection;          // offset: 0x18 ordinal: 0x6
  struct _CONTROL_AREA PhysicalControlArea;        // offset: 0x70 ordinal: 0x7
  struct _MMPFNLIST PurgingExtentPages;            // offset: 0xc0 ordinal: 0x8
  struct _MMPFN *DanglingExtentPages;              // offset: 0xd4 ordinal: 0x9
  struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem; // offset: 0xd8 ordinal: 0xa
  struct _MI_EXTENT_DELETION_WAIT_BLOCK
      DanglingExtentsDeletionWaitList;        // offset: 0xe8 ordinal: 0xb
  UCHAR FileOnlyMemoryPfnsCreated;            // offset: 0xfc ordinal: 0xc
  UCHAR DanglingExtentsWorkerActive;          // offset: 0xfd ordinal: 0xd
  UCHAR PurgingExtentsNeedWatchdog;           // offset: 0xfe ordinal: 0xe
  struct _RTL_AVL_TREE PrototypePtesTree;     // offset: 0x100 ordinal: 0xf
  LONG PrototypePtesTreeSpinLock;             // offset: 0x104 ordinal: 0x10
  struct _EX_PUSH_LOCK RelocateBitmapsLock;   // offset: 0x108 ordinal: 0x11
  struct _RTL_BITMAP ImageBitMapNative;       // offset: 0x10c ordinal: 0x12
  ULONG ImageBiasNative;                      // offset: 0x114 ordinal: 0x13
  struct _MI_DLL_OVERFLOW_AREA OverflowArea;  // offset: 0x118 ordinal: 0x14
  VOID *ApiSetSection;                        // offset: 0x120 ordinal: 0x15
  VOID *ApiSetSchema;                         // offset: 0x124 ordinal: 0x16
  ULONG ApiSetSchemaSize;                     // offset: 0x128 ordinal: 0x17
  ULONG LostDataFiles;                        // offset: 0x12c ordinal: 0x18
  ULONG LostDataPages;                        // offset: 0x130 ordinal: 0x19
  ULONG ImageFailureReason;                   // offset: 0x134 ordinal: 0x1a
  struct _SECTION *CfgBitMapSection;          // offset: 0x138 ordinal: 0x1b
  struct _CONTROL_AREA *CfgBitMapControlArea; // offset: 0x13c ordinal: 0x1c
  ULONG ImageCfgFailure;                      // offset: 0x140 ordinal: 0x1d
  ULONG ImageBreakpointEnabled;               // offset: 0x144 ordinal: 0x1e
  ULONG ImageBreakpointChecksum;              // offset: 0x148 ordinal: 0x1f
  ULONG ImageBreakpointSize;                  // offset: 0x14c ordinal: 0x20
  LONG ImageValidationFailed;                 // offset: 0x150 ordinal: 0x21
  struct _RTL_AVL_TREE ImageExtentTree;       // offset: 0x154 ordinal: 0x22
  struct _EX_PUSH_LOCK ImageExtentTreeLock;   // offset: 0x158 ordinal: 0x23
  ULONG HotPatchReserveSize;                  // offset: 0x15c ordinal: 0x24
} _MI_SECTION_STATE;

// 0x18 bytes (sizeof)
typedef struct _MI_PTE_CHAIN_HEAD {
  struct _MMPTE Flink;    // offset: 0x0 ordinal: 0x0
  struct _MMPTE Blink;    // offset: 0x8 ordinal: 0x1
  struct _MMPTE *PteBase; // offset: 0x10 ordinal: 0x2
} _MI_PTE_CHAIN_HEAD;

// 0x34 bytes (sizeof)
typedef struct _MI_SYSTEM_PTE_TYPE {
  struct _RTL_BITMAP Bitmap;      // offset: 0x0 ordinal: 0x0
  struct _MMPTE *BasePte;         // offset: 0x8 ordinal: 0x1
  ULONG Flags;                    // offset: 0xc ordinal: 0x2
  enum _MI_SYSTEM_VA_TYPE VaType; // offset: 0x10 ordinal: 0x3
  ULONG *FailureCount;            // offset: 0x14 ordinal: 0x4
  ULONG PteFailures;              // offset: 0x18 ordinal: 0x5
  union {
    ULONG SpinLock;                       // offset: 0x1c ordinal: 0x6
    struct _EX_PUSH_LOCK *GlobalPushLock; // offset: 0x1c ordinal: 0x7
  };
  ULONG TotalSystemPtes;              // offset: 0x20 ordinal: 0x8
  ULONG Hint;                         // offset: 0x24 ordinal: 0x9
  ULONG LowestBitEverAllocated;       // offset: 0x28 ordinal: 0xa
  struct _MI_CACHED_PTES *CachedPtes; // offset: 0x2c ordinal: 0xb
  ULONG TotalFreeSystemPtes;          // offset: 0x30 ordinal: 0xc
} _MI_SYSTEM_PTE_TYPE;

// 0x18 bytes (sizeof)
typedef struct _MMWSL_INSTANCE {
  struct _MMPTE *NextPteToTrim;        // offset: 0x0 ordinal: 0x0
  struct _MMPTE *NextPteToAge;         // offset: 0x4 ordinal: 0x1
  struct _MMPTE *NextPteToAccessClear; // offset: 0x8 ordinal: 0x2
  ULONG LastAccessClearingRemainder;   // offset: 0xc ordinal: 0x3
  ULONG LastAgingRemainder;            // offset: 0x10 ordinal: 0x4
  ULONG LockedEntries;                 // offset: 0x14 ordinal: 0x5
} _MMWSL_INSTANCE;

// 0x2740 bytes (sizeof)
typedef struct _MI_SYSTEM_VA_STATE {
  ULONG SystemTablesLock;             // offset: 0x0 ordinal: 0x0
  ULONG SystemVaBias;                 // offset: 0x4 ordinal: 0x1
  ULONG SystemAvailableVaLow;         // offset: 0x8 ordinal: 0x2
  ULONG VirtualBias;                  // offset: 0xc ordinal: 0x3
  VOID *SystemRangeStart;             // offset: 0x10 ordinal: 0x4
  UCHAR SystemCachePdeCount[1024];    // offset: 0x14 ordinal: 0x5
  VOID *SystemCacheReverseMaps[1024]; // offset: 0x414 ordinal: 0x6
  struct _MI_SYSTEM_REGION_REFERENCE
      VaRegion[1024];                    // offset: 0x1414 ordinal: 0x7
  ULONG TopLevelPteLockBits[128];        // offset: 0x2414 ordinal: 0x8
  ULONG TopLevelPteAlternateLockBits[4]; // offset: 0x2614 ordinal: 0x9
  LONG DeleteKvaLock;                    // offset: 0x2624 ordinal: 0xa
  struct _MI_WSLE *WsleArrays[8];        // offset: 0x2628 ordinal: 0xb
  VOID *PagableHyperSpace;               // offset: 0x2648 ordinal: 0xc
  VOID *HyperSpaceEnd;                   // offset: 0x264c ordinal: 0xd
  ULONG PagableHyperSpaceBytes;          // offset: 0x2650 ordinal: 0xe
  struct _KEVENT FreeSystemCacheVa;      // offset: 0x2654 ordinal: 0xf
  ULONG SystemVaLock;                    // offset: 0x2664 ordinal: 0x10
  ULONG SystemCacheViewLock;             // offset: 0x2668 ordinal: 0x11
  struct _MMWSL_INSTANCE
      SystemWorkingSetList[8]; // offset: 0x266c ordinal: 0x12
} _MI_SYSTEM_VA_STATE;

// 0x64 bytes (sizeof)
typedef struct _MMSUPPORT_INSTANCE {
  ULONG NextPageColor;                         // offset: 0x0 ordinal: 0x0
  ULONG PageFaultCount;                        // offset: 0x4 ordinal: 0x1
  ULONG TrimmedPageCount;                      // offset: 0x8 ordinal: 0x2
  struct _MMWSL_INSTANCE *VmWorkingSetList;    // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY WorkingSetExpansionLinks; // offset: 0x10 ordinal: 0x4
  ULONG AgeDistribution[8];                    // offset: 0x18 ordinal: 0x5
  struct _KGATE *ExitOutswapGate;              // offset: 0x38 ordinal: 0x6
  ULONG MinimumWorkingSetSize;                 // offset: 0x3c ordinal: 0x7
  ULONG WorkingSetLeafSize;                    // offset: 0x40 ordinal: 0x8
  ULONG WorkingSetLeafPrivateSize;             // offset: 0x44 ordinal: 0x9
  ULONG WorkingSetSize;                        // offset: 0x48 ordinal: 0xa
  ULONG WorkingSetPrivateSize;                 // offset: 0x4c ordinal: 0xb
  ULONG MaximumWorkingSetSize;                 // offset: 0x50 ordinal: 0xc
  ULONG PeakWorkingSetSize;                    // offset: 0x54 ordinal: 0xd
  ULONG HardFaultCount;                        // offset: 0x58 ordinal: 0xe
  USHORT LastTrimStamp;                        // offset: 0x5c ordinal: 0xf
  USHORT Unused0;                              // offset: 0x5e ordinal: 0x10
  struct _MMSUPPORT_FLAGS Flags;               // offset: 0x60 ordinal: 0x11
} _MMSUPPORT_INSTANCE;

// 0x100 bytes (sizeof)
typedef struct _MMSUPPORT_FULL {
  struct _MMSUPPORT_INSTANCE Instance; // offset: 0x0 ordinal: 0x0
  struct _MMSUPPORT_SHARED Shared;     // offset: 0x80 ordinal: 0x1
} _MMSUPPORT_FULL;

// 0xcc0 bytes (sizeof)
typedef struct _MI_VISIBLE_STATE {
  struct _LIST_ENTRY SessionWsList;           // offset: 0x0 ordinal: 0x0
  struct _RTL_BITMAP *SessionIdBitmap;        // offset: 0x8 ordinal: 0x1
  struct _MM_PAGED_POOL_INFO PagedPoolInfo;   // offset: 0xc ordinal: 0x2
  ULONG MaximumNonPagedPoolInPages;           // offset: 0x18 ordinal: 0x3
  ULONG SizeOfPagedPoolInPages;               // offset: 0x1c ordinal: 0x4
  struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;   // offset: 0x20 ordinal: 0x5
  ULONG NonPagedPoolCommit;                   // offset: 0x54 ordinal: 0x6
  ULONG SmallNonPagedPtesCommit;              // offset: 0x58 ordinal: 0x7
  ULONG BootCommit;                           // offset: 0x5c ordinal: 0x8
  ULONG MdlPagesAllocated;                    // offset: 0x60 ordinal: 0x9
  ULONG SystemPageTableCommit;                // offset: 0x64 ordinal: 0xa
  ULONG ProcessCommit;                        // offset: 0x68 ordinal: 0xb
  LONG DriverCommit;                          // offset: 0x6c ordinal: 0xc
  UCHAR PagingLevels;                         // offset: 0x70 ordinal: 0xd
  ULONG PfnDatabaseCommit;                    // offset: 0x74 ordinal: 0xe
  struct _MMSUPPORT_FULL SystemWs[6];         // offset: 0x80 ordinal: 0xf
  struct _MMSUPPORT_SHARED SystemCacheShared; // offset: 0x680 ordinal: 0x10
  ULONG MapCacheFailures;                     // offset: 0x700 ordinal: 0x11
  ULONG PagefileHashPages;                    // offset: 0x704 ordinal: 0x12
  struct _SYSPTES_HEADER PteHeader;           // offset: 0x708 ordinal: 0x13
  ULONG SystemVaTypeCount[15];                // offset: 0x794 ordinal: 0x14
  UCHAR SystemVaType[1024];                   // offset: 0x7d0 ordinal: 0x15
  ULONG SystemVaTypeCountFailures[15];        // offset: 0xbd0 ordinal: 0x16
  ULONG SystemVaTypeCountLimit[15];           // offset: 0xc0c ordinal: 0x17
  ULONG SystemVaTypeCountPeak[15];            // offset: 0xc48 ordinal: 0x18
  ULONG SystemAvailableVa;                    // offset: 0xc84 ordinal: 0x19
} _MI_VISIBLE_STATE;

// 0x10 bytes (sizeof)
typedef struct __anon_976 {
  ULONGLONG Minimum; // offset: 0x0 ordinal: 0x0
  ULONGLONG Maximum; // offset: 0x8 ordinal: 0x1
} __anon_976;

// 0x28 bytes (sizeof)
typedef struct _PO_FX_COMPONENT_PERF_SET {
  struct _UNICODE_STRING Name;      // offset: 0x0 ordinal: 0x0
  ULONGLONG Flags;                  // offset: 0x8 ordinal: 0x1
  enum _PO_FX_PERF_STATE_UNIT Unit; // offset: 0x10 ordinal: 0x2
  enum _PO_FX_PERF_STATE_TYPE Type; // offset: 0x14 ordinal: 0x3
  union {
    struct __anon_975 Discrete; // offset: 0x18 ordinal: 0x4
    struct __anon_976 Range;    // offset: 0x18 ordinal: 0x5
  };
} _PO_FX_COMPONENT_PERF_SET;

// 0x8 bytes (sizeof)
typedef union _TIMELINE_BITMAP {
  ULONGLONG Value; // offset: 0x0 ordinal: 0x0
  ULONG EndTime;   // offset: 0x0 ordinal: 0x1
  ULONG Bitmap;    // offset: 0x4 ordinal: 0x2
} _TIMELINE_BITMAP;

// 0xa0 bytes (sizeof)
typedef struct _PROCESS_ENERGY_VALUES_EXTENSION {
  union {
    union _TIMELINE_BITMAP Timelines[14]; // offset: 0x0 ordinal: 0x0
    union _TIMELINE_BITMAP CpuTimeline;   // offset: 0x0 ordinal: 0x1
  };
  union _TIMELINE_BITMAP DiskTimeline;           // offset: 0x8 ordinal: 0x2
  union _TIMELINE_BITMAP NetworkTimeline;        // offset: 0x10 ordinal: 0x3
  union _TIMELINE_BITMAP MBBTimeline;            // offset: 0x18 ordinal: 0x4
  union _TIMELINE_BITMAP ForegroundTimeline;     // offset: 0x20 ordinal: 0x5
  union _TIMELINE_BITMAP DesktopVisibleTimeline; // offset: 0x28 ordinal: 0x6
  union _TIMELINE_BITMAP
      CompositionRenderedTimeline; // offset: 0x30 ordinal: 0x7
  union _TIMELINE_BITMAP
      CompositionDirtyGeneratedTimeline; // offset: 0x38 ordinal: 0x8
  union _TIMELINE_BITMAP
      CompositionDirtyPropagatedTimeline;         // offset: 0x40 ordinal: 0x9
  union _TIMELINE_BITMAP InputTimeline;           // offset: 0x48 ordinal: 0xa
  union _TIMELINE_BITMAP AudioInTimeline;         // offset: 0x50 ordinal: 0xb
  union _TIMELINE_BITMAP AudioOutTimeline;        // offset: 0x58 ordinal: 0xc
  union _TIMELINE_BITMAP DisplayRequiredTimeline; // offset: 0x60 ordinal: 0xd
  union _TIMELINE_BITMAP KeyboardInputTimeline;   // offset: 0x68 ordinal: 0xe
  union {
    union _ENERGY_STATE_DURATION Durations[5];  // offset: 0x70 ordinal: 0xf
    union _ENERGY_STATE_DURATION InputDuration; // offset: 0x70 ordinal: 0x10
  };
  union _ENERGY_STATE_DURATION AudioInDuration;  // offset: 0x78 ordinal: 0x11
  union _ENERGY_STATE_DURATION AudioOutDuration; // offset: 0x80 ordinal: 0x12
  union _ENERGY_STATE_DURATION
      DisplayRequiredDuration; // offset: 0x88 ordinal: 0x13
  union _ENERGY_STATE_DURATION
      PSMBackgroundDuration; // offset: 0x90 ordinal: 0x14
  ULONG KeyboardInput;       // offset: 0x98 ordinal: 0x15
  ULONG MouseInput;          // offset: 0x9c ordinal: 0x16
} _PROCESS_ENERGY_VALUES_EXTENSION;

// 0x8 bytes (sizeof)
typedef union _JOBOBJECT_ENERGY_TRACKING_STATE {
  ULONGLONG Value;    // offset: 0x0 ordinal: 0x0
  ULONG UpdateMask;   // offset: 0x0 ordinal: 0x1
  ULONG DesiredState; // offset: 0x4 ordinal: 0x2
} _JOBOBJECT_ENERGY_TRACKING_STATE;

// 0x58 bytes (sizeof)
typedef struct _EPROCESS_VALUES {
  ULONGLONG KernelTime;         // offset: 0x0 ordinal: 0x0
  ULONGLONG UserTime;           // offset: 0x8 ordinal: 0x1
  ULONGLONG ReadyTime;          // offset: 0x10 ordinal: 0x2
  ULONGLONG CycleTime;          // offset: 0x18 ordinal: 0x3
  ULONGLONG ContextSwitches;    // offset: 0x20 ordinal: 0x4
  LONGLONG ReadOperationCount;  // offset: 0x28 ordinal: 0x5
  LONGLONG WriteOperationCount; // offset: 0x30 ordinal: 0x6
  LONGLONG OtherOperationCount; // offset: 0x38 ordinal: 0x7
  LONGLONG ReadTransferCount;   // offset: 0x40 ordinal: 0x8
  LONGLONG WriteTransferCount;  // offset: 0x48 ordinal: 0x9
  LONGLONG OtherTransferCount;  // offset: 0x50 ordinal: 0xa
} _EPROCESS_VALUES;

// 0x48 bytes (sizeof)
typedef struct _PS_JOB_WAKE_INFORMATION {
  ULONGLONG NotificationChannel; // offset: 0x0 ordinal: 0x0
  ULONGLONG WakeCounters[7];     // offset: 0x8 ordinal: 0x1
  ULONGLONG NoWakeCounter;       // offset: 0x40 ordinal: 0x2
} _PS_JOB_WAKE_INFORMATION;

// 0x28 bytes (sizeof)
typedef struct _PROCESS_DISK_COUNTERS {
  ULONGLONG BytesRead;           // offset: 0x0 ordinal: 0x0
  ULONGLONG BytesWritten;        // offset: 0x8 ordinal: 0x1
  ULONGLONG ReadOperationCount;  // offset: 0x10 ordinal: 0x2
  ULONGLONG WriteOperationCount; // offset: 0x18 ordinal: 0x3
  ULONGLONG FlushOperationCount; // offset: 0x20 ordinal: 0x4
} _PROCESS_DISK_COUNTERS;

// 0x7000 bytes (sizeof)
typedef struct _MM_SESSION_SPACE {
  LONG ReferenceCount;                           // offset: 0x0 ordinal: 0x0
  union __anon_873 u;                            // offset: 0x4 ordinal: 0x1
  ULONG SessionId;                               // offset: 0x8 ordinal: 0x2
  LONG ProcessReferenceToSession;                // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY ProcessList;                // offset: 0x10 ordinal: 0x4
  ULONG SessionPageDirectoryIndex;               // offset: 0x18 ordinal: 0x5
  ULONG NonPagablePages;                         // offset: 0x1c ordinal: 0x6
  ULONG CommittedPages;                          // offset: 0x20 ordinal: 0x7
  VOID *PagedPoolStart;                          // offset: 0x24 ordinal: 0x8
  VOID *PagedPoolEnd;                            // offset: 0x28 ordinal: 0x9
  VOID *SessionObject;                           // offset: 0x2c ordinal: 0xa
  VOID *SessionObjectHandle;                     // offset: 0x30 ordinal: 0xb
  struct _RTL_AVL_TREE ImageTree;                // offset: 0x34 ordinal: 0xc
  ULONG LocaleId;                                // offset: 0x38 ordinal: 0xd
  ULONG AttachCount;                             // offset: 0x3c ordinal: 0xe
  struct _KGATE AttachGate;                      // offset: 0x40 ordinal: 0xf
  struct _LIST_ENTRY WsListEntry;                // offset: 0x50 ordinal: 0x10
  struct _MM_PAGED_POOL_INFO PagedPoolInfo;      // offset: 0x58 ordinal: 0x11
  struct _MMSESSION Session;                     // offset: 0x64 ordinal: 0x12
  ULONGLONG CombineDomain;                       // offset: 0x78 ordinal: 0x13
  struct _MMSUPPORT_FULL Vm;                     // offset: 0x80 ordinal: 0x14
  struct _MMWSL_INSTANCE WorkingSetList;         // offset: 0x180 ordinal: 0x15
  VOID *HeapState;                               // offset: 0x198 ordinal: 0x16
  struct _POOL_DESCRIPTOR PagedPool;             // offset: 0x1c0 ordinal: 0x17
  struct _MI_SESSION_DRIVER_UNLOAD DriverUnload; // offset: 0x2c0 ordinal: 0x18
  ULONG TopLevelPteLockBits[128];                // offset: 0x2c4 ordinal: 0x19
  struct _MMPTE PageTables[1024];                // offset: 0x4c8 ordinal: 0x1a
  struct _EX_PUSH_LOCK SessionPteLock;           // offset: 0x24c8 ordinal: 0x1b
  LONG PoolBigEntriesInUse;                      // offset: 0x24cc ordinal: 0x1c
  LONG PagedPoolPdeCount;                        // offset: 0x24d0 ordinal: 0x1d
  ULONG DynamicSessionPdeCount;                  // offset: 0x24d4 ordinal: 0x1e
  struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;      // offset: 0x24d8 ordinal: 0x1f
  VOID *PoolTrackTableExpansion;                 // offset: 0x250c ordinal: 0x20
  ULONG PoolTrackTableExpansionSize;             // offset: 0x2510 ordinal: 0x21
  VOID *PoolTrackBigPages;                       // offset: 0x2514 ordinal: 0x22
  ULONG PoolTrackBigPagesSize;                   // offset: 0x2518 ordinal: 0x23
  struct _RTL_AVL_TREE PermittedFaultsTree;      // offset: 0x251c ordinal: 0x24
  enum _IO_SESSION_STATE IoState;                // offset: 0x2520 ordinal: 0x25
  ULONG IoStateSequence;                         // offset: 0x2524 ordinal: 0x26
  struct _KEVENT IoNotificationEvent;            // offset: 0x2528 ordinal: 0x27
  struct _EJOB *ServerSilo;                      // offset: 0x2538 ordinal: 0x28
  ULONGLONG CreateTime;                          // offset: 0x2540 ordinal: 0x29
  UCHAR PoolTags[16384];                         // offset: 0x3000 ordinal: 0x2a
} _MM_SESSION_SPACE;

// 0x20 bytes (sizeof)
typedef struct _POP_FX_PERF_SET {
  struct _PO_FX_COMPONENT_PERF_SET *PerfSet; // offset: 0x0 ordinal: 0x0
  ULONGLONG CurrentPerf;                     // offset: 0x8 ordinal: 0x1
  ULONGLONG CurrentPerfStamp;                // offset: 0x10 ordinal: 0x2
  UCHAR CurrentPerfNominal;                  // offset: 0x18 ordinal: 0x3
} _POP_FX_PERF_SET;

// 0x10 bytes (sizeof)
typedef struct _PO_FX_PERF_STATE_CHANGE {
  ULONG Set; // offset: 0x0 ordinal: 0x0
  union {
    ULONG StateIndex;     // offset: 0x8 ordinal: 0x1
    ULONGLONG StateValue; // offset: 0x8 ordinal: 0x2
  };
} _PO_FX_PERF_STATE_CHANGE;

// 0x30 bytes (sizeof)
typedef struct _PS_PROCESS_WAKE_INFORMATION {
  ULONGLONG NotificationChannel;            // offset: 0x0 ordinal: 0x0
  ULONG WakeCounters[7];                    // offset: 0x8 ordinal: 0x1
  struct _JOBOBJECT_WAKE_FILTER WakeFilter; // offset: 0x24 ordinal: 0x2
  ULONG NoWakeCounter;                      // offset: 0x2c ordinal: 0x3
} _PS_PROCESS_WAKE_INFORMATION;

// 0x18 bytes (sizeof)
typedef struct _POP_FX_IDLE_STATE {
  ULONGLONG TransitionLatency;    // offset: 0x0 ordinal: 0x0
  ULONGLONG ResidencyRequirement; // offset: 0x8 ordinal: 0x1
  ULONG NominalPower;             // offset: 0x10 ordinal: 0x2
} _POP_FX_IDLE_STATE;

// 0x38 bytes (sizeof)
typedef struct _PPM_VETO_ENTRY {
  struct _LIST_ENTRY Link;      // offset: 0x0 ordinal: 0x0
  ULONG VetoReason;             // offset: 0x8 ordinal: 0x1
  ULONG ReferenceCount;         // offset: 0xc ordinal: 0x2
  ULONGLONG HitCount;           // offset: 0x10 ordinal: 0x3
  ULONGLONG LastActivationTime; // offset: 0x18 ordinal: 0x4
  ULONGLONG TotalActiveTime;    // offset: 0x20 ordinal: 0x5
  ULONGLONG CsActivationTime;   // offset: 0x28 ordinal: 0x6
  ULONGLONG CsActiveTime;       // offset: 0x30 ordinal: 0x7
} _PPM_VETO_ENTRY;

// 0x18 bytes (sizeof)
typedef struct _PPM_VETO_ACCOUNTING {
  LONG VetoPresent;                             // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY VetoListHead;              // offset: 0x4 ordinal: 0x1
  UCHAR CsAccountingBlocks;                     // offset: 0xc ordinal: 0x2
  UCHAR BlocksDrips;                            // offset: 0xd ordinal: 0x3
  ULONG PreallocatedVetoCount;                  // offset: 0x10 ordinal: 0x4
  struct _PPM_VETO_ENTRY *PreallocatedVetoList; // offset: 0x14 ordinal: 0x5
} _PPM_VETO_ACCOUNTING;

// 0xc0 bytes (sizeof)
typedef struct _PPM_PLATFORM_STATE {
  ULONGLONG LevelId;                          // offset: 0x0 ordinal: 0x0
  ULONG Latency;                              // offset: 0x8 ordinal: 0x1
  ULONG BreakEvenDuration;                    // offset: 0xc ordinal: 0x2
  struct _PPM_VETO_ACCOUNTING VetoAccounting; // offset: 0x10 ordinal: 0x3
  UCHAR TransitionDebugger;                   // offset: 0x28 ordinal: 0x4
  UCHAR Platform;                             // offset: 0x29 ordinal: 0x5
  ULONG DependencyListCount;                  // offset: 0x2c ordinal: 0x6
  struct _KAFFINITY_EX Processors;            // offset: 0x30 ordinal: 0x7
  struct _UNICODE_STRING Name;                // offset: 0x3c ordinal: 0x8
  struct _PPM_SELECTION_DEPENDENCY
      *DependencyLists; // offset: 0x44 ordinal: 0x9
  union _PPM_COORDINATED_SYNCHRONIZATION
      Synchronization; // offset: 0x48 ordinal: 0xa
  ULONGLONG EnterTime; // offset: 0x50 ordinal: 0xb
  union {
    LONG RefCount;         // offset: 0x80 ordinal: 0xc
    UCHAR CacheAlign0[64]; // offset: 0x80 ordinal: 0xd
  };
} _PPM_PLATFORM_STATE;

// 0x44 bytes (sizeof)
typedef struct _PPM_IDLE_STATE {
  struct _KAFFINITY_EX DomainMembers;         // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING Name;                // offset: 0xc ordinal: 0x1
  ULONG Latency;                              // offset: 0x14 ordinal: 0x2
  ULONG BreakEvenDuration;                    // offset: 0x18 ordinal: 0x3
  ULONG Power;                                // offset: 0x1c ordinal: 0x4
  ULONG StateFlags;                           // offset: 0x20 ordinal: 0x5
  struct _PPM_VETO_ACCOUNTING VetoAccounting; // offset: 0x24 ordinal: 0x6
  UCHAR StateType;                            // offset: 0x3c ordinal: 0x7
  UCHAR InterruptsEnabled;                    // offset: 0x3d ordinal: 0x8
  UCHAR Interruptible;                        // offset: 0x3e ordinal: 0x9
  UCHAR ContextRetained;                      // offset: 0x3f ordinal: 0xa
  UCHAR CacheCoherent;                        // offset: 0x40 ordinal: 0xb
  UCHAR WakesSpuriously;                      // offset: 0x41 ordinal: 0xc
  UCHAR PlatformOnly;                         // offset: 0x42 ordinal: 0xd
  UCHAR NoCState;                             // offset: 0x43 ordinal: 0xe
} _PPM_IDLE_STATE;

// 0x50 bytes (sizeof)
typedef struct _INTERRUPT_VECTOR_DATA {
  enum INTERRUPT_CONNECTION_TYPE Type;           // offset: 0x0 ordinal: 0x0
  ULONG Vector;                                  // offset: 0x4 ordinal: 0x1
  UCHAR Irql;                                    // offset: 0x8 ordinal: 0x2
  enum _KINTERRUPT_POLARITY Polarity;            // offset: 0xc ordinal: 0x3
  enum _KINTERRUPT_MODE Mode;                    // offset: 0x10 ordinal: 0x4
  struct _GROUP_AFFINITY TargetProcessors;       // offset: 0x14 ordinal: 0x5
  struct _INTERRUPT_REMAPPING_INFO IntRemapInfo; // offset: 0x20 ordinal: 0x6
  struct __anon_671 ControllerInput;             // offset: 0x30 ordinal: 0x7
  ULONGLONG HvDeviceId;                          // offset: 0x38 ordinal: 0x8
  union {
    struct __anon_672 XapicMessage;   // offset: 0x40 ordinal: 0x9
    struct __anon_673 Hypertransport; // offset: 0x40 ordinal: 0xa
    struct __anon_672 GenericMessage; // offset: 0x40 ordinal: 0xb
    struct __anon_674 MessageRequest; // offset: 0x40 ordinal: 0xc
  };
} _INTERRUPT_VECTOR_DATA;

typedef LONG (*__anon_2501)(struct _INTERRUPT_VECTOR_DATA *,
                            struct _GROUP_AFFINITY *, ULONG *);

typedef VOID (*__anon_2485)(ULONG, ULONG, struct _PCI_BUSMASTER_DESCRIPTOR *,
                            UCHAR, struct _INTERRUPT_VECTOR_DATA *, ULONG);

typedef LONG (*__anon_2484)(ULONG, ULONG, struct _PCI_BUSMASTER_DESCRIPTOR *,
                            UCHAR, struct _INTERRUPT_VECTOR_DATA *, ULONG);

typedef LONG (*__anon_2480)(struct _INTERRUPT_VECTOR_DATA *, ULONG *);

// 0x58 bytes (sizeof)
typedef struct _INTERRUPT_CONNECTION_DATA {
  ULONG Count;                              // offset: 0x0 ordinal: 0x0
  struct _INTERRUPT_VECTOR_DATA Vectors[1]; // offset: 0x8 ordinal: 0x1
} _INTERRUPT_CONNECTION_DATA;

// 0x50 bytes (sizeof)
typedef struct _PNP_REBALANCE_TRACE_CONTEXT {
  ULONG DeviceCount;                       // offset: 0x0 ordinal: 0x0
  ULONG RebalancePhase;                    // offset: 0x4 ordinal: 0x1
  enum _PNP_REBALANCE_REASON Reason[2];    // offset: 0x8 ordinal: 0x2
  enum _PNP_REBALANCE_FAILURE Failure[2];  // offset: 0x10 ordinal: 0x3
  struct _DEVICE_NODE *SubtreeRoot;        // offset: 0x18 ordinal: 0x4
  UCHAR SubtreeIncludesRoot;               // offset: 0x1c ordinal: 0x5
  struct _DEVICE_NODE *TriggerRoot;        // offset: 0x20 ordinal: 0x6
  UCHAR RebalanceDueToDynamicPartitioning; // offset: 0x24 ordinal: 0x7
  ULONGLONG BeginTime;                     // offset: 0x28 ordinal: 0x8
  struct _DEVICE_NODE *VetoNode[2];        // offset: 0x30 ordinal: 0x9
  enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
      VetoQueryRebalanceReason[2]; // offset: 0x38 ordinal: 0xa
  struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
      ConflictContext; // offset: 0x40 ordinal: 0xb
} _PNP_REBALANCE_TRACE_CONTEXT;

// 0x20 bytes (sizeof)
typedef struct _PROC_IDLE_STATE_BUCKET {
  ULONGLONG TotalTime; // offset: 0x0 ordinal: 0x0
  ULONGLONG MinTime;   // offset: 0x8 ordinal: 0x1
  ULONGLONG MaxTime;   // offset: 0x10 ordinal: 0x2
  ULONG Count;         // offset: 0x18 ordinal: 0x3
} _PROC_IDLE_STATE_BUCKET;

// 0x80 bytes (sizeof)
typedef struct _PPM_SELECTION_STATISTICS {
  ULONGLONG SelectedCount;                        // offset: 0x0 ordinal: 0x0
  ULONGLONG VetoCount;                            // offset: 0x8 ordinal: 0x1
  ULONGLONG PreVetoCount;                         // offset: 0x10 ordinal: 0x2
  ULONGLONG WrongProcessorCount;                  // offset: 0x18 ordinal: 0x3
  ULONGLONG LatencyCount;                         // offset: 0x20 ordinal: 0x4
  ULONGLONG IdleDurationCount;                    // offset: 0x28 ordinal: 0x5
  ULONGLONG DeviceDependencyCount;                // offset: 0x30 ordinal: 0x6
  ULONGLONG ProcessorDependencyCount;             // offset: 0x38 ordinal: 0x7
  ULONGLONG PlatformOnlyCount;                    // offset: 0x40 ordinal: 0x8
  ULONGLONG InterruptibleCount;                   // offset: 0x48 ordinal: 0x9
  ULONGLONG LegacyOverrideCount;                  // offset: 0x50 ordinal: 0xa
  ULONGLONG CstateCheckCount;                     // offset: 0x58 ordinal: 0xb
  ULONGLONG NoCStateCount;                        // offset: 0x60 ordinal: 0xc
  ULONGLONG CoordinatedDependencyCount;           // offset: 0x68 ordinal: 0xd
  ULONGLONG NotClockOwnerCount;                   // offset: 0x70 ordinal: 0xe
  struct _PPM_VETO_ACCOUNTING *PreVetoAccounting; // offset: 0x78 ordinal: 0xf
} _PPM_SELECTION_STATISTICS;

// 0x3f0 bytes (sizeof)
typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING {
  ULONG CancelCount;        // offset: 0x0 ordinal: 0x0
  ULONG FailureCount;       // offset: 0x4 ordinal: 0x1
  ULONG SuccessCount;       // offset: 0x8 ordinal: 0x2
  ULONGLONG MaxTime;        // offset: 0x10 ordinal: 0x3
  ULONGLONG MinTime;        // offset: 0x18 ordinal: 0x4
  ULONGLONG TotalTime;      // offset: 0x20 ordinal: 0x5
  ULONG InvalidBucketIndex; // offset: 0x28 ordinal: 0x6
  struct _PPM_SELECTION_STATISTICS
      SelectionStatistics; // offset: 0x30 ordinal: 0x7
  struct _PROC_IDLE_STATE_BUCKET
      IdleTimeBuckets[26]; // offset: 0xb0 ordinal: 0x8
} _PLATFORM_IDLE_STATE_ACCOUNTING;

// 0x408 bytes (sizeof)
typedef struct _PLATFORM_IDLE_ACCOUNTING {
  ULONG ResetCount;                                // offset: 0x0 ordinal: 0x0
  ULONG StateCount;                                // offset: 0x4 ordinal: 0x1
  ULONG DeepSleepCount;                            // offset: 0x8 ordinal: 0x2
  enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;         // offset: 0xc ordinal: 0x3
  ULONGLONG StartTime;                             // offset: 0x10 ordinal: 0x4
  struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1]; // offset: 0x18 ordinal: 0x5
} _PLATFORM_IDLE_ACCOUNTING;

// 0x100 bytes (sizeof)
typedef struct _PPM_PLATFORM_STATES {
  ULONG StateCount;                        // offset: 0x0 ordinal: 0x0
  ULONG InterfaceVersion;                  // offset: 0x4 ordinal: 0x1
  ULONG ProcessorCount;                    // offset: 0x8 ordinal: 0x2
  UCHAR CoordinatedInterface;              // offset: 0xc ordinal: 0x3
  ULONG (*IdleTest)(VOID *, ULONG, ULONG); // offset: 0x10 ordinal: 0x4
  LONG(*IdlePreExecute)
  (VOID *, ULONG, ULONG, ULONG, ULONG *); // offset: 0x14 ordinal: 0x5
  VOID(*IdleComplete)
  (VOID *, ULONG, ULONG, ULONG, ULONG *); // offset: 0x18 ordinal: 0x6
  LONG(*QueryPlatformStateResidency)
  (VOID *,
   struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES *); // offset: 0x1c ordinal: 0x7
  struct _PLATFORM_IDLE_ACCOUNTING *Accounting;     // offset: 0x20 ordinal: 0x8
  UCHAR DeepSleepEnabled;                           // offset: 0x24 ordinal: 0x9
  struct _PPM_PLATFORM_STATE State[1];              // offset: 0x40 ordinal: 0xa
} _PPM_PLATFORM_STATES;

// 0x18 bytes (sizeof)
typedef struct _COUNTER_READING {
  enum _HARDWARE_COUNTER_TYPE Type; // offset: 0x0 ordinal: 0x0
  ULONG Index;                      // offset: 0x4 ordinal: 0x1
  ULONGLONG Start;                  // offset: 0x8 ordinal: 0x2
  ULONGLONG Total;                  // offset: 0x10 ordinal: 0x3
} _COUNTER_READING;

// 0x1c0 bytes (sizeof)
typedef struct _THREAD_PERFORMANCE_DATA {
  USHORT Size;                              // offset: 0x0 ordinal: 0x0
  USHORT Version;                           // offset: 0x2 ordinal: 0x1
  struct _PROCESSOR_NUMBER ProcessorNumber; // offset: 0x4 ordinal: 0x2
  ULONG ContextSwitches;                    // offset: 0x8 ordinal: 0x3
  ULONG HwCountersCount;                    // offset: 0xc ordinal: 0x4
  ULONGLONG UpdateCount;                    // offset: 0x10 ordinal: 0x5
  ULONGLONG WaitReasonBitMap;               // offset: 0x18 ordinal: 0x6
  ULONGLONG HardwareCounters;               // offset: 0x20 ordinal: 0x7
  struct _COUNTER_READING CycleTime;        // offset: 0x28 ordinal: 0x8
  struct _COUNTER_READING HwCounters[16];   // offset: 0x40 ordinal: 0x9
} _THREAD_PERFORMANCE_DATA;

// 0x10 bytes (sizeof)
typedef struct _M128A {
  ULONGLONG Low; // offset: 0x0 ordinal: 0x0
  LONGLONG High; // offset: 0x8 ordinal: 0x1
} _M128A;

// 0x200 bytes (sizeof)
typedef struct _XSAVE_FORMAT {
  USHORT ControlWord;              // offset: 0x0 ordinal: 0x0
  USHORT StatusWord;               // offset: 0x2 ordinal: 0x1
  UCHAR TagWord;                   // offset: 0x4 ordinal: 0x2
  UCHAR Reserved1;                 // offset: 0x5 ordinal: 0x3
  USHORT ErrorOpcode;              // offset: 0x6 ordinal: 0x4
  ULONG ErrorOffset;               // offset: 0x8 ordinal: 0x5
  USHORT ErrorSelector;            // offset: 0xc ordinal: 0x6
  USHORT Reserved2;                // offset: 0xe ordinal: 0x7
  ULONG DataOffset;                // offset: 0x10 ordinal: 0x8
  USHORT DataSelector;             // offset: 0x14 ordinal: 0x9
  USHORT Reserved3;                // offset: 0x16 ordinal: 0xa
  ULONG MxCsr;                     // offset: 0x18 ordinal: 0xb
  ULONG MxCsr_Mask;                // offset: 0x1c ordinal: 0xc
  struct _M128A FloatRegisters[8]; // offset: 0x20 ordinal: 0xd
  struct _M128A XmmRegisters[8];   // offset: 0xa0 ordinal: 0xe
  UCHAR Reserved4[224];            // offset: 0x120 ordinal: 0xf
} _XSAVE_FORMAT;

// 0x20 bytes (sizeof)
typedef struct _PS_TRUSTLET_TKSESSION_ID {
  ULONGLONG SessionId[4]; // offset: 0x0 ordinal: 0x0
} _PS_TRUSTLET_TKSESSION_ID;

// 0x40 bytes (sizeof)
typedef struct _VSM_PERFORMANCE_DATA {
  ULONGLONG LaunchVsmMark[8]; // offset: 0x0 ordinal: 0x0
} _VSM_PERFORMANCE_DATA;

// 0xce8 bytes (sizeof)
typedef struct _LOADER_PARAMETER_EXTENSION {
  ULONG Size;                              // offset: 0x0 ordinal: 0x0
  struct _PROFILE_PARAMETER_BLOCK Profile; // offset: 0x4 ordinal: 0x1
  VOID *EmInfFileImage;                    // offset: 0x14 ordinal: 0x2
  ULONG EmInfFileSize;                     // offset: 0x18 ordinal: 0x3
  VOID *TriageDumpBlock;                   // offset: 0x1c ordinal: 0x4
  struct _HEADLESS_LOADER_BLOCK
      *HeadlessLoaderBlock;                         // offset: 0x20 ordinal: 0x5
  struct _SMBIOS3_TABLE_HEADER *SMBiosEPSHeader;    // offset: 0x24 ordinal: 0x6
  VOID *DrvDBImage;                                 // offset: 0x28 ordinal: 0x7
  ULONG DrvDBSize;                                  // offset: 0x2c ordinal: 0x8
  struct _NETWORK_LOADER_BLOCK *NetworkLoaderBlock; // offset: 0x30 ordinal: 0x9
  UCHAR *HalpIRQLToTPR;                             // offset: 0x34 ordinal: 0xa
  UCHAR *HalpVectorToIRQL;                          // offset: 0x38 ordinal: 0xb
  struct _LIST_ENTRY FirmwareDescriptorListHead;    // offset: 0x3c ordinal: 0xc
  VOID *AcpiTable;                                  // offset: 0x44 ordinal: 0xd
  ULONG AcpiTableSize;                              // offset: 0x48 ordinal: 0xe
  ULONG LastBootSucceeded : 1;                      // offset: 0x4c ordinal: 0xf
  ULONG LastBootShutdown : 1;         // offset: 0x4c ordinal: 0x10
  ULONG IoPortAccessSupported : 1;    // offset: 0x4c ordinal: 0x11
  ULONG BootDebuggerActive : 1;       // offset: 0x4c ordinal: 0x12
  ULONG StrongCodeGuarantees : 1;     // offset: 0x4c ordinal: 0x13
  ULONG HardStrongCodeGuarantees : 1; // offset: 0x4c ordinal: 0x14
  ULONG SidSharingDisabled : 1;       // offset: 0x4c ordinal: 0x15
  ULONG TpmInitialized : 1;           // offset: 0x4c ordinal: 0x16
  ULONG VsmConfigured : 1;            // offset: 0x4c ordinal: 0x17
  ULONG IumEnabled : 1;               // offset: 0x4c ordinal: 0x18
  ULONG IsSmbboot : 1;                // offset: 0x4c ordinal: 0x19
  ULONG BootLogEnabled : 1;           // offset: 0x4c ordinal: 0x1a
  ULONG DriverVerifierEnabled : 1;    // offset: 0x4c ordinal: 0x1b
  ULONG SuppressMonitorX : 1;         // offset: 0x4c ordinal: 0x1c
  ULONG Unused : 7;                   // offset: 0x4c ordinal: 0x1d
  ULONG FeatureSimulations : 6;       // offset: 0x4c ordinal: 0x1e
  ULONG MicrocodeSelfHosting : 1;     // offset: 0x4c ordinal: 0x1f
  ULONG XhciLegacyHandoffSkip : 1;    // offset: 0x4c ordinal: 0x20
  ULONG DisableInsiderOptInHVCI : 1;  // offset: 0x4c ordinal: 0x21
  ULONG MicrocodeMinVerSupported : 1; // offset: 0x4c ordinal: 0x22
  ULONG GpuIommuEnabled : 1;          // offset: 0x4c ordinal: 0x23
  struct _LOADER_PERFORMANCE_DATA
      LoaderPerformanceData; // offset: 0x50 ordinal: 0x24
  struct _LIST_ENTRY
      BootApplicationPersistentData;    // offset: 0xb0 ordinal: 0x25
  VOID *WmdTestResult;                  // offset: 0xb8 ordinal: 0x26
  struct _GUID BootIdentifier;          // offset: 0xbc ordinal: 0x27
  ULONG ResumePages;                    // offset: 0xcc ordinal: 0x28
  VOID *DumpHeader;                     // offset: 0xd0 ordinal: 0x29
  VOID *BgContext;                      // offset: 0xd4 ordinal: 0x2a
  VOID *NumaLocalityInfo;               // offset: 0xd8 ordinal: 0x2b
  VOID *NumaGroupAssignment;            // offset: 0xdc ordinal: 0x2c
  struct _LIST_ENTRY AttachedHives;     // offset: 0xe0 ordinal: 0x2d
  ULONG MemoryCachingRequirementsCount; // offset: 0xe8 ordinal: 0x2e
  VOID *MemoryCachingRequirements;      // offset: 0xec ordinal: 0x2f
  struct _BOOT_ENTROPY_LDR_RESULT
      BootEntropyResult;               // offset: 0xf0 ordinal: 0x30
  ULONGLONG ProcessorCounterFrequency; // offset: 0x958 ordinal: 0x31
  struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION
      HypervisorExtension;                   // offset: 0x960 ordinal: 0x32
  struct _GUID HardwareConfigurationId;      // offset: 0x9a0 ordinal: 0x33
  struct _LIST_ENTRY HalExtensionModuleList; // offset: 0x9b0 ordinal: 0x34
  union _LARGE_INTEGER SystemTime;           // offset: 0x9b8 ordinal: 0x35
  ULONGLONG TimeStampAtSystemTimeRead;       // offset: 0x9c0 ordinal: 0x36
  union {
    ULONGLONG BootFlags;              // offset: 0x9c8 ordinal: 0x37
    ULONGLONG DbgMenuOsSelection : 1; // offset: 0x9c8 ordinal: 0x38
  };
  ULONGLONG DbgHiberBoot : 1;      // offset: 0x9c8 ordinal: 0x39
  ULONGLONG DbgSoftRestart : 1;    // offset: 0x9c8 ordinal: 0x3a
  ULONGLONG DbgMeasuredLaunch : 1; // offset: 0x9c8 ordinal: 0x3b
  union {
    ULONGLONG InternalBootFlags;  // offset: 0x9d0 ordinal: 0x3c
    ULONGLONG DbgUtcBootTime : 1; // offset: 0x9d0 ordinal: 0x3d
  };
  ULONGLONG DbgRtcBootTime : 1;      // offset: 0x9d0 ordinal: 0x3e
  ULONGLONG DbgNoLegacyServices : 1; // offset: 0x9d0 ordinal: 0x3f
  VOID *WfsFPData;                   // offset: 0x9d8 ordinal: 0x40
  ULONG WfsFPDataSize;               // offset: 0x9dc ordinal: 0x41
  struct _LOADER_BUGCHECK_PARAMETERS
      BugcheckParameters;                         // offset: 0x9e0 ordinal: 0x42
  VOID *ApiSetSchema;                             // offset: 0x9f4 ordinal: 0x43
  ULONG ApiSetSchemaSize;                         // offset: 0x9f8 ordinal: 0x44
  struct _LIST_ENTRY ApiSetSchemaExtensions;      // offset: 0x9fc ordinal: 0x45
  struct _UNICODE_STRING AcpiBiosVersion;         // offset: 0xa04 ordinal: 0x46
  struct _UNICODE_STRING SmbiosVersion;           // offset: 0xa0c ordinal: 0x47
  struct _UNICODE_STRING EfiVersion;              // offset: 0xa14 ordinal: 0x48
  struct _DEBUG_DEVICE_DESCRIPTOR *KdDebugDevice; // offset: 0xa1c ordinal: 0x49
  struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
      OfflineCrashdumpConfigurationTable;      // offset: 0xa20 ordinal: 0x4a
  struct _UNICODE_STRING ManufacturingProfile; // offset: 0xa40 ordinal: 0x4b
  VOID *BbtBuffer;                             // offset: 0xa48 ordinal: 0x4c
  ULONGLONG XsaveAllowedFeatures;              // offset: 0xa50 ordinal: 0x4d
  ULONG XsaveFlags;                            // offset: 0xa58 ordinal: 0x4e
  VOID *BootOptions;                           // offset: 0xa5c ordinal: 0x4f
  ULONG IumEnablement;                         // offset: 0xa60 ordinal: 0x50
  ULONG IumPolicy;                             // offset: 0xa64 ordinal: 0x51
  LONG IumStatus;                              // offset: 0xa68 ordinal: 0x52
  ULONG BootId;                                // offset: 0xa6c ordinal: 0x53
  struct _LOADER_PARAMETER_CI_EXTENSION
      *CodeIntegrityData;      // offset: 0xa70 ordinal: 0x54
  ULONG CodeIntegrityDataSize; // offset: 0xa74 ordinal: 0x55
  struct _LOADER_HIVE_RECOVERY_INFO
      SystemHiveRecoveryInfo;               // offset: 0xa78 ordinal: 0x56
  ULONG SoftRestartCount;                   // offset: 0xa8c ordinal: 0x57
  LONGLONG SoftRestartTime;                 // offset: 0xa90 ordinal: 0x58
  struct _LEAP_SECOND_DATA *LeapSecondData; // offset: 0xa98 ordinal: 0x59
  ULONG MajorRelease;                       // offset: 0xa9c ordinal: 0x5a
  ULONG Reserved1;                          // offset: 0xaa0 ordinal: 0x5b
  CHAR NtBuildLab[224];                     // offset: 0xaa4 ordinal: 0x5c
  CHAR NtBuildLabEx[224];                   // offset: 0xb84 ordinal: 0x5d
  struct _LOADER_RESET_REASON ResetReason;  // offset: 0xc68 ordinal: 0x5e
  ULONG MaxPciBusNumber;                    // offset: 0xc98 ordinal: 0x5f
  ULONG FeatureSettings;                    // offset: 0xc9c ordinal: 0x60
  ULONG HotPatchReserveSize;                // offset: 0xca0 ordinal: 0x61
  ULONG RetpolineReserveSize;               // offset: 0xca4 ordinal: 0x62
  struct _VSM_PERFORMANCE_DATA
      VsmPerformanceData; // offset: 0xca8 ordinal: 0x63
} _LOADER_PARAMETER_EXTENSION;

// 0xc8 bytes (sizeof)
typedef struct _LOADER_PARAMETER_BLOCK {
  ULONG OsMajorVersion;                            // offset: 0x0 ordinal: 0x0
  ULONG OsMinorVersion;                            // offset: 0x4 ordinal: 0x1
  ULONG Size;                                      // offset: 0x8 ordinal: 0x2
  ULONG OsLoaderSecurityVersion;                   // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY LoadOrderListHead;            // offset: 0x10 ordinal: 0x4
  struct _LIST_ENTRY MemoryDescriptorListHead;     // offset: 0x18 ordinal: 0x5
  struct _LIST_ENTRY BootDriverListHead;           // offset: 0x20 ordinal: 0x6
  struct _LIST_ENTRY EarlyLaunchListHead;          // offset: 0x28 ordinal: 0x7
  struct _LIST_ENTRY CoreDriverListHead;           // offset: 0x30 ordinal: 0x8
  struct _LIST_ENTRY CoreExtensionsDriverListHead; // offset: 0x38 ordinal: 0x9
  struct _LIST_ENTRY TpmCoreDriverListHead;        // offset: 0x40 ordinal: 0xa
  ULONG KernelStack;                               // offset: 0x48 ordinal: 0xb
  ULONG Prcb;                                      // offset: 0x4c ordinal: 0xc
  ULONG Process;                                   // offset: 0x50 ordinal: 0xd
  ULONG Thread;                                    // offset: 0x54 ordinal: 0xe
  ULONG KernelStackSize;                           // offset: 0x58 ordinal: 0xf
  ULONG RegistryLength;                            // offset: 0x5c ordinal: 0x10
  VOID *RegistryBase;                              // offset: 0x60 ordinal: 0x11
  struct _CONFIGURATION_COMPONENT_DATA
      *ConfigurationRoot;          // offset: 0x64 ordinal: 0x12
  CHAR *ArcBootDeviceName;         // offset: 0x68 ordinal: 0x13
  CHAR *ArcHalDeviceName;          // offset: 0x6c ordinal: 0x14
  CHAR *NtBootPathName;            // offset: 0x70 ordinal: 0x15
  CHAR *NtHalPathName;             // offset: 0x74 ordinal: 0x16
  CHAR *LoadOptions;               // offset: 0x78 ordinal: 0x17
  struct _NLS_DATA_BLOCK *NlsData; // offset: 0x7c ordinal: 0x18
  struct _ARC_DISK_INFORMATION
      *ArcDiskInformation;                       // offset: 0x80 ordinal: 0x19
  struct _LOADER_PARAMETER_EXTENSION *Extension; // offset: 0x84 ordinal: 0x1a
  union __anon_2593 u;                           // offset: 0x88 ordinal: 0x1b
  struct _FIRMWARE_INFORMATION_LOADER_BLOCK
      FirmwareInformation;     // offset: 0x94 ordinal: 0x1c
  CHAR *OsBootstatPathName;    // offset: 0xbc ordinal: 0x1d
  CHAR *ArcOSDataDeviceName;   // offset: 0xc0 ordinal: 0x1e
  CHAR *ArcWindowsSysPartName; // offset: 0xc4 ordinal: 0x1f
} _LOADER_PARAMETER_BLOCK;

typedef VOID *(*__anon_2454)(struct _LOADER_PARAMETER_BLOCK *, ULONG);

// 0x80 bytes (sizeof)
typedef struct _PEBS_DS_SAVE_AREA32 {
  ULONG BtsBufferBase;                // offset: 0x0 ordinal: 0x0
  ULONG BtsIndex;                     // offset: 0x4 ordinal: 0x1
  ULONG BtsAbsoluteMaximum;           // offset: 0x8 ordinal: 0x2
  ULONG BtsInterruptThreshold;        // offset: 0xc ordinal: 0x3
  ULONG PebsBufferBase;               // offset: 0x10 ordinal: 0x4
  ULONG PebsIndex;                    // offset: 0x14 ordinal: 0x5
  ULONG PebsAbsoluteMaximum;          // offset: 0x18 ordinal: 0x6
  ULONG PebsInterruptThreshold;       // offset: 0x1c ordinal: 0x7
  ULONGLONG PebsGpCounterReset[8];    // offset: 0x20 ordinal: 0x8
  ULONGLONG PebsFixedCounterReset[4]; // offset: 0x60 ordinal: 0x9
} _PEBS_DS_SAVE_AREA32;

// 0x18 bytes (sizeof)
typedef struct _POP_FX_LOG_ENTRY {
  ULONGLONG Timestamp;   // offset: 0x0 ordinal: 0x0
  UCHAR Operation;       // offset: 0x8 ordinal: 0x1
  UCHAR Component;       // offset: 0x9 ordinal: 0x2
  USHORT Processor;      // offset: 0xa ordinal: 0x3
  USHORT Process;        // offset: 0xc ordinal: 0x4
  USHORT Thread;         // offset: 0xe ordinal: 0x5
  ULONGLONG Information; // offset: 0x10 ordinal: 0x6
} _POP_FX_LOG_ENTRY;

// 0x60 bytes (sizeof)
typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING {
  ULONGLONG Total;        // offset: 0x0 ordinal: 0x0
  ULONGLONG Unattributed; // offset: 0x8 ordinal: 0x1
  ULONGLONG Buckets[5];   // offset: 0x10 ordinal: 0x2
  ULONGLONG PerBucket[5]; // offset: 0x38 ordinal: 0x3
} _POP_FX_ACTIVE_TIME_ACCOUNTING;

// 0xd8 bytes (sizeof)
typedef struct _POP_FX_ACCOUNTING {
  ULONG Lock;               // offset: 0x0 ordinal: 0x0
  UCHAR Active;             // offset: 0x4 ordinal: 0x1
  ULONG DripsRequiredState; // offset: 0x8 ordinal: 0x2
  LONG Level;               // offset: 0xc ordinal: 0x3
  LONGLONG ActiveStamp;     // offset: 0x10 ordinal: 0x4
  struct _POP_FX_ACTIVE_TIME_ACCOUNTING
      CsActiveTimeAccounting; // offset: 0x18 ordinal: 0x5
  struct _POP_FX_ACTIVE_TIME_ACCOUNTING
      CsCriticalActiveTimeAccounting; // offset: 0x78 ordinal: 0x6
} _POP_FX_ACCOUNTING;

// 0x3e8 bytes (sizeof)
typedef struct _PROC_IDLE_STATE_ACCOUNTING {
  ULONGLONG TotalTime;      // offset: 0x0 ordinal: 0x0
  ULONG CancelCount;        // offset: 0x8 ordinal: 0x1
  ULONG FailureCount;       // offset: 0xc ordinal: 0x2
  ULONG SuccessCount;       // offset: 0x10 ordinal: 0x3
  ULONG InvalidBucketIndex; // offset: 0x14 ordinal: 0x4
  ULONGLONG MinTime;        // offset: 0x18 ordinal: 0x5
  ULONGLONG MaxTime;        // offset: 0x20 ordinal: 0x6
  struct _PPM_SELECTION_STATISTICS
      SelectionStatistics; // offset: 0x28 ordinal: 0x7
  struct _PROC_IDLE_STATE_BUCKET
      IdleTimeBuckets[26]; // offset: 0xa8 ordinal: 0x8
} _PROC_IDLE_STATE_ACCOUNTING;

// 0x30 bytes (sizeof)
typedef struct _PROCESSOR_IDLE_CONSTRAINTS {
  ULONGLONG TotalTime;            // offset: 0x0 ordinal: 0x0
  ULONGLONG IdleTime;             // offset: 0x8 ordinal: 0x1
  ULONGLONG ExpectedIdleDuration; // offset: 0x10 ordinal: 0x2
  ULONGLONG MaxIdleDuration;      // offset: 0x18 ordinal: 0x3
  ULONG OverrideState;            // offset: 0x20 ordinal: 0x4
  ULONG TimeCheck;                // offset: 0x24 ordinal: 0x5
  UCHAR PromotePercent;           // offset: 0x28 ordinal: 0x6
  UCHAR DemotePercent;            // offset: 0x29 ordinal: 0x7
  UCHAR Parked;                   // offset: 0x2a ordinal: 0x8
  UCHAR Interruptible;            // offset: 0x2b ordinal: 0x9
  UCHAR PlatformIdle;             // offset: 0x2c ordinal: 0xa
  UCHAR ExpectedWakeReason;       // offset: 0x2d ordinal: 0xb
  UCHAR IdleStateMax;             // offset: 0x2e ordinal: 0xc
} _PROCESSOR_IDLE_CONSTRAINTS;

typedef ULONG (*__anon_436)(VOID *, struct _PROCESSOR_IDLE_CONSTRAINTS *);

// 0x50 bytes (sizeof)
typedef struct _PROCESSOR_IDLE_PREPARE_INFO {
  VOID *Context;                                  // offset: 0x0 ordinal: 0x0
  struct _PROCESSOR_IDLE_CONSTRAINTS Constraints; // offset: 0x8 ordinal: 0x1
  ULONG DependencyCount;                          // offset: 0x38 ordinal: 0x2
  ULONG DependencyUsed;                           // offset: 0x3c ordinal: 0x3
  struct _PROCESSOR_IDLE_DEPENDENCY
      *DependencyArray;          // offset: 0x40 ordinal: 0x4
  ULONG PlatformIdleStateIndex;  // offset: 0x44 ordinal: 0x5
  ULONG ProcessorIdleStateIndex; // offset: 0x48 ordinal: 0x6
  ULONG IdleSelectFailureMask;   // offset: 0x4c ordinal: 0x7
} _PROCESSOR_IDLE_PREPARE_INFO;

typedef VOID (*__anon_433)(struct _PROCESSOR_IDLE_PREPARE_INFO *);

typedef LONG (*__anon_435)(VOID *, ULONGLONG, ULONG, ULONG, ULONG, ULONG,
                           ULONG *);

// 0x40 bytes (sizeof)
typedef struct _ISRDPCSTATS {
  ULONGLONG IsrTime;      // offset: 0x0 ordinal: 0x0
  ULONGLONG IsrTimeStart; // offset: 0x8 ordinal: 0x1
  ULONGLONG IsrCount;     // offset: 0x10 ordinal: 0x2
  ULONGLONG DpcTime;      // offset: 0x18 ordinal: 0x3
  ULONGLONG DpcTimeStart; // offset: 0x20 ordinal: 0x4
  ULONGLONG DpcCount;     // offset: 0x28 ordinal: 0x5
  UCHAR IsrActive;        // offset: 0x30 ordinal: 0x6
  UCHAR Reserved[15];     // offset: 0x31 ordinal: 0x7
} _ISRDPCSTATS;

// 0xa0 bytes (sizeof)
typedef struct _PEBS_DS_SAVE_AREA64 {
  ULONGLONG BtsBufferBase;            // offset: 0x0 ordinal: 0x0
  ULONGLONG BtsIndex;                 // offset: 0x8 ordinal: 0x1
  ULONGLONG BtsAbsoluteMaximum;       // offset: 0x10 ordinal: 0x2
  ULONGLONG BtsInterruptThreshold;    // offset: 0x18 ordinal: 0x3
  ULONGLONG PebsBufferBase;           // offset: 0x20 ordinal: 0x4
  ULONGLONG PebsIndex;                // offset: 0x28 ordinal: 0x5
  ULONGLONG PebsAbsoluteMaximum;      // offset: 0x30 ordinal: 0x6
  ULONGLONG PebsInterruptThreshold;   // offset: 0x38 ordinal: 0x7
  ULONGLONG PebsGpCounterReset[8];    // offset: 0x40 ordinal: 0x8
  ULONGLONG PebsFixedCounterReset[4]; // offset: 0x80 ordinal: 0x9
} _PEBS_DS_SAVE_AREA64;

// 0xa0 bytes (sizeof)
typedef struct _PEBS_DS_SAVE_AREA {
  union {
    struct _PEBS_DS_SAVE_AREA32 As32Bit; // offset: 0x0 ordinal: 0x0
    struct _PEBS_DS_SAVE_AREA64 As64Bit; // offset: 0x0 ordinal: 0x1
  };
} _PEBS_DS_SAVE_AREA;

// 0xa0 bytes (sizeof)
typedef struct _PROCESSOR_PROFILE_CONTROL_AREA {
  struct _PEBS_DS_SAVE_AREA PebsDsSaveArea; // offset: 0x0 ordinal: 0x0
} _PROCESSOR_PROFILE_CONTROL_AREA;

// 0x10 bytes (sizeof)
typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA {
  struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header; // offset: 0x0 ordinal: 0x0
  ULONGLONG Data[1];                           // offset: 0x8 ordinal: 0x1
} _PS_TRUSTLET_ATTRIBUTE_DATA;

// 0x18 bytes (sizeof)
typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES {
  ULONGLONG TrustletIdentity;                       // offset: 0x0 ordinal: 0x0
  struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1]; // offset: 0x8 ordinal: 0x1
} _PS_TRUSTLET_CREATE_ATTRIBUTES;

// 0x28 bytes (sizeof)
typedef struct _PERF_CONTROL_STATE_SELECTION {
  ULONGLONG SelectedState;        // offset: 0x0 ordinal: 0x0
  ULONG SelectedPercent;          // offset: 0x8 ordinal: 0x1
  ULONG SelectedFrequency;        // offset: 0xc ordinal: 0x2
  ULONG MinPercent;               // offset: 0x10 ordinal: 0x3
  ULONG MaxPercent;               // offset: 0x14 ordinal: 0x4
  ULONG TolerancePercent;         // offset: 0x18 ordinal: 0x5
  ULONG EppPercent;               // offset: 0x1c ordinal: 0x6
  ULONG AutonomousActivityWindow; // offset: 0x20 ordinal: 0x7
  UCHAR Autonomous;               // offset: 0x24 ordinal: 0x8
  UCHAR InheritFromDomain;        // offset: 0x25 ordinal: 0x9
} _PERF_CONTROL_STATE_SELECTION;

typedef VOID (*__anon_453)(ULONG, struct _PERF_CONTROL_STATE_SELECTION *, UCHAR,
                           UCHAR);

// 0x100 bytes (sizeof)
typedef struct _KSCB {
  ULONGLONG GenerationCycles;           // offset: 0x0 ordinal: 0x0
  ULONGLONG MinQuotaCycleTarget;        // offset: 0x8 ordinal: 0x1
  ULONGLONG MaxQuotaCycleTarget;        // offset: 0x10 ordinal: 0x2
  ULONGLONG RankCycleTarget;            // offset: 0x18 ordinal: 0x3
  ULONGLONG LongTermCycles;             // offset: 0x20 ordinal: 0x4
  ULONGLONG LastReportedCycles;         // offset: 0x28 ordinal: 0x5
  ULONGLONG OverQuotaHistory;           // offset: 0x30 ordinal: 0x6
  ULONGLONG ReadyTime;                  // offset: 0x38 ordinal: 0x7
  ULONGLONG InsertTime;                 // offset: 0x40 ordinal: 0x8
  struct _LIST_ENTRY PerProcessorList;  // offset: 0x48 ordinal: 0x9
  struct _RTL_BALANCED_NODE QueueNode;  // offset: 0x50 ordinal: 0xa
  UCHAR Inserted : 1;                   // offset: 0x5c ordinal: 0xb
  UCHAR MaxOverQuota : 1;               // offset: 0x5c ordinal: 0xc
  UCHAR MinOverQuota : 1;               // offset: 0x5c ordinal: 0xd
  UCHAR RankBias : 1;                   // offset: 0x5c ordinal: 0xe
  UCHAR SoftCap : 1;                    // offset: 0x5c ordinal: 0xf
  UCHAR ShareRankOwner : 1;             // offset: 0x5c ordinal: 0x10
  UCHAR Spare1 : 2;                     // offset: 0x5c ordinal: 0x11
  UCHAR Depth;                          // offset: 0x5d ordinal: 0x12
  USHORT ReadySummary;                  // offset: 0x5e ordinal: 0x13
  ULONG Rank;                           // offset: 0x60 ordinal: 0x14
  ULONG *ShareRank;                     // offset: 0x64 ordinal: 0x15
  ULONG OwnerShareRank;                 // offset: 0x68 ordinal: 0x16
  struct _LIST_ENTRY ReadyListHead[16]; // offset: 0x6c ordinal: 0x17
  struct _RTL_RB_TREE ChildScbQueue;    // offset: 0xec ordinal: 0x18
  struct _KSCB *Parent;                 // offset: 0xf4 ordinal: 0x19
  struct _KSCB *Root;                   // offset: 0xf8 ordinal: 0x1a
} _KSCB;

// 0xb0 bytes (sizeof)
typedef struct _KPROCESS {
  struct _DISPATCHER_HEADER Header;           // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ProfileListHead;         // offset: 0x10 ordinal: 0x1
  ULONG DirectoryTableBase;                   // offset: 0x18 ordinal: 0x2
  struct _KGDTENTRY LdtDescriptor;            // offset: 0x1c ordinal: 0x3
  struct _KIDTENTRY Int21Descriptor;          // offset: 0x24 ordinal: 0x4
  struct _LIST_ENTRY ThreadListHead;          // offset: 0x2c ordinal: 0x5
  ULONG ProcessLock;                          // offset: 0x34 ordinal: 0x6
  ULONGLONG DeepFreezeStartTime;              // offset: 0x38 ordinal: 0x7
  struct _KAFFINITY_EX Affinity;              // offset: 0x40 ordinal: 0x8
  struct _LIST_ENTRY ReadyListHead;           // offset: 0x4c ordinal: 0x9
  struct _SINGLE_LIST_ENTRY SwapListEntry;    // offset: 0x54 ordinal: 0xa
  struct _KAFFINITY_EX ActiveProcessors;      // offset: 0x58 ordinal: 0xb
  ULONG AutoAlignment : 1;                    // offset: 0x64 ordinal: 0xc
  ULONG DisableBoost : 1;                     // offset: 0x64 ordinal: 0xd
  ULONG DisableQuantum : 1;                   // offset: 0x64 ordinal: 0xe
  ULONG DeepFreeze : 1;                       // offset: 0x64 ordinal: 0xf
  ULONG TimerVirtualization : 1;              // offset: 0x64 ordinal: 0x10
  ULONG CheckStackExtents : 1;                // offset: 0x64 ordinal: 0x11
  ULONG CacheIsolationEnabled : 1;            // offset: 0x64 ordinal: 0x12
  ULONG PpmPolicy : 3;                        // offset: 0x64 ordinal: 0x13
  ULONG VaSpaceDeleted : 1;                   // offset: 0x64 ordinal: 0x14
  ULONG ReservedFlags : 21;                   // offset: 0x64 ordinal: 0x15
  LONG ProcessFlags;                          // offset: 0x64 ordinal: 0x16
  CHAR BasePriority;                          // offset: 0x68 ordinal: 0x17
  CHAR QuantumReset;                          // offset: 0x69 ordinal: 0x18
  CHAR Visited;                               // offset: 0x6a ordinal: 0x19
  union _KEXECUTE_OPTIONS Flags;              // offset: 0x6b ordinal: 0x1a
  USHORT ThreadSeed[1];                       // offset: 0x6c ordinal: 0x1b
  USHORT IdealProcessor[1];                   // offset: 0x6e ordinal: 0x1c
  USHORT IdealNode[1];                        // offset: 0x70 ordinal: 0x1d
  USHORT IdealGlobalNode;                     // offset: 0x72 ordinal: 0x1e
  USHORT Spare1;                              // offset: 0x74 ordinal: 0x1f
  USHORT IopmOffset;                          // offset: 0x76 ordinal: 0x20
  struct _KSCHEDULING_GROUP *SchedulingGroup; // offset: 0x78 ordinal: 0x21
  union _KSTACK_COUNT StackCount;             // offset: 0x7c ordinal: 0x22
  struct _LIST_ENTRY ProcessListEntry;        // offset: 0x80 ordinal: 0x23
  ULONGLONG CycleTime;                        // offset: 0x88 ordinal: 0x24
  ULONGLONG ContextSwitches;                  // offset: 0x90 ordinal: 0x25
  ULONG FreezeCount;                          // offset: 0x98 ordinal: 0x26
  ULONG KernelTime;                           // offset: 0x9c ordinal: 0x27
  ULONG UserTime;                             // offset: 0xa0 ordinal: 0x28
  ULONG ReadyTime;                            // offset: 0xa4 ordinal: 0x29
  VOID *VdmTrapcHandler;                      // offset: 0xa8 ordinal: 0x2a
  ULONG ProcessTimerDelay;                    // offset: 0xac ordinal: 0x2b
} _KPROCESS;

// 0x18 bytes (sizeof)
typedef struct _KAPC_STATE {
  struct _LIST_ENTRY ApcListHead[2]; // offset: 0x0 ordinal: 0x0
  struct _KPROCESS *Process;         // offset: 0x10 ordinal: 0x1
  union {
    UCHAR InProgressFlags;         // offset: 0x14 ordinal: 0x2
    UCHAR KernelApcInProgress : 1; // offset: 0x14 ordinal: 0x3
  };
  UCHAR SpecialApcInProgress : 1; // offset: 0x14 ordinal: 0x4
  UCHAR KernelApcPending;         // offset: 0x15 ordinal: 0x5
  union {
    UCHAR UserApcPendingAll;         // offset: 0x16 ordinal: 0x6
    UCHAR SpecialUserApcPending : 1; // offset: 0x16 ordinal: 0x7
  };
  UCHAR UserApcPending : 1; // offset: 0x16 ordinal: 0x8
} _KAPC_STATE;

// 0x18 bytes (sizeof)
typedef union __anon_1526 {
  struct _KAPC_STATE ApcState;                // offset: 0x0 ordinal: 0x0
  struct _MI_HARD_FAULT_STATE HardFaultState; // offset: 0x0 ordinal: 0x1
} __anon_1526;

// 0x1a8 bytes (sizeof)
typedef struct _KTHREAD_COUNTERS {
  ULONGLONG WaitReasonBitMap;                // offset: 0x0 ordinal: 0x0
  struct _THREAD_PERFORMANCE_DATA *UserData; // offset: 0x8 ordinal: 0x1
  ULONG Flags;                               // offset: 0xc ordinal: 0x2
  ULONG ContextSwitches;                     // offset: 0x10 ordinal: 0x3
  ULONGLONG CycleTimeBias;                   // offset: 0x18 ordinal: 0x4
  ULONGLONG HardwareCounters;                // offset: 0x20 ordinal: 0x5
  struct _COUNTER_READING HwCounter[16];     // offset: 0x28 ordinal: 0x6
} _KTHREAD_COUNTERS;

// 0x180 bytes (sizeof)
typedef struct _KSCHEDULING_GROUP {
  struct _KSCHEDULING_GROUP_POLICY Policy; // offset: 0x0 ordinal: 0x0
  ULONG RelativeWeight;                    // offset: 0x8 ordinal: 0x1
  ULONG ChildMinRate;                      // offset: 0xc ordinal: 0x2
  ULONG ChildMinWeight;                    // offset: 0x10 ordinal: 0x3
  ULONG ChildTotalWeight;                  // offset: 0x14 ordinal: 0x4
  ULONGLONG QueryHistoryTimeStamp;         // offset: 0x18 ordinal: 0x5
  LONGLONG NotificationCycles;             // offset: 0x20 ordinal: 0x6
  LONGLONG MaxQuotaLimitCycles;            // offset: 0x28 ordinal: 0x7
  LONGLONG MaxQuotaCyclesRemaining;        // offset: 0x30 ordinal: 0x8
  union {
    struct _LIST_ENTRY SchedulingGroupList; // offset: 0x38 ordinal: 0x9
    struct _LIST_ENTRY Sibling;             // offset: 0x38 ordinal: 0xa
  };
  struct _KDPC *NotificationDpc;     // offset: 0x40 ordinal: 0xb
  struct _LIST_ENTRY ChildList;      // offset: 0x44 ordinal: 0xc
  struct _KSCHEDULING_GROUP *Parent; // offset: 0x4c ordinal: 0xd
  struct _KSCB PerProcessor[1];      // offset: 0x80 ordinal: 0xe
} _KSCHEDULING_GROUP;

// 0x28 bytes (sizeof)
typedef struct _PPM_CONCURRENCY_ACCOUNTING {
  ULONG Lock;                   // offset: 0x0 ordinal: 0x0
  ULONG Processors;             // offset: 0x4 ordinal: 0x1
  ULONG ActiveProcessors;       // offset: 0x8 ordinal: 0x2
  ULONGLONG LastUpdateTime;     // offset: 0x10 ordinal: 0x3
  ULONGLONG TotalTime;          // offset: 0x18 ordinal: 0x4
  ULONGLONG AccumulatedTime[1]; // offset: 0x20 ordinal: 0x5
} _PPM_CONCURRENCY_ACCOUNTING;

// 0x410 bytes (sizeof)
typedef struct _PROC_IDLE_ACCOUNTING {
  ULONG StateCount;                            // offset: 0x0 ordinal: 0x0
  ULONG TotalTransitions;                      // offset: 0x4 ordinal: 0x1
  ULONG ResetCount;                            // offset: 0x8 ordinal: 0x2
  ULONG AbortCount;                            // offset: 0xc ordinal: 0x3
  ULONGLONG StartTime;                         // offset: 0x10 ordinal: 0x4
  ULONGLONG PriorIdleTime;                     // offset: 0x18 ordinal: 0x5
  enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;     // offset: 0x20 ordinal: 0x6
  struct _PROC_IDLE_STATE_ACCOUNTING State[1]; // offset: 0x28 ordinal: 0x7
} _PROC_IDLE_ACCOUNTING;

// 0x150 bytes (sizeof)
typedef struct _PPM_IDLE_STATES {
  UCHAR InterfaceVersion;                      // offset: 0x0 ordinal: 0x0
  UCHAR IdleOverride;                          // offset: 0x1 ordinal: 0x1
  UCHAR EstimateIdleDuration;                  // offset: 0x2 ordinal: 0x2
  UCHAR ExitLatencyTraceEnabled;               // offset: 0x3 ordinal: 0x3
  UCHAR NonInterruptibleTransition;            // offset: 0x4 ordinal: 0x4
  UCHAR UnaccountedTransition;                 // offset: 0x5 ordinal: 0x5
  UCHAR IdleDurationLimited;                   // offset: 0x6 ordinal: 0x6
  UCHAR IdleCheckLimited;                      // offset: 0x7 ordinal: 0x7
  UCHAR StrictVetoBias;                        // offset: 0x8 ordinal: 0x8
  ULONG ExitLatencyCountdown;                  // offset: 0xc ordinal: 0x9
  ULONG TargetState;                           // offset: 0x10 ordinal: 0xa
  ULONG ActualState;                           // offset: 0x14 ordinal: 0xb
  ULONG OldState;                              // offset: 0x18 ordinal: 0xc
  ULONG OverrideIndex;                         // offset: 0x1c ordinal: 0xd
  ULONG ProcessorIdleCount;                    // offset: 0x20 ordinal: 0xe
  ULONG Type;                                  // offset: 0x24 ordinal: 0xf
  ULONGLONG LevelId;                           // offset: 0x28 ordinal: 0x10
  USHORT ReasonFlags;                          // offset: 0x30 ordinal: 0x11
  ULONGLONG InitiateWakeStamp;                 // offset: 0x38 ordinal: 0x12
  LONG PreviousStatus;                         // offset: 0x40 ordinal: 0x13
  ULONG PreviousCancelReason;                  // offset: 0x44 ordinal: 0x14
  struct _KAFFINITY_EX PrimaryProcessorMask;   // offset: 0x48 ordinal: 0x15
  struct _KAFFINITY_EX SecondaryProcessorMask; // offset: 0x54 ordinal: 0x16
  VOID(*IdlePrepare)
  (struct _PROCESSOR_IDLE_PREPARE_INFO *); // offset: 0x60 ordinal: 0x17
  LONG(*IdlePreExecute)
  (VOID *, ULONG, ULONG, ULONG, ULONG *); // offset: 0x64 ordinal: 0x18
  LONG(*IdleExecute)
  (VOID *, ULONGLONG, ULONG, ULONG, ULONG, ULONG,
   ULONG *); // offset: 0x68 ordinal: 0x19
  ULONG(*IdlePreselect)
  (VOID *, struct _PROCESSOR_IDLE_CONSTRAINTS *); // offset: 0x6c ordinal: 0x1a
  ULONG (*IdleTest)(VOID *, ULONG, ULONG);        // offset: 0x70 ordinal: 0x1b
  ULONG (*IdleAvailabilityCheck)(VOID *, ULONG);  // offset: 0x74 ordinal: 0x1c
  VOID(*IdleComplete)
  (VOID *, ULONG, ULONG, ULONG, ULONG *);          // offset: 0x78 ordinal: 0x1d
  VOID (*IdleCancel)(VOID *, ULONG);               // offset: 0x7c ordinal: 0x1e
  UCHAR (*IdleIsHalted)(VOID *);                   // offset: 0x80 ordinal: 0x1f
  UCHAR (*IdleInitiateWake)(VOID *);               // offset: 0x84 ordinal: 0x20
  struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo; // offset: 0x88 ordinal: 0x21
  struct _KAFFINITY_EX DeepIdleSnapshot;           // offset: 0xd8 ordinal: 0x22
  struct _PERFINFO_PPM_STATE_SELECTION *Tracing;   // offset: 0xe4 ordinal: 0x23
  struct _PERFINFO_PPM_STATE_SELECTION
      *CoordinatedTracing;                    // offset: 0xe8 ordinal: 0x24
  struct _PPM_SELECTION_MENU ProcessorMenu;   // offset: 0xec ordinal: 0x25
  struct _PPM_SELECTION_MENU CoordinatedMenu; // offset: 0xf4 ordinal: 0x26
  struct _PPM_COORDINATED_SELECTION
      CoordinatedSelection;        // offset: 0xfc ordinal: 0x27
  struct _PPM_IDLE_STATE State[1]; // offset: 0x10c ordinal: 0x28
} _PPM_IDLE_STATES;

// 0x40 bytes (sizeof)
typedef struct _XSAVE_AREA_HEADER {
  ULONGLONG Mask;           // offset: 0x0 ordinal: 0x0
  ULONGLONG CompactionMask; // offset: 0x8 ordinal: 0x1
  ULONGLONG Reserved2[6];   // offset: 0x10 ordinal: 0x2
} _XSAVE_AREA_HEADER;

// 0x240 bytes (sizeof)
typedef struct _XSAVE_AREA {
  struct _XSAVE_FORMAT LegacyState; // offset: 0x0 ordinal: 0x0
  struct _XSAVE_AREA_HEADER Header; // offset: 0x200 ordinal: 0x1
} _XSAVE_AREA;

// 0x20 bytes (sizeof)
typedef struct _XSTATE_CONTEXT {
  ULONGLONG Mask;           // offset: 0x0 ordinal: 0x0
  ULONG Length;             // offset: 0x8 ordinal: 0x1
  ULONG Reserved1;          // offset: 0xc ordinal: 0x2
  struct _XSAVE_AREA *Area; // offset: 0x10 ordinal: 0x3
  ULONG Reserved2;          // offset: 0x14 ordinal: 0x4
  VOID *Buffer;             // offset: 0x18 ordinal: 0x5
  ULONG Reserved3;          // offset: 0x1c ordinal: 0x6
} _XSTATE_CONTEXT;

// 0x20 bytes (sizeof)
typedef struct _XSTATE_SAVE {
  LONGLONG Reserved1;                   // offset: 0x0 ordinal: 0x0
  ULONG Reserved2;                      // offset: 0x8 ordinal: 0x1
  struct _XSTATE_SAVE *Prev;            // offset: 0xc ordinal: 0x2
  struct _XSAVE_AREA *Reserved3;        // offset: 0x10 ordinal: 0x3
  struct _KTHREAD *Thread;              // offset: 0x14 ordinal: 0x4
  VOID *Reserved4;                      // offset: 0x18 ordinal: 0x5
  UCHAR Level;                          // offset: 0x1c ordinal: 0x6
  struct _XSTATE_CONTEXT XStateContext; // offset: 0x0 ordinal: 0x7
} _XSTATE_SAVE;

// 0x10 bytes (sizeof)
typedef struct _KTIMER_EXPIRATION_TRACE {
  ULONGLONG InterruptTime;                 // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER PerformanceCounter; // offset: 0x8 ordinal: 0x1
} _KTIMER_EXPIRATION_TRACE;

// 0x10 bytes (sizeof)
typedef struct _PROC_IDLE_SNAP {
  ULONGLONG Time; // offset: 0x0 ordinal: 0x0
  ULONGLONG Idle; // offset: 0x8 ordinal: 0x1
} _PROC_IDLE_SNAP;

// 0x20 bytes (sizeof)
typedef struct _PPM_FFH_THROTTLE_STATE_INFO {
  UCHAR EnableLogging;                   // offset: 0x0 ordinal: 0x0
  ULONG MismatchCount;                   // offset: 0x4 ordinal: 0x1
  UCHAR Initialized;                     // offset: 0x8 ordinal: 0x2
  ULONGLONG LastValue;                   // offset: 0x10 ordinal: 0x3
  union _LARGE_INTEGER LastLogTickCount; // offset: 0x18 ordinal: 0x4
} _PPM_FFH_THROTTLE_STATE_INFO;

// 0x54 bytes (sizeof)
typedef struct _KSPECIAL_REGISTERS {
  ULONG Cr0;               // offset: 0x0 ordinal: 0x0
  ULONG Cr2;               // offset: 0x4 ordinal: 0x1
  ULONG Cr3;               // offset: 0x8 ordinal: 0x2
  ULONG Cr4;               // offset: 0xc ordinal: 0x3
  ULONG KernelDr0;         // offset: 0x10 ordinal: 0x4
  ULONG KernelDr1;         // offset: 0x14 ordinal: 0x5
  ULONG KernelDr2;         // offset: 0x18 ordinal: 0x6
  ULONG KernelDr3;         // offset: 0x1c ordinal: 0x7
  ULONG KernelDr6;         // offset: 0x20 ordinal: 0x8
  ULONG KernelDr7;         // offset: 0x24 ordinal: 0x9
  struct _DESCRIPTOR Gdtr; // offset: 0x28 ordinal: 0xa
  struct _DESCRIPTOR Idtr; // offset: 0x30 ordinal: 0xb
  USHORT Tr;               // offset: 0x38 ordinal: 0xc
  USHORT Ldtr;             // offset: 0x3a ordinal: 0xd
  ULONGLONG Xcr0;          // offset: 0x3c ordinal: 0xe
  ULONG ExceptionList;     // offset: 0x44 ordinal: 0xf
  ULONG Reserved[3];       // offset: 0x48 ordinal: 0x10
} _KSPECIAL_REGISTERS;

// 0x320 bytes (sizeof)
typedef struct _KPROCESSOR_STATE {
  struct _CONTEXT ContextFrame;                // offset: 0x0 ordinal: 0x0
  struct _KSPECIAL_REGISTERS SpecialRegisters; // offset: 0x2cc ordinal: 0x1
} _KPROCESSOR_STATE;

// 0x140 bytes (sizeof)
typedef struct _KSHARED_READY_QUEUE {
  ULONG Lock;                           // offset: 0x0 ordinal: 0x0
  ULONG ReadySummary;                   // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY ReadyListHead[32]; // offset: 0x8 ordinal: 0x2
  CHAR RunningSummary[32];              // offset: 0x108 ordinal: 0x3
  UCHAR Span;                           // offset: 0x128 ordinal: 0x4
  UCHAR LowProcIndex;                   // offset: 0x129 ordinal: 0x5
  UCHAR QueueIndex;                     // offset: 0x12a ordinal: 0x6
  UCHAR ProcCount;                      // offset: 0x12b ordinal: 0x7
  UCHAR ScanOwner;                      // offset: 0x12c ordinal: 0x8
  UCHAR Spare[3];                       // offset: 0x12d ordinal: 0x9
  ULONG Affinity;                       // offset: 0x130 ordinal: 0xa
  ULONG ReadyThreadCount;               // offset: 0x134 ordinal: 0xb
  ULONGLONG ReadyQueueExpectedRunTime;  // offset: 0x138 ordinal: 0xc
} _KSHARED_READY_QUEUE;

typedef LONG (*__anon_2941)(struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *,
                            ULONGLONG *, ULONGLONG *);

typedef LONG (*__anon_2939)(struct _IO_RESOURCE_DESCRIPTOR *, ULONGLONG *,
                            ULONGLONG *, ULONGLONG *, ULONGLONG *);

// 0xac bytes (sizeof)
typedef struct _ARBITER_INSTANCE {
  ULONG Signature;                            // offset: 0x0 ordinal: 0x0
  struct _KEVENT *MutexEvent;                 // offset: 0x4 ordinal: 0x1
  WCHAR *Name;                                // offset: 0x8 ordinal: 0x2
  WCHAR *OrderingName;                        // offset: 0xc ordinal: 0x3
  LONG ResourceType;                          // offset: 0x10 ordinal: 0x4
  struct _RTL_RANGE_LIST *Allocation;         // offset: 0x14 ordinal: 0x5
  struct _RTL_RANGE_LIST *PossibleAllocation; // offset: 0x18 ordinal: 0x6
  struct _ARBITER_ORDERING_LIST OrderingList; // offset: 0x1c ordinal: 0x7
  struct _ARBITER_ORDERING_LIST ReservedList; // offset: 0x24 ordinal: 0x8
  LONG ReferenceCount;                        // offset: 0x2c ordinal: 0x9
  struct _ARBITER_INTERFACE *Interface;       // offset: 0x30 ordinal: 0xa
  ULONG AllocationStackMaxSize;               // offset: 0x34 ordinal: 0xb
  struct _ARBITER_ALLOCATION_STATE
      *AllocationStack; // offset: 0x38 ordinal: 0xc
  LONG(*UnpackRequirement)
  (struct _IO_RESOURCE_DESCRIPTOR *, ULONGLONG *, ULONGLONG *, ULONGLONG *,
   ULONGLONG *); // offset: 0x3c ordinal: 0xd
  LONG(*PackResource)
  (struct _IO_RESOURCE_DESCRIPTOR *, ULONGLONG,
   struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *); // offset: 0x40 ordinal: 0xe
  LONG(*UnpackResource)
  (struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *, ULONGLONG *,
   ULONGLONG *); // offset: 0x44 ordinal: 0xf
  LONG(*ScoreRequirement)
  (struct _IO_RESOURCE_DESCRIPTOR *); // offset: 0x48 ordinal: 0x10
  LONG(*TestAllocation)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_TEST_ALLOCATION_PARAMETERS *); // offset: 0x4c ordinal: 0x11
  LONG(*RetestAllocation)
  (struct _ARBITER_INSTANCE *, struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
                                   *); // offset: 0x50 ordinal: 0x12
  LONG(*CommitAllocation)
  (struct _ARBITER_INSTANCE *); // offset: 0x54 ordinal: 0x13
  LONG(*RollbackAllocation)
  (struct _ARBITER_INSTANCE *); // offset: 0x58 ordinal: 0x14
  LONG(*BootAllocation)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_BOOT_ALLOCATION_PARAMETERS *); // offset: 0x5c ordinal: 0x15
  LONG(*QueryArbitrate)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_QUERY_ARBITRATE_PARAMETERS *); // offset: 0x60 ordinal: 0x16
  LONG(*QueryConflict)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_QUERY_CONFLICT_PARAMETERS *); // offset: 0x64 ordinal: 0x17
  LONG(*AddReserved)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ADD_RESERVED_PARAMETERS *); // offset: 0x68 ordinal: 0x18
  LONG(*StartArbiter)
  (struct _ARBITER_INSTANCE *,
   struct _CM_RESOURCE_LIST *); // offset: 0x6c ordinal: 0x19
  LONG(*PreprocessEntry)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x70 ordinal: 0x1a
  LONG(*AllocateEntry)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x74 ordinal: 0x1b
  UCHAR(*GetNextAllocationRange)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x78 ordinal: 0x1c
  UCHAR(*FindSuitableRange)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x7c ordinal: 0x1d
  VOID(*AddAllocation)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x80 ordinal: 0x1e
  VOID(*BacktrackAllocation)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x84 ordinal: 0x1f
  UCHAR(*OverrideConflict)
  (struct _ARBITER_INSTANCE *,
   struct _ARBITER_ALLOCATION_STATE *); // offset: 0x88 ordinal: 0x20
  LONG(*InitializeRangeList)
  (struct _ARBITER_INSTANCE *, ULONG, struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *,
   struct _RTL_RANGE_LIST *); // offset: 0x8c ordinal: 0x21
  LONG(*DeleteOwnerRanges)
  (struct _ARBITER_INSTANCE *, VOID *);   // offset: 0x90 ordinal: 0x22
  UCHAR TransactionInProgress;            // offset: 0x94 ordinal: 0x23
  struct _KEVENT *TransactionEvent;       // offset: 0x98 ordinal: 0x24
  VOID *Extension;                        // offset: 0x9c ordinal: 0x25
  struct _DEVICE_OBJECT *BusDeviceObject; // offset: 0xa0 ordinal: 0x26
  VOID *ConflictCallbackContext;          // offset: 0xa4 ordinal: 0x27
  UCHAR(*ConflictCallback)
  (VOID *, struct _RTL_RANGE *); // offset: 0xa8 ordinal: 0x28
} _ARBITER_INSTANCE;

typedef LONG (*__anon_2955)(struct _ARBITER_INSTANCE *, VOID *);

typedef LONG (*__anon_2954)(struct _ARBITER_INSTANCE *, ULONG,
                            struct _CM_PARTIAL_RESOURCE_DESCRIPTOR *,
                            struct _RTL_RANGE_LIST *);

typedef VOID (*__anon_2953)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_ALLOCATION_STATE *);

typedef UCHAR (*__anon_2952)(struct _ARBITER_INSTANCE *,
                             struct _ARBITER_ALLOCATION_STATE *);

typedef LONG (*__anon_2951)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_ALLOCATION_STATE *);

typedef LONG (*__anon_2950)(struct _ARBITER_INSTANCE *,
                            struct _CM_RESOURCE_LIST *);

typedef LONG (*__anon_2949)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_ADD_RESERVED_PARAMETERS *);

typedef LONG (*__anon_2948)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_QUERY_CONFLICT_PARAMETERS *);

typedef LONG (*__anon_2947)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_QUERY_ARBITRATE_PARAMETERS *);

typedef LONG (*__anon_2946)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_BOOT_ALLOCATION_PARAMETERS *);

typedef LONG (*__anon_2945)(struct _ARBITER_INSTANCE *);

typedef LONG (*__anon_2944)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_RETEST_ALLOCATION_PARAMETERS *);

typedef LONG (*__anon_2943)(struct _ARBITER_INSTANCE *,
                            struct _ARBITER_TEST_ALLOCATION_PARAMETERS *);

typedef LONG (*__anon_2732)(ULONG, ULONG, ULONGLONG *);

// 0x14 bytes (sizeof)
typedef struct _HIDDEN_PROCESSOR_POWER_INTERFACE {
  ULONG Version;                                  // offset: 0x0 ordinal: 0x0
  LONG (*ReadPerfMsr)(ULONG, ULONG, ULONGLONG *); // offset: 0x4 ordinal: 0x1
  LONG(*WritePerfMsr)
  (ULONG, ULONG, ULONGLONG, ULONGLONG); // offset: 0x8 ordinal: 0x2
  LONG(*ReadPerfIoPort)
  (ULONG, USHORT, USHORT, ULONG *); // offset: 0xc ordinal: 0x3
  LONG(*WritePerfIoPort)
  (ULONG, USHORT, USHORT, ULONG, ULONG); // offset: 0x10 ordinal: 0x4
} _HIDDEN_PROCESSOR_POWER_INTERFACE;

typedef LONG (*__anon_2524)(struct _HIDDEN_PROCESSOR_POWER_INTERFACE *);

typedef LONG (*__anon_2708)(struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG *,
                            ULONGLONG *);

typedef LONG (*__anon_2707)(struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG, ULONG *,
                            ULONGLONG *);

typedef LONG (*__anon_2706)(struct _HAL_HV_DMA_DOMAIN_INFO *, ULONGLONG,
                            ULONGLONG *);

typedef LONG (*__anon_2705)(struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG, ULONGLONG,
                            ULONG *, ULONGLONG *, UCHAR);

typedef ULONG (*__anon_2693)(ULONG, VOID *, ULONGLONG, ULONGLONG *);

typedef LONG (*__anon_2688)(ULONG, ULONG *, ULONGLONG *, ULONG *);

typedef LONG (*__anon_2686)(ULONG, ULONG, ULONG *, ULONGLONG *);

// 0xf8 bytes (sizeof)
typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION {
  ULONG Enlightenments;               // offset: 0x0 ordinal: 0x0
  ULONG HypervisorConnected;          // offset: 0x4 ordinal: 0x1
  VOID (*EndOfInterrupt)();           // offset: 0x8 ordinal: 0x2
  VOID (*ApicWriteIcr)(ULONG, ULONG); // offset: 0xc ordinal: 0x3
  ULONG Reserved0;                    // offset: 0x10 ordinal: 0x4
  ULONG SpinCountMask;                // offset: 0x14 ordinal: 0x5
  VOID (*LongSpinWait)(ULONG);        // offset: 0x18 ordinal: 0x6
  ULONGLONG (*GetReferenceTime)();    // offset: 0x1c ordinal: 0x7
  LONG(*SetSystemSleepProperty)
  (ULONG, UCHAR, UCHAR);                // offset: 0x20 ordinal: 0x8
  LONG (*EnterSleepState)(ULONG);       // offset: 0x24 ordinal: 0x9
  LONG (*NotifyDebugDeviceAvailable)(); // offset: 0x28 ordinal: 0xa
  LONG(*MapDeviceInterrupt)
  (ULONGLONG, VOID *, struct _GROUP_AFFINITY *,
   VOID *);                                        // offset: 0x2c ordinal: 0xb
  LONG (*UnmapDeviceInterrupt)(ULONGLONG, VOID *); // offset: 0x30 ordinal: 0xc
  LONG(*RetargetDeviceInterrupt)
  (ULONGLONG, VOID *, VOID *, struct _GROUP_AFFINITY *,
   VOID *); // offset: 0x34 ordinal: 0xd
  LONG(*SetHpetConfig)
  (union _LARGE_INTEGER, ULONG, ULONGLONG, UCHAR,
   VOID *);                    // offset: 0x38 ordinal: 0xe
  LONG (*NotifyHpetEnabled)(); // offset: 0x3c ordinal: 0xf
  LONG(*QueryAssociatedProcessors)
  (ULONG, ULONG *, ULONG *); // offset: 0x40 ordinal: 0x10
  LONG(*ReadMultipleMsr)
  (ULONG, ULONG, ULONG *, ULONGLONG *); // offset: 0x44 ordinal: 0x11
  LONG(*WriteMultipleMsr)
  (ULONG, ULONG, ULONG *, ULONGLONG *); // offset: 0x48 ordinal: 0x12
  LONG(*ReadCpuid)
  (ULONG, ULONG, ULONG *, ULONG *, ULONG *,
   ULONG *);                            // offset: 0x4c ordinal: 0x13
  LONG (*LpWritebackInvalidate)(ULONG); // offset: 0x50 ordinal: 0x14
  LONG(*GetMachineCheckContext)
  (ULONG, ULONG *, ULONGLONG *, ULONG *);        // offset: 0x54 ordinal: 0x15
  LONG (*SuspendPartition)(ULONGLONG);           // offset: 0x58 ordinal: 0x16
  LONG (*ResumePartition)(ULONGLONG);            // offset: 0x5c ordinal: 0x17
  LONG (*SetSystemMachineCheckProperty)(VOID *); // offset: 0x60 ordinal: 0x18
  LONG(*WheaErrorNotification)
  (struct _WHEA_RECOVERY_CONTEXT *, UCHAR, UCHAR); // offset: 0x64 ordinal: 0x19
  ULONG (*GetProcessorIndexFromVpIndex)(ULONG);    // offset: 0x68 ordinal: 0x1a
  LONG(*SyntheticClusterIpi)
  (struct _KAFFINITY_EX *, ULONG);              // offset: 0x6c ordinal: 0x1b
  UCHAR (*VpStartEnabled)();                    // offset: 0x70 ordinal: 0x1c
  LONG (*StartVirtualProcessor)(ULONG, VOID *); // offset: 0x74 ordinal: 0x1d
  LONG (*GetVpIndexFromApicId)(ULONG, ULONG *); // offset: 0x78 ordinal: 0x1e
  LONG(*IumAccessPciDevice)
  (UCHAR, ULONG, ULONG, ULONG, ULONG, ULONG, ULONG,
   VOID *); // offset: 0x7c ordinal: 0x1f
  ULONG(*IumEfiRuntimeService)
  (ULONG, VOID *, ULONGLONG, ULONGLONG *); // offset: 0x80 ordinal: 0x20
  VOID(*SvmGetSystemCapabilities)
  (struct _HAL_HV_SVM_SYSTEM_CAPABILITIES *); // offset: 0x84 ordinal: 0x21
  LONG(*SvmGetDeviceCapabilities)
  (ULONG,
   struct _HAL_HV_SVM_DEVICE_CAPABILITIES *); // offset: 0x88 ordinal: 0x22
  LONG (*SvmCreatePasidSpace)(ULONG, ULONG);  // offset: 0x8c ordinal: 0x23
  LONG(*SvmSetPasidAddressSpace)
  (ULONG, ULONG, ULONGLONG); // offset: 0x90 ordinal: 0x24
  VOID(*SvmFlushPasid)
  (ULONG, ULONG, ULONG, struct _KTB_FLUSH_VA *); // offset: 0x94 ordinal: 0x25
  LONG(*SvmAttachPasidSpace)
  (ULONG, ULONG, ULONG, ULONG);          // offset: 0x98 ordinal: 0x26
  LONG (*SvmDetachPasidSpace)(ULONG);    // offset: 0x9c ordinal: 0x27
  LONG (*SvmEnablePasid)(ULONG, ULONG);  // offset: 0xa0 ordinal: 0x28
  LONG (*SvmDisablePasid)(ULONG, ULONG); // offset: 0xa4 ordinal: 0x29
  LONG(*SvmAcknowledgePageRequest)
  (ULONG, VOID *, ULONG *); // offset: 0xa8 ordinal: 0x2a
  LONG(*SvmCreatePrQueue)
  (ULONG, ULONG, union _LARGE_INTEGER, ULONG,
   ULONG);                                   // offset: 0xac ordinal: 0x2b
  LONG (*SvmDeletePrQueue)(ULONG);           // offset: 0xb0 ordinal: 0x2c
  LONG (*SvmClearPrqStalled)(ULONG);         // offset: 0xb4 ordinal: 0x2d
  LONG (*SvmSetDeviceEnabled)(ULONG, UCHAR); // offset: 0xb8 ordinal: 0x2e
  LONG (*HvDebuggerPowerHandler)(UCHAR);     // offset: 0xbc ordinal: 0x2f
  LONG (*SetQpcBias)(ULONGLONG);             // offset: 0xc0 ordinal: 0x30
  ULONGLONG (*GetQpcBias)();                 // offset: 0xc4 ordinal: 0x31
  LONG(*RegisterDeviceId)
  (struct _EXT_IOMMU_DEVICE_ID *, ULONGLONG); // offset: 0xc8 ordinal: 0x32
  LONG (*UnregisterDeviceId)(ULONGLONG);      // offset: 0xcc ordinal: 0x33
  LONG(*AllocateDeviceDomain)
  (struct _HAL_HV_DMA_DOMAIN_INFO *); // offset: 0xd0 ordinal: 0x34
  LONG(*AttachDeviceDomain)
  (struct _EXT_IOMMU_DEVICE_ID *,
   struct _HAL_HV_DMA_DOMAIN_INFO *);    // offset: 0xd4 ordinal: 0x35
  LONG (*DetachDeviceDomain)(ULONGLONG); // offset: 0xd8 ordinal: 0x36
  LONG(*DeleteDeviceDomain)
  (struct _HAL_HV_DMA_DOMAIN_INFO *); // offset: 0xdc ordinal: 0x37
  LONG(*MapDeviceLogicalRange)
  (struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG, ULONGLONG, ULONG *, ULONGLONG *,
   UCHAR); // offset: 0xe0 ordinal: 0x38
  LONG(*UnmapDeviceLogicalRange)
  (struct _HAL_HV_DMA_DOMAIN_INFO *, ULONGLONG,
   ULONGLONG *); // offset: 0xe4 ordinal: 0x39
  LONG(*MapDeviceSparsePages)
  (struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG, ULONG *,
   ULONGLONG *); // offset: 0xe8 ordinal: 0x3a
  LONG(*UnmapDeviceSparsePages)
  (struct _HAL_HV_DMA_DOMAIN_INFO *, ULONG *,
   ULONGLONG *);                          // offset: 0xec ordinal: 0x3b
  LONG (*GetDmaGuardEnabled)(UCHAR *);    // offset: 0xf0 ordinal: 0x3c
  LONG (*UpdateMicrocode)(VOID *, ULONG); // offset: 0xf4 ordinal: 0x3d
} _HAL_INTEL_ENLIGHTENMENT_INFORMATION;

typedef VOID (*__anon_2473)(struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION *);

typedef LONG (*__anon_2511)(ULONGLONG *);

typedef LONG (*__anon_2510)(ULONGLONG, ULONGLONG *, ULONGLONG *);

typedef LONG (*__anon_2503)(enum _HAL_CLOCK_TIMER_MODE, ULONGLONG, ULONGLONG *);

typedef LONG (*__anon_2499)(VOID *, ULONG, ULONGLONG *, ULONG *);

typedef ULONGLONG (*__anon_2493)(ULONGLONG *);

typedef VOID (*__anon_2490)(struct _HAL_PMC_COUNTERS *, ULONGLONG *);

typedef VOID *(*__anon_2474)(struct _LOADER_PARAMETER_BLOCK *, ULONG,
                             ULONGLONG *, ULONG);

typedef UCHAR (*__anon_2466)(ULONGLONG *, ULONGLONG *);

// 0x40 bytes (sizeof)
typedef struct _ETW_SILO_TRACING_BLOCK {
  struct _EX_FAST_REF *ProcessorBuffers; // offset: 0x0 ordinal: 0x0
  ULONGLONG *EventsLoggedCount;          // offset: 0x4 ordinal: 0x1
  LONGLONG *QpcDelta;                    // offset: 0x8 ordinal: 0x2
} _ETW_SILO_TRACING_BLOCK;

typedef VOID (*__anon_565)(ULONG, UCHAR, ULONGLONG *, ULONGLONG *);

// 0x28 bytes (sizeof)
typedef struct _PROC_FEEDBACK_COUNTER {
  union {
    VOID (*InstantaneousRead)(ULONG, ULONG *); // offset: 0x0 ordinal: 0x0
    VOID(*DifferentialRead)
    (ULONG, UCHAR, ULONGLONG *, ULONGLONG *); // offset: 0x0 ordinal: 0x1
  };
  ULONGLONG LastActualCount;    // offset: 0x8 ordinal: 0x2
  ULONGLONG LastReferenceCount; // offset: 0x10 ordinal: 0x3
  ULONG CachedValue;            // offset: 0x18 ordinal: 0x4
  UCHAR Affinitized;            // offset: 0x20 ordinal: 0x5
  UCHAR Differential;           // offset: 0x21 ordinal: 0x6
  UCHAR DiscardIdleTime;        // offset: 0x22 ordinal: 0x7
  UCHAR Scaling;                // offset: 0x23 ordinal: 0x8
  ULONG Context;                // offset: 0x24 ordinal: 0x9
} _PROC_FEEDBACK_COUNTER;

typedef ULONG (*__anon_452)(ULONG, ULONG, ULONG, ULONG, ULONG, ULONG, ULONG,
                            ULONG *, ULONGLONG *);

typedef VOID (*__anon_449)(ULONGLONG *);

// 0x2bc bytes (sizeof)
typedef struct _RTL_USER_PROCESS_PARAMETERS {
  ULONG MaximumLength;                  // offset: 0x0 ordinal: 0x0
  ULONG Length;                         // offset: 0x4 ordinal: 0x1
  ULONG Flags;                          // offset: 0x8 ordinal: 0x2
  ULONG DebugFlags;                     // offset: 0xc ordinal: 0x3
  VOID *ConsoleHandle;                  // offset: 0x10 ordinal: 0x4
  ULONG ConsoleFlags;                   // offset: 0x14 ordinal: 0x5
  VOID *StandardInput;                  // offset: 0x18 ordinal: 0x6
  VOID *StandardOutput;                 // offset: 0x1c ordinal: 0x7
  VOID *StandardError;                  // offset: 0x20 ordinal: 0x8
  struct _CURDIR CurrentDirectory;      // offset: 0x24 ordinal: 0x9
  struct _UNICODE_STRING DllPath;       // offset: 0x30 ordinal: 0xa
  struct _UNICODE_STRING ImagePathName; // offset: 0x38 ordinal: 0xb
  struct _UNICODE_STRING CommandLine;   // offset: 0x40 ordinal: 0xc
  VOID *Environment;                    // offset: 0x48 ordinal: 0xd
  ULONG StartingX;                      // offset: 0x4c ordinal: 0xe
  ULONG StartingY;                      // offset: 0x50 ordinal: 0xf
  ULONG CountX;                         // offset: 0x54 ordinal: 0x10
  ULONG CountY;                         // offset: 0x58 ordinal: 0x11
  ULONG CountCharsX;                    // offset: 0x5c ordinal: 0x12
  ULONG CountCharsY;                    // offset: 0x60 ordinal: 0x13
  ULONG FillAttribute;                  // offset: 0x64 ordinal: 0x14
  ULONG WindowFlags;                    // offset: 0x68 ordinal: 0x15
  ULONG ShowWindowFlags;                // offset: 0x6c ordinal: 0x16
  struct _UNICODE_STRING WindowTitle;   // offset: 0x70 ordinal: 0x17
  struct _UNICODE_STRING DesktopInfo;   // offset: 0x78 ordinal: 0x18
  struct _UNICODE_STRING ShellInfo;     // offset: 0x80 ordinal: 0x19
  struct _UNICODE_STRING RuntimeData;   // offset: 0x88 ordinal: 0x1a
  struct _RTL_DRIVE_LETTER_CURDIR
      CurrentDirectores[32];                 // offset: 0x90 ordinal: 0x1b
  ULONG EnvironmentSize;                     // offset: 0x290 ordinal: 0x1c
  ULONG EnvironmentVersion;                  // offset: 0x294 ordinal: 0x1d
  VOID *PackageDependencyData;               // offset: 0x298 ordinal: 0x1e
  ULONG ProcessGroupId;                      // offset: 0x29c ordinal: 0x1f
  ULONG LoaderThreads;                       // offset: 0x2a0 ordinal: 0x20
  struct _UNICODE_STRING RedirectionDllName; // offset: 0x2a4 ordinal: 0x21
  struct _UNICODE_STRING HeapPartitionName;  // offset: 0x2ac ordinal: 0x22
  ULONGLONG *DefaultThreadpoolCpuSetMasks;   // offset: 0x2b4 ordinal: 0x23
  ULONG DefaultThreadpoolCpuSetMaskCount;    // offset: 0x2b8 ordinal: 0x24
} _RTL_USER_PROCESS_PARAMETERS;

// 0x8 bytes (sizeof)
typedef union _SLIST_HEADER {
  ULONGLONG Alignment;            // offset: 0x0 ordinal: 0x0
  struct _SINGLE_LIST_ENTRY Next; // offset: 0x0 ordinal: 0x1
  USHORT Depth;                   // offset: 0x4 ordinal: 0x2
  USHORT CpuId;                   // offset: 0x6 ordinal: 0x3
} _SLIST_HEADER;

// 0x40 bytes (sizeof)
typedef struct _PF_KERNEL_GLOBALS {
  ULONGLONG AccessBufferAgeThreshold;     // offset: 0x0 ordinal: 0x0
  struct _EX_RUNDOWN_REF AccessBufferRef; // offset: 0x8 ordinal: 0x1
  struct _KEVENT AccessBufferExistsEvent; // offset: 0xc ordinal: 0x2
  ULONG AccessBufferMax;                  // offset: 0x1c ordinal: 0x3
  union _SLIST_HEADER AccessBufferList;   // offset: 0x20 ordinal: 0x4
  LONG StreamSequenceNumber;              // offset: 0x28 ordinal: 0x5
  ULONG Flags;                            // offset: 0x2c ordinal: 0x6
  LONG ScenarioPrefetchCount;             // offset: 0x30 ordinal: 0x7
} _PF_KERNEL_GLOBALS;

// 0x18 bytes (sizeof)
typedef struct _CACHED_KSTACK_LIST {
  union _SLIST_HEADER SListHead; // offset: 0x0 ordinal: 0x0
  LONG MinimumFree;              // offset: 0x8 ordinal: 0x1
  ULONG Misses;                  // offset: 0xc ordinal: 0x2
  ULONG MissesLast;              // offset: 0x10 ordinal: 0x3
  ULONG AllStacksInUse;          // offset: 0x14 ordinal: 0x4
} _CACHED_KSTACK_LIST;

// 0x48 bytes (sizeof)
typedef struct _MI_SYSTEM_NODE_INFORMATION {
  struct _CACHED_KSTACK_LIST CachedKernelStacks[2]; // offset: 0x0 ordinal: 0x0
  ULONG CachedNonPagedPoolCount;                    // offset: 0x30 ordinal: 0x1
  ULONG NonPagedPoolSpinLock;                       // offset: 0x34 ordinal: 0x2
  struct _MMPFN *CachedNonPagedPool;                // offset: 0x38 ordinal: 0x3
  VOID *NonPagedPoolFirstVa;                        // offset: 0x3c ordinal: 0x4
  VOID *NonPagedPoolLastVa;                         // offset: 0x40 ordinal: 0x5
} _MI_SYSTEM_NODE_INFORMATION;

// 0x180 bytes (sizeof)
typedef struct _MI_HARDWARE_STATE {
  ULONG NodeMask;                               // offset: 0x0 ordinal: 0x0
  ULONG NumaHintIndex;                          // offset: 0x4 ordinal: 0x1
  ULONG NumaLastRangeIndexInclusive;            // offset: 0x8 ordinal: 0x2
  UCHAR NumaTableCaptured;                      // offset: 0xc ordinal: 0x3
  UCHAR NodeShift;                              // offset: 0xd ordinal: 0x4
  UCHAR ChannelShift;                           // offset: 0xe ordinal: 0x5
  struct _MI_NODE_NUMBER_ZERO_BASED *NodeGraph; // offset: 0x10 ordinal: 0x6
  struct _MI_SYSTEM_NODE_INFORMATION
      *SystemNodeInformation;                    // offset: 0x14 ordinal: 0x7
  struct _HAL_NODE_RANGE TemporaryNumaRanges[2]; // offset: 0x18 ordinal: 0x8
  struct _HAL_NODE_RANGE *NumaMemoryRanges;      // offset: 0x28 ordinal: 0x9
  struct _HAL_CHANNEL_MEMORY_RANGES
      *ChannelMemoryRanges;                // offset: 0x2c ordinal: 0xa
  LONG NumaNodeLock;                       // offset: 0x30 ordinal: 0xb
  ULONG SecondLevelCacheSize;              // offset: 0x34 ordinal: 0xc
  ULONG FirstLevelCacheSize;               // offset: 0x38 ordinal: 0xd
  ULONG PhysicalAddressBits;               // offset: 0x3c ordinal: 0xe
  UCHAR ProcessorCachesFlushedOnPowerLoss; // offset: 0x40 ordinal: 0xf
  ULONG TotalPagesAllowed;                 // offset: 0x44 ordinal: 0x10
  ULONG SecondaryColorMask;                // offset: 0x48 ordinal: 0x11
  ULONG SecondaryColors;                   // offset: 0x4c ordinal: 0x12
  ULONG FlushTbForAttributeChange;         // offset: 0x50 ordinal: 0x13
  ULONG FlushCacheForAttributeChange;      // offset: 0x54 ordinal: 0x14
  ULONG FlushCacheForPageAttributeChange;  // offset: 0x58 ordinal: 0x15
  ULONG CacheFlushPromoteThreshold;        // offset: 0x5c ordinal: 0x16
  ULONGLONG InvalidPteMask;                // offset: 0x80 ordinal: 0x17
  ULONG LargePageColors[2];                // offset: 0xc0 ordinal: 0x18
  ULONG FlushTbThreshold;                  // offset: 0xc8 ordinal: 0x19
  enum _MI_PFN_CACHE_ATTRIBUTE
      OptimalZeroingAttribute[4][4];             // offset: 0xcc ordinal: 0x1a
  UCHAR AttributeChangeRequiresReZero;           // offset: 0x10c ordinal: 0x1b
  struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2]; // offset: 0x110 ordinal: 0x1c
  ULONG HighestPossiblePhysicalPage;             // offset: 0x130 ordinal: 0x1d
  ULONG VsmKernelPageCount;                      // offset: 0x134 ordinal: 0x1e
  struct _RTL_AVL_TREE EnclaveRegions;           // offset: 0x138 ordinal: 0x1f
  VOID *EnclaveMetadataPage;                     // offset: 0x13c ordinal: 0x20
  struct _RTL_BITMAP *EnclaveMetadataBitMap;     // offset: 0x140 ordinal: 0x21
  struct _EX_PUSH_LOCK EnclaveMetadataEntryLock; // offset: 0x144 ordinal: 0x22
  LONG EnclaveMetadataPageLock;                  // offset: 0x148 ordinal: 0x23
} _MI_HARDWARE_STATE;

// 0x38 bytes (sizeof)
typedef struct _MI_PAGING_IO_STATE {
  struct _RTL_AVL_TREE PageFileHead;             // offset: 0x0 ordinal: 0x0
  LONG PageFileHeadSpinLock;                     // offset: 0x4 ordinal: 0x1
  LONG PrefetchSeekThreshold;                    // offset: 0x8 ordinal: 0x2
  union _SLIST_HEADER InPageSupportSListHead[2]; // offset: 0x10 ordinal: 0x3
  UCHAR InPageSupportSListMinimum[2];            // offset: 0x20 ordinal: 0x4
  ULONG InPageSinglePages;                       // offset: 0x24 ordinal: 0x5
  LONG DelayPageFaults;                          // offset: 0x28 ordinal: 0x6
  ULONG FileCompressionBoundary;                 // offset: 0x2c ordinal: 0x7
  UCHAR MdlsAdjusted;                            // offset: 0x30 ordinal: 0x8
} _MI_PAGING_IO_STATE;

// 0x68 bytes (sizeof)
typedef struct _MI_PROCESS_STATE {
  VOID *SystemDllBase;                         // offset: 0x0 ordinal: 0x0
  ULONG ColorSeed;                             // offset: 0x4 ordinal: 0x1
  LONG RotatingUniprocessorNumber;             // offset: 0x8 ordinal: 0x2
  union _LARGE_INTEGER CriticalSectionTimeout; // offset: 0x10 ordinal: 0x3
  struct _LIST_ENTRY ProcessList;              // offset: 0x18 ordinal: 0x4
  struct _MMPTE *SharedUserDataPte[2];         // offset: 0x20 ordinal: 0x5
  VOID *HypervisorSharedVa;                    // offset: 0x28 ordinal: 0x6
  ULONG VadSecureCookie;                       // offset: 0x2c ordinal: 0x7
  ULONG PaeGroups;                             // offset: 0x30 ordinal: 0x8
  ULONG FreePaeEntries;                        // offset: 0x34 ordinal: 0x9
  struct _PAE_ENTRY FirstFreePae;              // offset: 0x38 ordinal: 0xa
  LONG AllocatedPaePages;                      // offset: 0x58 ordinal: 0xb
  ULONG PaeLock;                               // offset: 0x5c ordinal: 0xc
  union _SLIST_HEADER PaeEntrySList;           // offset: 0x60 ordinal: 0xd
} _MI_PROCESS_STATE;

// 0xb0 bytes (sizeof)
typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA {
  struct _VF_SUSPECT_DRIVER_ENTRY
      *SuspectDriverEntry;                     // offset: 0x0 ordinal: 0x0
  VOID *WMICallback;                           // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY EtwHandlesListHead;       // offset: 0x8 ordinal: 0x2
  union __anon_2344 u1;                        // offset: 0x10 ordinal: 0x3
  ULONG Signature;                             // offset: 0x14 ordinal: 0x4
  UCHAR SeSigningLevel;                        // offset: 0x18 ordinal: 0x5
  union _SLIST_HEADER PoolPageHeaders;         // offset: 0x20 ordinal: 0x6
  union _SLIST_HEADER PoolTrackers;            // offset: 0x28 ordinal: 0x7
  ULONG CurrentPagedPoolAllocations;           // offset: 0x30 ordinal: 0x8
  ULONG CurrentNonPagedPoolAllocations;        // offset: 0x34 ordinal: 0x9
  ULONG PeakPagedPoolAllocations;              // offset: 0x38 ordinal: 0xa
  ULONG PeakNonPagedPoolAllocations;           // offset: 0x3c ordinal: 0xb
  ULONG PagedBytes;                            // offset: 0x40 ordinal: 0xc
  ULONG NonPagedBytes;                         // offset: 0x44 ordinal: 0xd
  ULONG PeakPagedBytes;                        // offset: 0x48 ordinal: 0xe
  ULONG PeakNonPagedBytes;                     // offset: 0x4c ordinal: 0xf
  ULONG RaiseIrqls;                            // offset: 0x50 ordinal: 0x10
  ULONG AcquireSpinLocks;                      // offset: 0x54 ordinal: 0x11
  ULONG SynchronizeExecutions;                 // offset: 0x58 ordinal: 0x12
  ULONG AllocationsWithNoTag;                  // offset: 0x5c ordinal: 0x13
  ULONG AllocationsFailed;                     // offset: 0x60 ordinal: 0x14
  ULONG AllocationsFailedDeliberately;         // offset: 0x64 ordinal: 0x15
  ULONG LockedBytes;                           // offset: 0x68 ordinal: 0x16
  ULONG PeakLockedBytes;                       // offset: 0x6c ordinal: 0x17
  ULONG MappedLockedBytes;                     // offset: 0x70 ordinal: 0x18
  ULONG PeakMappedLockedBytes;                 // offset: 0x74 ordinal: 0x19
  ULONG MappedIoSpaceBytes;                    // offset: 0x78 ordinal: 0x1a
  ULONG PeakMappedIoSpaceBytes;                // offset: 0x7c ordinal: 0x1b
  ULONG PagesForMdlBytes;                      // offset: 0x80 ordinal: 0x1c
  ULONG PeakPagesForMdlBytes;                  // offset: 0x84 ordinal: 0x1d
  ULONG ContiguousMemoryBytes;                 // offset: 0x88 ordinal: 0x1e
  ULONG PeakContiguousMemoryBytes;             // offset: 0x8c ordinal: 0x1f
  struct _LIST_ENTRY ContiguousMemoryListHead; // offset: 0x90 ordinal: 0x20
  ULONG ExecutePoolTypes;                      // offset: 0x98 ordinal: 0x21
  ULONG ExecutePageProtections;                // offset: 0x9c ordinal: 0x22
  ULONG ExecutePageMappings;                   // offset: 0xa0 ordinal: 0x23
  ULONG ExecuteWriteSections;                  // offset: 0xa4 ordinal: 0x24
  ULONG SectionAlignmentFailures;              // offset: 0xa8 ordinal: 0x25
  ULONG IATInExecutableSection;                // offset: 0xac ordinal: 0x26
} _VF_TARGET_VERIFIED_DRIVER_DATA;

// 0x20 bytes (sizeof)
typedef struct _VF_TARGET_DRIVER {
  struct _VF_AVL_TREE_NODE_EX TreeNode; // offset: 0x0 ordinal: 0x0
  union __anon_3079 u1;                 // offset: 0xc ordinal: 0x1
  struct _VF_TARGET_VERIFIED_DRIVER_DATA
      *VerifiedData; // offset: 0x1c ordinal: 0x2
} _VF_TARGET_DRIVER;

// 0x40 bytes (sizeof)
typedef struct _RTL_LOOKASIDE {
  union _SLIST_HEADER ListHead; // offset: 0x0 ordinal: 0x0
  USHORT Depth;                 // offset: 0x8 ordinal: 0x1
  USHORT MaximumDepth;          // offset: 0xa ordinal: 0x2
  ULONG TotalAllocates;         // offset: 0xc ordinal: 0x3
  ULONG AllocateMisses;         // offset: 0x10 ordinal: 0x4
  ULONG TotalFrees;             // offset: 0x14 ordinal: 0x5
  ULONG FreeMisses;             // offset: 0x18 ordinal: 0x6
  ULONG LastTotalAllocates;     // offset: 0x1c ordinal: 0x7
  ULONG LastAllocateMisses;     // offset: 0x20 ordinal: 0x8
  ULONG LastTotalFrees;         // offset: 0x24 ordinal: 0x9
} _RTL_LOOKASIDE;

// 0x1040 bytes (sizeof)
typedef struct _RTL_DYNAMIC_LOOKASIDE {
  ULONGLONG EnabledBucketBitmap;     // offset: 0x0 ordinal: 0x0
  ULONG BucketCount;                 // offset: 0x8 ordinal: 0x1
  ULONG ActiveBucketCount;           // offset: 0xc ordinal: 0x2
  struct _RTL_LOOKASIDE Buckets[64]; // offset: 0x40 ordinal: 0x3
} _RTL_DYNAMIC_LOOKASIDE;

// 0x8 bytes (sizeof)
typedef struct _HEAP_VS_DELAY_FREE_CONTEXT {
  union _SLIST_HEADER ListHead; // offset: 0x0 ordinal: 0x0
} _HEAP_VS_DELAY_FREE_CONTEXT;

// 0xc0 bytes (sizeof)
typedef struct _HEAP_VS_CONTEXT {
  ULONG Lock;                        // offset: 0x0 ordinal: 0x0
  enum _RTLP_HP_LOCK_TYPE LockType;  // offset: 0x4 ordinal: 0x1
  struct _RTL_RB_TREE FreeChunkTree; // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY SubsegmentList; // offset: 0x10 ordinal: 0x3
  ULONG TotalCommittedUnits;         // offset: 0x18 ordinal: 0x4
  ULONG FreeCommittedUnits;          // offset: 0x1c ordinal: 0x5
  struct _HEAP_VS_DELAY_FREE_CONTEXT
      DelayFreeContext;                          // offset: 0x40 ordinal: 0x6
  VOID *BackendCtx;                              // offset: 0x80 ordinal: 0x7
  struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks; // offset: 0x84 ordinal: 0x8
  struct _RTL_HP_VS_CONFIG Config;               // offset: 0x98 ordinal: 0x9
  ULONG Flags;                                   // offset: 0x9c ordinal: 0xa
} _HEAP_VS_CONTEXT;

// 0x580 bytes (sizeof)
typedef struct _SEGMENT_HEAP {
  struct RTL_HP_ENV_HANDLE EnvHandle; // offset: 0x0 ordinal: 0x0
  ULONG Signature;                    // offset: 0x8 ordinal: 0x1
  ULONG GlobalFlags;                  // offset: 0xc ordinal: 0x2
  ULONG Interceptor;                  // offset: 0x10 ordinal: 0x3
  USHORT ProcessHeapListIndex;        // offset: 0x14 ordinal: 0x4
  USHORT AllocatedFromMetadata : 1;   // offset: 0x16 ordinal: 0x5
  union {
    struct _RTL_HEAP_MEMORY_LIMIT_DATA
        CommitLimitData;       // offset: 0x18 ordinal: 0x6
    ULONG ReservedMustBeZero1; // offset: 0x18 ordinal: 0x7
  };
  VOID *UserContext;                          // offset: 0x1c ordinal: 0x8
  ULONG ReservedMustBeZero2;                  // offset: 0x20 ordinal: 0x9
  VOID *Spare;                                // offset: 0x24 ordinal: 0xa
  ULONG LargeMetadataLock;                    // offset: 0x40 ordinal: 0xb
  struct _RTL_RB_TREE LargeAllocMetadata;     // offset: 0x44 ordinal: 0xc
  ULONG LargeReservedPages;                   // offset: 0x4c ordinal: 0xd
  ULONG LargeCommittedPages;                  // offset: 0x50 ordinal: 0xe
  union _RTL_RUN_ONCE StackTraceInitVar;      // offset: 0x54 ordinal: 0xf
  struct _HEAP_RUNTIME_MEMORY_STATS MemStats; // offset: 0x80 ordinal: 0x10
  USHORT GlobalLockCount;                     // offset: 0xac ordinal: 0x11
  ULONG GlobalLockOwner;                      // offset: 0xb0 ordinal: 0x12
  ULONG ContextExtendLock;                    // offset: 0xb4 ordinal: 0x13
  UCHAR *AllocatedBase;                       // offset: 0xb8 ordinal: 0x14
  UCHAR *UncommittedBase;                     // offset: 0xbc ordinal: 0x15
  UCHAR *ReservedLimit;                       // offset: 0xc0 ordinal: 0x16
  struct _HEAP_SEG_CONTEXT SegContexts[2];    // offset: 0x100 ordinal: 0x17
  struct _HEAP_VS_CONTEXT VsContext;          // offset: 0x200 ordinal: 0x18
  struct _HEAP_LFH_CONTEXT LfhContext;        // offset: 0x2c0 ordinal: 0x19
} _SEGMENT_HEAP;

// 0x20c0 bytes (sizeof)
typedef struct _EX_HEAP_POOL_NODE {
  struct _SEGMENT_HEAP *Heaps[4];              // offset: 0x0 ordinal: 0x0
  struct _RTL_DYNAMIC_LOOKASIDE Lookasides[2]; // offset: 0x40 ordinal: 0x1
} _EX_HEAP_POOL_NODE;

// 0x8 bytes (sizeof)
typedef struct _RTLP_HP_METADATA_HEAP_CTX {
  struct _SEGMENT_HEAP *Heap;   // offset: 0x0 ordinal: 0x0
  union _RTL_RUN_ONCE InitOnce; // offset: 0x4 ordinal: 0x1
} _RTLP_HP_METADATA_HEAP_CTX;

// 0x1c70 bytes (sizeof)
typedef struct _RTLP_HP_HEAP_MANAGER {
  struct _RTLP_HP_HEAP_GLOBALS *Globals;      // offset: 0x0 ordinal: 0x0
  struct _RTLP_HP_ALLOC_TRACKER AllocTracker; // offset: 0x4 ordinal: 0x1
  struct _HEAP_VAMGR_CTX VaMgr;               // offset: 0x30 ordinal: 0x2
  struct _RTLP_HP_METADATA_HEAP_CTX
      MetadataHeaps[3]; // offset: 0x1c50 ordinal: 0x3
  struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
      SubAllocConfigs; // offset: 0x1c68 ordinal: 0x4
} _RTLP_HP_HEAP_MANAGER;

// 0x228c0 bytes (sizeof)
typedef struct _EX_POOL_HEAP_MANAGER_STATE {
  struct _RTLP_HP_HEAP_MANAGER HeapManager; // offset: 0x0 ordinal: 0x0
  ULONG NumberOfPools;                      // offset: 0x1c70 ordinal: 0x1
  struct _EX_HEAP_POOL_NODE PoolNode[16];   // offset: 0x1c80 ordinal: 0x2
  struct _SEGMENT_HEAP *SpecialHeaps[3];    // offset: 0x22880 ordinal: 0x3
} _EX_POOL_HEAP_MANAGER_STATE;

// 0x1c80 bytes (sizeof)
typedef struct _EX_HEAP_SESSION_STATE {
  struct _RTLP_HP_HEAP_MANAGER HeapManager; // offset: 0x0 ordinal: 0x0
  struct RTL_HP_ENV_HANDLE PagedEnv;        // offset: 0x1c70 ordinal: 0x1
  struct _SEGMENT_HEAP *PagedHeap;          // offset: 0x1c78 ordinal: 0x2
  struct _SEGMENT_HEAP *SpecialPoolHeap;    // offset: 0x1c7c ordinal: 0x3
} _EX_HEAP_SESSION_STATE;

// 0xac0 bytes (sizeof)
typedef struct _MI_PARTITION_PAGE_LISTS {
  struct _MMPFNLIST *FreePagesByColor[2];          // offset: 0x0 ordinal: 0x0
  struct _MMPFNLIST ZeroedPageListHead;            // offset: 0x40 ordinal: 0x1
  struct _MMPFNLIST FreePageListHead;              // offset: 0x80 ordinal: 0x2
  struct _MMPFNLIST StandbyPageListHead;           // offset: 0xc0 ordinal: 0x3
  struct _MMPFNLIST StandbyPageListByPriority[8];  // offset: 0x100 ordinal: 0x4
  struct _MMPFNLIST ModifiedPageListNoReservation; // offset: 0x1c0 ordinal: 0x5
  struct _MMPFNLIST
      ModifiedPageListByReservation[16];      // offset: 0x200 ordinal: 0x6
  struct _MMPFNLIST MappedPageListHead[16];   // offset: 0x340 ordinal: 0x7
  struct _MMPFNLIST BadPageListHead;          // offset: 0x480 ordinal: 0x8
  struct _MMPFNLIST EnclavePageListHead;      // offset: 0x4c0 ordinal: 0x9
  union _SLIST_HEADER *FreePageSlist[2];      // offset: 0x4d4 ordinal: 0xa
  struct _MMPFNLIST *PageLocationList[8];     // offset: 0x4dc ordinal: 0xb
  ULONG StandbyRepurposedByPriority[8];       // offset: 0x4fc ordinal: 0xc
  ULONG TransitionSharedPages;                // offset: 0x540 ordinal: 0xd
  ULONG TransitionSharedPagesPeak[6];         // offset: 0x544 ordinal: 0xe
  struct _KEVENT MappedPageListHeadEvent[16]; // offset: 0x55c ordinal: 0xf
  struct _MI_DECAY_TIMER_LINK
      DecayClusterTimerHeads[4];     // offset: 0x65c ordinal: 0x10
  ULONG DecayHand;                   // offset: 0x66c ordinal: 0x11
  UCHAR StandbyListDiscard;          // offset: 0x670 ordinal: 0x12
  UCHAR FreeListDiscard;             // offset: 0x671 ordinal: 0x13
  UCHAR PfnBitMapsReady;             // offset: 0x672 ordinal: 0x14
  ULONGLONG LastDecayHandUpdateTime; // offset: 0x678 ordinal: 0x15
  struct _MI_LDW_WORK_CONTEXT
      LastChanceLdwContext;  // offset: 0x680 ordinal: 0x16
  ULONG AvailableEventsLock; // offset: 0x6c0 ordinal: 0x17
  struct _MI_AVAILABLE_PAGE_WAIT_STATES
      AvailablePageWaitStates[3];       // offset: 0x6c4 ordinal: 0x18
  VOID *MirrorListLocks;                // offset: 0x700 ordinal: 0x19
  ULONG TransitionPrivatePages;         // offset: 0x740 ordinal: 0x1a
  struct _RTL_BITMAP LargePfnBitMap[1]; // offset: 0x744 ordinal: 0x1b
  struct _MI_FREE_LARGE_PAGE_LIST
      *LargePageListHeads; // offset: 0x74c ordinal: 0x1c
  struct _MI_LARGE_PAGE_CANDIDATES
      LargePageCandidates[1]; // offset: 0x750 ordinal: 0x1d
  struct _WORK_QUEUE_ITEM
      RebuildLargePageWorkItem;     // offset: 0x858 ordinal: 0x1e
  UCHAR RebuildLargePageCandidates; // offset: 0x868 ordinal: 0x1f
  UCHAR RebuildLargePageActive;     // offset: 0x869 ordinal: 0x20
  LONG LargePageRebuildLock;        // offset: 0x86c ordinal: 0x21
  ULONG LowMemoryThreshold;         // offset: 0x870 ordinal: 0x22
  ULONG HighMemoryThreshold;        // offset: 0x874 ordinal: 0x23
  struct _MI_SLAB_ALLOCATOR_CONTEXT
      SlabContexts[2][4];           // offset: 0x878 ordinal: 0x24
  struct _RTL_BITMAP SlabPfnBitMap; // offset: 0xab8 ordinal: 0x25
} _MI_PARTITION_PAGE_LISTS;

// 0x50 bytes (sizeof)
typedef struct _ETW_STACK_TRACE_BLOCK {
  union _LARGE_INTEGER RelatedTimestamp; // offset: 0x0 ordinal: 0x0
  struct _ETHREAD *Thread;               // offset: 0x8 ordinal: 0x1
  struct _KDPC StackWalkDpc;             // offset: 0xc ordinal: 0x2
  union _SLIST_HEADER ApcListHead;       // offset: 0x30 ordinal: 0x3
  struct _ETW_APC_ENTRY *ApcEntry;       // offset: 0x38 ordinal: 0x4
  ULONG ApcEntryCount;                   // offset: 0x3c ordinal: 0x5
  LONG Flags;                            // offset: 0x40 ordinal: 0x6
  LONG ApcCount;                         // offset: 0x44 ordinal: 0x7
  LONG MaxApcCount;                      // offset: 0x48 ordinal: 0x8
} _ETW_STACK_TRACE_BLOCK;

// 0x80 bytes (sizeof)
typedef struct _GENERAL_LOOKASIDE {
  union {
    union _SLIST_HEADER ListHead;             // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY SingleListHead; // offset: 0x0 ordinal: 0x1
  };
  USHORT Depth;         // offset: 0x8 ordinal: 0x2
  USHORT MaximumDepth;  // offset: 0xa ordinal: 0x3
  ULONG TotalAllocates; // offset: 0xc ordinal: 0x4
  union {
    ULONG AllocateMisses; // offset: 0x10 ordinal: 0x5
    ULONG AllocateHits;   // offset: 0x10 ordinal: 0x6
  };
  ULONG TotalFrees; // offset: 0x14 ordinal: 0x7
  union {
    ULONG FreeMisses; // offset: 0x18 ordinal: 0x8
    ULONG FreeHits;   // offset: 0x18 ordinal: 0x9
  };
  enum _POOL_TYPE Type; // offset: 0x1c ordinal: 0xa
  ULONG Tag;            // offset: 0x20 ordinal: 0xb
  ULONG Size;           // offset: 0x24 ordinal: 0xc
  union {
    VOID *(*AllocateEx)(
        enum _POOL_TYPE, ULONG, ULONG,
        struct _LOOKASIDE_LIST_EX *); // offset: 0x28 ordinal: 0xd
    VOID *(*Allocate)(enum _POOL_TYPE, ULONG,
                      ULONG); // offset: 0x28 ordinal: 0xe
  };
  union {
    VOID(*FreeEx)
    (VOID *, struct _LOOKASIDE_LIST_EX *); // offset: 0x2c ordinal: 0xf
    VOID (*Free)(VOID *);                  // offset: 0x2c ordinal: 0x10
  };
  struct _LIST_ENTRY ListEntry; // offset: 0x30 ordinal: 0x11
  ULONG LastTotalAllocates;     // offset: 0x38 ordinal: 0x12
  union {
    ULONG LastAllocateMisses; // offset: 0x3c ordinal: 0x13
    ULONG LastAllocateHits;   // offset: 0x3c ordinal: 0x14
  };
  ULONG Future[2]; // offset: 0x40 ordinal: 0x15
} _GENERAL_LOOKASIDE;

// 0xc0 bytes (sizeof)
typedef struct _PAGED_LOOKASIDE_LIST {
  struct _GENERAL_LOOKASIDE L;                     // offset: 0x0 ordinal: 0x0
  struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete; // offset: 0x80 ordinal: 0x1
} _PAGED_LOOKASIDE_LIST;

// 0xc0 bytes (sizeof)
typedef struct _NPAGED_LOOKASIDE_LIST {
  struct _GENERAL_LOOKASIDE L;        // offset: 0x0 ordinal: 0x0
  ULONG Lock__ObsoleteButDoNotDelete; // offset: 0x80 ordinal: 0x1
} _NPAGED_LOOKASIDE_LIST;

// 0x180 bytes (sizeof)
typedef struct _MI_SYSTEM_PTE_STATE {
  struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside; // offset: 0x0 ordinal: 0x0
  union _SLIST_HEADER DeadPteTrackerSListHead; // offset: 0xc0 ordinal: 0x1
  ULONG PteTrackerLock;                        // offset: 0xc8 ordinal: 0x2
  struct _RTL_BITMAP PteTrackingBitmap;        // offset: 0xcc ordinal: 0x3
  struct _MI_CACHED_PTES *CachedPteHeads;      // offset: 0xd4 ordinal: 0x4
  struct _MI_CACHED_PTES
      *CachedKernelStackPteHeads;                 // offset: 0xd8 ordinal: 0x5
  struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;   // offset: 0xdc ordinal: 0x6
  struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;  // offset: 0x110 ordinal: 0x7
  ULONG StackGrowthFailures;                      // offset: 0x144 ordinal: 0x8
  UCHAR KernelStackPages;                         // offset: 0x148 ordinal: 0x9
  UCHAR TrackPtesAborted;                         // offset: 0x149 ordinal: 0xa
  UCHAR AdjustCounter;                            // offset: 0x14a ordinal: 0xb
  LONG ReservedMappingLock;                       // offset: 0x14c ordinal: 0xc
  struct _RTL_AVL_TREE ReservedMappingTree;       // offset: 0x150 ordinal: 0xd
  struct _MMPFN *ReservedMappingPageTablePfns;    // offset: 0x154 ordinal: 0xe
  struct _RTL_AVL_TREE OutswappedKernelStackRoot; // offset: 0x158 ordinal: 0xf
  LONG OutswappedKernelStackLock;                 // offset: 0x15c ordinal: 0x10
} _MI_SYSTEM_PTE_STATE;

// 0x8 bytes (sizeof)
typedef struct _PP_LOOKASIDE_LIST {
  struct _GENERAL_LOOKASIDE *P; // offset: 0x0 ordinal: 0x0
  struct _GENERAL_LOOKASIDE *L; // offset: 0x4 ordinal: 0x1
} _PP_LOOKASIDE_LIST;

// 0x48 bytes (sizeof)
typedef struct _GENERAL_LOOKASIDE_POOL {
  union {
    union _SLIST_HEADER ListHead;             // offset: 0x0 ordinal: 0x0
    struct _SINGLE_LIST_ENTRY SingleListHead; // offset: 0x0 ordinal: 0x1
  };
  USHORT Depth;         // offset: 0x8 ordinal: 0x2
  USHORT MaximumDepth;  // offset: 0xa ordinal: 0x3
  ULONG TotalAllocates; // offset: 0xc ordinal: 0x4
  union {
    ULONG AllocateMisses; // offset: 0x10 ordinal: 0x5
    ULONG AllocateHits;   // offset: 0x10 ordinal: 0x6
  };
  ULONG TotalFrees; // offset: 0x14 ordinal: 0x7
  union {
    ULONG FreeMisses; // offset: 0x18 ordinal: 0x8
    ULONG FreeHits;   // offset: 0x18 ordinal: 0x9
  };
  enum _POOL_TYPE Type; // offset: 0x1c ordinal: 0xa
  ULONG Tag;            // offset: 0x20 ordinal: 0xb
  ULONG Size;           // offset: 0x24 ordinal: 0xc
  union {
    VOID *(*AllocateEx)(
        enum _POOL_TYPE, ULONG, ULONG,
        struct _LOOKASIDE_LIST_EX *); // offset: 0x28 ordinal: 0xd
    VOID *(*Allocate)(enum _POOL_TYPE, ULONG,
                      ULONG); // offset: 0x28 ordinal: 0xe
  };
  union {
    VOID(*FreeEx)
    (VOID *, struct _LOOKASIDE_LIST_EX *); // offset: 0x2c ordinal: 0xf
    VOID (*Free)(VOID *);                  // offset: 0x2c ordinal: 0x10
  };
  struct _LIST_ENTRY ListEntry; // offset: 0x30 ordinal: 0x11
  ULONG LastTotalAllocates;     // offset: 0x38 ordinal: 0x12
  union {
    ULONG LastAllocateMisses; // offset: 0x3c ordinal: 0x13
    ULONG LastAllocateHits;   // offset: 0x3c ordinal: 0x14
  };
  ULONG Future[2]; // offset: 0x40 ordinal: 0x15
} _GENERAL_LOOKASIDE_POOL;

// 0x48 bytes (sizeof)
typedef struct _LOOKASIDE_LIST_EX {
  struct _GENERAL_LOOKASIDE_POOL L; // offset: 0x0 ordinal: 0x0
} _LOOKASIDE_LIST_EX;

typedef VOID (*__anon_348)(VOID *, struct _LOOKASIDE_LIST_EX *);

typedef VOID *(*__anon_346)(enum _POOL_TYPE, ULONG, ULONG,
                            struct _LOOKASIDE_LIST_EX *);

// 0x18 bytes (sizeof)
typedef struct _KTIMER_TABLE_ENTRY {
  ULONG Lock;                 // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY Entry;   // offset: 0x4 ordinal: 0x1
  union _ULARGE_INTEGER Time; // offset: 0x10 ordinal: 0x2
} _KTIMER_TABLE_ENTRY;

// 0x28 bytes (sizeof)
typedef struct _KTIMER {
  struct _DISPATCHER_HEADER Header;  // offset: 0x0 ordinal: 0x0
  union _ULARGE_INTEGER DueTime;     // offset: 0x10 ordinal: 0x1
  struct _LIST_ENTRY TimerListEntry; // offset: 0x18 ordinal: 0x2
  struct _KDPC *Dpc;                 // offset: 0x20 ordinal: 0x3
  ULONG Period;                      // offset: 0x24 ordinal: 0x4
} _KTIMER;

// 0x50 bytes (sizeof)
typedef struct _LAZY_WRITER {
  struct _KDPC ScanDpc;             // offset: 0x0 ordinal: 0x0
  struct _KTIMER ScanTimer;         // offset: 0x20 ordinal: 0x1
  UCHAR ScanActive;                 // offset: 0x48 ordinal: 0x2
  UCHAR OtherWork;                  // offset: 0x49 ordinal: 0x3
  UCHAR PendingTeardownScan;        // offset: 0x4a ordinal: 0x4
  UCHAR PendingPeriodicScan;        // offset: 0x4b ordinal: 0x5
  UCHAR PendingLowMemoryScan;       // offset: 0x4c ordinal: 0x6
  UCHAR PendingPowerScan;           // offset: 0x4d ordinal: 0x7
  UCHAR PendingCoalescingFlushScan; // offset: 0x4e ordinal: 0x8
} _LAZY_WRITER;

// 0x280 bytes (sizeof)
typedef struct _CC_PARTITION {
  SHORT NodeTypeCode;                         // offset: 0x0 ordinal: 0x0
  SHORT NodeByteSize;                         // offset: 0x2 ordinal: 0x1
  struct _EPARTITION *PartitionObject;        // offset: 0x4 ordinal: 0x2
  struct _LIST_ENTRY CleanSharedCacheMapList; // offset: 0x8 ordinal: 0x3
  struct _LIST_ENTRY
      CleanSharedCacheMapWithLogHandleList; // offset: 0x10 ordinal: 0x4
  struct _SHARED_CACHE_MAP_LIST_CURSOR
      DirtySharedCacheMapList; // offset: 0x18 ordinal: 0x5
  struct _SHARED_CACHE_MAP_LIST_CURSOR
      LazyWriteCursor; // offset: 0x24 ordinal: 0x6
  struct _LIST_ENTRY
      DirtySharedCacheMapWithLogHandleList; // offset: 0x30 ordinal: 0x7
  ULONG PrivateLock;                        // offset: 0x40 ordinal: 0x8
  ULONG ConsecutiveWorklessLazyScanCount;   // offset: 0x44 ordinal: 0x9
  UCHAR ForcedDisableLazywriteScan;         // offset: 0x48 ordinal: 0xa
  ULONG WorkQueueLock;                      // offset: 0x80 ordinal: 0xb
  ULONG NumberWorkerThreads;                // offset: 0x84 ordinal: 0xc
  ULONG NumberActiveWorkerThreads;          // offset: 0x88 ordinal: 0xd
  struct _LIST_ENTRY IdleWorkerThreadList;  // offset: 0x8c ordinal: 0xe
  struct _LIST_ENTRY FastTeardownWorkQueue; // offset: 0x94 ordinal: 0xf
  struct _LIST_ENTRY ExpressWorkQueue;      // offset: 0x9c ordinal: 0x10
  struct _LIST_ENTRY RegularWorkQueue;      // offset: 0xa4 ordinal: 0x11
  struct _LIST_ENTRY PostTickWorkQueue;     // offset: 0xac ordinal: 0x12
  struct _LIST_ENTRY
      IdleExtraWriteBehindThreadList;       // offset: 0xb4 ordinal: 0x13
  ULONG ActiveExtraWriteBehindThreads;      // offset: 0xbc ordinal: 0x14
  ULONG MaxExtraWriteBehindThreads;         // offset: 0xc0 ordinal: 0x15
  UCHAR QueueThrottle;                      // offset: 0xc4 ordinal: 0x16
  ULONG PostTickWorkItemCount;              // offset: 0xc8 ordinal: 0x17
  ULONG ThreadsActiveBeforeThrottle;        // offset: 0xcc ordinal: 0x18
  ULONG ExtraWBThreadsActiveBeforeThrottle; // offset: 0xd0 ordinal: 0x19
  ULONG ExecutingWriteBehindWorkItems;      // offset: 0xd4 ordinal: 0x1a
  ULONG ExecutingHighPriorityWorkItem;      // offset: 0xd8 ordinal: 0x1b
  struct _KEVENT LowMemoryEvent;            // offset: 0xdc ordinal: 0x1c
  struct _KEVENT PowerEvent;                // offset: 0xec ordinal: 0x1d
  struct _KEVENT PeriodicEvent;             // offset: 0xfc ordinal: 0x1e
  struct _KEVENT WaitingForTeardownEvent;   // offset: 0x10c ordinal: 0x1f
  struct _KEVENT CoalescingFlushEvent;      // offset: 0x11c ordinal: 0x20
  ULONG PagesYetToWrite;                    // offset: 0x12c ordinal: 0x21
  struct _LAZY_WRITER LazyWriter;           // offset: 0x130 ordinal: 0x22
  struct _DIRTY_PAGE_STATISTICS
      DirtyPageStatistics; // offset: 0x180 ordinal: 0x23
  struct _DIRTY_PAGE_THRESHOLDS
      DirtyPageThresholds; // offset: 0x190 ordinal: 0x24
  struct _WRITE_BEHIND_THROUGHPUT
      *ThroughputStats;               // offset: 0x1b8 ordinal: 0x25
  LONG ThroughputTrend;               // offset: 0x1bc ordinal: 0x26
  ULONGLONG AverageAvailablePages;    // offset: 0x1c0 ordinal: 0x27
  ULONGLONG AverageDirtyPages;        // offset: 0x1c8 ordinal: 0x28
  ULONGLONG PagesSkippedDueToHotSpot; // offset: 0x1d0 ordinal: 0x29
  union _LARGE_INTEGER
      PrevRegularQueueItemRunTime; // offset: 0x1d8 ordinal: 0x2a
  union _LARGE_INTEGER
      PrevExtraWBThreadCheckTime;    // offset: 0x1e0 ordinal: 0x2b
  UCHAR AddExtraWriteBehindThreads;  // offset: 0x1e8 ordinal: 0x2c
  UCHAR RemoveExtraThreadPending;    // offset: 0x1e9 ordinal: 0x2d
  struct _LIST_ENTRY DeferredWrites; // offset: 0x1ec ordinal: 0x2e
  ULONG DeferredWriteSpinLock;       // offset: 0x200 ordinal: 0x2f
  struct _LIST_ENTRY
      *IdleAsyncReadWorkerThreadList;            // offset: 0x204 ordinal: 0x30
  ULONG *NumberActiveAsyncReadWorkerThreads;     // offset: 0x208 ordinal: 0x31
  ULONG *NumberActiveCompleteAsyncReadWorkItems; // offset: 0x20c ordinal: 0x32
  struct _LIST_ENTRY *AsyncReadWorkQueue;        // offset: 0x210 ordinal: 0x33
  struct _LIST_ENTRY
      *AsyncReadCompletionWorkQueue;        // offset: 0x214 ordinal: 0x34
  struct _KEVENT *NewAsyncReadRequestEvent; // offset: 0x218 ordinal: 0x35
  struct _ASYNC_READ_THREAD_STATS
      *ReaderThreadsStats;                        // offset: 0x21c ordinal: 0x36
  struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;    // offset: 0x220 ordinal: 0x37
  struct _LIST_ENTRY VacbFreeHighPriorityList;    // offset: 0x224 ordinal: 0x38
  ULONG NumberOfFreeHighPriorityVacbs;            // offset: 0x22c ordinal: 0x39
  struct _ETHREAD *LowPriWorkerThread;            // offset: 0x230 ordinal: 0x3a
  struct _SHARED_CACHE_MAP *LowPriSharedCacheMap; // offset: 0x234 ordinal: 0x3b
  LONG LowPriOldCpuPriority;                      // offset: 0x238 ordinal: 0x3c
  enum _IO_PRIORITY_HINT LowPriOldIoPriority;     // offset: 0x23c ordinal: 0x3d
  struct _EX_PUSH_LOCK
      LowPriorityWorkerThreadLock;      // offset: 0x240 ordinal: 0x3e
  ULONG MaxNumberOfWriteBehindThreads;  // offset: 0x244 ordinal: 0x3f
  UCHAR CoalescingState;                // offset: 0x248 ordinal: 0x40
  UCHAR ActivePartition;                // offset: 0x249 ordinal: 0x41
  UCHAR RundownPhase;                   // offset: 0x24a ordinal: 0x42
  LONG RefCount;                        // offset: 0x24c ordinal: 0x43
  struct _KEVENT ExitEvent;             // offset: 0x250 ordinal: 0x44
  struct _KEVENT FinalDereferenceEvent; // offset: 0x260 ordinal: 0x45
  VOID *LazyWriteScanThreadHandle;      // offset: 0x270 ordinal: 0x46
} _CC_PARTITION;

// 0x28 bytes (sizeof)
typedef struct _DEFERRED_WRITE {
  SHORT NodeTypeCode;                    // offset: 0x0 ordinal: 0x0
  SHORT NodeByteSize;                    // offset: 0x2 ordinal: 0x1
  struct _FILE_OBJECT *FileObject;       // offset: 0x4 ordinal: 0x2
  ULONG BytesToWrite;                    // offset: 0x8 ordinal: 0x3
  struct _LIST_ENTRY DeferredWriteLinks; // offset: 0xc ordinal: 0x4
  struct _KEVENT *Event;                 // offset: 0x14 ordinal: 0x5
  VOID (*PostRoutine)(VOID *, VOID *);   // offset: 0x18 ordinal: 0x6
  VOID *Context1;                        // offset: 0x1c ordinal: 0x7
  VOID *Context2;                        // offset: 0x20 ordinal: 0x8
  struct _CC_PARTITION *Partition;       // offset: 0x24 ordinal: 0x9
} _DEFERRED_WRITE;

// 0x188 bytes (sizeof)
typedef struct _SHARED_CACHE_MAP {
  SHORT NodeTypeCode;                         // offset: 0x0 ordinal: 0x0
  SHORT NodeByteSize;                         // offset: 0x2 ordinal: 0x1
  ULONG OpenCount;                            // offset: 0x4 ordinal: 0x2
  union _LARGE_INTEGER FileSize;              // offset: 0x8 ordinal: 0x3
  struct _LIST_ENTRY BcbList;                 // offset: 0x10 ordinal: 0x4
  union _LARGE_INTEGER SectionSize;           // offset: 0x18 ordinal: 0x5
  union _LARGE_INTEGER ValidDataLength;       // offset: 0x20 ordinal: 0x6
  union _LARGE_INTEGER ValidDataGoal;         // offset: 0x28 ordinal: 0x7
  struct _VACB *InitialVacbs[4];              // offset: 0x30 ordinal: 0x8
  struct _VACB **Vacbs;                       // offset: 0x40 ordinal: 0x9
  struct _EX_FAST_REF FileObjectFastRef;      // offset: 0x44 ordinal: 0xa
  struct _EX_PUSH_LOCK VacbLock;              // offset: 0x48 ordinal: 0xb
  ULONG DirtyPages;                           // offset: 0x4c ordinal: 0xc
  struct _LIST_ENTRY LoggedStreamLinks;       // offset: 0x50 ordinal: 0xd
  struct _LIST_ENTRY SharedCacheMapLinks;     // offset: 0x58 ordinal: 0xe
  ULONG Flags;                                // offset: 0x60 ordinal: 0xf
  LONG Status;                                // offset: 0x64 ordinal: 0x10
  struct _MBCB *Mbcb;                         // offset: 0x68 ordinal: 0x11
  VOID *Section;                              // offset: 0x6c ordinal: 0x12
  struct _KEVENT *CreateEvent;                // offset: 0x70 ordinal: 0x13
  struct _KEVENT *WaitOnActiveCount;          // offset: 0x74 ordinal: 0x14
  ULONG PagesToWrite;                         // offset: 0x78 ordinal: 0x15
  LONGLONG BeyondLastFlush;                   // offset: 0x80 ordinal: 0x16
  struct _CACHE_MANAGER_CALLBACKS *Callbacks; // offset: 0x88 ordinal: 0x17
  VOID *LazyWriteContext;                     // offset: 0x8c ordinal: 0x18
  struct _LIST_ENTRY PrivateList;             // offset: 0x90 ordinal: 0x19
  union {
    struct _LOGGED_STREAM_CALLBACK_V1 V1; // offset: 0x98 ordinal: 0x1a
    struct _LOGGED_STREAM_CALLBACK_V2 V2; // offset: 0x98 ordinal: 0x1b
  };
  union _LARGE_INTEGER LargestLSN; // offset: 0xa0 ordinal: 0x1c
  ULONG DirtyPageThreshold;        // offset: 0xa8 ordinal: 0x1d
  ULONG LazyWritePassCount;        // offset: 0xac ordinal: 0x1e
  struct _CACHE_UNINITIALIZE_EVENT
      *UninitializeEvent;                      // offset: 0xb0 ordinal: 0x1f
  struct _FAST_MUTEX BcbLock;                  // offset: 0xb4 ordinal: 0x20
  union _LARGE_INTEGER LastUnmapBehindOffset;  // offset: 0xd8 ordinal: 0x21
  struct _KEVENT Event;                        // offset: 0xe0 ordinal: 0x22
  union _LARGE_INTEGER HighWaterMappingOffset; // offset: 0xf0 ordinal: 0x23
  struct _PRIVATE_CACHE_MAP PrivateCacheMap;   // offset: 0xf8 ordinal: 0x24
  VOID *WriteBehindWorkQueueEntry;             // offset: 0x160 ordinal: 0x25
  struct _VOLUME_CACHE_MAP *VolumeCacheMap;    // offset: 0x164 ordinal: 0x26
  ULONG ProcImagePathHash;                     // offset: 0x168 ordinal: 0x27
  ULONG WritesInProgress;                      // offset: 0x16c ordinal: 0x28
  ULONG AsyncReadRequestCount;                 // offset: 0x170 ordinal: 0x29
  struct _CC_PARTITION *Partition;             // offset: 0x174 ordinal: 0x2a
  ULONG InternalRefCount;                      // offset: 0x178 ordinal: 0x2b
  ULONG NumMappedVacb;                         // offset: 0x17c ordinal: 0x2c
  ULONG NumActiveVacb;                         // offset: 0x180 ordinal: 0x2d
} _SHARED_CACHE_MAP;

// 0x1e0 bytes (sizeof)
typedef struct _KTRANSACTION {
  struct _KEVENT OutcomeEvent;  // offset: 0x0 ordinal: 0x0
  ULONG cookie;                 // offset: 0x10 ordinal: 0x1
  struct _KMUTANT Mutex;        // offset: 0x14 ordinal: 0x2
  struct _KTRANSACTION *TreeTx; // offset: 0x34 ordinal: 0x3
  struct _KTMOBJECT_NAMESPACE_LINK
      GlobalNamespaceLink;                          // offset: 0x38 ordinal: 0x4
  struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink; // offset: 0x4c ordinal: 0x5
  struct _GUID UOW;                                 // offset: 0x60 ordinal: 0x6
  enum _KTRANSACTION_STATE State;                   // offset: 0x70 ordinal: 0x7
  ULONG Flags;                                      // offset: 0x74 ordinal: 0x8
  struct _LIST_ENTRY EnlistmentHead;                // offset: 0x78 ordinal: 0x9
  ULONG EnlistmentCount;                            // offset: 0x80 ordinal: 0xa
  ULONG RecoverableEnlistmentCount;                 // offset: 0x84 ordinal: 0xb
  ULONG PrePrepareRequiredEnlistmentCount;          // offset: 0x88 ordinal: 0xc
  ULONG PrepareRequiredEnlistmentCount;             // offset: 0x8c ordinal: 0xd
  ULONG OutcomeRequiredEnlistmentCount;             // offset: 0x90 ordinal: 0xe
  ULONG PendingResponses;                           // offset: 0x94 ordinal: 0xf
  struct _KENLISTMENT *SuperiorEnlistment;   // offset: 0x98 ordinal: 0x10
  union _CLS_LSN LastLsn;                    // offset: 0xa0 ordinal: 0x11
  struct _LIST_ENTRY PromotedEntry;          // offset: 0xa8 ordinal: 0x12
  struct _KTRANSACTION *PromoterTransaction; // offset: 0xb0 ordinal: 0x13
  VOID *PromotePropagation;                  // offset: 0xb4 ordinal: 0x14
  ULONG IsolationLevel;                      // offset: 0xb8 ordinal: 0x15
  ULONG IsolationFlags;                      // offset: 0xbc ordinal: 0x16
  union _LARGE_INTEGER Timeout;              // offset: 0xc0 ordinal: 0x17
  struct _UNICODE_STRING Description;        // offset: 0xc8 ordinal: 0x18
  struct _KTHREAD *RollbackThread;           // offset: 0xd0 ordinal: 0x19
  struct _WORK_QUEUE_ITEM RollbackWorkItem;  // offset: 0xd4 ordinal: 0x1a
  struct _KDPC RollbackDpc;                  // offset: 0xe4 ordinal: 0x1b
  struct _KTIMER RollbackTimer;              // offset: 0x108 ordinal: 0x1c
  struct _LIST_ENTRY LsnOrderedEntry;        // offset: 0x130 ordinal: 0x1d
  enum _KTRANSACTION_OUTCOME Outcome;        // offset: 0x138 ordinal: 0x1e
  struct _KTM *Tm;                           // offset: 0x13c ordinal: 0x1f
  LONGLONG CommitReservation;                // offset: 0x140 ordinal: 0x20
  struct _KTRANSACTION_HISTORY
      TransactionHistory[10];                 // offset: 0x148 ordinal: 0x21
  ULONG TransactionHistoryCount;              // offset: 0x198 ordinal: 0x22
  VOID *DTCPrivateInformation;                // offset: 0x19c ordinal: 0x23
  ULONG DTCPrivateInformationLength;          // offset: 0x1a0 ordinal: 0x24
  struct _KMUTANT DTCPrivateInformationMutex; // offset: 0x1a4 ordinal: 0x25
  VOID *PromotedTxSelfHandle;                 // offset: 0x1c4 ordinal: 0x26
  ULONG PendingPromotionCount;                // offset: 0x1c8 ordinal: 0x27
  struct _KEVENT PromotionCompletedEvent;     // offset: 0x1cc ordinal: 0x28
} _KTRANSACTION;

// 0x200 bytes (sizeof)
typedef struct _MI_PARTITION_SEGMENTS {
  LONG SegmentListLock;                   // offset: 0x0 ordinal: 0x0
  ULONG DeleteOnCloseCount;               // offset: 0x4 ordinal: 0x1
  LONGLONG FsControlAreaCount;            // offset: 0x8 ordinal: 0x2
  LONGLONG PfControlAreaCount;            // offset: 0x10 ordinal: 0x3
  LONGLONG CloneHeaderCount;              // offset: 0x18 ordinal: 0x4
  struct _KEVENT DeleteSubsectionCleanup; // offset: 0x20 ordinal: 0x5
  struct _KEVENT UnusedSegmentCleanup;    // offset: 0x30 ordinal: 0x6
  ULONG SubsectionDeletePtes;             // offset: 0x40 ordinal: 0x7
  struct _MMPAGE_FILE_EXPANSION
      AttemptForCantExtend; // offset: 0x44 ordinal: 0x8
  struct _MMDEREFERENCE_SEGMENT_HEADER
      DereferenceSegmentHeader;              // offset: 0x78 ordinal: 0x9
  struct _LIST_ENTRY DeleteOnCloseList;      // offset: 0xa4 ordinal: 0xa
  struct _KTIMER DeleteOnCloseTimer;         // offset: 0xb0 ordinal: 0xb
  UCHAR DeleteOnCloseTimerActive;            // offset: 0xd8 ordinal: 0xc
  UCHAR SegmentDereferenceThreadExists;      // offset: 0xd9 ordinal: 0xd
  VOID *SegmentDereferenceActiveControlArea; // offset: 0xdc ordinal: 0xe
  ULONG UnusedSegmentPagedPool;              // offset: 0xe0 ordinal: 0xf
  struct _LIST_ENTRY UnusedSegmentList;      // offset: 0xe4 ordinal: 0x10
  struct _LIST_ENTRY UnusedSubsectionList;   // offset: 0xec ordinal: 0x11
  struct _LIST_ENTRY DeleteSubsectionList;   // offset: 0xf4 ordinal: 0x12
  struct _KEVENT ControlAreaDeleteEvent;     // offset: 0xfc ordinal: 0x13
  struct _SINGLE_LIST_ENTRY
      ControlAreaDeleteList;                 // offset: 0x10c ordinal: 0x14
  struct _MI_PTE_CHAIN_HEAD FreeSystemCache; // offset: 0x110 ordinal: 0x15
  struct _KEVENT CloneDereferenceEvent;      // offset: 0x128 ordinal: 0x16
  union _SLIST_HEADER CloneProtosSListHead;  // offset: 0x138 ordinal: 0x17
  struct _EX_PUSH_LOCK SystemCacheInitLock;  // offset: 0x140 ordinal: 0x18
  ULONG PagefileExtensionWaiters;            // offset: 0x144 ordinal: 0x19
  ULONG PagefileExtensionRequests;           // offset: 0x148 ordinal: 0x1a
  struct _KEVENT PagefileExtensionWaitEvent; // offset: 0x14c ordinal: 0x1b
  struct _MI_CROSS_PARTITION_CHARGES
      SharedCharges[7];                    // offset: 0x15c ordinal: 0x1c
  struct _KEVENT *SharedChargesDrainEvent; // offset: 0x1cc ordinal: 0x1d
  struct _KEVENT *ControlAreasDrainEvent;  // offset: 0x1d0 ordinal: 0x1e
  struct _KEVENT *CloneHeaderDrainEvent;   // offset: 0x1d4 ordinal: 0x1f
  struct _EX_RUNDOWN_REF_CACHE_AWARE
      *ProbeRundownReference; // offset: 0x1d8 ordinal: 0x20
} _MI_PARTITION_SEGMENTS;

// 0xa0 bytes (sizeof)
typedef struct _PNP_WATCHDOG {
  ULONGLONG WatchdogStart;                     // offset: 0x0 ordinal: 0x0
  struct _KTIMER WatchdogTimer;                // offset: 0x8 ordinal: 0x1
  struct _KDPC WatchdogDpc;                    // offset: 0x30 ordinal: 0x2
  UCHAR WatchdogEnabled;                       // offset: 0x50 ordinal: 0x3
  UCHAR WatchdogSecondChance;                  // offset: 0x51 ordinal: 0x4
  struct _KEVENT WatchdogComplete;             // offset: 0x54 ordinal: 0x5
  struct _WORK_QUEUE_ITEM WatchdogWorkItem;    // offset: 0x64 ordinal: 0x6
  enum _PNP_WATCHDOG_TYPE WatchdogContextType; // offset: 0x74 ordinal: 0x7
  struct _FAST_MUTEX WatchdogLock;             // offset: 0x78 ordinal: 0x8
  VOID *WatchdogContext;                       // offset: 0x98 ordinal: 0x9
} _PNP_WATCHDOG;

// 0x28 bytes (sizeof)
typedef struct _PNP_DEVICE_COMPLETION_REQUEST {
  struct _LIST_ENTRY ListEntry;            // offset: 0x0 ordinal: 0x0
  struct _DEVICE_NODE *DeviceNode;         // offset: 0x8 ordinal: 0x1
  VOID *Context;                           // offset: 0xc ordinal: 0x2
  enum _PNP_DEVNODE_STATE CompletionState; // offset: 0x10 ordinal: 0x3
  ULONG IrpPended;                         // offset: 0x14 ordinal: 0x4
  LONG Status;                             // offset: 0x18 ordinal: 0x5
  VOID *Information;                       // offset: 0x1c ordinal: 0x6
  LONG ReferenceCount;                     // offset: 0x20 ordinal: 0x7
  struct _PNP_WATCHDOG *Watchdog;          // offset: 0x24 ordinal: 0x8
} _PNP_DEVICE_COMPLETION_REQUEST;

// 0x8c bytes (sizeof)
typedef struct _PNP_DEVICE_EVENT_ENTRY {
  struct _LIST_ENTRY ListEntry;           // offset: 0x0 ordinal: 0x0
  ULONG Argument;                         // offset: 0x8 ordinal: 0x1
  LONG ArgumentStatus;                    // offset: 0xc ordinal: 0x2
  struct _KEVENT *CallerEvent;            // offset: 0x10 ordinal: 0x3
  VOID (*Callback)(VOID *);               // offset: 0x14 ordinal: 0x4
  VOID *Context;                          // offset: 0x18 ordinal: 0x5
  enum _PNP_VETO_TYPE *VetoType;          // offset: 0x1c ordinal: 0x6
  struct _UNICODE_STRING *VetoName;       // offset: 0x20 ordinal: 0x7
  ULONG RefCount;                         // offset: 0x24 ordinal: 0x8
  ULONG Lock;                             // offset: 0x28 ordinal: 0x9
  UCHAR Cancel;                           // offset: 0x2c ordinal: 0xa
  struct _PNP_DEVICE_EVENT_ENTRY *Parent; // offset: 0x30 ordinal: 0xb
  struct _GUID ActivityId;                // offset: 0x34 ordinal: 0xc
  struct _PNP_WATCHDOG *Watchdog;         // offset: 0x44 ordinal: 0xd
  struct _PLUGPLAY_EVENT_BLOCK Data;      // offset: 0x48 ordinal: 0xe
} _PNP_DEVICE_EVENT_ENTRY;

// 0x68 bytes (sizeof)
typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO {
  struct _LIST_ENTRY Link;                       // offset: 0x0 ordinal: 0x0
  struct _KTIMER Timer;                          // offset: 0x8 ordinal: 0x1
  struct _KDPC Dpc;                              // offset: 0x30 ordinal: 0x2
  struct _POP_FX_WORK_ORDER *WorkOrder;          // offset: 0x50 ordinal: 0x3
  struct _PEP_WORK_INFORMATION *CurrentWorkInfo; // offset: 0x54 ordinal: 0x4
  ULONGLONG WatchdogStart;                       // offset: 0x58 ordinal: 0x5
  struct _KTHREAD *WorkerThread;                 // offset: 0x60 ordinal: 0x6
} _POP_FX_WORK_ORDER_WATCHDOG_INFO;

// 0x1c bytes (sizeof)
typedef struct _POP_FX_WORK_ORDER {
  struct _WORK_QUEUE_ITEM WorkItem; // offset: 0x0 ordinal: 0x0
  LONG WorkCount;                   // offset: 0x10 ordinal: 0x1
  VOID *Context;                    // offset: 0x14 ordinal: 0x2
  struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
      *WatchdogTimerInfo; // offset: 0x18 ordinal: 0x3
} _POP_FX_WORK_ORDER;

// 0x70 bytes (sizeof)
typedef struct _POP_FX_PLUGIN {
  struct _LIST_ENTRY Link;                          // offset: 0x0 ordinal: 0x0
  ULONG Version;                                    // offset: 0x8 ordinal: 0x1
  ULONGLONG Flags;                                  // offset: 0x10 ordinal: 0x2
  struct _KQUEUE WorkQueue;                         // offset: 0x18 ordinal: 0x3
  UCHAR (*AcceptDeviceNotification)(ULONG, VOID *); // offset: 0x40 ordinal: 0x4
  UCHAR(*AcceptProcessorNotification)
  (struct PEPHANDLE__ *, ULONG, VOID *);          // offset: 0x44 ordinal: 0x5
  UCHAR (*AcceptAcpiNotification)(ULONG, VOID *); // offset: 0x48 ordinal: 0x6
  ULONG WorkOrderCount;                           // offset: 0x4c ordinal: 0x7
  struct _POP_FX_WORK_ORDER WorkOrders[1];        // offset: 0x50 ordinal: 0x8
} _POP_FX_PLUGIN;

// 0x1840 bytes (sizeof)
typedef struct _KTIMER_TABLE {
  struct _KTIMER *TimerExpiry[16];              // offset: 0x0 ordinal: 0x0
  struct _KTIMER_TABLE_ENTRY TimerEntries[256]; // offset: 0x40 ordinal: 0x1
} _KTIMER_TABLE;

// 0x480 bytes (sizeof)
typedef struct _PEB {
  UCHAR InheritedAddressSpace;    // offset: 0x0 ordinal: 0x0
  UCHAR ReadImageFileExecOptions; // offset: 0x1 ordinal: 0x1
  UCHAR BeingDebugged;            // offset: 0x2 ordinal: 0x2
  union {
    UCHAR BitField;                // offset: 0x3 ordinal: 0x3
    UCHAR ImageUsesLargePages : 1; // offset: 0x3 ordinal: 0x4
  };
  UCHAR IsProtectedProcess : 1;           // offset: 0x3 ordinal: 0x5
  UCHAR IsImageDynamicallyRelocated : 1;  // offset: 0x3 ordinal: 0x6
  UCHAR SkipPatchingUser32Forwarders : 1; // offset: 0x3 ordinal: 0x7
  UCHAR IsPackagedProcess : 1;            // offset: 0x3 ordinal: 0x8
  UCHAR IsAppContainer : 1;               // offset: 0x3 ordinal: 0x9
  UCHAR IsProtectedProcessLight : 1;      // offset: 0x3 ordinal: 0xa
  UCHAR IsLongPathAwareProcess : 1;       // offset: 0x3 ordinal: 0xb
  VOID *Mutant;                           // offset: 0x4 ordinal: 0xc
  VOID *ImageBaseAddress;                 // offset: 0x8 ordinal: 0xd
  struct _PEB_LDR_DATA *Ldr;              // offset: 0xc ordinal: 0xe
  struct _RTL_USER_PROCESS_PARAMETERS
      *ProcessParameters;                    // offset: 0x10 ordinal: 0xf
  VOID *SubSystemData;                       // offset: 0x14 ordinal: 0x10
  VOID *ProcessHeap;                         // offset: 0x18 ordinal: 0x11
  struct _RTL_CRITICAL_SECTION *FastPebLock; // offset: 0x1c ordinal: 0x12
  union _SLIST_HEADER *AtlThunkSListPtr;     // offset: 0x20 ordinal: 0x13
  VOID *IFEOKey;                             // offset: 0x24 ordinal: 0x14
  union {
    ULONG CrossProcessFlags; // offset: 0x28 ordinal: 0x15
    ULONG ProcessInJob : 1;  // offset: 0x28 ordinal: 0x16
  };
  ULONG ProcessInitializing : 1;        // offset: 0x28 ordinal: 0x17
  ULONG ProcessUsingVEH : 1;            // offset: 0x28 ordinal: 0x18
  ULONG ProcessUsingVCH : 1;            // offset: 0x28 ordinal: 0x19
  ULONG ProcessUsingFTH : 1;            // offset: 0x28 ordinal: 0x1a
  ULONG ProcessPreviouslyThrottled : 1; // offset: 0x28 ordinal: 0x1b
  ULONG ProcessCurrentlyThrottled : 1;  // offset: 0x28 ordinal: 0x1c
  ULONG ProcessImagesHotPatched : 1;    // offset: 0x28 ordinal: 0x1d
  ULONG ReservedBits0 : 24;             // offset: 0x28 ordinal: 0x1e
  union {
    VOID *KernelCallbackTable; // offset: 0x2c ordinal: 0x1f
    VOID *UserSharedInfoPtr;   // offset: 0x2c ordinal: 0x20
  };
  ULONG SystemReserved;                        // offset: 0x30 ordinal: 0x21
  union _SLIST_HEADER *AtlThunkSListPtr32;     // offset: 0x34 ordinal: 0x22
  VOID *ApiSetMap;                             // offset: 0x38 ordinal: 0x23
  ULONG TlsExpansionCounter;                   // offset: 0x3c ordinal: 0x24
  VOID *TlsBitmap;                             // offset: 0x40 ordinal: 0x25
  ULONG TlsBitmapBits[2];                      // offset: 0x44 ordinal: 0x26
  VOID *ReadOnlySharedMemoryBase;              // offset: 0x4c ordinal: 0x27
  VOID *SharedData;                            // offset: 0x50 ordinal: 0x28
  VOID **ReadOnlyStaticServerData;             // offset: 0x54 ordinal: 0x29
  VOID *AnsiCodePageData;                      // offset: 0x58 ordinal: 0x2a
  VOID *OemCodePageData;                       // offset: 0x5c ordinal: 0x2b
  VOID *UnicodeCaseTableData;                  // offset: 0x60 ordinal: 0x2c
  ULONG NumberOfProcessors;                    // offset: 0x64 ordinal: 0x2d
  ULONG NtGlobalFlag;                          // offset: 0x68 ordinal: 0x2e
  union _LARGE_INTEGER CriticalSectionTimeout; // offset: 0x70 ordinal: 0x2f
  ULONG HeapSegmentReserve;                    // offset: 0x78 ordinal: 0x30
  ULONG HeapSegmentCommit;                     // offset: 0x7c ordinal: 0x31
  ULONG HeapDeCommitTotalFreeThreshold;        // offset: 0x80 ordinal: 0x32
  ULONG HeapDeCommitFreeBlockThreshold;        // offset: 0x84 ordinal: 0x33
  ULONG NumberOfHeaps;                         // offset: 0x88 ordinal: 0x34
  ULONG MaximumNumberOfHeaps;                  // offset: 0x8c ordinal: 0x35
  VOID **ProcessHeaps;                         // offset: 0x90 ordinal: 0x36
  VOID *GdiSharedHandleTable;                  // offset: 0x94 ordinal: 0x37
  VOID *ProcessStarterHelper;                  // offset: 0x98 ordinal: 0x38
  ULONG GdiDCAttributeList;                    // offset: 0x9c ordinal: 0x39
  struct _RTL_CRITICAL_SECTION *LoaderLock;    // offset: 0xa0 ordinal: 0x3a
  ULONG OSMajorVersion;                        // offset: 0xa4 ordinal: 0x3b
  ULONG OSMinorVersion;                        // offset: 0xa8 ordinal: 0x3c
  USHORT OSBuildNumber;                        // offset: 0xac ordinal: 0x3d
  USHORT OSCSDVersion;                         // offset: 0xae ordinal: 0x3e
  ULONG OSPlatformId;                          // offset: 0xb0 ordinal: 0x3f
  ULONG ImageSubsystem;                        // offset: 0xb4 ordinal: 0x40
  ULONG ImageSubsystemMajorVersion;            // offset: 0xb8 ordinal: 0x41
  ULONG ImageSubsystemMinorVersion;            // offset: 0xbc ordinal: 0x42
  ULONG ActiveProcessAffinityMask;             // offset: 0xc0 ordinal: 0x43
  ULONG GdiHandleBuffer[34];                   // offset: 0xc4 ordinal: 0x44
  VOID (*PostProcessInitRoutine)();            // offset: 0x14c ordinal: 0x45
  VOID *TlsExpansionBitmap;                    // offset: 0x150 ordinal: 0x46
  ULONG TlsExpansionBitmapBits[32];            // offset: 0x154 ordinal: 0x47
  ULONG SessionId;                             // offset: 0x1d4 ordinal: 0x48
  union _ULARGE_INTEGER AppCompatFlags;        // offset: 0x1d8 ordinal: 0x49
  union _ULARGE_INTEGER AppCompatFlagsUser;    // offset: 0x1e0 ordinal: 0x4a
  VOID *pShimData;                             // offset: 0x1e8 ordinal: 0x4b
  VOID *AppCompatInfo;                         // offset: 0x1ec ordinal: 0x4c
  struct _UNICODE_STRING CSDVersion;           // offset: 0x1f0 ordinal: 0x4d
  struct _ACTIVATION_CONTEXT_DATA
      *ActivationContextData; // offset: 0x1f8 ordinal: 0x4e
  struct _ASSEMBLY_STORAGE_MAP
      *ProcessAssemblyStorageMap; // offset: 0x1fc ordinal: 0x4f
  struct _ACTIVATION_CONTEXT_DATA
      *SystemDefaultActivationContextData; // offset: 0x200 ordinal: 0x50
  struct _ASSEMBLY_STORAGE_MAP
      *SystemAssemblyStorageMap; // offset: 0x204 ordinal: 0x51
  ULONG MinimumStackCommit;      // offset: 0x208 ordinal: 0x52
  VOID *SparePointers[4];        // offset: 0x20c ordinal: 0x53
  ULONG SpareUlongs[5];          // offset: 0x21c ordinal: 0x54
  VOID *WerRegistrationData;     // offset: 0x230 ordinal: 0x55
  VOID *WerShipAssertPtr;        // offset: 0x234 ordinal: 0x56
  VOID *pUnused;                 // offset: 0x238 ordinal: 0x57
  VOID *pImageHeaderHash;        // offset: 0x23c ordinal: 0x58
  union {
    ULONG TracingFlags;           // offset: 0x240 ordinal: 0x59
    ULONG HeapTracingEnabled : 1; // offset: 0x240 ordinal: 0x5a
  };
  ULONG CritSecTracingEnabled : 1;              // offset: 0x240 ordinal: 0x5b
  ULONG LibLoaderTracingEnabled : 1;            // offset: 0x240 ordinal: 0x5c
  ULONG SpareTracingBits : 29;                  // offset: 0x240 ordinal: 0x5d
  ULONGLONG CsrServerReadOnlySharedMemoryBase;  // offset: 0x248 ordinal: 0x5e
  ULONG TppWorkerpListLock;                     // offset: 0x250 ordinal: 0x5f
  struct _LIST_ENTRY TppWorkerpList;            // offset: 0x254 ordinal: 0x60
  VOID *WaitOnAddressHashTable[128];            // offset: 0x25c ordinal: 0x61
  VOID *TelemetryCoverageHeader;                // offset: 0x45c ordinal: 0x62
  ULONG CloudFileFlags;                         // offset: 0x460 ordinal: 0x63
  ULONG CloudFileDiagFlags;                     // offset: 0x464 ordinal: 0x64
  CHAR PlaceholderCompatibilityMode;            // offset: 0x468 ordinal: 0x65
  CHAR PlaceholderCompatibilityModeReserved[7]; // offset: 0x469 ordinal: 0x66
  struct _LEAP_SECOND_DATA *LeapSecondData;     // offset: 0x470 ordinal: 0x67
  union {
    ULONG LeapSecondFlags;        // offset: 0x474 ordinal: 0x68
    ULONG SixtySecondEnabled : 1; // offset: 0x474 ordinal: 0x69
  };
  ULONG Reserved : 31; // offset: 0x474 ordinal: 0x6a
  ULONG NtGlobalFlag2; // offset: 0x478 ordinal: 0x6b
} _PEB;

// 0x480 bytes (sizeof)
typedef struct _EPROCESS {
  struct _KPROCESS Pcb;                  // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK ProcessLock;      // offset: 0xb0 ordinal: 0x1
  VOID *UniqueProcessId;                 // offset: 0xb4 ordinal: 0x2
  struct _LIST_ENTRY ActiveProcessLinks; // offset: 0xb8 ordinal: 0x3
  struct _EX_RUNDOWN_REF RundownProtect; // offset: 0xc0 ordinal: 0x4
  VOID *VdmObjects;                      // offset: 0xc4 ordinal: 0x5
  union {
    ULONG Flags2;                 // offset: 0xc8 ordinal: 0x6
    ULONG JobNotReallyActive : 1; // offset: 0xc8 ordinal: 0x7
  };
  ULONG AccountingFolded : 1;                // offset: 0xc8 ordinal: 0x8
  ULONG NewProcessReported : 1;              // offset: 0xc8 ordinal: 0x9
  ULONG ExitProcessReported : 1;             // offset: 0xc8 ordinal: 0xa
  ULONG ReportCommitChanges : 1;             // offset: 0xc8 ordinal: 0xb
  ULONG LastReportMemory : 1;                // offset: 0xc8 ordinal: 0xc
  ULONG ForceWakeCharge : 1;                 // offset: 0xc8 ordinal: 0xd
  ULONG CrossSessionCreate : 1;              // offset: 0xc8 ordinal: 0xe
  ULONG NeedsHandleRundown : 1;              // offset: 0xc8 ordinal: 0xf
  ULONG RefTraceEnabled : 1;                 // offset: 0xc8 ordinal: 0x10
  ULONG PicoCreated : 1;                     // offset: 0xc8 ordinal: 0x11
  ULONG EmptyJobEvaluated : 1;               // offset: 0xc8 ordinal: 0x12
  ULONG DefaultPagePriority : 3;             // offset: 0xc8 ordinal: 0x13
  ULONG PrimaryTokenFrozen : 1;              // offset: 0xc8 ordinal: 0x14
  ULONG ProcessVerifierTarget : 1;           // offset: 0xc8 ordinal: 0x15
  ULONG RestrictSetThreadContext : 1;        // offset: 0xc8 ordinal: 0x16
  ULONG AffinityPermanent : 1;               // offset: 0xc8 ordinal: 0x17
  ULONG AffinityUpdateEnable : 1;            // offset: 0xc8 ordinal: 0x18
  ULONG PropagateNode : 1;                   // offset: 0xc8 ordinal: 0x19
  ULONG ExplicitAffinity : 1;                // offset: 0xc8 ordinal: 0x1a
  ULONG ProcessExecutionState : 2;           // offset: 0xc8 ordinal: 0x1b
  ULONG EnableReadVmLogging : 1;             // offset: 0xc8 ordinal: 0x1c
  ULONG EnableWriteVmLogging : 1;            // offset: 0xc8 ordinal: 0x1d
  ULONG FatalAccessTerminationRequested : 1; // offset: 0xc8 ordinal: 0x1e
  ULONG DisableSystemAllowedCpuSet : 1;      // offset: 0xc8 ordinal: 0x1f
  ULONG ProcessStateChangeRequest : 2;       // offset: 0xc8 ordinal: 0x20
  ULONG ProcessStateChangeInProgress : 1;    // offset: 0xc8 ordinal: 0x21
  ULONG InPrivate : 1;                       // offset: 0xc8 ordinal: 0x22
  union {
    ULONG Flags;              // offset: 0xcc ordinal: 0x23
    ULONG CreateReported : 1; // offset: 0xcc ordinal: 0x24
  };
  ULONG NoDebugInherit : 1;               // offset: 0xcc ordinal: 0x25
  ULONG ProcessExiting : 1;               // offset: 0xcc ordinal: 0x26
  ULONG ProcessDelete : 1;                // offset: 0xcc ordinal: 0x27
  ULONG ManageExecutableMemoryWrites : 1; // offset: 0xcc ordinal: 0x28
  ULONG VmDeleted : 1;                    // offset: 0xcc ordinal: 0x29
  ULONG OutswapEnabled : 1;               // offset: 0xcc ordinal: 0x2a
  ULONG Outswapped : 1;                   // offset: 0xcc ordinal: 0x2b
  ULONG FailFastOnCommitFail : 1;         // offset: 0xcc ordinal: 0x2c
  ULONG Wow64VaSpace4Gb : 1;              // offset: 0xcc ordinal: 0x2d
  ULONG AddressSpaceInitialized : 2;      // offset: 0xcc ordinal: 0x2e
  ULONG SetTimerResolution : 1;           // offset: 0xcc ordinal: 0x2f
  ULONG BreakOnTermination : 1;           // offset: 0xcc ordinal: 0x30
  ULONG DeprioritizeViews : 1;            // offset: 0xcc ordinal: 0x31
  ULONG WriteWatch : 1;                   // offset: 0xcc ordinal: 0x32
  ULONG ProcessInSession : 1;             // offset: 0xcc ordinal: 0x33
  ULONG OverrideAddressSpace : 1;         // offset: 0xcc ordinal: 0x34
  ULONG HasAddressSpace : 1;              // offset: 0xcc ordinal: 0x35
  ULONG LaunchPrefetched : 1;             // offset: 0xcc ordinal: 0x36
  ULONG Background : 1;                   // offset: 0xcc ordinal: 0x37
  ULONG VmTopDown : 1;                    // offset: 0xcc ordinal: 0x38
  ULONG ImageNotifyDone : 1;              // offset: 0xcc ordinal: 0x39
  ULONG PdeUpdateNeeded : 1;              // offset: 0xcc ordinal: 0x3a
  ULONG VdmAllowed : 1;                   // offset: 0xcc ordinal: 0x3b
  ULONG ProcessRundown : 1;               // offset: 0xcc ordinal: 0x3c
  ULONG ProcessInserted : 1;              // offset: 0xcc ordinal: 0x3d
  ULONG DefaultIoPriority : 3;            // offset: 0xcc ordinal: 0x3e
  ULONG ProcessSelfDelete : 1;            // offset: 0xcc ordinal: 0x3f
  ULONG SetTimerResolutionLink : 1;       // offset: 0xcc ordinal: 0x40
  union _LARGE_INTEGER CreateTime;        // offset: 0xd0 ordinal: 0x41
  ULONG ProcessQuotaUsage[2];             // offset: 0xd8 ordinal: 0x42
  ULONG ProcessQuotaPeak[2];              // offset: 0xe0 ordinal: 0x43
  ULONG PeakVirtualSize;                  // offset: 0xe8 ordinal: 0x44
  ULONG VirtualSize;                      // offset: 0xec ordinal: 0x45
  struct _LIST_ENTRY SessionProcessLinks; // offset: 0xf0 ordinal: 0x46
  union {
    VOID *ExceptionPortData;      // offset: 0xf8 ordinal: 0x47
    ULONG ExceptionPortValue;     // offset: 0xf8 ordinal: 0x48
    ULONG ExceptionPortState : 3; // offset: 0xf8 ordinal: 0x49
  };
  struct _EX_FAST_REF Token;                    // offset: 0xfc ordinal: 0x4a
  ULONG MmReserved;                             // offset: 0x100 ordinal: 0x4b
  struct _EX_PUSH_LOCK AddressCreationLock;     // offset: 0x104 ordinal: 0x4c
  struct _EX_PUSH_LOCK PageTableCommitmentLock; // offset: 0x108 ordinal: 0x4d
  struct _ETHREAD *RotateInProgress;            // offset: 0x10c ordinal: 0x4e
  struct _ETHREAD *ForkInProgress;              // offset: 0x110 ordinal: 0x4f
  struct _EJOB *CommitChargeJob;                // offset: 0x114 ordinal: 0x50
  struct _RTL_AVL_TREE CloneRoot;               // offset: 0x118 ordinal: 0x51
  ULONG NumberOfPrivatePages;                   // offset: 0x11c ordinal: 0x52
  ULONG NumberOfLockedPages;                    // offset: 0x120 ordinal: 0x53
  VOID *Win32Process;                           // offset: 0x124 ordinal: 0x54
  struct _EJOB *Job;                            // offset: 0x128 ordinal: 0x55
  VOID *SectionObject;                          // offset: 0x12c ordinal: 0x56
  VOID *SectionBaseAddress;                     // offset: 0x130 ordinal: 0x57
  ULONG Cookie;                                 // offset: 0x134 ordinal: 0x58
  struct _PAGEFAULT_HISTORY *WorkingSetWatch;   // offset: 0x138 ordinal: 0x59
  VOID *Win32WindowStation;                     // offset: 0x13c ordinal: 0x5a
  VOID *InheritedFromUniqueProcessId;           // offset: 0x140 ordinal: 0x5b
  VOID *LdtInformation;                         // offset: 0x144 ordinal: 0x5c
  ULONG OwnerProcessId;                         // offset: 0x148 ordinal: 0x5d
  struct _PEB *Peb;                             // offset: 0x14c ordinal: 0x5e
  struct _MM_SESSION_SPACE *Session;            // offset: 0x150 ordinal: 0x5f
  VOID *Spare1;                                 // offset: 0x154 ordinal: 0x60
  struct _EPROCESS_QUOTA_BLOCK *QuotaBlock;     // offset: 0x158 ordinal: 0x61
  struct _HANDLE_TABLE *ObjectTable;            // offset: 0x15c ordinal: 0x62
  VOID *DebugPort;                              // offset: 0x160 ordinal: 0x63
  VOID *PaeTop;                                 // offset: 0x164 ordinal: 0x64
  VOID *DeviceMap;                              // offset: 0x168 ordinal: 0x65
  VOID *EtwDataSource;                          // offset: 0x16c ordinal: 0x66
  ULONGLONG PageDirectoryPte;                   // offset: 0x170 ordinal: 0x67
  struct _FILE_OBJECT *ImageFilePointer;        // offset: 0x178 ordinal: 0x68
  UCHAR ImageFileName[15];                      // offset: 0x17c ordinal: 0x69
  UCHAR PriorityClass;                          // offset: 0x18b ordinal: 0x6a
  VOID *SecurityPort;                           // offset: 0x18c ordinal: 0x6b
  struct _SE_AUDIT_PROCESS_CREATION_INFO
      SeAuditProcessCreationInfo;           // offset: 0x190 ordinal: 0x6c
  struct _LIST_ENTRY JobLinks;              // offset: 0x194 ordinal: 0x6d
  VOID *HighestUserAddress;                 // offset: 0x19c ordinal: 0x6e
  struct _LIST_ENTRY ThreadListHead;        // offset: 0x1a0 ordinal: 0x6f
  ULONG ActiveThreads;                      // offset: 0x1a8 ordinal: 0x70
  ULONG ImagePathHash;                      // offset: 0x1ac ordinal: 0x71
  ULONG DefaultHardErrorProcessing;         // offset: 0x1b0 ordinal: 0x72
  LONG LastThreadExitStatus;                // offset: 0x1b4 ordinal: 0x73
  struct _EX_FAST_REF PrefetchTrace;        // offset: 0x1b8 ordinal: 0x74
  VOID *LockedPagesList;                    // offset: 0x1bc ordinal: 0x75
  union _LARGE_INTEGER ReadOperationCount;  // offset: 0x1c0 ordinal: 0x76
  union _LARGE_INTEGER WriteOperationCount; // offset: 0x1c8 ordinal: 0x77
  union _LARGE_INTEGER OtherOperationCount; // offset: 0x1d0 ordinal: 0x78
  union _LARGE_INTEGER ReadTransferCount;   // offset: 0x1d8 ordinal: 0x79
  union _LARGE_INTEGER WriteTransferCount;  // offset: 0x1e0 ordinal: 0x7a
  union _LARGE_INTEGER OtherTransferCount;  // offset: 0x1e8 ordinal: 0x7b
  ULONG CommitChargeLimit;                  // offset: 0x1f0 ordinal: 0x7c
  ULONG CommitCharge;                       // offset: 0x1f4 ordinal: 0x7d
  ULONG CommitChargePeak;                   // offset: 0x1f8 ordinal: 0x7e
  struct _MMSUPPORT_FULL Vm;                // offset: 0x200 ordinal: 0x7f
  struct _LIST_ENTRY MmProcessLinks;        // offset: 0x300 ordinal: 0x80
  ULONG ModifiedPageCount;                  // offset: 0x308 ordinal: 0x81
  LONG ExitStatus;                          // offset: 0x30c ordinal: 0x82
  struct _RTL_AVL_TREE VadRoot;             // offset: 0x310 ordinal: 0x83
  VOID *VadHint;                            // offset: 0x314 ordinal: 0x84
  ULONG VadCount;                           // offset: 0x318 ordinal: 0x85
  ULONG VadPhysicalPages;                   // offset: 0x31c ordinal: 0x86
  ULONG VadPhysicalPagesLimit;              // offset: 0x320 ordinal: 0x87
  struct _ALPC_PROCESS_CONTEXT AlpcContext; // offset: 0x324 ordinal: 0x88
  struct _LIST_ENTRY TimerResolutionLink;   // offset: 0x334 ordinal: 0x89
  struct _PO_DIAG_STACK_RECORD
      *TimerResolutionStackRecord;     // offset: 0x33c ordinal: 0x8a
  ULONG RequestedTimerResolution;      // offset: 0x340 ordinal: 0x8b
  ULONG SmallestTimerResolution;       // offset: 0x344 ordinal: 0x8c
  union _LARGE_INTEGER ExitTime;       // offset: 0x348 ordinal: 0x8d
  ULONG ActiveThreadsHighWatermark;    // offset: 0x350 ordinal: 0x8e
  ULONG LargePrivateVadCount;          // offset: 0x354 ordinal: 0x8f
  struct _EX_PUSH_LOCK ThreadListLock; // offset: 0x358 ordinal: 0x90
  VOID *WnfContext;                    // offset: 0x35c ordinal: 0x91
  struct _EJOB *ServerSilo;            // offset: 0x360 ordinal: 0x92
  UCHAR SignatureLevel;                // offset: 0x364 ordinal: 0x93
  UCHAR SectionSignatureLevel;         // offset: 0x365 ordinal: 0x94
  struct _PS_PROTECTION Protection;    // offset: 0x366 ordinal: 0x95
  UCHAR HangCount : 3;                 // offset: 0x367 ordinal: 0x96
  UCHAR GhostCount : 3;                // offset: 0x367 ordinal: 0x97
  UCHAR PrefilterException : 1;        // offset: 0x367 ordinal: 0x98
  union {
    ULONG Flags3;      // offset: 0x368 ordinal: 0x99
    ULONG Minimal : 1; // offset: 0x368 ordinal: 0x9a
  };
  ULONG ReplacingPageRoot : 1;                 // offset: 0x368 ordinal: 0x9b
  ULONG Crashed : 1;                           // offset: 0x368 ordinal: 0x9c
  ULONG JobVadsAreTracked : 1;                 // offset: 0x368 ordinal: 0x9d
  ULONG VadTrackingDisabled : 1;               // offset: 0x368 ordinal: 0x9e
  ULONG AuxiliaryProcess : 1;                  // offset: 0x368 ordinal: 0x9f
  ULONG SubsystemProcess : 1;                  // offset: 0x368 ordinal: 0xa0
  ULONG IndirectCpuSets : 1;                   // offset: 0x368 ordinal: 0xa1
  ULONG RelinquishedCommit : 1;                // offset: 0x368 ordinal: 0xa2
  ULONG HighGraphicsPriority : 1;              // offset: 0x368 ordinal: 0xa3
  ULONG CommitFailLogged : 1;                  // offset: 0x368 ordinal: 0xa4
  ULONG ReserveFailLogged : 1;                 // offset: 0x368 ordinal: 0xa5
  ULONG SystemProcess : 1;                     // offset: 0x368 ordinal: 0xa6
  ULONG HideImageBaseAddresses : 1;            // offset: 0x368 ordinal: 0xa7
  ULONG AddressPolicyFrozen : 1;               // offset: 0x368 ordinal: 0xa8
  ULONG ProcessFirstResume : 1;                // offset: 0x368 ordinal: 0xa9
  ULONG ForegroundExternal : 1;                // offset: 0x368 ordinal: 0xaa
  ULONG ForegroundSystem : 1;                  // offset: 0x368 ordinal: 0xab
  ULONG HighMemoryPriority : 1;                // offset: 0x368 ordinal: 0xac
  ULONG EnableProcessSuspendResumeLogging : 1; // offset: 0x368 ordinal: 0xad
  ULONG EnableThreadSuspendResumeLogging : 1;  // offset: 0x368 ordinal: 0xae
  ULONG SecurityDomainChanged : 1;             // offset: 0x368 ordinal: 0xaf
  ULONG SecurityFreezeComplete : 1;            // offset: 0x368 ordinal: 0xb0
  ULONG VmProcessorHost : 1;                   // offset: 0x368 ordinal: 0xb1
  LONG DeviceAsid;                             // offset: 0x36c ordinal: 0xb2
  VOID *SvmData;                               // offset: 0x370 ordinal: 0xb3
  struct _EX_PUSH_LOCK SvmProcessLock;         // offset: 0x374 ordinal: 0xb4
  ULONG SvmLock;                               // offset: 0x378 ordinal: 0xb5
  struct _LIST_ENTRY SvmProcessDeviceListHead; // offset: 0x37c ordinal: 0xb6
  ULONGLONG LastFreezeInterruptTime;           // offset: 0x388 ordinal: 0xb7
  struct _PROCESS_DISK_COUNTERS *DiskCounters; // offset: 0x390 ordinal: 0xb8
  VOID *PicoContext;                           // offset: 0x394 ordinal: 0xb9
  ULONG HighPriorityFaultsAllowed;             // offset: 0x398 ordinal: 0xba
  VOID *InstrumentationCallback;               // offset: 0x39c ordinal: 0xbb
  struct _PO_PROCESS_ENERGY_CONTEXT
      *EnergyContext;                    // offset: 0x3a0 ordinal: 0xbc
  VOID *VmContext;                       // offset: 0x3a4 ordinal: 0xbd
  ULONGLONG SequenceNumber;              // offset: 0x3a8 ordinal: 0xbe
  ULONGLONG CreateInterruptTime;         // offset: 0x3b0 ordinal: 0xbf
  ULONGLONG CreateUnbiasedInterruptTime; // offset: 0x3b8 ordinal: 0xc0
  ULONGLONG TotalUnbiasedFrozenTime;     // offset: 0x3c0 ordinal: 0xc1
  ULONGLONG LastAppStateUpdateTime;      // offset: 0x3c8 ordinal: 0xc2
  ULONGLONG LastAppStateUptime : 61;     // offset: 0x3d0 ordinal: 0xc3
  ULONGLONG LastAppState : 3;            // offset: 0x3d0 ordinal: 0xc4
  ULONG SharedCommitCharge;              // offset: 0x3d8 ordinal: 0xc5
  struct _EX_PUSH_LOCK SharedCommitLock; // offset: 0x3dc ordinal: 0xc6
  struct _LIST_ENTRY SharedCommitLinks;  // offset: 0x3e0 ordinal: 0xc7
  ULONG AllowedCpuSets;                  // offset: 0x3e8 ordinal: 0xc8
  ULONG DefaultCpuSets;                  // offset: 0x3ec ordinal: 0xc9
  ULONG *AllowedCpuSetsIndirect;         // offset: 0x3e8 ordinal: 0xca
  ULONG *DefaultCpuSetsIndirect;         // offset: 0x3ec ordinal: 0xcb
  VOID *DiskIoAttribution;               // offset: 0x3f0 ordinal: 0xcc
  VOID *DxgProcess;                      // offset: 0x3f4 ordinal: 0xcd
  ULONG Win32KFilterSet;                 // offset: 0x3f8 ordinal: 0xce
  union _PS_INTERLOCKED_TIMER_DELAY_VALUES
      ProcessTimerDelay;                   // offset: 0x400 ordinal: 0xcf
  ULONG KTimerSets;                        // offset: 0x408 ordinal: 0xd0
  ULONG KTimer2Sets;                       // offset: 0x40c ordinal: 0xd1
  ULONG ThreadTimerSets;                   // offset: 0x410 ordinal: 0xd2
  ULONG VirtualTimerListLock;              // offset: 0x414 ordinal: 0xd3
  struct _LIST_ENTRY VirtualTimerListHead; // offset: 0x418 ordinal: 0xd4
  union {
    struct _WNF_STATE_NAME WakeChannel;           // offset: 0x420 ordinal: 0xd5
    struct _PS_PROCESS_WAKE_INFORMATION WakeInfo; // offset: 0x420 ordinal: 0xd6
  };
  union {
    ULONG MitigationFlags;                   // offset: 0x450 ordinal: 0xd7
    struct __anon_745 MitigationFlagsValues; // offset: 0x450 ordinal: 0xd8
  };
  union {
    ULONG MitigationFlags2;                   // offset: 0x454 ordinal: 0xd9
    struct __anon_746 MitigationFlags2Values; // offset: 0x454 ordinal: 0xda
  };
  VOID *PartitionObject;          // offset: 0x458 ordinal: 0xdb
  ULONGLONG SecurityDomain;       // offset: 0x460 ordinal: 0xdc
  ULONGLONG ParentSecurityDomain; // offset: 0x468 ordinal: 0xdd
  VOID *CoverageSamplerContext;   // offset: 0x470 ordinal: 0xde
  VOID *MmHotPatchContext;        // offset: 0x474 ordinal: 0xdf
} _EPROCESS;

// 0x24 bytes (sizeof)
typedef struct _RH_OP_CONTEXT {
  struct _LIST_ENTRY Links;                     // offset: 0x0 ordinal: 0x0
  struct _IRP *OplockRequestIrp;                // offset: 0x8 ordinal: 0x1
  struct _FILE_OBJECT *OplockRequestFileObject; // offset: 0xc ordinal: 0x2
  struct _EPROCESS *OplockRequestProcess;       // offset: 0x10 ordinal: 0x3
  struct _ETHREAD *OplockOwnerThread;           // offset: 0x14 ordinal: 0x4
  ULONG Flags;                                  // offset: 0x18 ordinal: 0x5
  struct _LIST_ENTRY AtomicLinks;               // offset: 0x1c ordinal: 0x6
} _RH_OP_CONTEXT;

// 0x50 bytes (sizeof)
typedef struct _NONOPAQUE_OPLOCK {
  struct _IRP *IrpExclusiveOplock;             // offset: 0x0 ordinal: 0x0
  struct _FILE_OBJECT *FileObject;             // offset: 0x4 ordinal: 0x1
  struct _EPROCESS *ExclusiveOplockOwner;      // offset: 0x8 ordinal: 0x2
  struct _ETHREAD *ExclusiveOplockOwnerThread; // offset: 0xc ordinal: 0x3
  UCHAR WaiterPriority;                        // offset: 0x10 ordinal: 0x4
  struct _LIST_ENTRY IrpOplocksR;              // offset: 0x14 ordinal: 0x5
  struct _LIST_ENTRY IrpOplocksRH;             // offset: 0x1c ordinal: 0x6
  struct _LIST_ENTRY RHBreakQueue;             // offset: 0x24 ordinal: 0x7
  struct _LIST_ENTRY WaitingIrps;              // offset: 0x2c ordinal: 0x8
  struct _LIST_ENTRY DelayAckFileObjectQueue;  // offset: 0x34 ordinal: 0x9
  struct _LIST_ENTRY AtomicQueue;              // offset: 0x3c ordinal: 0xa
  struct _GUID *DeleterParentKey;              // offset: 0x44 ordinal: 0xb
  ULONG OplockState;                           // offset: 0x48 ordinal: 0xc
  struct _FAST_MUTEX *FastMutex;               // offset: 0x4c ordinal: 0xd
} _NONOPAQUE_OPLOCK;

// 0x24 bytes (sizeof)
typedef struct _POP_SHUTDOWN_BUG_CHECK {
  struct _ETHREAD *InitiatingThread;   // offset: 0x0 ordinal: 0x0
  struct _EPROCESS *InitiatingProcess; // offset: 0x4 ordinal: 0x1
  VOID *ThreadId;                      // offset: 0x8 ordinal: 0x2
  VOID *ProcessId;                     // offset: 0xc ordinal: 0x3
  ULONG Code;                          // offset: 0x10 ordinal: 0x4
  ULONG Parameter1;                    // offset: 0x14 ordinal: 0x5
  ULONG Parameter2;                    // offset: 0x18 ordinal: 0x6
  ULONG Parameter3;                    // offset: 0x1c ordinal: 0x7
  ULONG Parameter4;                    // offset: 0x20 ordinal: 0x8
} _POP_SHUTDOWN_BUG_CHECK;

// 0xa4 bytes (sizeof)
typedef struct _LPCP_PORT_OBJECT {
  struct _LPCP_PORT_OBJECT *ConnectionPort;        // offset: 0x0 ordinal: 0x0
  struct _LPCP_PORT_OBJECT *ConnectedPort;         // offset: 0x4 ordinal: 0x1
  struct _LPCP_PORT_QUEUE MsgQueue;                // offset: 0x8 ordinal: 0x2
  struct _CLIENT_ID Creator;                       // offset: 0x18 ordinal: 0x3
  VOID *ClientSectionBase;                         // offset: 0x20 ordinal: 0x4
  VOID *ServerSectionBase;                         // offset: 0x24 ordinal: 0x5
  VOID *PortContext;                               // offset: 0x28 ordinal: 0x6
  struct _ETHREAD *ClientThread;                   // offset: 0x2c ordinal: 0x7
  struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // offset: 0x30 ordinal: 0x8
  struct _SECURITY_CLIENT_CONTEXT StaticSecurity;  // offset: 0x3c ordinal: 0x9
  struct _LIST_ENTRY LpcReplyChainHead;            // offset: 0x78 ordinal: 0xa
  struct _LIST_ENTRY LpcDataInfoChainHead;         // offset: 0x80 ordinal: 0xb
  union {
    struct _EPROCESS *ServerProcess;  // offset: 0x88 ordinal: 0xc
    struct _EPROCESS *MappingProcess; // offset: 0x88 ordinal: 0xd
  };
  USHORT MaxMessageLength;        // offset: 0x8c ordinal: 0xe
  USHORT MaxConnectionInfoLength; // offset: 0x8e ordinal: 0xf
  ULONG Flags;                    // offset: 0x90 ordinal: 0x10
  struct _KEVENT WaitEvent;       // offset: 0x94 ordinal: 0x11
} _LPCP_PORT_OBJECT;

// 0x10 bytes (sizeof)
typedef struct _DIAGNOSTIC_CONTEXT {
  enum _REQUESTER_TYPE CallerType;     // offset: 0x0 ordinal: 0x0
  struct _EPROCESS *Process;           // offset: 0x4 ordinal: 0x1
  ULONG ServiceTag;                    // offset: 0x8 ordinal: 0x2
  struct _DEVICE_OBJECT *DeviceObject; // offset: 0x4 ordinal: 0x3
  ULONG ReasonSize;                    // offset: 0xc ordinal: 0x4
} _DIAGNOSTIC_CONTEXT;

// 0xb8 bytes (sizeof)
typedef struct _ETIMER {
  struct _KTIMER KeTimer;                  // offset: 0x0 ordinal: 0x0
  ULONG Lock;                              // offset: 0x28 ordinal: 0x1
  struct _KAPC TimerApc;                   // offset: 0x2c ordinal: 0x2
  struct _KDPC TimerDpc;                   // offset: 0x5c ordinal: 0x3
  struct _LIST_ENTRY ActiveTimerListEntry; // offset: 0x7c ordinal: 0x4
  ULONG Period;                            // offset: 0x84 ordinal: 0x5
  union {
    CHAR TimerFlags;         // offset: 0x88 ordinal: 0x6
    UCHAR ApcAssociated : 1; // offset: 0x88 ordinal: 0x7
  };
  UCHAR FlushDpcs : 1;                      // offset: 0x88 ordinal: 0x8
  UCHAR Paused : 1;                         // offset: 0x88 ordinal: 0x9
  UCHAR Spare1 : 5;                         // offset: 0x88 ordinal: 0xa
  UCHAR DueTimeType;                        // offset: 0x89 ordinal: 0xb
  USHORT Spare2;                            // offset: 0x8a ordinal: 0xc
  struct _DIAGNOSTIC_CONTEXT *WakeReason;   // offset: 0x8c ordinal: 0xd
  struct _LIST_ENTRY WakeTimerListEntry;    // offset: 0x90 ordinal: 0xe
  VOID *VirtualizedTimerCookie;             // offset: 0x98 ordinal: 0xf
  struct _LIST_ENTRY VirtualizedTimerLinks; // offset: 0x9c ordinal: 0x10
  ULONGLONG DueTime;                        // offset: 0xa8 ordinal: 0x11
  ULONG CoalescingWindow;                   // offset: 0xb0 ordinal: 0x12
} _ETIMER;

// 0x18 bytes (sizeof)
typedef struct _MI_REVERSE_VIEW_MAP {
  struct _LIST_ENTRY ViewLinks; // offset: 0x0 ordinal: 0x0
  union {
    VOID *SystemCacheVa;           // offset: 0x8 ordinal: 0x1
    VOID *SessionViewVa;           // offset: 0x8 ordinal: 0x2
    struct _EPROCESS *VadsProcess; // offset: 0x8 ordinal: 0x3
    ULONG Type : 2;                // offset: 0x8 ordinal: 0x4
  };
  union {
    struct _SUBSECTION *Subsection; // offset: 0xc ordinal: 0x5
    ULONG SubsectionType : 1;       // offset: 0xc ordinal: 0x6
  };
  union {
    struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
        SystemCacheAttributes; // offset: 0x10 ordinal: 0x7
    ULONGLONG SectionOffset;   // offset: 0x10 ordinal: 0x8
  };
} _MI_REVERSE_VIEW_MAP;

// 0x1034 bytes (sizeof)
typedef struct _MI_SESSION_STATE {
  struct _MMSESSION SystemSession;        // offset: 0x0 ordinal: 0x0
  UCHAR CodePageEdited;                   // offset: 0x14 ordinal: 0x1
  LONG VaReferenceCount[1024];            // offset: 0x18 ordinal: 0x2
  ULONG *DynamicPtesBitBuffer;            // offset: 0x1018 ordinal: 0x3
  struct _EX_PUSH_LOCK IdLock;            // offset: 0x101c ordinal: 0x4
  struct _EPROCESS *LeaderProcess;        // offset: 0x1020 ordinal: 0x5
  struct _EX_PUSH_LOCK InitializeLock;    // offset: 0x1024 ordinal: 0x6
  struct _MMWSL_INSTANCE *WorkingSetList; // offset: 0x1028 ordinal: 0x7
  VOID *SessionBase;                      // offset: 0x102c ordinal: 0x8
  VOID *SessionCore;                      // offset: 0x1030 ordinal: 0x9
} _MI_SESSION_STATE;

// 0x50 bytes (sizeof)
typedef struct _LOCK_TRACKER {
  struct _RTL_BALANCED_NODE LockTrackerNode; // offset: 0x0 ordinal: 0x0
  struct _MDL *Mdl;                          // offset: 0xc ordinal: 0x1
  VOID *StartVa;                             // offset: 0x10 ordinal: 0x2
  ULONG Count;                               // offset: 0x14 ordinal: 0x3
  ULONG Offset;                              // offset: 0x18 ordinal: 0x4
  ULONG Length;                              // offset: 0x1c ordinal: 0x5
  ULONG Who;                                 // offset: 0x20 ordinal: 0x6
  ULONG Hash;                                // offset: 0x24 ordinal: 0x7
  ULONG Page;                                // offset: 0x28 ordinal: 0x8
  VOID *StackTrace[8];                       // offset: 0x2c ordinal: 0x9
  struct _EPROCESS *Process;                 // offset: 0x4c ordinal: 0xa
} _LOCK_TRACKER;

// 0x44 bytes (sizeof)
typedef struct _WNF_PROCESS_CONTEXT {
  struct _WNF_NODE_HEADER Header;                 // offset: 0x0 ordinal: 0x0
  struct _EPROCESS *Process;                      // offset: 0x4 ordinal: 0x1
  struct _LIST_ENTRY WnfProcessesListEntry;       // offset: 0x8 ordinal: 0x2
  VOID *ImplicitScopeInstances[3];                // offset: 0x10 ordinal: 0x3
  struct _WNF_LOCK TemporaryNamesListLock;        // offset: 0x1c ordinal: 0x4
  struct _LIST_ENTRY TemporaryNamesListHead;      // offset: 0x20 ordinal: 0x5
  struct _WNF_LOCK ProcessSubscriptionListLock;   // offset: 0x28 ordinal: 0x6
  struct _LIST_ENTRY ProcessSubscriptionListHead; // offset: 0x2c ordinal: 0x7
  struct _WNF_LOCK DeliveryPendingListLock;       // offset: 0x34 ordinal: 0x8
  struct _LIST_ENTRY DeliveryPendingListHead;     // offset: 0x38 ordinal: 0x9
  struct _KEVENT *NotificationEvent;              // offset: 0x40 ordinal: 0xa
} _WNF_PROCESS_CONTEXT;

// 0x60 bytes (sizeof)
typedef struct _WNF_NAME_INSTANCE {
  struct _WNF_NODE_HEADER Header;            // offset: 0x0 ordinal: 0x0
  struct _EX_RUNDOWN_REF RunRef;             // offset: 0x4 ordinal: 0x1
  struct _RTL_BALANCED_NODE TreeLinks;       // offset: 0x8 ordinal: 0x2
  struct _WNF_STATE_NAME_STRUCT StateName;   // offset: 0x18 ordinal: 0x3
  struct _WNF_SCOPE_INSTANCE *ScopeInstance; // offset: 0x20 ordinal: 0x4
  struct _WNF_STATE_NAME_REGISTRATION
      StateNameInfo;                            // offset: 0x24 ordinal: 0x5
  struct _WNF_LOCK StateDataLock;               // offset: 0x30 ordinal: 0x6
  struct _WNF_STATE_DATA *StateData;            // offset: 0x34 ordinal: 0x7
  ULONG CurrentChangeStamp;                     // offset: 0x38 ordinal: 0x8
  VOID *PermanentDataStore;                     // offset: 0x3c ordinal: 0x9
  struct _WNF_LOCK StateSubscriptionListLock;   // offset: 0x40 ordinal: 0xa
  struct _LIST_ENTRY StateSubscriptionListHead; // offset: 0x44 ordinal: 0xb
  struct _LIST_ENTRY TemporaryNameListEntry;    // offset: 0x4c ordinal: 0xc
  struct _EPROCESS *CreatorProcess;             // offset: 0x54 ordinal: 0xd
  LONG DataSubscribersCount;                    // offset: 0x58 ordinal: 0xe
  LONG CurrentDeliveryCount;                    // offset: 0x5c ordinal: 0xf
} _WNF_NAME_INSTANCE;

// 0x58 bytes (sizeof)
typedef struct _WNF_SUBSCRIPTION {
  struct _WNF_NODE_HEADER Header;                  // offset: 0x0 ordinal: 0x0
  struct _EX_RUNDOWN_REF RunRef;                   // offset: 0x4 ordinal: 0x1
  ULONGLONG SubscriptionId;                        // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY ProcessSubscriptionListEntry; // offset: 0x10 ordinal: 0x3
  struct _EPROCESS *Process;                       // offset: 0x18 ordinal: 0x4
  struct _WNF_NAME_INSTANCE *NameInstance;         // offset: 0x1c ordinal: 0x5
  struct _WNF_STATE_NAME_STRUCT StateName;         // offset: 0x20 ordinal: 0x6
  struct _LIST_ENTRY StateSubscriptionListEntry;   // offset: 0x28 ordinal: 0x7
  ULONG CallbackRoutine;                           // offset: 0x30 ordinal: 0x8
  VOID *CallbackContext;                           // offset: 0x34 ordinal: 0x9
  ULONG CurrentChangeStamp;                        // offset: 0x38 ordinal: 0xa
  ULONG SubscribedEventSet;                        // offset: 0x3c ordinal: 0xb
  struct _LIST_ENTRY PendingSubscriptionListEntry; // offset: 0x40 ordinal: 0xc
  enum _WNF_SUBSCRIPTION_STATE SubscriptionState;  // offset: 0x48 ordinal: 0xd
  ULONG SignaledEventSet;                          // offset: 0x4c ordinal: 0xe
  ULONG InDeliveryEventSet;                        // offset: 0x50 ordinal: 0xf
} _WNF_SUBSCRIPTION;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HANDLE_COUNT_ENTRY {
  struct _EPROCESS *Process; // offset: 0x0 ordinal: 0x0
  ULONG HandleCount : 24;    // offset: 0x4 ordinal: 0x1
  ULONG LockCount : 8;       // offset: 0x4 ordinal: 0x2
} _OBJECT_HANDLE_COUNT_ENTRY;

// 0xc bytes (sizeof)
typedef struct _OBJECT_HANDLE_COUNT_DATABASE {
  ULONG CountEntries; // offset: 0x0 ordinal: 0x0
  struct _OBJECT_HANDLE_COUNT_ENTRY
      HandleCountEntries[1]; // offset: 0x4 ordinal: 0x1
} _OBJECT_HANDLE_COUNT_DATABASE;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HEADER_HANDLE_INFO {
  union {
    struct _OBJECT_HANDLE_COUNT_DATABASE
        *HandleCountDataBase;                      // offset: 0x0 ordinal: 0x0
    struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry; // offset: 0x0 ordinal: 0x1
  };
} _OBJECT_HEADER_HANDLE_INFO;

// 0x8 bytes (sizeof)
typedef struct _OBJECT_HEADER_PROCESS_INFO {
  struct _EPROCESS *ExclusiveProcess; // offset: 0x0 ordinal: 0x0
  ULONG Reserved;                     // offset: 0x4 ordinal: 0x1
} _OBJECT_HEADER_PROCESS_INFO;

typedef UCHAR (*__anon_2154)(struct _EPROCESS *, VOID *, VOID *, CHAR);

typedef VOID (*__anon_2149)(struct _EPROCESS *, VOID *, ULONG, ULONG);

typedef LONG (*__anon_2148)(enum _OB_OPEN_REASON, CHAR, struct _EPROCESS *,
                            VOID *, ULONG *, ULONG);

// 0x58 bytes (sizeof)
typedef struct _OBJECT_TYPE_INITIALIZER {
  USHORT Length; // offset: 0x0 ordinal: 0x0
  union {
    USHORT ObjectTypeFlags;    // offset: 0x2 ordinal: 0x1
    UCHAR CaseInsensitive : 1; // offset: 0x2 ordinal: 0x2
  };
  UCHAR UnnamedObjectsOnly : 1;           // offset: 0x2 ordinal: 0x3
  UCHAR UseDefaultObject : 1;             // offset: 0x2 ordinal: 0x4
  UCHAR SecurityRequired : 1;             // offset: 0x2 ordinal: 0x5
  UCHAR MaintainHandleCount : 1;          // offset: 0x2 ordinal: 0x6
  UCHAR MaintainTypeList : 1;             // offset: 0x2 ordinal: 0x7
  UCHAR SupportsObjectCallbacks : 1;      // offset: 0x2 ordinal: 0x8
  UCHAR CacheAligned : 1;                 // offset: 0x2 ordinal: 0x9
  UCHAR UseExtendedParameters : 1;        // offset: 0x3 ordinal: 0xa
  UCHAR Reserved : 7;                     // offset: 0x3 ordinal: 0xb
  ULONG ObjectTypeCode;                   // offset: 0x4 ordinal: 0xc
  ULONG InvalidAttributes;                // offset: 0x8 ordinal: 0xd
  struct _GENERIC_MAPPING GenericMapping; // offset: 0xc ordinal: 0xe
  ULONG ValidAccessMask;                  // offset: 0x1c ordinal: 0xf
  ULONG RetainAccess;                     // offset: 0x20 ordinal: 0x10
  enum _POOL_TYPE PoolType;               // offset: 0x24 ordinal: 0x11
  ULONG DefaultPagedPoolCharge;           // offset: 0x28 ordinal: 0x12
  ULONG DefaultNonPagedPoolCharge;        // offset: 0x2c ordinal: 0x13
  VOID(*DumpProcedure)
  (VOID *, struct _OBJECT_DUMP_CONTROL *); // offset: 0x30 ordinal: 0x14
  LONG(*OpenProcedure)
  (enum _OB_OPEN_REASON, CHAR, struct _EPROCESS *, VOID *, ULONG *,
   ULONG); // offset: 0x34 ordinal: 0x15
  VOID(*CloseProcedure)
  (struct _EPROCESS *, VOID *, ULONG, ULONG); // offset: 0x38 ordinal: 0x16
  VOID (*DeleteProcedure)(VOID *);            // offset: 0x3c ordinal: 0x17
  union {
    LONG(*ParseProcedure)
    (VOID *, VOID *, struct _ACCESS_STATE *, CHAR, ULONG,
     struct _UNICODE_STRING *, struct _UNICODE_STRING *, VOID *,
     struct _SECURITY_QUALITY_OF_SERVICE *,
     VOID **); // offset: 0x40 ordinal: 0x18
    LONG(*ParseProcedureEx)
    (VOID *, VOID *, struct _ACCESS_STATE *, CHAR, ULONG,
     struct _UNICODE_STRING *, struct _UNICODE_STRING *, VOID *,
     struct _SECURITY_QUALITY_OF_SERVICE *,
     struct _OB_EXTENDED_PARSE_PARAMETERS *,
     VOID **); // offset: 0x40 ordinal: 0x19
  };
  LONG(*SecurityProcedure)
  (VOID *, enum _SECURITY_OPERATION_CODE, ULONG *, VOID *, ULONG *, VOID **,
   enum _POOL_TYPE, struct _GENERIC_MAPPING *,
   CHAR); // offset: 0x44 ordinal: 0x1a
  LONG(*QueryNameProcedure)
  (VOID *, UCHAR, struct _OBJECT_NAME_INFORMATION *, ULONG, ULONG *,
   CHAR); // offset: 0x48 ordinal: 0x1b
  UCHAR(*OkayToCloseProcedure)
  (struct _EPROCESS *, VOID *, VOID *, CHAR); // offset: 0x4c ordinal: 0x1c
  ULONG WaitObjectFlagMask;                   // offset: 0x50 ordinal: 0x1d
  USHORT WaitObjectFlagOffset;                // offset: 0x54 ordinal: 0x1e
  USHORT WaitObjectPointerOffset;             // offset: 0x56 ordinal: 0x1f
} _OBJECT_TYPE_INITIALIZER;

// 0x90 bytes (sizeof)
typedef struct _OBJECT_TYPE {
  struct _LIST_ENTRY TypeList;              // offset: 0x0 ordinal: 0x0
  struct _UNICODE_STRING Name;              // offset: 0x8 ordinal: 0x1
  VOID *DefaultObject;                      // offset: 0x10 ordinal: 0x2
  UCHAR Index;                              // offset: 0x14 ordinal: 0x3
  ULONG TotalNumberOfObjects;               // offset: 0x18 ordinal: 0x4
  ULONG TotalNumberOfHandles;               // offset: 0x1c ordinal: 0x5
  ULONG HighWaterNumberOfObjects;           // offset: 0x20 ordinal: 0x6
  ULONG HighWaterNumberOfHandles;           // offset: 0x24 ordinal: 0x7
  struct _OBJECT_TYPE_INITIALIZER TypeInfo; // offset: 0x28 ordinal: 0x8
  struct _EX_PUSH_LOCK TypeLock;            // offset: 0x80 ordinal: 0x9
  ULONG Key;                                // offset: 0x84 ordinal: 0xa
  struct _LIST_ENTRY CallbackList;          // offset: 0x88 ordinal: 0xb
} _OBJECT_TYPE;

// 0x1c bytes (sizeof)
typedef struct _OB_DUPLICATE_OBJECT_STATE {
  struct _EPROCESS *SourceProcess;            // offset: 0x0 ordinal: 0x0
  VOID *SourceHandle;                         // offset: 0x4 ordinal: 0x1
  VOID *Object;                               // offset: 0x8 ordinal: 0x2
  ULONG TargetAccess;                         // offset: 0xc ordinal: 0x3
  struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo; // offset: 0x10 ordinal: 0x4
  ULONG HandleAttributes;                     // offset: 0x18 ordinal: 0x5
} _OB_DUPLICATE_OBJECT_STATE;

// 0x24 bytes (sizeof)
typedef struct _KALPC_HANDLE_DATA {
  ULONG ObjectType; // offset: 0x0 ordinal: 0x0
  ULONG Count;      // offset: 0x4 ordinal: 0x1
  struct _OB_DUPLICATE_OBJECT_STATE
      DuplicateContext; // offset: 0x8 ordinal: 0x2
} _KALPC_HANDLE_DATA;

// 0x50 bytes (sizeof)
typedef struct _KALPC_SECURITY_DATA {
  struct _ALPC_HANDLE_TABLE *HandleTable;          // offset: 0x0 ordinal: 0x0
  VOID *ContextHandle;                             // offset: 0x4 ordinal: 0x1
  struct _EPROCESS *OwningProcess;                 // offset: 0x8 ordinal: 0x2
  struct _ALPC_PORT *OwnerPort;                    // offset: 0xc ordinal: 0x3
  struct _SECURITY_CLIENT_CONTEXT DynamicSecurity; // offset: 0x10 ordinal: 0x4
  union __anon_2125 u1;                            // offset: 0x4c ordinal: 0x5
} _KALPC_SECURITY_DATA;

// 0x28 bytes (sizeof)
typedef struct _KALPC_MESSAGE_ATTRIBUTES {
  VOID *ClientContext;                       // offset: 0x0 ordinal: 0x0
  VOID *ServerContext;                       // offset: 0x4 ordinal: 0x1
  VOID *PortContext;                         // offset: 0x8 ordinal: 0x2
  VOID *CancelPortContext;                   // offset: 0xc ordinal: 0x3
  struct _KALPC_SECURITY_DATA *SecurityData; // offset: 0x10 ordinal: 0x4
  struct _KALPC_VIEW *View;                  // offset: 0x14 ordinal: 0x5
  struct _KALPC_HANDLE_DATA *HandleData;     // offset: 0x18 ordinal: 0x6
  union _KALPC_DIRECT_EVENT DirectEvent;     // offset: 0x1c ordinal: 0x7
  struct _KALPC_WORK_ON_BEHALF_DATA
      WorkOnBehalfData; // offset: 0x20 ordinal: 0x8
} _KALPC_MESSAGE_ATTRIBUTES;

// 0x98 bytes (sizeof)
typedef struct _KALPC_MESSAGE {
  struct _LIST_ENTRY Entry;       // offset: 0x0 ordinal: 0x0
  struct _ALPC_PORT *PortQueue;   // offset: 0x8 ordinal: 0x1
  struct _ALPC_PORT *OwnerPort;   // offset: 0xc ordinal: 0x2
  struct _ETHREAD *WaitingThread; // offset: 0x10 ordinal: 0x3
  union __anon_2107 u1;           // offset: 0x14 ordinal: 0x4
  LONG SequenceNo;                // offset: 0x18 ordinal: 0x5
  union {
    struct _EPROCESS *QuotaProcess; // offset: 0x1c ordinal: 0x6
    VOID *QuotaBlock;               // offset: 0x1c ordinal: 0x7
  };
  struct _ALPC_PORT *CancelSequencePort; // offset: 0x20 ordinal: 0x8
  struct _ALPC_PORT *CancelQueuePort;    // offset: 0x24 ordinal: 0x9
  LONG CancelSequenceNo;                 // offset: 0x28 ordinal: 0xa
  struct _LIST_ENTRY CancelListEntry;    // offset: 0x2c ordinal: 0xb
  struct _KALPC_RESERVE *Reserve;        // offset: 0x34 ordinal: 0xc
  struct _KALPC_MESSAGE_ATTRIBUTES
      MessageAttributes; // offset: 0x38 ordinal: 0xd
  VOID *DataUserVa;      // offset: 0x60 ordinal: 0xe
  struct _ALPC_COMMUNICATION_INFO
      *CommunicationInfo;            // offset: 0x64 ordinal: 0xf
  struct _ALPC_PORT *ConnectionPort; // offset: 0x68 ordinal: 0x10
  struct _ETHREAD *ServerThread;     // offset: 0x6c ordinal: 0x11
  VOID *WakeReference;               // offset: 0x70 ordinal: 0x12
  VOID *WakeReference2;              // offset: 0x74 ordinal: 0x13
  VOID *ExtensionBuffer;             // offset: 0x78 ordinal: 0x14
  ULONG ExtensionBufferSize;         // offset: 0x7c ordinal: 0x15
  struct _PORT_MESSAGE PortMessage;  // offset: 0x80 ordinal: 0x16
} _KALPC_MESSAGE;

// 0x24 bytes (sizeof)
typedef struct _ALPC_DISPATCH_CONTEXT {
  struct _ALPC_PORT *PortObject;  // offset: 0x0 ordinal: 0x0
  struct _KALPC_MESSAGE *Message; // offset: 0x4 ordinal: 0x1
  struct _ALPC_COMMUNICATION_INFO
      *CommunicationInfo;                // offset: 0x8 ordinal: 0x2
  struct _ETHREAD *TargetThread;         // offset: 0xc ordinal: 0x3
  struct _ALPC_PORT *TargetPort;         // offset: 0x10 ordinal: 0x4
  union _KALPC_DIRECT_EVENT DirectEvent; // offset: 0x14 ordinal: 0x5
  ULONG Flags;                           // offset: 0x18 ordinal: 0x6
  USHORT TotalLength;                    // offset: 0x1c ordinal: 0x7
  USHORT Type;                           // offset: 0x1e ordinal: 0x8
  USHORT DataInfoOffset;                 // offset: 0x20 ordinal: 0x9
  UCHAR SignalCompletion;                // offset: 0x22 ordinal: 0xa
  UCHAR PostedToCompletionList;          // offset: 0x23 ordinal: 0xb
} _ALPC_DISPATCH_CONTEXT;

// 0x14 bytes (sizeof)
typedef struct _KALPC_RESERVE {
  struct _ALPC_PORT *OwnerPort;           // offset: 0x0 ordinal: 0x0
  struct _ALPC_HANDLE_TABLE *HandleTable; // offset: 0x4 ordinal: 0x1
  VOID *Handle;                           // offset: 0x8 ordinal: 0x2
  struct _KALPC_MESSAGE *Message;         // offset: 0xc ordinal: 0x3
  LONG Active;                            // offset: 0x10 ordinal: 0x4
} _KALPC_RESERVE;

// 0x28 bytes (sizeof)
typedef struct _ALPC_COMMUNICATION_INFO {
  struct _ALPC_PORT *ConnectionPort;          // offset: 0x0 ordinal: 0x0
  struct _ALPC_PORT *ServerCommunicationPort; // offset: 0x4 ordinal: 0x1
  struct _ALPC_PORT *ClientCommunicationPort; // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY CommunicationList;       // offset: 0xc ordinal: 0x3
  struct _ALPC_HANDLE_TABLE HandleTable;      // offset: 0x14 ordinal: 0x4
  struct _KALPC_MESSAGE *CloseMessage;        // offset: 0x24 ordinal: 0x5
} _ALPC_COMMUNICATION_INFO;

// 0x58 bytes (sizeof)
typedef struct _ALPC_COMPLETION_LIST {
  struct _LIST_ENTRY Entry;                    // offset: 0x0 ordinal: 0x0
  struct _EPROCESS *OwnerProcess;              // offset: 0x8 ordinal: 0x1
  struct _EX_PUSH_LOCK CompletionListLock;     // offset: 0xc ordinal: 0x2
  struct _MDL *Mdl;                            // offset: 0x10 ordinal: 0x3
  VOID *UserVa;                                // offset: 0x14 ordinal: 0x4
  VOID *UserLimit;                             // offset: 0x18 ordinal: 0x5
  VOID *DataUserVa;                            // offset: 0x1c ordinal: 0x6
  VOID *SystemVa;                              // offset: 0x20 ordinal: 0x7
  ULONG TotalSize;                             // offset: 0x24 ordinal: 0x8
  struct _ALPC_COMPLETION_LIST_HEADER *Header; // offset: 0x28 ordinal: 0x9
  VOID *List;                                  // offset: 0x2c ordinal: 0xa
  ULONG ListSize;                              // offset: 0x30 ordinal: 0xb
  VOID *Bitmap;                                // offset: 0x34 ordinal: 0xc
  ULONG BitmapSize;                            // offset: 0x38 ordinal: 0xd
  VOID *Data;                                  // offset: 0x3c ordinal: 0xe
  ULONG DataSize;                              // offset: 0x40 ordinal: 0xf
  ULONG BitmapLimit;                           // offset: 0x44 ordinal: 0x10
  ULONG BitmapNextHint;                        // offset: 0x48 ordinal: 0x11
  ULONG ConcurrencyCount;                      // offset: 0x4c ordinal: 0x12
  ULONG AttributeFlags;                        // offset: 0x50 ordinal: 0x13
  ULONG AttributeSize;                         // offset: 0x54 ordinal: 0x14
} _ALPC_COMPLETION_LIST;

// 0x11c bytes (sizeof)
typedef struct _ALPC_PORT {
  struct _LIST_ENTRY PortListEntry; // offset: 0x0 ordinal: 0x0
  struct _ALPC_COMMUNICATION_INFO
      *CommunicationInfo;         // offset: 0x8 ordinal: 0x1
  struct _EPROCESS *OwnerProcess; // offset: 0xc ordinal: 0x2
  VOID *CompletionPort;           // offset: 0x10 ordinal: 0x3
  VOID *CompletionKey;            // offset: 0x14 ordinal: 0x4
  struct _ALPC_COMPLETION_PACKET_LOOKASIDE
      *CompletionPacketLookaside;                 // offset: 0x18 ordinal: 0x5
  VOID *PortContext;                              // offset: 0x1c ordinal: 0x6
  struct _SECURITY_CLIENT_CONTEXT StaticSecurity; // offset: 0x20 ordinal: 0x7
  struct _EX_PUSH_LOCK IncomingQueueLock;         // offset: 0x5c ordinal: 0x8
  struct _LIST_ENTRY MainQueue;                   // offset: 0x60 ordinal: 0x9
  struct _LIST_ENTRY LargeMessageQueue;           // offset: 0x68 ordinal: 0xa
  struct _EX_PUSH_LOCK PendingQueueLock;          // offset: 0x70 ordinal: 0xb
  struct _LIST_ENTRY PendingQueue;                // offset: 0x74 ordinal: 0xc
  struct _EX_PUSH_LOCK DirectQueueLock;           // offset: 0x7c ordinal: 0xd
  struct _LIST_ENTRY DirectQueue;                 // offset: 0x80 ordinal: 0xe
  struct _EX_PUSH_LOCK WaitQueueLock;             // offset: 0x88 ordinal: 0xf
  struct _LIST_ENTRY WaitQueue;                   // offset: 0x8c ordinal: 0x10
  union {
    struct _KSEMAPHORE *Semaphore; // offset: 0x94 ordinal: 0x11
    struct _KEVENT *DummyEvent;    // offset: 0x94 ordinal: 0x12
  };
  struct _ALPC_PORT_ATTRIBUTES PortAttributes;  // offset: 0x98 ordinal: 0x13
  struct _EX_PUSH_LOCK ResourceListLock;        // offset: 0xc4 ordinal: 0x14
  struct _LIST_ENTRY ResourceListHead;          // offset: 0xc8 ordinal: 0x15
  struct _EX_PUSH_LOCK PortObjectLock;          // offset: 0xd0 ordinal: 0x16
  struct _ALPC_COMPLETION_LIST *CompletionList; // offset: 0xd4 ordinal: 0x17
  struct _CALLBACK_OBJECT *CallbackObject;      // offset: 0xd8 ordinal: 0x18
  VOID *CallbackContext;                        // offset: 0xdc ordinal: 0x19
  struct _LIST_ENTRY CanceledQueue;             // offset: 0xe0 ordinal: 0x1a
  LONG SequenceNo;                              // offset: 0xe8 ordinal: 0x1b
  LONG ReferenceNo;                             // offset: 0xec ordinal: 0x1c
  struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
      *ReferenceNoWait;                  // offset: 0xf0 ordinal: 0x1d
  union __anon_2096 u1;                  // offset: 0xf4 ordinal: 0x1e
  struct _ALPC_PORT *TargetQueuePort;    // offset: 0xf8 ordinal: 0x1f
  struct _ALPC_PORT *TargetSequencePort; // offset: 0xfc ordinal: 0x20
  struct _KALPC_MESSAGE *CachedMessage;  // offset: 0x100 ordinal: 0x21
  ULONG MainQueueLength;                 // offset: 0x104 ordinal: 0x22
  ULONG LargeMessageQueueLength;         // offset: 0x108 ordinal: 0x23
  ULONG PendingQueueLength;              // offset: 0x10c ordinal: 0x24
  ULONG DirectQueueLength;               // offset: 0x110 ordinal: 0x25
  ULONG CanceledQueueLength;             // offset: 0x114 ordinal: 0x26
  ULONG WaitQueueLength;                 // offset: 0x118 ordinal: 0x27
} _ALPC_PORT;

// 0x28 bytes (sizeof)
typedef struct _KALPC_SECTION {
  VOID *SectionObject;                    // offset: 0x0 ordinal: 0x0
  ULONG Size;                             // offset: 0x4 ordinal: 0x1
  struct _ALPC_HANDLE_TABLE *HandleTable; // offset: 0x8 ordinal: 0x2
  VOID *SectionHandle;                    // offset: 0xc ordinal: 0x3
  struct _EPROCESS *OwnerProcess;         // offset: 0x10 ordinal: 0x4
  struct _ALPC_PORT *OwnerPort;           // offset: 0x14 ordinal: 0x5
  union __anon_2082 u1;                   // offset: 0x18 ordinal: 0x6
  ULONG NumberOfRegions;                  // offset: 0x1c ordinal: 0x7
  struct _LIST_ENTRY RegionListHead;      // offset: 0x20 ordinal: 0x8
} _KALPC_SECTION;

// 0x30 bytes (sizeof)
typedef struct _KALPC_REGION {
  struct _LIST_ENTRY RegionListEntry; // offset: 0x0 ordinal: 0x0
  struct _KALPC_SECTION *Section;     // offset: 0x8 ordinal: 0x1
  ULONG Offset;                       // offset: 0xc ordinal: 0x2
  ULONG Size;                         // offset: 0x10 ordinal: 0x3
  ULONG ViewSize;                     // offset: 0x14 ordinal: 0x4
  union __anon_2134 u1;               // offset: 0x18 ordinal: 0x5
  ULONG NumberOfViews;                // offset: 0x1c ordinal: 0x6
  struct _LIST_ENTRY ViewListHead;    // offset: 0x20 ordinal: 0x7
  struct _KALPC_VIEW *ReadOnlyView;   // offset: 0x28 ordinal: 0x8
  struct _KALPC_VIEW *ReadWriteView;  // offset: 0x2c ordinal: 0x9
} _KALPC_REGION;

// 0x34 bytes (sizeof)
typedef struct _KALPC_VIEW {
  struct _LIST_ENTRY ViewListEntry;        // offset: 0x0 ordinal: 0x0
  struct _KALPC_REGION *Region;            // offset: 0x8 ordinal: 0x1
  struct _ALPC_PORT *OwnerPort;            // offset: 0xc ordinal: 0x2
  struct _EPROCESS *OwnerProcess;          // offset: 0x10 ordinal: 0x3
  VOID *Address;                           // offset: 0x14 ordinal: 0x4
  ULONG Size;                              // offset: 0x18 ordinal: 0x5
  VOID *SecureViewHandle;                  // offset: 0x1c ordinal: 0x6
  VOID *WriteAccessHandle;                 // offset: 0x20 ordinal: 0x7
  union __anon_2127 u1;                    // offset: 0x24 ordinal: 0x8
  ULONG NumberOfOwnerMessages;             // offset: 0x28 ordinal: 0x9
  struct _LIST_ENTRY ProcessViewListEntry; // offset: 0x2c ordinal: 0xa
} _KALPC_VIEW;

// 0x40 bytes (sizeof)
typedef struct __anon_1949 {
  struct _SHARED_CACHE_MAP *SharedCacheMap;       // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER FileOffset;                // offset: 0x8 ordinal: 0x1
  struct _FILE_OBJECT *FileObject;                // offset: 0x10 ordinal: 0x2
  ULONG Length;                                   // offset: 0x14 ordinal: 0x3
  struct _SINGLE_LIST_ENTRY *PrefetchList;        // offset: 0x18 ordinal: 0x4
  ULONG PrefetchPagePriority;                     // offset: 0x1c ordinal: 0x5
  struct _MDL *Mdl;                               // offset: 0x20 ordinal: 0x6
  struct _IO_STATUS_BLOCK *IoStatusBlock;         // offset: 0x24 ordinal: 0x7
  struct _CC_ASYNC_READ_CONTEXT *CallbackContext; // offset: 0x28 ordinal: 0x8
  struct _EPROCESS *OriginatingProcess;           // offset: 0x2c ordinal: 0x9
  struct _ETHREAD *IoIssuerThread;                // offset: 0x30 ordinal: 0xa
  VOID *DiskIoAttribution;                        // offset: 0x34 ordinal: 0xb
  CHAR RequestorMode;                             // offset: 0x38 ordinal: 0xc
  ULONG NestingLevel;                             // offset: 0x3c ordinal: 0xd
} __anon_1949;

// 0x40 bytes (sizeof)
typedef union __anon_1954 {
  struct __anon_1944 Read;         // offset: 0x0 ordinal: 0x0
  struct __anon_1945 Write;        // offset: 0x0 ordinal: 0x1
  struct __anon_1946 Event;        // offset: 0x0 ordinal: 0x2
  struct __anon_1947 Notification; // offset: 0x0 ordinal: 0x3
  struct __anon_1948 LowPriWrite;  // offset: 0x0 ordinal: 0x4
  struct __anon_1949 AsyncRead;    // offset: 0x0 ordinal: 0x5
} __anon_1954;

// 0x50 bytes (sizeof)
typedef struct _WORK_QUEUE_ENTRY {
  struct _LIST_ENTRY WorkQueueLinks; // offset: 0x0 ordinal: 0x0
  union __anon_1954 Parameters;      // offset: 0x8 ordinal: 0x1
  UCHAR Function;                    // offset: 0x48 ordinal: 0x2
  struct _CC_PARTITION *Partition;   // offset: 0x4c ordinal: 0x3
} _WORK_QUEUE_ENTRY;

// 0x14 bytes (sizeof)
typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING {
  struct _LIST_ENTRY NotificationListHead; // offset: 0x0 ordinal: 0x0
  VOID *Port;                              // offset: 0x8 ordinal: 0x1
  ULONG Key;                               // offset: 0xc ordinal: 0x2
  struct _EPROCESS *BindingProcess;        // offset: 0x10 ordinal: 0x3
} _KRESOURCEMANAGER_COMPLETION_BINDING;

// 0x154 bytes (sizeof)
typedef struct _KRESOURCEMANAGER {
  struct _KEVENT NotificationAvailable;           // offset: 0x0 ordinal: 0x0
  ULONG cookie;                                   // offset: 0x10 ordinal: 0x1
  enum _KRESOURCEMANAGER_STATE State;             // offset: 0x14 ordinal: 0x2
  ULONG Flags;                                    // offset: 0x18 ordinal: 0x3
  struct _KMUTANT Mutex;                          // offset: 0x1c ordinal: 0x4
  struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink; // offset: 0x3c ordinal: 0x5
  struct _GUID RmId;                              // offset: 0x50 ordinal: 0x6
  struct _KQUEUE NotificationQueue;               // offset: 0x60 ordinal: 0x7
  struct _KMUTANT NotificationMutex;              // offset: 0x88 ordinal: 0x8
  struct _LIST_ENTRY EnlistmentHead;              // offset: 0xa8 ordinal: 0x9
  ULONG EnlistmentCount;                          // offset: 0xb0 ordinal: 0xa
  LONG(*NotificationRoutine)
  (struct _KENLISTMENT *, VOID *, VOID *, ULONG, union _LARGE_INTEGER *, ULONG,
   VOID *);                                  // offset: 0xb4 ordinal: 0xb
  VOID *Key;                                 // offset: 0xb8 ordinal: 0xc
  struct _LIST_ENTRY ProtocolListHead;       // offset: 0xbc ordinal: 0xd
  struct _LIST_ENTRY PendingPropReqListHead; // offset: 0xc4 ordinal: 0xe
  struct _LIST_ENTRY CRMListEntry;           // offset: 0xcc ordinal: 0xf
  struct _KTM *Tm;                           // offset: 0xd4 ordinal: 0x10
  struct _UNICODE_STRING Description;        // offset: 0xd8 ordinal: 0x11
  struct _KTMOBJECT_NAMESPACE Enlistments;   // offset: 0xe0 ordinal: 0x12
  struct _KRESOURCEMANAGER_COMPLETION_BINDING
      CompletionBinding; // offset: 0x140 ordinal: 0x13
} _KRESOURCEMANAGER;

// 0x238 bytes (sizeof)
typedef struct _KTM {
  ULONG cookie;                                   // offset: 0x0 ordinal: 0x0
  struct _KMUTANT Mutex;                          // offset: 0x4 ordinal: 0x1
  enum KTM_STATE State;                           // offset: 0x24 ordinal: 0x2
  struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink; // offset: 0x28 ordinal: 0x3
  struct _GUID TmIdentity;                        // offset: 0x3c ordinal: 0x4
  ULONG Flags;                                    // offset: 0x4c ordinal: 0x5
  ULONG VolatileFlags;                            // offset: 0x50 ordinal: 0x6
  struct _UNICODE_STRING LogFileName;             // offset: 0x54 ordinal: 0x7
  struct _FILE_OBJECT *LogFileObject;             // offset: 0x5c ordinal: 0x8
  VOID *MarshallingContext;                       // offset: 0x60 ordinal: 0x9
  VOID *LogManagementContext;                     // offset: 0x64 ordinal: 0xa
  struct _KTMOBJECT_NAMESPACE Transactions;       // offset: 0x68 ordinal: 0xb
  struct _KTMOBJECT_NAMESPACE ResourceManagers;   // offset: 0xc8 ordinal: 0xc
  struct _KMUTANT LsnOrderedMutex;                // offset: 0x128 ordinal: 0xd
  struct _LIST_ENTRY LsnOrderedList;              // offset: 0x148 ordinal: 0xe
  union _LARGE_INTEGER CommitVirtualClock;        // offset: 0x150 ordinal: 0xf
  struct _FAST_MUTEX CommitVirtualClockMutex;     // offset: 0x158 ordinal: 0x10
  union _CLS_LSN BaseLsn;                         // offset: 0x178 ordinal: 0x11
  union _CLS_LSN CurrentReadLsn;                  // offset: 0x180 ordinal: 0x12
  union _CLS_LSN LastRecoveredLsn;                // offset: 0x188 ordinal: 0x13
  VOID *TmRmHandle;                               // offset: 0x190 ordinal: 0x14
  struct _KRESOURCEMANAGER *TmRm;                 // offset: 0x194 ordinal: 0x15
  struct _KEVENT LogFullNotifyEvent;              // offset: 0x198 ordinal: 0x16
  struct _WORK_QUEUE_ITEM CheckpointWorkItem;     // offset: 0x1a8 ordinal: 0x17
  union _CLS_LSN CheckpointTargetLsn;             // offset: 0x1b8 ordinal: 0x18
  struct _WORK_QUEUE_ITEM
      LogFullCompletedWorkItem;            // offset: 0x1c0 ordinal: 0x19
  struct _ERESOURCE LogWriteResource;      // offset: 0x1d0 ordinal: 0x1a
  ULONG LogFlags;                          // offset: 0x208 ordinal: 0x1b
  LONG LogFullStatus;                      // offset: 0x20c ordinal: 0x1c
  LONG RecoveryStatus;                     // offset: 0x210 ordinal: 0x1d
  union _CLS_LSN LastCheckBaseLsn;         // offset: 0x218 ordinal: 0x1e
  struct _LIST_ENTRY RestartOrderedList;   // offset: 0x220 ordinal: 0x1f
  struct _WORK_QUEUE_ITEM OfflineWorkItem; // offset: 0x228 ordinal: 0x20
} _KTM;

// 0x168 bytes (sizeof)
typedef struct _KENLISTMENT {
  ULONG cookie;                                   // offset: 0x0 ordinal: 0x0
  struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink; // offset: 0x4 ordinal: 0x1
  struct _GUID EnlistmentId;                      // offset: 0x18 ordinal: 0x2
  struct _KMUTANT Mutex;                          // offset: 0x28 ordinal: 0x3
  struct _LIST_ENTRY NextSameTx;                  // offset: 0x48 ordinal: 0x4
  struct _LIST_ENTRY NextSameRm;                  // offset: 0x50 ordinal: 0x5
  struct _KRESOURCEMANAGER *ResourceManager;      // offset: 0x58 ordinal: 0x6
  struct _KTRANSACTION *Transaction;              // offset: 0x5c ordinal: 0x7
  enum _KENLISTMENT_STATE State;                  // offset: 0x60 ordinal: 0x8
  ULONG Flags;                                    // offset: 0x64 ordinal: 0x9
  ULONG NotificationMask;                         // offset: 0x68 ordinal: 0xa
  VOID *Key;                                      // offset: 0x6c ordinal: 0xb
  ULONG KeyRefCount;                              // offset: 0x70 ordinal: 0xc
  VOID *RecoveryInformation;                      // offset: 0x74 ordinal: 0xd
  ULONG RecoveryInformationLength;                // offset: 0x78 ordinal: 0xe
  VOID *DynamicNameInformation;                   // offset: 0x7c ordinal: 0xf
  ULONG DynamicNameInformationLength;             // offset: 0x80 ordinal: 0x10
  struct _KTMNOTIFICATION_PACKET
      *FinalNotification;                  // offset: 0x84 ordinal: 0x11
  struct _KENLISTMENT *SupSubEnlistment;   // offset: 0x88 ordinal: 0x12
  VOID *SupSubEnlHandle;                   // offset: 0x8c ordinal: 0x13
  VOID *SubordinateTxHandle;               // offset: 0x90 ordinal: 0x14
  struct _GUID CrmEnlistmentEnId;          // offset: 0x94 ordinal: 0x15
  struct _GUID CrmEnlistmentTmId;          // offset: 0xa4 ordinal: 0x16
  struct _GUID CrmEnlistmentRmId;          // offset: 0xb4 ordinal: 0x17
  ULONG NextHistory;                       // offset: 0xc4 ordinal: 0x18
  struct _KENLISTMENT_HISTORY History[20]; // offset: 0xc8 ordinal: 0x19
} _KENLISTMENT;

// 0x4c bytes (sizeof)
typedef struct _MMVAD {
  struct _MMVAD_SHORT Core;         // offset: 0x0 ordinal: 0x0
  union __anon_1558 u2;             // offset: 0x28 ordinal: 0x1
  struct _SUBSECTION *Subsection;   // offset: 0x2c ordinal: 0x2
  struct _MMPTE *FirstPrototypePte; // offset: 0x30 ordinal: 0x3
  struct _MMPTE *LastContiguousPte; // offset: 0x34 ordinal: 0x4
  struct _LIST_ENTRY ViewLinks;     // offset: 0x38 ordinal: 0x5
  struct _EPROCESS *VadsProcess;    // offset: 0x40 ordinal: 0x6
  union __anon_1559 u4;             // offset: 0x44 ordinal: 0x7
  struct _FILE_OBJECT *FileObject;  // offset: 0x48 ordinal: 0x8
} _MMVAD;

// 0x40 bytes (sizeof)
typedef struct _EPARTITION {
  VOID *MmPartition;                        // offset: 0x0 ordinal: 0x0
  VOID *CcPartition;                        // offset: 0x4 ordinal: 0x1
  VOID *ExPartition;                        // offset: 0x8 ordinal: 0x2
  LONG HardReferenceCount;                  // offset: 0xc ordinal: 0x3
  LONG OpenHandleCount;                     // offset: 0x10 ordinal: 0x4
  struct _LIST_ENTRY ActivePartitionLinks;  // offset: 0x14 ordinal: 0x5
  struct _EPARTITION *ParentPartition;      // offset: 0x1c ordinal: 0x6
  struct _WORK_QUEUE_ITEM TeardownWorkItem; // offset: 0x20 ordinal: 0x7
  struct _EX_PUSH_LOCK TeardownLock;        // offset: 0x30 ordinal: 0x8
  struct _EPROCESS *SystemProcess;          // offset: 0x34 ordinal: 0x9
  VOID *SystemProcessHandle;                // offset: 0x38 ordinal: 0xa
  union {
    ULONG PartitionFlags;    // offset: 0x3c ordinal: 0xb
    ULONG PairedWithJob : 1; // offset: 0x3c ordinal: 0xc
  };
} _EPARTITION;

// 0x60 bytes (sizeof)
typedef struct _MI_PARTITION_STORES {
  union __anon_1385 WriteAllStoreHintedPages;    // offset: 0x0 ordinal: 0x0
  ULONG VirtualPageFileNumber;                   // offset: 0x4 ordinal: 0x1
  ULONG Registered;                              // offset: 0x8 ordinal: 0x2
  ULONG ReadClusterSizeMax;                      // offset: 0xc ordinal: 0x3
  ULONG EvictFlushRequestCount;                  // offset: 0x10 ordinal: 0x4
  ULONG ModifiedWriteDisableCount;               // offset: 0x14 ordinal: 0x5
  ULONG WriteIssueFailures;                      // offset: 0x18 ordinal: 0x6
  ULONG WritesOutstanding;                       // offset: 0x1c ordinal: 0x7
  LONG EvictFlushLock;                           // offset: 0x20 ordinal: 0x8
  struct _ETHREAD *EvictionThread;               // offset: 0x24 ordinal: 0x9
  struct _KEVENT EvictEvent;                     // offset: 0x28 ordinal: 0xa
  union _SLIST_HEADER WriteSupportSListHead;     // offset: 0x38 ordinal: 0xb
  struct _KEVENT EvictFlushCompleteEvent;        // offset: 0x40 ordinal: 0xc
  struct _RTL_BITMAP *ModifiedWriteFailedBitmap; // offset: 0x50 ordinal: 0xd
  struct _EPROCESS *StoreProcess;                // offset: 0x54 ordinal: 0xe
  ULONG DeleteStoredPages;                       // offset: 0x58 ordinal: 0xf
} _MI_PARTITION_STORES;

// 0x38 bytes (sizeof)
typedef struct _MM_PAGE_ACCESS_INFO_HEADER {
  struct _SINGLE_LIST_ENTRY Link; // offset: 0x0 ordinal: 0x0
  enum _MM_PAGE_ACCESS_TYPE Type; // offset: 0x4 ordinal: 0x1
  union {
    ULONG EmptySequenceNumber; // offset: 0x8 ordinal: 0x2
    ULONG CurrentFileIndex;    // offset: 0x8 ordinal: 0x3
  };
  ULONGLONG CreateTime; // offset: 0x10 ordinal: 0x4
  union {
    ULONGLONG EmptyTime;                    // offset: 0x18 ordinal: 0x5
    struct _MM_PAGE_ACCESS_INFO *TempEntry; // offset: 0x18 ordinal: 0x6
  };
  struct _MM_PAGE_ACCESS_INFO *PageEntry; // offset: 0x20 ordinal: 0x7
  ULONG *FileEntry;                       // offset: 0x24 ordinal: 0x8
  ULONG *FirstFileEntry;                  // offset: 0x28 ordinal: 0x9
  struct _EPROCESS *Process;              // offset: 0x2c ordinal: 0xa
  ULONG SessionId;                        // offset: 0x30 ordinal: 0xb
  ULONG *PageFrameEntry;                  // offset: 0x20 ordinal: 0xc
  ULONG *LastPageFrameEntry;              // offset: 0x24 ordinal: 0xd
} _MM_PAGE_ACCESS_INFO_HEADER;

// 0x48 bytes (sizeof)
typedef struct _MI_STANDBY_STATE {
  ULONG FirstDecayPage;                  // offset: 0x0 ordinal: 0x0
  union _SLIST_HEADER PfnDecayFreeSList; // offset: 0x8 ordinal: 0x1
  struct _MM_PAGE_ACCESS_INFO_HEADER
      *PfnRepurposeLog;                  // offset: 0x10 ordinal: 0x2
  struct _KDPC AllocatePfnRepurposeDpc;  // offset: 0x14 ordinal: 0x3
  union _SLIST_HEADER PageHeatListSlist; // offset: 0x38 ordinal: 0x4
  LONG PageHeatListDisableAllocation;    // offset: 0x40 ordinal: 0x5
} _MI_STANDBY_STATE;

// 0x80 bytes (sizeof)
typedef struct _MI_ACCESS_LOG_STATE {
  struct _MM_PAGE_ACCESS_INFO_HEADER *CcAccessLog; // offset: 0x0 ordinal: 0x0
  struct _WORK_QUEUE_ITEM DisableAccessLogging;    // offset: 0x4 ordinal: 0x1
  ULONG Enabled;                                   // offset: 0x14 ordinal: 0x2
  ULONG MinLoggingPriority;                        // offset: 0x18 ordinal: 0x3
  ULONG AccessLoggingLock;                         // offset: 0x40 ordinal: 0x4
} _MI_ACCESS_LOG_STATE;

// 0x58 bytes (sizeof)
typedef struct _ETW_REALTIME_CONSUMER {
  struct _LIST_ENTRY Links;                      // offset: 0x0 ordinal: 0x0
  VOID *ProcessHandle;                           // offset: 0x8 ordinal: 0x1
  struct _EPROCESS *ProcessObject;               // offset: 0xc ordinal: 0x2
  VOID *NextNotDelivered;                        // offset: 0x10 ordinal: 0x3
  VOID *RealtimeConnectContext;                  // offset: 0x14 ordinal: 0x4
  struct _KEVENT *DisconnectEvent;               // offset: 0x18 ordinal: 0x5
  struct _KEVENT *DataAvailableEvent;            // offset: 0x1c ordinal: 0x6
  ULONG *UserBufferCount;                        // offset: 0x20 ordinal: 0x7
  struct _SINGLE_LIST_ENTRY *UserBufferListHead; // offset: 0x24 ordinal: 0x8
  ULONG BuffersLost;                             // offset: 0x28 ordinal: 0x9
  ULONG EmptyBuffersCount;                       // offset: 0x2c ordinal: 0xa
  USHORT LoggerId;                               // offset: 0x30 ordinal: 0xb
  union {
    UCHAR Flags;                 // offset: 0x32 ordinal: 0xc
    UCHAR ShutDownRequested : 1; // offset: 0x32 ordinal: 0xd
  };
  UCHAR NewBuffersLost : 1;                     // offset: 0x32 ordinal: 0xe
  UCHAR Disconnected : 1;                       // offset: 0x32 ordinal: 0xf
  UCHAR Notified : 1;                           // offset: 0x32 ordinal: 0x10
  struct _RTL_BITMAP ReservedBufferSpaceBitMap; // offset: 0x34 ordinal: 0x11
  UCHAR *ReservedBufferSpace;                   // offset: 0x3c ordinal: 0x12
  ULONG ReservedBufferSpaceSize;                // offset: 0x40 ordinal: 0x13
  ULONG UserPagesAllocated;                     // offset: 0x44 ordinal: 0x14
  ULONG UserPagesReused;                        // offset: 0x48 ordinal: 0x15
  ULONG *EventsLostCount;                       // offset: 0x4c ordinal: 0x16
  ULONG *BuffersLostCount;                      // offset: 0x50 ordinal: 0x17
  struct _ETW_SILODRIVERSTATE *SiloState;       // offset: 0x54 ordinal: 0x18
} _ETW_REALTIME_CONSUMER;

// 0x390 bytes (sizeof)
typedef struct _WMI_LOGGER_CONTEXT {
  ULONG LoggerId;                         // offset: 0x0 ordinal: 0x0
  ULONG BufferSize;                       // offset: 0x4 ordinal: 0x1
  ULONG MaximumEventSize;                 // offset: 0x8 ordinal: 0x2
  ULONG LoggerMode;                       // offset: 0xc ordinal: 0x3
  LONG AcceptNewEvents;                   // offset: 0x10 ordinal: 0x4
  ULONG EventMarker[1];                   // offset: 0x14 ordinal: 0x5
  ULONG ErrorMarker;                      // offset: 0x18 ordinal: 0x6
  ULONG SizeMask;                         // offset: 0x1c ordinal: 0x7
  LONGLONG (*GetCpuClock)();              // offset: 0x20 ordinal: 0x8
  struct _ETHREAD *LoggerThread;          // offset: 0x24 ordinal: 0x9
  LONG LoggerStatus;                      // offset: 0x28 ordinal: 0xa
  ULONG FailureReason;                    // offset: 0x2c ordinal: 0xb
  struct _ETW_BUFFER_QUEUE BufferQueue;   // offset: 0x30 ordinal: 0xc
  struct _ETW_BUFFER_QUEUE OverflowQueue; // offset: 0x38 ordinal: 0xd
  struct _LIST_ENTRY GlobalList;          // offset: 0x40 ordinal: 0xe
  struct _LIST_ENTRY DebugIdTrackingList; // offset: 0x48 ordinal: 0xf
  struct _ETW_DECODE_CONTROL_ENTRY
      *DecodeControlList;   // offset: 0x50 ordinal: 0x10
  ULONG DecodeControlCount; // offset: 0x54 ordinal: 0x11
  union {
    struct _WMI_BUFFER_HEADER *BatchedBufferList; // offset: 0x58 ordinal: 0x12
    struct _EX_FAST_REF CurrentBuffer;            // offset: 0x58 ordinal: 0x13
  };
  struct _UNICODE_STRING LoggerName;     // offset: 0x5c ordinal: 0x14
  struct _UNICODE_STRING LogFileName;    // offset: 0x64 ordinal: 0x15
  struct _UNICODE_STRING LogFilePattern; // offset: 0x6c ordinal: 0x16
  struct _UNICODE_STRING NewLogFileName; // offset: 0x74 ordinal: 0x17
  ULONG ClockType;                       // offset: 0x7c ordinal: 0x18
  ULONG LastFlushedBuffer;               // offset: 0x80 ordinal: 0x19
  ULONG FlushTimer;                      // offset: 0x84 ordinal: 0x1a
  ULONG FlushThreshold;                  // offset: 0x88 ordinal: 0x1b
  union _LARGE_INTEGER ByteOffset;       // offset: 0x90 ordinal: 0x1c
  ULONG MinimumBuffers;                  // offset: 0x98 ordinal: 0x1d
  LONG BuffersAvailable;                 // offset: 0x9c ordinal: 0x1e
  LONG NumberOfBuffers;                  // offset: 0xa0 ordinal: 0x1f
  ULONG MaximumBuffers;                  // offset: 0xa4 ordinal: 0x20
  ULONG EventsLost;                      // offset: 0xa8 ordinal: 0x21
  LONG PeakBuffersCount;                 // offset: 0xac ordinal: 0x22
  ULONG BuffersWritten;                  // offset: 0xb0 ordinal: 0x23
  ULONG LogBuffersLost;                  // offset: 0xb4 ordinal: 0x24
  ULONG RealTimeBuffersDelivered;        // offset: 0xb8 ordinal: 0x25
  ULONG RealTimeBuffersLost;             // offset: 0xbc ordinal: 0x26
  LONG *SequencePtr;                     // offset: 0xc0 ordinal: 0x27
  ULONG LocalSequence;                   // offset: 0xc4 ordinal: 0x28
  struct _GUID InstanceGuid;             // offset: 0xc8 ordinal: 0x29
  ULONG MaximumFileSize;                 // offset: 0xd8 ordinal: 0x2a
  LONG FileCounter;                      // offset: 0xdc ordinal: 0x2b
  enum _POOL_TYPE PoolType;              // offset: 0xe0 ordinal: 0x2c
  struct _ETW_REF_CLOCK ReferenceTime;   // offset: 0xe8 ordinal: 0x2d
  LONG CollectionOn;                     // offset: 0xf8 ordinal: 0x2e
  ULONG ProviderInfoSize;                // offset: 0xfc ordinal: 0x2f
  struct _LIST_ENTRY Consumers;          // offset: 0x100 ordinal: 0x30
  ULONG NumConsumers;                    // offset: 0x108 ordinal: 0x31
  struct _ETW_REALTIME_CONSUMER
      *TransitionConsumer;                     // offset: 0x10c ordinal: 0x32
  VOID *RealtimeLogfileHandle;                 // offset: 0x110 ordinal: 0x33
  struct _UNICODE_STRING RealtimeLogfileName;  // offset: 0x114 ordinal: 0x34
  union _LARGE_INTEGER RealtimeWriteOffset;    // offset: 0x120 ordinal: 0x35
  union _LARGE_INTEGER RealtimeReadOffset;     // offset: 0x128 ordinal: 0x36
  union _LARGE_INTEGER RealtimeLogfileSize;    // offset: 0x130 ordinal: 0x37
  ULONGLONG RealtimeLogfileUsage;              // offset: 0x138 ordinal: 0x38
  ULONGLONG RealtimeMaximumFileSize;           // offset: 0x140 ordinal: 0x39
  ULONG RealtimeBuffersSaved;                  // offset: 0x148 ordinal: 0x3a
  struct _ETW_REF_CLOCK RealtimeReferenceTime; // offset: 0x150 ordinal: 0x3b
  enum _ETW_RT_EVENT_LOSS NewRTEventsLost;     // offset: 0x160 ordinal: 0x3c
  struct _KEVENT LoggerEvent;                  // offset: 0x164 ordinal: 0x3d
  struct _KEVENT FlushEvent;                   // offset: 0x174 ordinal: 0x3e
  struct _KTIMER FlushTimeOutTimer;            // offset: 0x188 ordinal: 0x3f
  struct _KDPC LoggerDpc;                      // offset: 0x1b0 ordinal: 0x40
  struct _KMUTANT LoggerMutex;                 // offset: 0x1d0 ordinal: 0x41
  struct _EX_PUSH_LOCK LoggerLock;             // offset: 0x1f0 ordinal: 0x42
  union {
    ULONG BufferListSpinLock;                // offset: 0x1f4 ordinal: 0x43
    struct _EX_PUSH_LOCK BufferListPushLock; // offset: 0x1f4 ordinal: 0x44
  };
  struct _SECURITY_CLIENT_CONTEXT
      ClientSecurityContext; // offset: 0x1f8 ordinal: 0x45
  struct _TOKEN_ACCESS_INFORMATION
      *TokenAccessInformation;            // offset: 0x234 ordinal: 0x46
  struct _EX_FAST_REF SecurityDescriptor; // offset: 0x238 ordinal: 0x47
  union _LARGE_INTEGER StartTime;         // offset: 0x240 ordinal: 0x48
  VOID *LogFileHandle;                    // offset: 0x248 ordinal: 0x49
  LONGLONG BufferSequenceNumber;          // offset: 0x250 ordinal: 0x4a
  union {
    ULONG Flags;          // offset: 0x258 ordinal: 0x4b
    ULONG Persistent : 1; // offset: 0x258 ordinal: 0x4c
  };
  ULONG AutoLogger : 1;                  // offset: 0x258 ordinal: 0x4d
  ULONG FsReady : 1;                     // offset: 0x258 ordinal: 0x4e
  ULONG RealTime : 1;                    // offset: 0x258 ordinal: 0x4f
  ULONG Wow : 1;                         // offset: 0x258 ordinal: 0x50
  ULONG KernelTrace : 1;                 // offset: 0x258 ordinal: 0x51
  ULONG NoMoreEnable : 1;                // offset: 0x258 ordinal: 0x52
  ULONG StackTracing : 1;                // offset: 0x258 ordinal: 0x53
  ULONG ErrorLogged : 1;                 // offset: 0x258 ordinal: 0x54
  ULONG RealtimeLoggerContextFreed : 1;  // offset: 0x258 ordinal: 0x55
  ULONG PebsTracing : 1;                 // offset: 0x258 ordinal: 0x56
  ULONG PmcCounters : 1;                 // offset: 0x258 ordinal: 0x57
  ULONG PageAlignBuffers : 1;            // offset: 0x258 ordinal: 0x58
  ULONG StackLookasideListAllocated : 1; // offset: 0x258 ordinal: 0x59
  ULONG SecurityTrace : 1;               // offset: 0x258 ordinal: 0x5a
  ULONG LastBranchTracing : 1;           // offset: 0x258 ordinal: 0x5b
  ULONG SystemLoggerIndex : 8;           // offset: 0x258 ordinal: 0x5c
  ULONG StackCaching : 1;                // offset: 0x258 ordinal: 0x5d
  ULONG ProviderTracking : 1;            // offset: 0x258 ordinal: 0x5e
  ULONG ProcessorTrace : 1;              // offset: 0x258 ordinal: 0x5f
  ULONG QpcDeltaTracking : 1;            // offset: 0x258 ordinal: 0x60
  ULONG MarkerBufferSaved : 1;           // offset: 0x258 ordinal: 0x61
  ULONG SpareFlags2 : 3;                 // offset: 0x258 ordinal: 0x62
  union {
    ULONG RequestFlag;           // offset: 0x25c ordinal: 0x63
    ULONG DbgRequestNewFile : 1; // offset: 0x25c ordinal: 0x64
  };
  ULONG DbgRequestUpdateFile : 1;                // offset: 0x25c ordinal: 0x65
  ULONG DbgRequestFlush : 1;                     // offset: 0x25c ordinal: 0x66
  ULONG DbgRequestDisableRealtime : 1;           // offset: 0x25c ordinal: 0x67
  ULONG DbgRequestDisconnectConsumer : 1;        // offset: 0x25c ordinal: 0x68
  ULONG DbgRequestConnectConsumer : 1;           // offset: 0x25c ordinal: 0x69
  ULONG DbgRequestNotifyConsumer : 1;            // offset: 0x25c ordinal: 0x6a
  ULONG DbgRequestUpdateHeader : 1;              // offset: 0x25c ordinal: 0x6b
  ULONG DbgRequestDeferredFlush : 1;             // offset: 0x25c ordinal: 0x6c
  ULONG DbgRequestDeferredFlushTimer : 1;        // offset: 0x25c ordinal: 0x6d
  ULONG DbgRequestFlushTimer : 1;                // offset: 0x25c ordinal: 0x6e
  ULONG DbgRequestUpdateDebugger : 1;            // offset: 0x25c ordinal: 0x6f
  ULONG DbgSpareRequestFlags : 20;               // offset: 0x25c ordinal: 0x70
  struct _ETW_STACK_TRACE_BLOCK StackTraceBlock; // offset: 0x260 ordinal: 0x71
  struct _RTL_BITMAP HookIdMap;                  // offset: 0x2b0 ordinal: 0x72
  struct _ETW_STACK_CACHE *StackCache;           // offset: 0x2b8 ordinal: 0x73
  struct _ETW_PMC_SUPPORT *PmcData;              // offset: 0x2bc ordinal: 0x74
  struct _ETW_LBR_SUPPORT *LbrData;              // offset: 0x2c0 ordinal: 0x75
  struct _ETW_IPT_SUPPORT *IptData;              // offset: 0x2c4 ordinal: 0x76
  struct _LIST_ENTRY BinaryTrackingList;         // offset: 0x2c8 ordinal: 0x77
  struct _WMI_BUFFER_HEADER **ScratchArray;      // offset: 0x2d0 ordinal: 0x78
  struct _DISALLOWED_GUIDS DisallowedGuids;      // offset: 0x2d4 ordinal: 0x79
  LONGLONG RelativeTimerDueTime;                 // offset: 0x2e0 ordinal: 0x7a
  struct _PERIODIC_CAPTURE_STATE_GUIDS
      PeriodicCaptureStateGuids;               // offset: 0x2e8 ordinal: 0x7b
  struct _EX_TIMER *PeriodicCaptureStateTimer; // offset: 0x2f0 ordinal: 0x7c
  enum _ETW_PERIODIC_TIMER_STATE
      PeriodicCaptureStateTimerState; // offset: 0x2f4 ordinal: 0x7d
  struct _ETW_SOFT_RESTART_CONTEXT
      *SoftRestartContext;                      // offset: 0x2f8 ordinal: 0x7e
  struct _ETW_SILODRIVERSTATE *SiloState;       // offset: 0x2fc ordinal: 0x7f
  struct _WORK_QUEUE_ITEM CompressionWorkItem;  // offset: 0x300 ordinal: 0x80
  LONG CompressionWorkItemState;                // offset: 0x310 ordinal: 0x81
  struct _EX_PUSH_LOCK CompressionLock;         // offset: 0x314 ordinal: 0x82
  struct _WMI_BUFFER_HEADER *CompressionTarget; // offset: 0x318 ordinal: 0x83
  VOID *CompressionWorkspace;                   // offset: 0x31c ordinal: 0x84
  LONG CompressionOn;                           // offset: 0x320 ordinal: 0x85
  ULONG CompressionRatioGuess;                  // offset: 0x324 ordinal: 0x86
  ULONG PartialBufferCompressionLevel;          // offset: 0x328 ordinal: 0x87
  enum ETW_COMPRESSION_RESUMPTION_MODE
      CompressionResumptionMode;               // offset: 0x32c ordinal: 0x88
  struct _SINGLE_LIST_ENTRY PlaceholderList;   // offset: 0x330 ordinal: 0x89
  struct _KDPC CompressionDpc;                 // offset: 0x334 ordinal: 0x8a
  union _LARGE_INTEGER LastBufferSwitchTime;   // offset: 0x358 ordinal: 0x8b
  union _LARGE_INTEGER BufferWriteDuration;    // offset: 0x360 ordinal: 0x8c
  union _LARGE_INTEGER BufferCompressDuration; // offset: 0x368 ordinal: 0x8d
  LONGLONG ReferenceQpcDelta;                  // offset: 0x370 ordinal: 0x8e
  struct _ETW_EVENT_CALLBACK_CONTEXT
      *CallbackContext;                          // offset: 0x378 ordinal: 0x8f
  union _LARGE_INTEGER *LastDroppedTime;         // offset: 0x37c ordinal: 0x90
  union _LARGE_INTEGER *FlushingLastDroppedTime; // offset: 0x380 ordinal: 0x91
  LONGLONG FlushingSequenceNumber;               // offset: 0x388 ordinal: 0x92
} _WMI_LOGGER_CONTEXT;

// 0x10 bytes (sizeof)
typedef struct _DBGK_SILOSTATE {
  struct _EX_PUSH_LOCK ErrorPortLock;       // offset: 0x0 ordinal: 0x0
  struct _DBGKP_ERROR_PORT *ErrorPort;      // offset: 0x4 ordinal: 0x1
  struct _EPROCESS *ErrorProcess;           // offset: 0x8 ordinal: 0x2
  struct _KEVENT *ErrorPortRegisteredEvent; // offset: 0xc ordinal: 0x3
} _DBGK_SILOSTATE;

// 0x2a0 bytes (sizeof)
typedef struct _ESERVERSILO_GLOBALS {
  struct _OBP_SILODRIVERSTATE ObSiloState; // offset: 0x0 ordinal: 0x0
  struct _SEP_SILOSTATE SeSiloState;       // offset: 0x1a4 ordinal: 0x1
  struct _SEP_RM_LSA_CONNECTION_STATE
      SeRmSiloState;                            // offset: 0x1c0 ordinal: 0x2
  struct _ETW_SILODRIVERSTATE *EtwSiloState;    // offset: 0x1f0 ordinal: 0x3
  struct _EPROCESS *MiSessionLeaderProcess;     // offset: 0x1f4 ordinal: 0x4
  struct _EPROCESS *ExpDefaultErrorPortProcess; // offset: 0x1f8 ordinal: 0x5
  VOID *ExpDefaultErrorPort;                    // offset: 0x1fc ordinal: 0x6
  ULONG HardErrorState;                         // offset: 0x200 ordinal: 0x7
  struct _WNF_SILODRIVERSTATE WnfSiloState;     // offset: 0x208 ordinal: 0x8
  struct _DBGK_SILOSTATE DbgkSiloState;         // offset: 0x238 ordinal: 0x9
  struct _UNICODE_STRING
      PsProtectedCurrentDirectory;               // offset: 0x248 ordinal: 0xa
  struct _UNICODE_STRING PsProtectedEnvironment; // offset: 0x250 ordinal: 0xb
  VOID *ApiSetSection;                           // offset: 0x258 ordinal: 0xc
  VOID *ApiSetSchema;                            // offset: 0x25c ordinal: 0xd
  UCHAR OneCoreForwardersEnabled;                // offset: 0x260 ordinal: 0xe
  struct _UNICODE_STRING NtSystemRoot;           // offset: 0x264 ordinal: 0xf
  struct _UNICODE_STRING SiloRootDirectoryName;  // offset: 0x26c ordinal: 0x10
  struct _PSP_STORAGE *Storage;                  // offset: 0x274 ordinal: 0x11
  enum _SERVERSILO_STATE State;                  // offset: 0x278 ordinal: 0x12
  LONG ExitStatus;                               // offset: 0x27c ordinal: 0x13
  struct _KEVENT *DeleteEvent;                   // offset: 0x280 ordinal: 0x14
  struct _SILO_USER_SHARED_DATA *UserSharedData; // offset: 0x284 ordinal: 0x15
  VOID *UserSharedSection;                       // offset: 0x288 ordinal: 0x16
  struct _WORK_QUEUE_ITEM TerminateWorkItem;     // offset: 0x28c ordinal: 0x17
} _ESERVERSILO_GLOBALS;

// 0x80 bytes (sizeof)
typedef struct _HANDLE_TABLE {
  ULONG NextHandleNeedingPool;        // offset: 0x0 ordinal: 0x0
  LONG ExtraInfoPages;                // offset: 0x4 ordinal: 0x1
  ULONG TableCode;                    // offset: 0x8 ordinal: 0x2
  struct _EPROCESS *QuotaProcess;     // offset: 0xc ordinal: 0x3
  struct _LIST_ENTRY HandleTableList; // offset: 0x10 ordinal: 0x4
  ULONG UniqueProcessId;              // offset: 0x18 ordinal: 0x5
  union {
    ULONG Flags;          // offset: 0x1c ordinal: 0x6
    UCHAR StrictFIFO : 1; // offset: 0x1c ordinal: 0x7
  };
  UCHAR EnableHandleExceptions : 1;               // offset: 0x1c ordinal: 0x8
  UCHAR Rundown : 1;                              // offset: 0x1c ordinal: 0x9
  UCHAR Duplicated : 1;                           // offset: 0x1c ordinal: 0xa
  UCHAR RaiseUMExceptionOnInvalidHandleClose : 1; // offset: 0x1c ordinal: 0xb
  struct _EX_PUSH_LOCK HandleContentionEvent;     // offset: 0x20 ordinal: 0xc
  struct _EX_PUSH_LOCK HandleTableLock;           // offset: 0x24 ordinal: 0xd
  union {
    struct _HANDLE_TABLE_FREE_LIST FreeLists[1]; // offset: 0x40 ordinal: 0xe
    UCHAR ActualEntry[20];                       // offset: 0x40 ordinal: 0xf
  };
  struct _HANDLE_TRACE_DEBUG_INFO *DebugInfo; // offset: 0x54 ordinal: 0x10
} _HANDLE_TABLE;

typedef UCHAR (*__anon_707)(struct _FILE_OBJECT *, struct _EPROCESS *,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_706)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            union _LARGE_INTEGER *, struct _EPROCESS *, ULONG,
                            struct _IO_STATUS_BLOCK *, struct _DEVICE_OBJECT *);

typedef UCHAR (*__anon_705)(struct _FILE_OBJECT *, union _LARGE_INTEGER *,
                            union _LARGE_INTEGER *, struct _EPROCESS *, ULONG,
                            UCHAR, UCHAR, struct _IO_STATUS_BLOCK *,
                            struct _DEVICE_OBJECT *);

// 0x70 bytes (sizeof)
typedef struct _FAST_IO_DISPATCH {
  ULONG SizeOfFastIoDispatch; // offset: 0x0 ordinal: 0x0
  UCHAR(*FastIoCheckIfPossible)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, UCHAR, ULONG, UCHAR,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x4 ordinal: 0x1
  UCHAR(*FastIoRead)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, UCHAR, ULONG, VOID *,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x8 ordinal: 0x2
  UCHAR(*FastIoWrite)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, UCHAR, ULONG, VOID *,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0xc ordinal: 0x3
  UCHAR(*FastIoQueryBasicInfo)
  (struct _FILE_OBJECT *, UCHAR, struct _FILE_BASIC_INFORMATION *,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x10 ordinal: 0x4
  UCHAR(*FastIoQueryStandardInfo)
  (struct _FILE_OBJECT *, UCHAR, struct _FILE_STANDARD_INFORMATION *,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x14 ordinal: 0x5
  UCHAR(*FastIoLock)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, union _LARGE_INTEGER *,
   struct _EPROCESS *, ULONG, UCHAR, UCHAR, struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x18 ordinal: 0x6
  UCHAR(*FastIoUnlockSingle)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, union _LARGE_INTEGER *,
   struct _EPROCESS *, ULONG, struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x1c ordinal: 0x7
  UCHAR(*FastIoUnlockAll)
  (struct _FILE_OBJECT *, struct _EPROCESS *, struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x20 ordinal: 0x8
  UCHAR(*FastIoUnlockAllByKey)
  (struct _FILE_OBJECT *, VOID *, ULONG, struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x24 ordinal: 0x9
  UCHAR(*FastIoDeviceControl)
  (struct _FILE_OBJECT *, UCHAR, VOID *, ULONG, VOID *, ULONG, ULONG,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x28 ordinal: 0xa
  VOID(*AcquireFileForNtCreateSection)
  (struct _FILE_OBJECT *); // offset: 0x2c ordinal: 0xb
  VOID(*ReleaseFileForNtCreateSection)
  (struct _FILE_OBJECT *); // offset: 0x30 ordinal: 0xc
  VOID(*FastIoDetachDevice)
  (struct _DEVICE_OBJECT *,
   struct _DEVICE_OBJECT *); // offset: 0x34 ordinal: 0xd
  UCHAR(*FastIoQueryNetworkOpenInfo)
  (struct _FILE_OBJECT *, UCHAR, struct _FILE_NETWORK_OPEN_INFORMATION *,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x38 ordinal: 0xe
  LONG(*AcquireForModWrite)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, struct _ERESOURCE **,
   struct _DEVICE_OBJECT *); // offset: 0x3c ordinal: 0xf
  UCHAR(*MdlRead)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, ULONG, struct _MDL **,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x40 ordinal: 0x10
  UCHAR(*MdlReadComplete)
  (struct _FILE_OBJECT *, struct _MDL *,
   struct _DEVICE_OBJECT *); // offset: 0x44 ordinal: 0x11
  UCHAR(*PrepareMdlWrite)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, ULONG, struct _MDL **,
   struct _IO_STATUS_BLOCK *,
   struct _DEVICE_OBJECT *); // offset: 0x48 ordinal: 0x12
  UCHAR(*MdlWriteComplete)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, struct _MDL *,
   struct _DEVICE_OBJECT *); // offset: 0x4c ordinal: 0x13
  UCHAR(*FastIoReadCompressed)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, ULONG, VOID *,
   struct _MDL **, struct _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *,
   ULONG, struct _DEVICE_OBJECT *); // offset: 0x50 ordinal: 0x14
  UCHAR(*FastIoWriteCompressed)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, ULONG, ULONG, VOID *,
   struct _MDL **, struct _IO_STATUS_BLOCK *, struct _COMPRESSED_DATA_INFO *,
   ULONG, struct _DEVICE_OBJECT *); // offset: 0x54 ordinal: 0x15
  UCHAR(*MdlReadCompleteCompressed)
  (struct _FILE_OBJECT *, struct _MDL *,
   struct _DEVICE_OBJECT *); // offset: 0x58 ordinal: 0x16
  UCHAR(*MdlWriteCompleteCompressed)
  (struct _FILE_OBJECT *, union _LARGE_INTEGER *, struct _MDL *,
   struct _DEVICE_OBJECT *); // offset: 0x5c ordinal: 0x17
  UCHAR(*FastIoQueryOpen)
  (struct _IRP *, struct _FILE_NETWORK_OPEN_INFORMATION *,
   struct _DEVICE_OBJECT *); // offset: 0x60 ordinal: 0x18
  LONG(*ReleaseForModWrite)
  (struct _FILE_OBJECT *, struct _ERESOURCE *,
   struct _DEVICE_OBJECT *); // offset: 0x64 ordinal: 0x19
  LONG(*AcquireForCcFlush)
  (struct _FILE_OBJECT *,
   struct _DEVICE_OBJECT *); // offset: 0x68 ordinal: 0x1a
  LONG(*ReleaseForCcFlush)
  (struct _FILE_OBJECT *,
   struct _DEVICE_OBJECT *); // offset: 0x6c ordinal: 0x1b
} _FAST_IO_DISPATCH;

// 0xa8 bytes (sizeof)
typedef struct _DRIVER_OBJECT {
  SHORT Type;                                // offset: 0x0 ordinal: 0x0
  SHORT Size;                                // offset: 0x2 ordinal: 0x1
  struct _DEVICE_OBJECT *DeviceObject;       // offset: 0x4 ordinal: 0x2
  ULONG Flags;                               // offset: 0x8 ordinal: 0x3
  VOID *DriverStart;                         // offset: 0xc ordinal: 0x4
  ULONG DriverSize;                          // offset: 0x10 ordinal: 0x5
  VOID *DriverSection;                       // offset: 0x14 ordinal: 0x6
  struct _DRIVER_EXTENSION *DriverExtension; // offset: 0x18 ordinal: 0x7
  struct _UNICODE_STRING DriverName;         // offset: 0x1c ordinal: 0x8
  struct _UNICODE_STRING *HardwareDatabase;  // offset: 0x24 ordinal: 0x9
  struct _FAST_IO_DISPATCH *FastIoDispatch;  // offset: 0x28 ordinal: 0xa
  LONG(*DriverInit)
  (struct _DRIVER_OBJECT *,
   struct _UNICODE_STRING *); // offset: 0x2c ordinal: 0xb
  VOID(*DriverStartIo)
  (struct _DEVICE_OBJECT *, struct _IRP *);      // offset: 0x30 ordinal: 0xc
  VOID (*DriverUnload)(struct _DRIVER_OBJECT *); // offset: 0x34 ordinal: 0xd
  LONG(*MajorFunction[28])
  (struct _DEVICE_OBJECT *, struct _IRP *); // offset: 0x38 ordinal: 0xe
} _DRIVER_OBJECT;

typedef LONG (*__anon_2668)(struct _BUS_HANDLER *, struct _BUS_HANDLER *,
                            struct _UNICODE_STRING *, struct _UNICODE_STRING *,
                            struct _DRIVER_OBJECT *, struct _DEVICE_OBJECT *,
                            ULONG, struct _CM_RESOURCE_LIST **);

// 0x68 bytes (sizeof)
typedef struct _BUS_HANDLER {
  ULONG Version;                          // offset: 0x0 ordinal: 0x0
  enum _INTERFACE_TYPE InterfaceType;     // offset: 0x4 ordinal: 0x1
  enum _BUS_DATA_TYPE ConfigurationType;  // offset: 0x8 ordinal: 0x2
  ULONG BusNumber;                        // offset: 0xc ordinal: 0x3
  struct _DEVICE_OBJECT *DeviceObject;    // offset: 0x10 ordinal: 0x4
  struct _BUS_HANDLER *ParentHandler;     // offset: 0x14 ordinal: 0x5
  VOID *BusData;                          // offset: 0x18 ordinal: 0x6
  ULONG DeviceControlExtensionSize;       // offset: 0x1c ordinal: 0x7
  struct _SUPPORTED_RANGES *BusAddresses; // offset: 0x20 ordinal: 0x8
  ULONG Reserved[4];                      // offset: 0x24 ordinal: 0x9
  ULONG(*GetBusData)
  (struct _BUS_HANDLER *, struct _BUS_HANDLER *, ULONG, VOID *, ULONG,
   ULONG); // offset: 0x34 ordinal: 0xa
  ULONG(*SetBusData)
  (struct _BUS_HANDLER *, struct _BUS_HANDLER *, ULONG, VOID *, ULONG,
   ULONG); // offset: 0x38 ordinal: 0xb
  LONG(*AdjustResourceList)
  (struct _BUS_HANDLER *, struct _BUS_HANDLER *,
   struct _IO_RESOURCE_REQUIREMENTS_LIST **); // offset: 0x3c ordinal: 0xc
  LONG(*AssignSlotResources)
  (struct _BUS_HANDLER *, struct _BUS_HANDLER *, struct _UNICODE_STRING *,
   struct _UNICODE_STRING *, struct _DRIVER_OBJECT *, struct _DEVICE_OBJECT *,
   ULONG, struct _CM_RESOURCE_LIST **); // offset: 0x40 ordinal: 0xd
  UCHAR(*TranslateBusAddress)
  (struct _BUS_HANDLER *, struct _BUS_HANDLER *, union _LARGE_INTEGER, ULONG *,
   union _LARGE_INTEGER *); // offset: 0x44 ordinal: 0xe
  VOID *Spare1;             // offset: 0x48 ordinal: 0xf
  VOID *Spare2;             // offset: 0x4c ordinal: 0x10
  VOID *Spare3;             // offset: 0x50 ordinal: 0x11
  VOID *Spare4;             // offset: 0x54 ordinal: 0x12
  VOID *Spare5;             // offset: 0x58 ordinal: 0x13
  VOID *Spare6;             // offset: 0x5c ordinal: 0x14
  VOID *Spare7;             // offset: 0x60 ordinal: 0x15
  VOID *Spare8;             // offset: 0x64 ordinal: 0x16
} _BUS_HANDLER;

typedef LONG (*__anon_2448)(struct _UNICODE_STRING *, struct _UNICODE_STRING *,
                            struct _DRIVER_OBJECT *, struct _DEVICE_OBJECT *,
                            enum _INTERFACE_TYPE, ULONG, ULONG,
                            struct _CM_RESOURCE_LIST **);

// 0x250 bytes (sizeof)
typedef struct HAL_PRIVATE_DISPATCH {
  ULONG Version; // offset: 0x0 ordinal: 0x0
  struct _BUS_HANDLER *(*HalHandlerForBus)(enum _INTERFACE_TYPE,
                                           ULONG); // offset: 0x4 ordinal: 0x1
  struct _BUS_HANDLER *(*HalHandlerForConfigSpace)(
      enum _BUS_DATA_TYPE, ULONG);      // offset: 0x8 ordinal: 0x2
  VOID (*HalLocateHiberRanges)(VOID *); // offset: 0xc ordinal: 0x3
  LONG(*HalRegisterBusHandler)
  (enum _INTERFACE_TYPE, enum _BUS_DATA_TYPE, ULONG, enum _INTERFACE_TYPE,
   ULONG, ULONG, LONG (*)(struct _BUS_HANDLER *),
   struct _BUS_HANDLER **);                      // offset: 0x10 ordinal: 0x4
  VOID (*HalSetWakeEnable)(UCHAR);               // offset: 0x14 ordinal: 0x5
  LONG (*HalSetWakeAlarm)(ULONGLONG, ULONGLONG); // offset: 0x18 ordinal: 0x6
  UCHAR(*HalPciTranslateBusAddress)
  (enum _INTERFACE_TYPE, ULONG, union _LARGE_INTEGER, ULONG *,
   union _LARGE_INTEGER *); // offset: 0x1c ordinal: 0x7
  LONG(*HalPciAssignSlotResources)
  (struct _UNICODE_STRING *, struct _UNICODE_STRING *, struct _DRIVER_OBJECT *,
   struct _DEVICE_OBJECT *, enum _INTERFACE_TYPE, ULONG, ULONG,
   struct _CM_RESOURCE_LIST **); // offset: 0x20 ordinal: 0x8
  VOID (*HalHaltSystem)();       // offset: 0x24 ordinal: 0x9
  UCHAR(*HalFindBusAddressTranslation)
  (union _LARGE_INTEGER, ULONG *, union _LARGE_INTEGER *, ULONG *,
   UCHAR);                    // offset: 0x28 ordinal: 0xa
  UCHAR (*HalResetDisplay)(); // offset: 0x2c ordinal: 0xb
  LONG(*HalAllocateMapRegisters)
  (struct _ADAPTER_OBJECT *, ULONG, ULONG,
   struct _MAP_REGISTER_ENTRY *); // offset: 0x30 ordinal: 0xc
  LONG(*KdSetupPciDeviceForDebugging)
  (VOID *, struct _DEBUG_DEVICE_DESCRIPTOR *); // offset: 0x34 ordinal: 0xd
  LONG(*KdReleasePciDeviceForDebugging)
  (struct _DEBUG_DEVICE_DESCRIPTOR *); // offset: 0x38 ordinal: 0xe
  VOID *(*KdGetAcpiTablePhase0)(struct _LOADER_PARAMETER_BLOCK *,
                                ULONG); // offset: 0x3c ordinal: 0xf
  VOID (*KdCheckPowerButton)();         // offset: 0x40 ordinal: 0x10
  UCHAR (*HalVectorToIDTEntry)(ULONG);  // offset: 0x44 ordinal: 0x11
  VOID *(*KdMapPhysicalMemory64)(union _LARGE_INTEGER, ULONG,
                                 UCHAR); // offset: 0x48 ordinal: 0x12
  VOID(*KdUnmapVirtualAddress)
  (VOID *, ULONG, UCHAR); // offset: 0x4c ordinal: 0x13
  ULONG(*KdGetPciDataByOffset)
  (ULONG, ULONG, VOID *, ULONG, ULONG); // offset: 0x50 ordinal: 0x14
  ULONG(*KdSetPciDataByOffset)
  (ULONG, ULONG, VOID *, ULONG, ULONG); // offset: 0x54 ordinal: 0x15
  ULONG(*HalGetInterruptVectorOverride)
  (enum _INTERFACE_TYPE, ULONG, ULONG, ULONG, UCHAR *,
   ULONG *); // offset: 0x58 ordinal: 0x16
  LONG(*HalGetVectorInputOverride)
  (ULONG, struct _GROUP_AFFINITY *, ULONG *, enum _KINTERRUPT_POLARITY *,
   struct _INTERRUPT_REMAPPING_INFO *); // offset: 0x5c ordinal: 0x17
  LONG (*HalLoadMicrocode)(VOID *);     // offset: 0x60 ordinal: 0x18
  LONG (*HalUnloadMicrocode)();         // offset: 0x64 ordinal: 0x19
  LONG (*HalPostMicrocodeUpdate)();     // offset: 0x68 ordinal: 0x1a
  LONG(*HalAllocateMessageTargetOverride)
  (struct _DEVICE_OBJECT *, struct _GROUP_AFFINITY *, ULONG,
   enum _KINTERRUPT_MODE, UCHAR, ULONG *, UCHAR *,
   ULONG *); // offset: 0x6c ordinal: 0x1b
  VOID(*HalFreeMessageTargetOverride)
  (struct _DEVICE_OBJECT *, ULONG,
   struct _GROUP_AFFINITY *); // offset: 0x70 ordinal: 0x1c
  LONG(*HalDpReplaceBegin)
  (struct _HAL_DP_REPLACE_PARAMETERS *, VOID **); // offset: 0x74 ordinal: 0x1d
  VOID (*HalDpReplaceTarget)(VOID *);             // offset: 0x78 ordinal: 0x1e
  LONG (*HalDpReplaceControl)(ULONG, VOID *);     // offset: 0x7c ordinal: 0x1f
  VOID (*HalDpReplaceEnd)(VOID *);                // offset: 0x80 ordinal: 0x20
  VOID (*HalPrepareForBugcheck)(ULONG);           // offset: 0x84 ordinal: 0x21
  UCHAR(*HalQueryWakeTime)
  (ULONGLONG *, ULONGLONG *); // offset: 0x88 ordinal: 0x22
  VOID(*HalReportIdleStateUsage)
  (UCHAR, struct _KAFFINITY_EX *);               // offset: 0x8c ordinal: 0x23
  VOID (*HalTscSynchronization)(UCHAR, ULONG *); // offset: 0x90 ordinal: 0x24
  LONG(*HalWheaInitProcessorGenericSection)
  (struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *,
   struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
       *); // offset: 0x94 ordinal: 0x25
  VOID(*HalStopLegacyUsbInterrupts)
  (enum _SYSTEM_POWER_STATE); // offset: 0x98 ordinal: 0x26
  LONG(*HalReadWheaPhysicalMemory)
  (union _LARGE_INTEGER, ULONG, VOID *); // offset: 0x9c ordinal: 0x27
  LONG(*HalWriteWheaPhysicalMemory)
  (union _LARGE_INTEGER, ULONG, VOID *);         // offset: 0xa0 ordinal: 0x28
  LONG (*HalDpMaskLevelTriggeredInterrupts)();   // offset: 0xa4 ordinal: 0x29
  LONG (*HalDpUnmaskLevelTriggeredInterrupts)(); // offset: 0xa8 ordinal: 0x2a
  LONG(*HalDpGetInterruptReplayState)
  (VOID *, VOID **);                        // offset: 0xac ordinal: 0x2b
  LONG (*HalDpReplayInterrupts)(VOID *);    // offset: 0xb0 ordinal: 0x2c
  UCHAR (*HalQueryIoPortAccessSupported)(); // offset: 0xb4 ordinal: 0x2d
  LONG(*KdSetupIntegratedDeviceForDebugging)
  (VOID *, struct _DEBUG_DEVICE_DESCRIPTOR *); // offset: 0xb8 ordinal: 0x2e
  LONG(*KdReleaseIntegratedDeviceForDebugging)
  (struct _DEBUG_DEVICE_DESCRIPTOR *); // offset: 0xbc ordinal: 0x2f
  VOID(*HalGetEnlightenmentInformation)
  (struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION *); // offset: 0xc0 ordinal: 0x30
  VOID *(*HalAllocateEarlyPages)(struct _LOADER_PARAMETER_BLOCK *, ULONG,
                                 ULONGLONG *,
                                 ULONG); // offset: 0xc4 ordinal: 0x31
  VOID *(*HalMapEarlyPages)(ULONGLONG, ULONG,
                            ULONG);               // offset: 0xc8 ordinal: 0x32
  VOID *Dummy1;                                   // offset: 0xcc ordinal: 0x33
  VOID *Dummy2;                                   // offset: 0xd0 ordinal: 0x34
  VOID (*HalNotifyProcessorFreeze)(UCHAR, UCHAR); // offset: 0xd4 ordinal: 0x35
  LONG (*HalPrepareProcessorForIdle)(ULONG);      // offset: 0xd8 ordinal: 0x36
  VOID(*HalRegisterLogRoutine)
  (struct _HAL_LOG_REGISTER_CONTEXT *);  // offset: 0xdc ordinal: 0x37
  VOID (*HalResumeProcessorFromIdle)();  // offset: 0xe0 ordinal: 0x38
  VOID *Dummy;                           // offset: 0xe4 ordinal: 0x39
  ULONG (*HalVectorToIDTEntryEx)(ULONG); // offset: 0xe8 ordinal: 0x3a
  LONG(*HalSecondaryInterruptQueryPrimaryInformation)
  (struct _INTERRUPT_VECTOR_DATA *, ULONG *); // offset: 0xec ordinal: 0x3b
  LONG (*HalMaskInterrupt)(ULONG, ULONG);     // offset: 0xf0 ordinal: 0x3c
  LONG (*HalUnmaskInterrupt)(ULONG, ULONG);   // offset: 0xf4 ordinal: 0x3d
  UCHAR(*HalIsInterruptTypeSecondary)
  (ULONG, ULONG); // offset: 0xf8 ordinal: 0x3e
  LONG(*HalAllocateGsivForSecondaryInterrupt)
  (CHAR *, USHORT, ULONG *); // offset: 0xfc ordinal: 0x3f
  LONG(*HalAddInterruptRemapping)
  (ULONG, ULONG, struct _PCI_BUSMASTER_DESCRIPTOR *, UCHAR,
   struct _INTERRUPT_VECTOR_DATA *, ULONG); // offset: 0x100 ordinal: 0x40
  VOID(*HalRemoveInterruptRemapping)
  (ULONG, ULONG, struct _PCI_BUSMASTER_DESCRIPTOR *, UCHAR,
   struct _INTERRUPT_VECTOR_DATA *, ULONG);   // offset: 0x104 ordinal: 0x41
  VOID (*HalSaveAndDisableHvEnlightenment)(); // offset: 0x108 ordinal: 0x42
  VOID (*HalRestoreHvEnlightenment)();        // offset: 0x10c ordinal: 0x43
  VOID(*HalFlushIoBuffersExternalCache)
  (struct _MDL *, UCHAR);               // offset: 0x110 ordinal: 0x44
  VOID (*HalFlushExternalCache)(UCHAR); // offset: 0x114 ordinal: 0x45
  LONG(*HalPciEarlyRestore)
  (enum _SYSTEM_POWER_STATE); // offset: 0x118 ordinal: 0x46
  LONG(*HalGetProcessorId)
  (ULONG, ULONG *, ULONG *); // offset: 0x11c ordinal: 0x47
  LONG(*HalAllocatePmcCounterSet)
  (ULONG, enum _KPROFILE_SOURCE *, ULONG,
   struct _HAL_PMC_COUNTERS **); // offset: 0x120 ordinal: 0x48
  VOID(*HalCollectPmcCounters)
  (struct _HAL_PMC_COUNTERS *, ULONGLONG *); // offset: 0x124 ordinal: 0x49
  VOID(*HalFreePmcCounterSet)
  (struct _HAL_PMC_COUNTERS *); // offset: 0x128 ordinal: 0x4a
  LONG(*HalProcessorHalt)
  (ULONG, VOID *, LONG (*)(VOID *)); // offset: 0x12c ordinal: 0x4b
  ULONGLONG(*HalTimerQueryCycleCounter)
  (ULONGLONG *);                  // offset: 0x130 ordinal: 0x4c
  VOID *Dummy3;                   // offset: 0x134 ordinal: 0x4d
  VOID (*HalPciMarkHiberPhase)(); // offset: 0x138 ordinal: 0x4e
  LONG(*HalQueryProcessorRestartEntryPoint)
  (union _LARGE_INTEGER *);           // offset: 0x13c ordinal: 0x4f
  LONG (*HalRequestInterrupt)(ULONG); // offset: 0x140 ordinal: 0x50
  LONG(*HalEnumerateUnmaskedInterrupts)
  (UCHAR (*)(VOID *, struct _HAL_UNMASKED_INTERRUPT_INFORMATION *), VOID *,
   struct _HAL_UNMASKED_INTERRUPT_INFORMATION *); // offset: 0x144 ordinal: 0x51
  VOID(*HalFlushAndInvalidatePageExternalCache)
  (union _LARGE_INTEGER); // offset: 0x148 ordinal: 0x52
  LONG(*KdEnumerateDebuggingDevices)
  (VOID *, struct _DEBUG_DEVICE_DESCRIPTOR *,
   enum KD_CALLBACK_ACTION (*)(
       struct _DEBUG_DEVICE_DESCRIPTOR *)); // offset: 0x14c ordinal: 0x53
  VOID(*HalFlushIoRectangleExternalCache)
  (struct _MDL *, ULONG, ULONG, ULONG, ULONG,
   UCHAR);                             // offset: 0x150 ordinal: 0x54
  VOID (*HalPowerEarlyRestore)(ULONG); // offset: 0x154 ordinal: 0x55
  LONG(*HalQueryCapsuleCapabilities)
  (VOID *, ULONG, ULONGLONG *, ULONG *); // offset: 0x158 ordinal: 0x56
  LONG(*HalUpdateCapsule)
  (VOID *, ULONG, union _LARGE_INTEGER);       // offset: 0x15c ordinal: 0x57
  UCHAR (*HalPciMultiStageResumeCapable)();    // offset: 0x160 ordinal: 0x58
  VOID (*HalDmaFreeCrashDumpRegisters)(ULONG); // offset: 0x164 ordinal: 0x59
  UCHAR (*HalAcpiAoacCapable)();               // offset: 0x168 ordinal: 0x5a
  LONG(*HalInterruptSetDestination)
  (struct _INTERRUPT_VECTOR_DATA *, struct _GROUP_AFFINITY *,
   ULONG *); // offset: 0x16c ordinal: 0x5b
  VOID(*HalGetClockConfiguration)
  (struct _HAL_CLOCK_TIMER_CONFIGURATION *); // offset: 0x170 ordinal: 0x5c
  VOID (*HalClockTimerActivate)(UCHAR);      // offset: 0x174 ordinal: 0x5d
  VOID (*HalClockTimerInitialize)();         // offset: 0x178 ordinal: 0x5e
  VOID (*HalClockTimerStop)();               // offset: 0x17c ordinal: 0x5f
  LONG(*HalClockTimerArm)
  (enum _HAL_CLOCK_TIMER_MODE, ULONGLONG,
   ULONGLONG *);                                // offset: 0x180 ordinal: 0x60
  UCHAR (*HalTimerOnlyClockInterruptPending)(); // offset: 0x184 ordinal: 0x61
  VOID *(*HalAcpiGetMultiNode)();               // offset: 0x188 ordinal: 0x62
  VOID *HalPowerSetRebootHandler;               // offset: 0x18c ordinal: 0x63
  VOID(*HalIommuRegisterDispatchTable)
  (struct _HAL_IOMMU_DISPATCH *);                // offset: 0x190 ordinal: 0x64
  VOID (*HalTimerWatchdogStart)();               // offset: 0x194 ordinal: 0x65
  VOID (*HalTimerWatchdogResetCountdown)();      // offset: 0x198 ordinal: 0x66
  VOID (*HalTimerWatchdogStop)();                // offset: 0x19c ordinal: 0x67
  UCHAR (*HalTimerWatchdogGeneratedLastReset)(); // offset: 0x1a0 ordinal: 0x68
  LONG(*HalTimerWatchdogTriggerSystemReset)
  (UCHAR); // offset: 0x1a4 ordinal: 0x69
  LONG(*HalInterruptVectorDataToGsiv)
  (struct _INTERRUPT_VECTOR_DATA *, ULONG *); // offset: 0x1a8 ordinal: 0x6a
  LONG(*HalInterruptGetHighestPriorityInterrupt)
  (ULONG *, UCHAR *);            // offset: 0x1ac ordinal: 0x6b
  LONG (*HalProcessorOn)(ULONG); // offset: 0x1b0 ordinal: 0x6c
  LONG (*HalProcessorOff)();     // offset: 0x1b4 ordinal: 0x6d
  LONG (*HalProcessorFreeze)();  // offset: 0x1b8 ordinal: 0x6e
  LONG(*HalDmaLinkDeviceObjectByToken)
  (ULONG, struct _DEVICE_OBJECT *);       // offset: 0x1bc ordinal: 0x6f
  LONG (*HalDmaCheckAdapterToken)(ULONG); // offset: 0x1c0 ordinal: 0x70
  VOID *Dummy4;                           // offset: 0x1c4 ordinal: 0x71
  LONG(*HalTimerConvertPerformanceCounterToAuxiliaryCounter)
  (ULONGLONG, ULONGLONG *, ULONGLONG *); // offset: 0x1c8 ordinal: 0x72
  LONG(*HalTimerConvertAuxiliaryCounterToPerformanceCounter)
  (ULONGLONG, ULONGLONG *, ULONGLONG *); // offset: 0x1cc ordinal: 0x73
  LONG(*HalTimerQueryAuxiliaryCounterFrequency)
  (ULONGLONG *); // offset: 0x1d0 ordinal: 0x74
  LONG(*HalConnectThermalInterrupt)
  (UCHAR (*)(struct _KINTERRUPT *, VOID *));      // offset: 0x1d4 ordinal: 0x75
  UCHAR (*HalIsEFIRuntimeActive)();               // offset: 0x1d8 ordinal: 0x76
  UCHAR (*HalTimerQueryAndResetRtcErrors)(UCHAR); // offset: 0x1dc ordinal: 0x77
  VOID (*HalAcpiLateRestore)();                   // offset: 0x1e0 ordinal: 0x78
  LONG (*KdWatchdogDelayExpiration)(ULONGLONG *); // offset: 0x1e4 ordinal: 0x79
  LONG(*HalGetProcessorStats)
  (enum _HAL_PROCESSOR_STAT_TYPE, ULONG, ULONG,
   ULONG *);                                   // offset: 0x1e8 ordinal: 0x7a
  ULONGLONG (*HalTimerWatchdogQueryDueTime)(); // offset: 0x1ec ordinal: 0x7b
  LONG(*HalConnectSyntheticInterrupt)
  (UCHAR (*)(struct _KINTERRUPT *, VOID *)); // offset: 0x1f0 ordinal: 0x7c
  VOID (*HalPreprocessNmi)(ULONG);           // offset: 0x1f4 ordinal: 0x7d
  LONG(*HalEnumerateEnvironmentVariablesWithFilter)
  (ULONG, UCHAR (*)(struct _GUID *, WCHAR *), VOID *,
   ULONG *); // offset: 0x1f8 ordinal: 0x7e
  LONG(*HalCaptureLastBranchRecordStack)
  (ULONG, struct _HAL_LBR_ENTRY *, ULONG *); // offset: 0x1fc ordinal: 0x7f
  UCHAR (*HalClearLastBranchRecordStack)();  // offset: 0x200 ordinal: 0x80
  LONG(*HalConfigureLastBranchRecord)
  (ULONG, ULONG); // offset: 0x204 ordinal: 0x81
  UCHAR(*HalGetLastBranchInformation)
  (ULONG *, ULONG *);                       // offset: 0x208 ordinal: 0x82
  VOID (*HalResumeLastBranchRecord)(UCHAR); // offset: 0x20c ordinal: 0x83
  LONG(*HalStartLastBranchRecord)
  (ULONG, ULONG *);                       // offset: 0x210 ordinal: 0x84
  LONG (*HalStopLastBranchRecord)(ULONG); // offset: 0x214 ordinal: 0x85
  LONG (*HalIommuBlockDevice)(VOID *);    // offset: 0x218 ordinal: 0x86
  LONG(*HalIommuUnblockDevice)
  (struct _EXT_IOMMU_DEVICE_ID *, VOID **); // offset: 0x21c ordinal: 0x87
  LONG(*HalGetIommuInterface)
  (ULONG, struct _DMA_IOMMU_INTERFACE *); // offset: 0x220 ordinal: 0x88
  LONG(*HalRequestGenericErrorRecovery)
  (VOID *, ULONG *); // offset: 0x224 ordinal: 0x89
  LONG(*HalTimerQueryHostPerformanceCounter)
  (ULONGLONG *); // offset: 0x228 ordinal: 0x8a
  LONG(*HalTopologyQueryProcessorRelationships)
  (ULONG, ULONG, UCHAR *, UCHAR *, UCHAR *, ULONG *,
   ULONG *);                                  // offset: 0x22c ordinal: 0x8b
  VOID (*HalInitPlatformDebugTriggers)();     // offset: 0x230 ordinal: 0x8c
  VOID (*HalRunPlatformDebugTriggers)(UCHAR); // offset: 0x234 ordinal: 0x8d
  VOID *(*HalTimerGetReferencePage)();        // offset: 0x238 ordinal: 0x8e
  LONG(*HalGetHiddenProcessorPowerInterface)
  (struct _HIDDEN_PROCESSOR_POWER_INTERFACE *);   // offset: 0x23c ordinal: 0x8f
  ULONG (*HalGetHiddenProcessorPackageId)(ULONG); // offset: 0x240 ordinal: 0x90
  ULONG(*HalGetHiddenPackageProcessorCount)
  (ULONG); // offset: 0x244 ordinal: 0x91
  LONG(*HalGetHiddenProcessorApicIdByIndex)
  (ULONG, ULONG *); // offset: 0x248 ordinal: 0x92
  LONG(*HalRegisterHiddenProcessorIdleState)
  (ULONG, ULONGLONG); // offset: 0x24c ordinal: 0x93
} HAL_PRIVATE_DISPATCH;

typedef LONG (*__anon_698)(struct _DRIVER_OBJECT *, struct _DEVICE_OBJECT *);

// 0x80 bytes (sizeof)
typedef struct _VF_DRIVER_IO_CALLBACKS {
  LONG(*DriverInit)
  (struct _DRIVER_OBJECT *,
   struct _UNICODE_STRING *); // offset: 0x0 ordinal: 0x0
  VOID(*DriverStartIo)
  (struct _DEVICE_OBJECT *, struct _IRP *);      // offset: 0x4 ordinal: 0x1
  VOID (*DriverUnload)(struct _DRIVER_OBJECT *); // offset: 0x8 ordinal: 0x2
  LONG(*AddDevice)
  (struct _DRIVER_OBJECT *,
   struct _DEVICE_OBJECT *); // offset: 0xc ordinal: 0x3
  LONG(*MajorFunction[28])
  (struct _DEVICE_OBJECT *, struct _IRP *); // offset: 0x10 ordinal: 0x4
} _VF_DRIVER_IO_CALLBACKS;

typedef VOID (*__anon_596)(struct _DRIVER_OBJECT *);

typedef LONG (*__anon_595)(struct _DRIVER_OBJECT *, struct _UNICODE_STRING *);

// 0x28 bytes (sizeof)
typedef struct _DRIVER_EXTENSION {
  struct _DRIVER_OBJECT *DriverObject; // offset: 0x0 ordinal: 0x0
  LONG(*AddDevice)
  (struct _DRIVER_OBJECT *,
   struct _DEVICE_OBJECT *);             // offset: 0x4 ordinal: 0x1
  ULONG Count;                           // offset: 0x8 ordinal: 0x2
  struct _UNICODE_STRING ServiceKeyName; // offset: 0xc ordinal: 0x3
  struct _IO_CLIENT_EXTENSION
      *ClientDriverExtension;                     // offset: 0x14 ordinal: 0x4
  struct _FS_FILTER_CALLBACKS *FsFilterCallbacks; // offset: 0x18 ordinal: 0x5
  VOID *KseCallbacks;                             // offset: 0x1c ordinal: 0x6
  VOID *DvCallbacks;                              // offset: 0x20 ordinal: 0x7
  VOID *VerifierContext;                          // offset: 0x24 ordinal: 0x8
} _DRIVER_EXTENSION;

// 0xb8 bytes (sizeof)
typedef struct _DEVICE_OBJECT {
  SHORT Type;                                      // offset: 0x0 ordinal: 0x0
  USHORT Size;                                     // offset: 0x2 ordinal: 0x1
  LONG ReferenceCount;                             // offset: 0x4 ordinal: 0x2
  struct _DRIVER_OBJECT *DriverObject;             // offset: 0x8 ordinal: 0x3
  struct _DEVICE_OBJECT *NextDevice;               // offset: 0xc ordinal: 0x4
  struct _DEVICE_OBJECT *AttachedDevice;           // offset: 0x10 ordinal: 0x5
  struct _IRP *CurrentIrp;                         // offset: 0x14 ordinal: 0x6
  struct _IO_TIMER *Timer;                         // offset: 0x18 ordinal: 0x7
  ULONG Flags;                                     // offset: 0x1c ordinal: 0x8
  ULONG Characteristics;                           // offset: 0x20 ordinal: 0x9
  struct _VPB *Vpb;                                // offset: 0x24 ordinal: 0xa
  VOID *DeviceExtension;                           // offset: 0x28 ordinal: 0xb
  ULONG DeviceType;                                // offset: 0x2c ordinal: 0xc
  CHAR StackSize;                                  // offset: 0x30 ordinal: 0xd
  union __anon_534 Queue;                          // offset: 0x34 ordinal: 0xe
  ULONG AlignmentRequirement;                      // offset: 0x5c ordinal: 0xf
  struct _KDEVICE_QUEUE DeviceQueue;               // offset: 0x60 ordinal: 0x10
  struct _KDPC Dpc;                                // offset: 0x74 ordinal: 0x11
  ULONG ActiveThreadCount;                         // offset: 0x94 ordinal: 0x12
  VOID *SecurityDescriptor;                        // offset: 0x98 ordinal: 0x13
  struct _KEVENT DeviceLock;                       // offset: 0x9c ordinal: 0x14
  USHORT SectorSize;                               // offset: 0xac ordinal: 0x15
  USHORT Spare1;                                   // offset: 0xae ordinal: 0x16
  struct _DEVOBJ_EXTENSION *DeviceObjectExtension; // offset: 0xb0 ordinal: 0x17
  VOID *Reserved;                                  // offset: 0xb4 ordinal: 0x18
} _DEVICE_OBJECT;

// 0x308 bytes (sizeof)
typedef struct _POP_FX_DEVICE {
  struct _LIST_ENTRY Link;                       // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;                              // offset: 0x8 ordinal: 0x1
  struct _POP_IRP_DATA *IrpData;                 // offset: 0xc ordinal: 0x2
  union _POP_FX_DEVICE_STATUS Status;            // offset: 0x10 ordinal: 0x3
  LONG PowerReqCall;                             // offset: 0x14 ordinal: 0x4
  LONG PowerNotReqCall;                          // offset: 0x18 ordinal: 0x5
  struct _DEVICE_NODE *DevNode;                  // offset: 0x1c ordinal: 0x6
  struct PEPHANDLE__ *DpmContext;                // offset: 0x20 ordinal: 0x7
  struct _POP_FX_PLUGIN *Plugin;                 // offset: 0x24 ordinal: 0x8
  struct PEPHANDLE__ *PluginHandle;              // offset: 0x28 ordinal: 0x9
  struct _POP_FX_PLUGIN *AcpiPlugin;             // offset: 0x2c ordinal: 0xa
  struct PEPHANDLE__ *AcpiPluginHandle;          // offset: 0x30 ordinal: 0xb
  struct _DEVICE_OBJECT *DeviceObject;           // offset: 0x34 ordinal: 0xc
  struct _DEVICE_OBJECT *TargetDevice;           // offset: 0x38 ordinal: 0xd
  struct _POP_FX_DRIVER_CALLBACKS Callbacks;     // offset: 0x3c ordinal: 0xe
  VOID *DriverContext;                           // offset: 0x64 ordinal: 0xf
  struct _LIST_ENTRY AcpiLink;                   // offset: 0x68 ordinal: 0x10
  struct _UNICODE_STRING DeviceId;               // offset: 0x70 ordinal: 0x11
  struct _IO_REMOVE_LOCK RemoveLock;             // offset: 0x78 ordinal: 0x12
  struct _IO_REMOVE_LOCK AcpiRemoveLock;         // offset: 0x90 ordinal: 0x13
  struct _POP_FX_WORK_ORDER WorkOrder;           // offset: 0xa8 ordinal: 0x14
  ULONG IdleLock;                                // offset: 0xc4 ordinal: 0x15
  struct _KTIMER IdleTimer;                      // offset: 0xc8 ordinal: 0x16
  struct _KDPC IdleDpc;                          // offset: 0xf0 ordinal: 0x17
  ULONGLONG IdleTimeout;                         // offset: 0x110 ordinal: 0x18
  ULONGLONG IdleStamp;                           // offset: 0x118 ordinal: 0x19
  struct _DEVICE_OBJECT *NextIrpDeviceObject[2]; // offset: 0x120 ordinal: 0x1a
  union _POWER_STATE NextIrpPowerState[2];       // offset: 0x128 ordinal: 0x1b
  VOID(*NextIrpCallerCompletion[2])
  (struct _DEVICE_OBJECT *, UCHAR, union _POWER_STATE, VOID *,
   struct _IO_STATUS_BLOCK *);     // offset: 0x130 ordinal: 0x1c
  VOID *NextIrpCallerContext[2];   // offset: 0x138 ordinal: 0x1d
  struct _KEVENT IrpCompleteEvent; // offset: 0x140 ordinal: 0x1e
  UCHAR(*PowerOnDumpDeviceCallback)
  (struct _PEP_CRASHDUMP_INFORMATION *); // offset: 0x150 ordinal: 0x1f
  struct _POP_FX_ACCOUNTING Accounting;  // offset: 0x158 ordinal: 0x20
  ULONG Flags;                           // offset: 0x230 ordinal: 0x21
  ULONG ComponentCount;                  // offset: 0x234 ordinal: 0x22
  struct _POP_FX_COMPONENT **Components; // offset: 0x238 ordinal: 0x23
  ULONG LogEntries;                      // offset: 0x23c ordinal: 0x24
  struct _POP_FX_LOG_ENTRY *Log;         // offset: 0x240 ordinal: 0x25
  LONG LogIndex;                         // offset: 0x244 ordinal: 0x26
  struct _DRIVER_OBJECT
      *DripsWatchdogDriverObject; // offset: 0x248 ordinal: 0x27
  struct _POP_FX_DRIPS_WATCHDOG_CONTEXT
      DripsWatchdogContext;                    // offset: 0x24c ordinal: 0x28
  ULONG DirectedTimeout;                       // offset: 0x260 ordinal: 0x29
  struct _POP_FX_WORK_ORDER DirectedWorkOrder; // offset: 0x264 ordinal: 0x2a
  struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
      DirectedWorkWatchdogInfo;     // offset: 0x280 ordinal: 0x2b
  ULONG DirectedLock;               // offset: 0x2e8 ordinal: 0x2c
  LONG DirectedTransitionCallCount; // offset: 0x2ec ordinal: 0x2d
  struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
      DirectedTransitionState;                    // offset: 0x2f0 ordinal: 0x2e
  struct _POP_DEVICE_POWER_PROFILE *PowerProfile; // offset: 0x2fc ordinal: 0x2f
  struct _UNICODE_STRING FriendlyName;            // offset: 0x300 ordinal: 0x30
} _POP_FX_DEVICE;

// 0x170 bytes (sizeof)
typedef struct _POP_FX_COMPONENT {
  struct _GUID Id;                       // offset: 0x0 ordinal: 0x0
  ULONG Index;                           // offset: 0x10 ordinal: 0x1
  struct _POP_FX_WORK_ORDER WorkOrder;   // offset: 0x14 ordinal: 0x2
  struct _POP_FX_DEVICE *Device;         // offset: 0x30 ordinal: 0x3
  union _POP_FX_COMPONENT_FLAGS Flags;   // offset: 0x34 ordinal: 0x4
  LONG Resident;                         // offset: 0x3c ordinal: 0x5
  struct _KEVENT ActiveEvent;            // offset: 0x40 ordinal: 0x6
  ULONG IdleLock;                        // offset: 0x50 ordinal: 0x7
  LONG IdleConditionComplete;            // offset: 0x54 ordinal: 0x8
  LONG IdleStateComplete;                // offset: 0x58 ordinal: 0x9
  ULONGLONG IdleStamp;                   // offset: 0x60 ordinal: 0xa
  ULONG CurrentIdleState;                // offset: 0x68 ordinal: 0xb
  ULONG IdleStateCount;                  // offset: 0x6c ordinal: 0xc
  struct _POP_FX_IDLE_STATE *IdleStates; // offset: 0x70 ordinal: 0xd
  ULONG DeepestWakeableIdleState;        // offset: 0x74 ordinal: 0xe
  ULONG ProviderCount;                   // offset: 0x78 ordinal: 0xf
  struct _POP_FX_PROVIDER *Providers;    // offset: 0x7c ordinal: 0x10
  ULONG IdleProviderCount;               // offset: 0x80 ordinal: 0x11
  ULONG DependentCount;                  // offset: 0x84 ordinal: 0x12
  struct _POP_FX_DEPENDENT *Dependents;  // offset: 0x88 ordinal: 0x13
  struct _POP_FX_ACCOUNTING Accounting;  // offset: 0x90 ordinal: 0x14
  struct _POP_FX_PERF_INFO *Performance; // offset: 0x168 ordinal: 0x15
  struct _POP_COMPONENT_POWER_PROFILE
      *PowerProfile; // offset: 0x16c ordinal: 0x16
} _POP_FX_COMPONENT;

// 0x60 bytes (sizeof)
typedef struct _POP_FX_PERF_INFO {
  struct _POP_FX_COMPONENT *Component; // offset: 0x0 ordinal: 0x0
  struct _KEVENT CompletedEvent;       // offset: 0x4 ordinal: 0x1
  VOID(*ComponentPerfState)
  (VOID *, ULONG, UCHAR, VOID *);              // offset: 0x14 ordinal: 0x2
  union _POP_FX_PERF_FLAGS Flags;              // offset: 0x18 ordinal: 0x3
  struct _PO_FX_PERF_STATE_CHANGE *LastChange; // offset: 0x1c ordinal: 0x4
  ULONG LastChangeCount;                       // offset: 0x20 ordinal: 0x5
  ULONGLONG LastChangeStamp;                   // offset: 0x28 ordinal: 0x6
  UCHAR LastChangeNominal;                     // offset: 0x30 ordinal: 0x7
  UCHAR PepRegistered;                         // offset: 0x31 ordinal: 0x8
  UCHAR QueryOnIdleStates;                     // offset: 0x32 ordinal: 0x9
  VOID *RequestDriverContext;                  // offset: 0x34 ordinal: 0xa
  struct _POP_FX_WORK_ORDER WorkOrder;         // offset: 0x38 ordinal: 0xb
  ULONG SetsCount;                             // offset: 0x54 ordinal: 0xc
  struct _POP_FX_PERF_SET *Sets;               // offset: 0x58 ordinal: 0xd
} _POP_FX_PERF_INFO;

// 0x3c bytes (sizeof)
typedef struct _POP_DEVICE_POWER_PROFILE {
  struct _UNICODE_STRING DeviceId;                  // offset: 0x0 ordinal: 0x0
  struct _POP_POWER_PLANE *PowerPlane;              // offset: 0x8 ordinal: 0x1
  struct _POP_FX_DEVICE *FxDevice;                  // offset: 0xc ordinal: 0x2
  LONG PowerDrawMw;                                 // offset: 0x10 ordinal: 0x3
  struct _PO_POWER_PLANE_PROFILE DxPower[4];        // offset: 0x14 ordinal: 0x4
  ULONG ComponentCount;                             // offset: 0x34 ordinal: 0x5
  struct _POP_COMPONENT_POWER_PROFILE **Components; // offset: 0x38 ordinal: 0x6
} _POP_DEVICE_POWER_PROFILE;

// 0x1f4 bytes (sizeof)
typedef struct _DEVICE_NODE {
  struct _DEVICE_NODE *Sibling;                // offset: 0x0 ordinal: 0x0
  struct _DEVICE_NODE *Child;                  // offset: 0x4 ordinal: 0x1
  struct _DEVICE_NODE *Parent;                 // offset: 0x8 ordinal: 0x2
  struct _DEVICE_NODE *LastChild;              // offset: 0xc ordinal: 0x3
  struct _DEVICE_OBJECT *PhysicalDeviceObject; // offset: 0x10 ordinal: 0x4
  struct _UNICODE_STRING InstancePath;         // offset: 0x14 ordinal: 0x5
  struct _UNICODE_STRING ServiceName;          // offset: 0x1c ordinal: 0x6
  struct _IRP *PendingIrp;                     // offset: 0x24 ordinal: 0x7
  struct _POP_FX_DEVICE *FxDevice;             // offset: 0x28 ordinal: 0x8
  LONG FxDeviceLock;                           // offset: 0x2c ordinal: 0x9
  struct _KEVENT FxRemoveEvent;                // offset: 0x30 ordinal: 0xa
  LONG FxActivationCount;                      // offset: 0x40 ordinal: 0xb
  LONG FxSleepCount;                           // offset: 0x44 ordinal: 0xc
  struct _POP_FX_PLUGIN *Plugin;               // offset: 0x48 ordinal: 0xd
  ULONG Level;                                 // offset: 0x4c ordinal: 0xe
  union _POWER_STATE CurrentPowerState;        // offset: 0x50 ordinal: 0xf
  struct _PO_DEVICE_NOTIFY Notify;             // offset: 0x54 ordinal: 0x10
  struct _PO_IRP_MANAGER PoIrpManager;         // offset: 0x90 ordinal: 0x11
  struct _UNICODE_STRING UniqueId;             // offset: 0xa0 ordinal: 0x12
  ULONG PowerFlags;                            // offset: 0xa8 ordinal: 0x13
  enum _PNP_DEVNODE_STATE State;               // offset: 0xac ordinal: 0x14
  enum _PNP_DEVNODE_STATE PreviousState;       // offset: 0xb0 ordinal: 0x15
  enum _PNP_DEVNODE_STATE StateHistory[20];    // offset: 0xb4 ordinal: 0x16
  ULONG StateHistoryEntry;                     // offset: 0x104 ordinal: 0x17
  LONG CompletionStatus;                       // offset: 0x108 ordinal: 0x18
  ULONG Flags;                                 // offset: 0x10c ordinal: 0x19
  ULONG UserFlags;                             // offset: 0x110 ordinal: 0x1a
  ULONG Problem;                               // offset: 0x114 ordinal: 0x1b
  LONG ProblemStatus;                          // offset: 0x118 ordinal: 0x1c
  struct _CM_RESOURCE_LIST *ResourceList;      // offset: 0x11c ordinal: 0x1d
  struct _CM_RESOURCE_LIST
      *ResourceListTranslated;         // offset: 0x120 ordinal: 0x1e
  struct _DEVICE_OBJECT *DuplicatePDO; // offset: 0x124 ordinal: 0x1f
  struct _IO_RESOURCE_REQUIREMENTS_LIST
      *ResourceRequirements;               // offset: 0x128 ordinal: 0x20
  enum _INTERFACE_TYPE InterfaceType;      // offset: 0x12c ordinal: 0x21
  ULONG BusNumber;                         // offset: 0x130 ordinal: 0x22
  enum _INTERFACE_TYPE ChildInterfaceType; // offset: 0x134 ordinal: 0x23
  ULONG ChildBusNumber;                    // offset: 0x138 ordinal: 0x24
  USHORT ChildBusTypeIndex;                // offset: 0x13c ordinal: 0x25
  UCHAR RemovalPolicy;                     // offset: 0x13e ordinal: 0x26
  UCHAR HardwareRemovalPolicy;             // offset: 0x13f ordinal: 0x27
  struct _LIST_ENTRY TargetDeviceNotify;   // offset: 0x140 ordinal: 0x28
  struct _LIST_ENTRY DeviceArbiterList;    // offset: 0x148 ordinal: 0x29
  struct _LIST_ENTRY DeviceTranslatorList; // offset: 0x150 ordinal: 0x2a
  USHORT NoTranslatorMask;                 // offset: 0x158 ordinal: 0x2b
  USHORT QueryTranslatorMask;              // offset: 0x15a ordinal: 0x2c
  USHORT NoArbiterMask;                    // offset: 0x15c ordinal: 0x2d
  USHORT QueryArbiterMask;                 // offset: 0x15e ordinal: 0x2e
  union __anon_522 OverUsed1;              // offset: 0x160 ordinal: 0x2f
  union __anon_523 OverUsed2;              // offset: 0x164 ordinal: 0x30
  struct _CM_RESOURCE_LIST *BootResources; // offset: 0x168 ordinal: 0x31
  struct _CM_RESOURCE_LIST
      *BootResourcesTranslated;               // offset: 0x16c ordinal: 0x32
  ULONG CapabilityFlags;                      // offset: 0x170 ordinal: 0x33
  struct __anon_524 DockInfo;                 // offset: 0x174 ordinal: 0x34
  ULONG DisableableDepends;                   // offset: 0x184 ordinal: 0x35
  struct _LIST_ENTRY PendedSetInterfaceState; // offset: 0x188 ordinal: 0x36
  struct _LIST_ENTRY LegacyBusListEntry;      // offset: 0x190 ordinal: 0x37
  ULONG DriverUnloadRetryCount;               // offset: 0x198 ordinal: 0x38
  struct _DEVICE_NODE *PreviousParent;        // offset: 0x19c ordinal: 0x39
  LONG DeletedChildren;                       // offset: 0x1a0 ordinal: 0x3a
  ULONG NumaNodeIndex;                        // offset: 0x1a4 ordinal: 0x3b
  struct _GUID ContainerID;                   // offset: 0x1a8 ordinal: 0x3c
  UCHAR OverrideFlags;                        // offset: 0x1b8 ordinal: 0x3d
  ULONG DeviceIdsHash;                        // offset: 0x1bc ordinal: 0x3e
  UCHAR RequiresUnloadedDriver;               // offset: 0x1c0 ordinal: 0x3f
  struct _PENDING_RELATIONS_LIST_ENTRY
      *PendingEjectRelations; // offset: 0x1c4 ordinal: 0x40
  ULONG StateFlags;           // offset: 0x1c8 ordinal: 0x41
  struct _PNP_REBALANCE_TRACE_CONTEXT
      *RebalanceContext; // offset: 0x1cc ordinal: 0x42
  struct _DEVICE_NODE_IOMMU_EXTENSION
      *IommuExtension; // offset: 0x1d0 ordinal: 0x43
  struct _PO_DIRECTED_DRIPS_STATE
      DirectedDripsState; // offset: 0x1d4 ordinal: 0x44
} _DEVICE_NODE;

// 0x98 bytes (sizeof)
typedef struct _POP_IRP_DATA {
  struct _LIST_ENTRY Link;               // offset: 0x0 ordinal: 0x0
  struct _IRP *Irp;                      // offset: 0x8 ordinal: 0x1
  struct _DEVICE_OBJECT *Pdo;            // offset: 0xc ordinal: 0x2
  struct _DEVICE_OBJECT *TargetDevice;   // offset: 0x10 ordinal: 0x3
  struct _DEVICE_OBJECT *CurrentDevice;  // offset: 0x14 ordinal: 0x4
  ULONGLONG WatchdogStart;               // offset: 0x18 ordinal: 0x5
  struct _KTIMER WatchdogTimer;          // offset: 0x20 ordinal: 0x6
  struct _KDPC WatchdogDpc;              // offset: 0x48 ordinal: 0x7
  UCHAR MinorFunction;                   // offset: 0x68 ordinal: 0x8
  enum _POWER_STATE_TYPE PowerStateType; // offset: 0x6c ordinal: 0x9
  union _POWER_STATE PowerState;         // offset: 0x70 ordinal: 0xa
  UCHAR WatchdogEnabled;                 // offset: 0x74 ordinal: 0xb
  struct _POP_FX_DEVICE *FxDevice;       // offset: 0x78 ordinal: 0xc
  UCHAR SystemTransition;                // offset: 0x7c ordinal: 0xd
  UCHAR NotifyPEP;                       // offset: 0x7d ordinal: 0xe
  LONG IrpSequenceID;                    // offset: 0x80 ordinal: 0xf
  union {
    struct __anon_512 Device; // offset: 0x84 ordinal: 0x10
    struct __anon_513 System; // offset: 0x84 ordinal: 0x11
  };
  enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON
      DStateReason; // offset: 0x94 ordinal: 0x12
} _POP_IRP_DATA;

// 0x1c bytes (sizeof)
typedef struct _MDL {
  struct _MDL *Next;         // offset: 0x0 ordinal: 0x0
  SHORT Size;                // offset: 0x4 ordinal: 0x1
  SHORT MdlFlags;            // offset: 0x6 ordinal: 0x2
  struct _EPROCESS *Process; // offset: 0x8 ordinal: 0x3
  VOID *MappedSystemVa;      // offset: 0xc ordinal: 0x4
  VOID *StartVa;             // offset: 0x10 ordinal: 0x5
  ULONG ByteCount;           // offset: 0x14 ordinal: 0x6
  ULONG ByteOffset;          // offset: 0x18 ordinal: 0x7
} _MDL;

// 0x20 bytes (sizeof)
typedef struct __anon_1448 {
  struct _MDL Mdl; // offset: 0x0 ordinal: 0x0
  ULONG Page[1];   // offset: 0x1c ordinal: 0x1
} __anon_1448;

// 0x50 bytes (sizeof)
typedef struct _MI_PAGEFILE_TRACES {
  LONG Status;                              // offset: 0x0 ordinal: 0x0
  USHORT PartitionId;                       // offset: 0x4 ordinal: 0x1
  UCHAR Priority;                           // offset: 0x6 ordinal: 0x2
  UCHAR IrpPriority;                        // offset: 0x7 ordinal: 0x3
  UCHAR ReservationWrite;                   // offset: 0x8 ordinal: 0x4
  union _LARGE_INTEGER CurrentTime;         // offset: 0x10 ordinal: 0x5
  ULONG AvailablePages;                     // offset: 0x18 ordinal: 0x6
  ULONG ModifiedPagesTotal;                 // offset: 0x1c ordinal: 0x7
  ULONG ModifiedPagefilePages;              // offset: 0x20 ordinal: 0x8
  ULONG ModifiedNoWritePages;               // offset: 0x24 ordinal: 0x9
  ULONG ModifiedPagefileNoReservationPages; // offset: 0x28 ordinal: 0xa
  struct __anon_1448 MdlHack;               // offset: 0x2c ordinal: 0xb
} _MI_PAGEFILE_TRACES;

// 0xc00 bytes (sizeof)
typedef struct _MI_VISIBLE_PARTITION {
  ULONG LowestPhysicalPage;                  // offset: 0x0 ordinal: 0x0
  ULONG HighestPhysicalPage;                 // offset: 0x4 ordinal: 0x1
  ULONG NumberOfPhysicalPages;               // offset: 0x8 ordinal: 0x2
  ULONG NumberOfPagingFiles;                 // offset: 0xc ordinal: 0x3
  UCHAR SystemCacheInitialized;              // offset: 0x10 ordinal: 0x4
  struct _MMPAGING_FILE *PagingFile[16];     // offset: 0x14 ordinal: 0x5
  ULONG AvailablePages;                      // offset: 0x80 ordinal: 0x6
  ULONG ResidentAvailablePages;              // offset: 0xc0 ordinal: 0x7
  struct _MMSUPPORT_INSTANCE PartitionWs[1]; // offset: 0x100 ordinal: 0x8
  struct _MMWSL_INSTANCE
      PartitionWorkingSetLists[1];               // offset: 0x164 ordinal: 0x9
  ULONG TotalCommittedPages;                     // offset: 0x17c ordinal: 0xa
  struct _MMPFNLIST ModifiedPageListHead;        // offset: 0x180 ordinal: 0xb
  struct _MMPFNLIST ModifiedNoWritePageListHead; // offset: 0x1c0 ordinal: 0xc
  ULONG TotalCommitLimit;                        // offset: 0x1d4 ordinal: 0xd
  ULONG TotalPagesForPagingFile;                 // offset: 0x1d8 ordinal: 0xe
  ULONG VadPhysicalPages;                        // offset: 0x1dc ordinal: 0xf
  ULONG ProcessLockedFilePages;                  // offset: 0x1e0 ordinal: 0x10
  ULONG SharedCommit;                            // offset: 0x1e4 ordinal: 0x11
  ULONG SlabAllocatorPages;                      // offset: 0x1e8 ordinal: 0x12
  ULONG ChargeCommitmentFailures[4];             // offset: 0x1ec ordinal: 0x13
  LONG PageFileTraceIndex;                       // offset: 0x1fc ordinal: 0x14
  struct _MI_PAGEFILE_TRACES PageFileTraces[32]; // offset: 0x200 ordinal: 0x15
} _MI_VISIBLE_PARTITION;

// 0x1dc0 bytes (sizeof)
typedef struct _MI_PARTITION {
  struct _MI_PARTITION_CORE Core;                // offset: 0x0 ordinal: 0x0
  struct _MI_PARTITION_MODWRITES Modwriter;      // offset: 0xe8 ordinal: 0x1
  struct _MI_PARTITION_STORES Store;             // offset: 0x2b8 ordinal: 0x2
  struct _MI_PARTITION_SEGMENTS Segments;        // offset: 0x340 ordinal: 0x3
  struct _MI_PARTITION_PAGE_LISTS PageLists;     // offset: 0x540 ordinal: 0x4
  struct _MI_PARTITION_COMMIT Commit;            // offset: 0x1000 ordinal: 0x5
  struct _MI_PARTITION_ZEROING Zeroing;          // offset: 0x1080 ordinal: 0x6
  struct _MI_PAGE_COMBINING_SUPPORT PageCombine; // offset: 0x10c0 ordinal: 0x7
  VOID *WorkingSetControl;                       // offset: 0x11a0 ordinal: 0x8
  struct _MMWORKING_SET_EXPANSION_HEAD
      WorkingSetExpansionHead;     // offset: 0x11a4 ordinal: 0x9
  ULONG SessionDetachTimeStamp;    // offset: 0x11ac ordinal: 0xa
  struct _MI_VISIBLE_PARTITION Vp; // offset: 0x11c0 ordinal: 0xb
} _MI_PARTITION;

// 0x38 bytes (sizeof)
typedef struct _MI_PARTITION_STATE {
  ULONG PartitionLock;                            // offset: 0x0 ordinal: 0x0
  struct _EX_PUSH_LOCK PartitionIdLock;           // offset: 0x4 ordinal: 0x1
  ULONGLONG InitialPartitionIdBits;               // offset: 0x8 ordinal: 0x2
  struct _LIST_ENTRY PartitionList;               // offset: 0x10 ordinal: 0x3
  struct _RTL_BITMAP *PartitionIdBitmap;          // offset: 0x18 ordinal: 0x4
  struct _RTL_BITMAP InitialPartitionIdBitmap;    // offset: 0x1c ordinal: 0x5
  struct _MI_PARTITION *TempPartitionPointers[1]; // offset: 0x24 ordinal: 0x6
  struct _MI_PARTITION **Partition;               // offset: 0x28 ordinal: 0x7
  ULONG TotalPagesInChildPartitions;              // offset: 0x2c ordinal: 0x8
  ULONG CrossPartitionDenials;                    // offset: 0x30 ordinal: 0x9
  UCHAR MultiplePartitionsExist;                  // offset: 0x34 ordinal: 0xa
} _MI_PARTITION_STATE;

// 0x4e40 bytes (sizeof)
typedef struct _MI_SYSTEM_INFORMATION {
  struct _MI_POOL_STATE Pools;                // offset: 0x0 ordinal: 0x0
  struct _MI_SECTION_STATE Sections;          // offset: 0x80 ordinal: 0x1
  struct _MI_SYSTEM_IMAGE_STATE SystemImages; // offset: 0x200 ordinal: 0x2
  struct _MI_SESSION_STATE Sessions;          // offset: 0x25c ordinal: 0x3
  struct _MI_PROCESS_STATE Processes;         // offset: 0x1290 ordinal: 0x4
  struct _MI_HARDWARE_STATE Hardware;         // offset: 0x1300 ordinal: 0x5
  struct _MI_SYSTEM_VA_STATE SystemVa;        // offset: 0x1480 ordinal: 0x6
  struct _MI_COMBINE_STATE PageCombines;      // offset: 0x3bc0 ordinal: 0x7
  struct _MI_PAGELIST_STATE PageLists;        // offset: 0x3be0 ordinal: 0x8
  struct _MI_PARTITION_STATE Partitions;      // offset: 0x3bf8 ordinal: 0x9
  struct _MI_SHUTDOWN_STATE Shutdowns;        // offset: 0x3c30 ordinal: 0xa
  struct _MI_ERROR_STATE Errors;              // offset: 0x3c78 ordinal: 0xb
  struct _MI_ACCESS_LOG_STATE AccessLog;      // offset: 0x3d40 ordinal: 0xc
  struct _MI_DEBUGGER_STATE Debugger;         // offset: 0x3dc0 ordinal: 0xd
  struct _MI_STANDBY_STATE Standby;           // offset: 0x3e50 ordinal: 0xe
  struct _MI_SYSTEM_PTE_STATE SystemPtes;     // offset: 0x3ec0 ordinal: 0xf
  struct _MI_IO_PAGE_STATE IoPages;           // offset: 0x4040 ordinal: 0x10
  struct _MI_PAGING_IO_STATE PagingIo;        // offset: 0x4080 ordinal: 0x11
  struct _MI_COMMON_PAGE_STATE CommonPages;   // offset: 0x40b8 ordinal: 0x12
  struct _MI_SYSTEM_TRIM_STATE Trims;         // offset: 0x4100 ordinal: 0x13
  ULONG Cookie;                               // offset: 0x4140 ordinal: 0x14
  VOID **BootRegistryRuns;                    // offset: 0x4144 ordinal: 0x15
  LONG ZeroingDisabled;                       // offset: 0x4148 ordinal: 0x16
  UCHAR FullyInitialized;                     // offset: 0x414c ordinal: 0x17
  UCHAR SafeBooted;                           // offset: 0x414d ordinal: 0x18
  struct _RTL_BITMAP PfnBitMap;               // offset: 0x4150 ordinal: 0x19
  struct _TlgProvider_t *TraceLogging;        // offset: 0x4158 ordinal: 0x1a
  struct _MI_VISIBLE_STATE Vs;                // offset: 0x4180 ordinal: 0x1b
} _MI_SYSTEM_INFORMATION;

// 0xa8 bytes (sizeof)
typedef struct _MMPAGING_FILE {
  ULONG Size;                                    // offset: 0x0 ordinal: 0x0
  ULONG MaximumSize;                             // offset: 0x4 ordinal: 0x1
  ULONG MinimumSize;                             // offset: 0x8 ordinal: 0x2
  ULONG FreeSpace;                               // offset: 0xc ordinal: 0x3
  ULONG PeakUsage;                               // offset: 0x10 ordinal: 0x4
  ULONG HighestPage;                             // offset: 0x14 ordinal: 0x5
  ULONG FreeReservationSpace;                    // offset: 0x18 ordinal: 0x6
  struct _FILE_OBJECT *File;                     // offset: 0x1c ordinal: 0x7
  struct _MMMOD_WRITER_MDL_ENTRY *Entry[2];      // offset: 0x20 ordinal: 0x8
  union _SLIST_HEADER PfnsToFree;                // offset: 0x28 ordinal: 0x9
  struct _UNICODE_STRING PageFileName;           // offset: 0x30 ordinal: 0xa
  struct _MI_PAGING_FILE_SPACE_BITMAPS *Bitmaps; // offset: 0x38 ordinal: 0xb
  ULONG AllocationBitmapHint;                    // offset: 0x3c ordinal: 0xc
  ULONG LargestAllocationCluster;                // offset: 0x40 ordinal: 0xd
  ULONG RefreshAllocationCluster;                // offset: 0x44 ordinal: 0xe
  ULONG LastRefreshAllocationCluster;            // offset: 0x48 ordinal: 0xf
  ULONG ReservedClusterSizeAggregate;            // offset: 0x4c ordinal: 0x10
  ULONG MaximumRunLengthInBitmaps;               // offset: 0x50 ordinal: 0x11
  struct _RTL_RB_TREE BitmapsCacheLengthTree;    // offset: 0x54 ordinal: 0x12
  struct _RTL_RB_TREE BitmapsCacheLocationTree;  // offset: 0x5c ordinal: 0x13
  struct _LIST_ENTRY BitmapsCacheFreeList;       // offset: 0x64 ordinal: 0x14
  struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
      *BitmapsCacheEntries; // offset: 0x6c ordinal: 0x15
  union {
    ULONG ToBeEvictedCount; // offset: 0x70 ordinal: 0x16
    ULONG HybridPriority;   // offset: 0x70 ordinal: 0x17
  };
  USHORT PageFileNumber : 4;                // offset: 0x74 ordinal: 0x18
  USHORT WsSwapPagefile : 1;                // offset: 0x74 ordinal: 0x19
  USHORT NoReservations : 1;                // offset: 0x74 ordinal: 0x1a
  USHORT VirtualStorePagefile : 1;          // offset: 0x74 ordinal: 0x1b
  USHORT SwapSupported : 1;                 // offset: 0x74 ordinal: 0x1c
  USHORT NodeInserted : 1;                  // offset: 0x74 ordinal: 0x1d
  USHORT StackNotified : 1;                 // offset: 0x74 ordinal: 0x1e
  USHORT BackedBySCM : 1;                   // offset: 0x74 ordinal: 0x1f
  USHORT Spare0 : 4;                        // offset: 0x74 ordinal: 0x20
  UCHAR AdriftMdls : 1;                     // offset: 0x76 ordinal: 0x21
  UCHAR Spare1 : 7;                         // offset: 0x76 ordinal: 0x22
  UCHAR IgnoreReservations : 1;             // offset: 0x77 ordinal: 0x23
  UCHAR Spare2 : 7;                         // offset: 0x77 ordinal: 0x24
  ULONG PageHashPages;                      // offset: 0x78 ordinal: 0x25
  ULONG PageHashPagesPeak;                  // offset: 0x7c ordinal: 0x26
  ULONG *PageHash;                          // offset: 0x80 ordinal: 0x27
  VOID *FileHandle;                         // offset: 0x84 ordinal: 0x28
  ULONG Lock;                               // offset: 0x88 ordinal: 0x29
  struct _ETHREAD *LockOwner;               // offset: 0x8c ordinal: 0x2a
  struct _RTL_AVL_TREE FlowThroughReadRoot; // offset: 0x90 ordinal: 0x2b
  struct _MI_PARTITION *Partition;          // offset: 0x94 ordinal: 0x2c
  struct _RTL_BALANCED_NODE FileObjectNode; // offset: 0x98 ordinal: 0x2d
} _MMPAGING_FILE;

// 0x1c bytes (sizeof)
typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH {
  ULONG Page[1];                                  // offset: 0x0 ordinal: 0x0
  struct _MMINPAGE_SUPPORT *InitialInPageSupport; // offset: 0x4 ordinal: 0x1
  struct _MMPAGING_FILE *PagingFile;              // offset: 0x8 ordinal: 0x2
  ULONG PageFileOffset;                           // offset: 0xc ordinal: 0x3
  struct _RTL_BALANCED_NODE Node;                 // offset: 0x10 ordinal: 0x4
} _MMINPAGE_SUPPORT_FLOW_THROUGH;

// 0x108 bytes (sizeof)
typedef struct _MMINPAGE_SUPPORT {
  struct _LIST_ENTRY ListEntry;     // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY ListHead;      // offset: 0x8 ordinal: 0x1
  struct _KEVENT Event;             // offset: 0x10 ordinal: 0x2
  struct _KEVENT CollidedEvent;     // offset: 0x20 ordinal: 0x3
  struct _IO_STATUS_BLOCK IoStatus; // offset: 0x30 ordinal: 0x4
  union _LARGE_INTEGER ReadOffset;  // offset: 0x38 ordinal: 0x5
  union __anon_1526 u2;             // offset: 0x40 ordinal: 0x6
  struct _ETHREAD *Thread;          // offset: 0x58 ordinal: 0x7
  struct _MMPFN *LockedProtoPfn;    // offset: 0x5c ordinal: 0x8
  struct _MMPTE PteContents;        // offset: 0x60 ordinal: 0x9
  LONG WaitCount;                   // offset: 0x68 ordinal: 0xa
  LONG InjectRetry;                 // offset: 0x6c ordinal: 0xb
  ULONG ByteCount;                  // offset: 0x70 ordinal: 0xc
  union __anon_1528 u3;             // offset: 0x74 ordinal: 0xd
  union __anon_1529 u1;             // offset: 0x78 ordinal: 0xe
  struct _FILE_OBJECT *FilePointer; // offset: 0x7c ordinal: 0xf
  union {
    struct _CONTROL_AREA *ControlArea; // offset: 0x80 ordinal: 0x10
    struct _SUBSECTION *Subsection;    // offset: 0x80 ordinal: 0x11
  };
  VOID *Autoboost;           // offset: 0x84 ordinal: 0x12
  VOID *FaultingAddress;     // offset: 0x88 ordinal: 0x13
  struct _MMPTE *PointerPte; // offset: 0x8c ordinal: 0x14
  struct _MMPTE *BasePte;    // offset: 0x90 ordinal: 0x15
  struct _MMPFN *Pfn;        // offset: 0x94 ordinal: 0x16
  struct _MDL *PrefetchMdl;  // offset: 0x98 ordinal: 0x17
  LONGLONG ProbeCount;       // offset: 0xa0 ordinal: 0x18
  struct _MDL Mdl;           // offset: 0xa8 ordinal: 0x19
  union {
    ULONG Page[16]; // offset: 0xc4 ordinal: 0x1a
    struct _MMINPAGE_SUPPORT_FLOW_THROUGH
        FlowThrough; // offset: 0xc4 ordinal: 0x1b
  };
} _MMINPAGE_SUPPORT;

// 0xa0 bytes (sizeof)
typedef struct _MMMOD_WRITER_MDL_ENTRY {
  struct _LIST_ENTRY Links;             // offset: 0x0 ordinal: 0x0
  union __anon_1487 u;                  // offset: 0x8 ordinal: 0x1
  struct _IRP *Irp;                     // offset: 0x10 ordinal: 0x2
  struct _MODWRITER_FLAGS u1;           // offset: 0x14 ordinal: 0x3
  ULONG StoreWriteRefCount;             // offset: 0x18 ordinal: 0x4
  struct _KAPC StoreWriteCompletionApc; // offset: 0x1c ordinal: 0x5
  ULONG ByteCount;                      // offset: 0x4c ordinal: 0x6
  ULONG ChargedPages;                   // offset: 0x50 ordinal: 0x7
  struct _MMPAGING_FILE *PagingFile;    // offset: 0x54 ordinal: 0x8
  struct _FILE_OBJECT *File;            // offset: 0x58 ordinal: 0x9
  struct _CONTROL_AREA *ControlArea;    // offset: 0x5c ordinal: 0xa
  struct _ERESOURCE *FileResource;      // offset: 0x60 ordinal: 0xb
  union _LARGE_INTEGER WriteOffset;     // offset: 0x68 ordinal: 0xc
  union _LARGE_INTEGER IssueTime;       // offset: 0x70 ordinal: 0xd
  struct _MI_PARTITION *Partition;      // offset: 0x78 ordinal: 0xe
  struct _MDL *PointerMdl;              // offset: 0x7c ordinal: 0xf
  struct _MDL Mdl;                      // offset: 0x80 ordinal: 0x10
  ULONG Page[1];                        // offset: 0x9c ordinal: 0x11
} _MMMOD_WRITER_MDL_ENTRY;

// 0x10 bytes (sizeof)
typedef struct _MMCLONE_HEADER {
  ULONG NumberOfPtes;               // offset: 0x0 ordinal: 0x0
  ULONG NumberOfProcessReferences;  // offset: 0x4 ordinal: 0x1
  struct _MMCLONE_BLOCK *ClonePtes; // offset: 0x8 ordinal: 0x2
  struct _MI_PARTITION *Partition;  // offset: 0xc ordinal: 0x3
} _MMCLONE_HEADER;

// 0x30 bytes (sizeof)
typedef struct _MMCLONE_DESCRIPTOR {
  union {
    struct _RTL_BALANCED_NODE CloneNode; // offset: 0x0 ordinal: 0x0
    struct _MMCLONE_DESCRIPTOR *Next;    // offset: 0x0 ordinal: 0x1
  };
  struct _MMCLONE_BLOCK *StartingCloneBlock; // offset: 0xc ordinal: 0x2
  struct _MMCLONE_BLOCK *EndingCloneBlock;   // offset: 0x10 ordinal: 0x3
  ULONG NumberOfPtes;                        // offset: 0x14 ordinal: 0x4
  ULONG NumberOfReferences;                  // offset: 0x18 ordinal: 0x5
  struct _MMCLONE_HEADER *CloneHeader;       // offset: 0x1c ordinal: 0x6
  ULONG NonPagedPoolQuotaCharge;             // offset: 0x20 ordinal: 0x7
  struct _SINGLE_LIST_ENTRY DeleteList;      // offset: 0x24 ordinal: 0x8
  ULONGLONG NestingLevel;                    // offset: 0x28 ordinal: 0x9
} _MMCLONE_DESCRIPTOR;

// 0x1000 bytes (sizeof)
typedef struct _TEB {
  struct _NT_TIB NtTib;                         // offset: 0x0 ordinal: 0x0
  VOID *EnvironmentPointer;                     // offset: 0x1c ordinal: 0x1
  struct _CLIENT_ID ClientId;                   // offset: 0x20 ordinal: 0x2
  VOID *ActiveRpcHandle;                        // offset: 0x28 ordinal: 0x3
  VOID *ThreadLocalStoragePointer;              // offset: 0x2c ordinal: 0x4
  struct _PEB *ProcessEnvironmentBlock;         // offset: 0x30 ordinal: 0x5
  ULONG LastErrorValue;                         // offset: 0x34 ordinal: 0x6
  ULONG CountOfOwnedCriticalSections;           // offset: 0x38 ordinal: 0x7
  VOID *CsrClientThread;                        // offset: 0x3c ordinal: 0x8
  VOID *Win32ThreadInfo;                        // offset: 0x40 ordinal: 0x9
  ULONG User32Reserved[26];                     // offset: 0x44 ordinal: 0xa
  ULONG UserReserved[5];                        // offset: 0xac ordinal: 0xb
  VOID *WOW32Reserved;                          // offset: 0xc0 ordinal: 0xc
  ULONG CurrentLocale;                          // offset: 0xc4 ordinal: 0xd
  ULONG FpSoftwareStatusRegister;               // offset: 0xc8 ordinal: 0xe
  VOID *ReservedForDebuggerInstrumentation[16]; // offset: 0xcc ordinal: 0xf
  VOID *SystemReserved1[26];                    // offset: 0x10c ordinal: 0x10
  CHAR PlaceholderCompatibilityMode;            // offset: 0x174 ordinal: 0x11
  UCHAR PlaceholderHydrationAlwaysExplicit;     // offset: 0x175 ordinal: 0x12
  CHAR PlaceholderReserved[10];                 // offset: 0x176 ordinal: 0x13
  ULONG ProxiedProcessId;                       // offset: 0x180 ordinal: 0x14
  struct _ACTIVATION_CONTEXT_STACK
      _ActivationStack;           // offset: 0x184 ordinal: 0x15
  UCHAR WorkingOnBehalfTicket[8]; // offset: 0x19c ordinal: 0x16
  LONG ExceptionCode;             // offset: 0x1a4 ordinal: 0x17
  struct _ACTIVATION_CONTEXT_STACK
      *ActivationContextStackPointer;         // offset: 0x1a8 ordinal: 0x18
  ULONG InstrumentationCallbackSp;            // offset: 0x1ac ordinal: 0x19
  ULONG InstrumentationCallbackPreviousPc;    // offset: 0x1b0 ordinal: 0x1a
  ULONG InstrumentationCallbackPreviousSp;    // offset: 0x1b4 ordinal: 0x1b
  UCHAR InstrumentationCallbackDisabled;      // offset: 0x1b8 ordinal: 0x1c
  UCHAR SpareBytes[23];                       // offset: 0x1b9 ordinal: 0x1d
  ULONG TxFsContext;                          // offset: 0x1d0 ordinal: 0x1e
  struct _GDI_TEB_BATCH GdiTebBatch;          // offset: 0x1d4 ordinal: 0x1f
  struct _CLIENT_ID RealClientId;             // offset: 0x6b4 ordinal: 0x20
  VOID *GdiCachedProcessHandle;               // offset: 0x6bc ordinal: 0x21
  ULONG GdiClientPID;                         // offset: 0x6c0 ordinal: 0x22
  ULONG GdiClientTID;                         // offset: 0x6c4 ordinal: 0x23
  VOID *GdiThreadLocalInfo;                   // offset: 0x6c8 ordinal: 0x24
  ULONG Win32ClientInfo[62];                  // offset: 0x6cc ordinal: 0x25
  VOID *glDispatchTable[233];                 // offset: 0x7c4 ordinal: 0x26
  ULONG glReserved1[29];                      // offset: 0xb68 ordinal: 0x27
  VOID *glReserved2;                          // offset: 0xbdc ordinal: 0x28
  VOID *glSectionInfo;                        // offset: 0xbe0 ordinal: 0x29
  VOID *glSection;                            // offset: 0xbe4 ordinal: 0x2a
  VOID *glTable;                              // offset: 0xbe8 ordinal: 0x2b
  VOID *glCurrentRC;                          // offset: 0xbec ordinal: 0x2c
  VOID *glContext;                            // offset: 0xbf0 ordinal: 0x2d
  ULONG LastStatusValue;                      // offset: 0xbf4 ordinal: 0x2e
  struct _UNICODE_STRING StaticUnicodeString; // offset: 0xbf8 ordinal: 0x2f
  WCHAR StaticUnicodeBuffer[261];             // offset: 0xc00 ordinal: 0x30
  VOID *DeallocationStack;                    // offset: 0xe0c ordinal: 0x31
  VOID *TlsSlots[64];                         // offset: 0xe10 ordinal: 0x32
  struct _LIST_ENTRY TlsLinks;                // offset: 0xf10 ordinal: 0x33
  VOID *Vdm;                                  // offset: 0xf18 ordinal: 0x34
  VOID *ReservedForNtRpc;                     // offset: 0xf1c ordinal: 0x35
  VOID *DbgSsReserved[2];                     // offset: 0xf20 ordinal: 0x36
  ULONG HardErrorMode;                        // offset: 0xf28 ordinal: 0x37
  VOID *Instrumentation[9];                   // offset: 0xf2c ordinal: 0x38
  struct _GUID ActivityId;                    // offset: 0xf50 ordinal: 0x39
  VOID *SubProcessTag;                        // offset: 0xf60 ordinal: 0x3a
  VOID *PerflibData;                          // offset: 0xf64 ordinal: 0x3b
  VOID *EtwTraceData;                         // offset: 0xf68 ordinal: 0x3c
  VOID *WinSockData;                          // offset: 0xf6c ordinal: 0x3d
  ULONG GdiBatchCount;                        // offset: 0xf70 ordinal: 0x3e
  union {
    struct _PROCESSOR_NUMBER
        CurrentIdealProcessor; // offset: 0xf74 ordinal: 0x3f
    ULONG IdealProcessorValue; // offset: 0xf74 ordinal: 0x40
    UCHAR ReservedPad0;        // offset: 0xf74 ordinal: 0x41
  };
  UCHAR ReservedPad1;                    // offset: 0xf75 ordinal: 0x42
  UCHAR ReservedPad2;                    // offset: 0xf76 ordinal: 0x43
  UCHAR IdealProcessor;                  // offset: 0xf77 ordinal: 0x44
  ULONG GuaranteedStackBytes;            // offset: 0xf78 ordinal: 0x45
  VOID *ReservedForPerf;                 // offset: 0xf7c ordinal: 0x46
  VOID *ReservedForOle;                  // offset: 0xf80 ordinal: 0x47
  ULONG WaitingOnLoaderLock;             // offset: 0xf84 ordinal: 0x48
  VOID *SavedPriorityState;              // offset: 0xf88 ordinal: 0x49
  ULONG ReservedForCodeCoverage;         // offset: 0xf8c ordinal: 0x4a
  VOID *ThreadPoolData;                  // offset: 0xf90 ordinal: 0x4b
  VOID **TlsExpansionSlots;              // offset: 0xf94 ordinal: 0x4c
  ULONG MuiGeneration;                   // offset: 0xf98 ordinal: 0x4d
  ULONG IsImpersonating;                 // offset: 0xf9c ordinal: 0x4e
  VOID *NlsCache;                        // offset: 0xfa0 ordinal: 0x4f
  VOID *pShimData;                       // offset: 0xfa4 ordinal: 0x50
  ULONG HeapData;                        // offset: 0xfa8 ordinal: 0x51
  VOID *CurrentTransactionHandle;        // offset: 0xfac ordinal: 0x52
  struct _TEB_ACTIVE_FRAME *ActiveFrame; // offset: 0xfb0 ordinal: 0x53
  VOID *FlsData;                         // offset: 0xfb4 ordinal: 0x54
  VOID *PreferredLanguages;              // offset: 0xfb8 ordinal: 0x55
  VOID *UserPrefLanguages;               // offset: 0xfbc ordinal: 0x56
  VOID *MergedPrefLanguages;             // offset: 0xfc0 ordinal: 0x57
  ULONG MuiImpersonation;                // offset: 0xfc4 ordinal: 0x58
  union {
    USHORT CrossTebFlags;          // offset: 0xfc8 ordinal: 0x59
    USHORT SpareCrossTebBits : 16; // offset: 0xfc8 ordinal: 0x5a
  };
  union {
    USHORT SameTebFlags;      // offset: 0xfca ordinal: 0x5b
    USHORT SafeThunkCall : 1; // offset: 0xfca ordinal: 0x5c
  };
  USHORT InDebugPrint : 1;           // offset: 0xfca ordinal: 0x5d
  USHORT HasFiberData : 1;           // offset: 0xfca ordinal: 0x5e
  USHORT SkipThreadAttach : 1;       // offset: 0xfca ordinal: 0x5f
  USHORT WerInShipAssertCode : 1;    // offset: 0xfca ordinal: 0x60
  USHORT RanProcessInit : 1;         // offset: 0xfca ordinal: 0x61
  USHORT ClonedThread : 1;           // offset: 0xfca ordinal: 0x62
  USHORT SuppressDebugMsg : 1;       // offset: 0xfca ordinal: 0x63
  USHORT DisableUserStackWalk : 1;   // offset: 0xfca ordinal: 0x64
  USHORT RtlExceptionAttached : 1;   // offset: 0xfca ordinal: 0x65
  USHORT InitialThread : 1;          // offset: 0xfca ordinal: 0x66
  USHORT SessionAware : 1;           // offset: 0xfca ordinal: 0x67
  USHORT LoadOwner : 1;              // offset: 0xfca ordinal: 0x68
  USHORT LoaderWorker : 1;           // offset: 0xfca ordinal: 0x69
  USHORT SkipLoaderInit : 1;         // offset: 0xfca ordinal: 0x6a
  USHORT SpareSameTebBits : 1;       // offset: 0xfca ordinal: 0x6b
  VOID *TxnScopeEnterCallback;       // offset: 0xfcc ordinal: 0x6c
  VOID *TxnScopeExitCallback;        // offset: 0xfd0 ordinal: 0x6d
  VOID *TxnScopeContext;             // offset: 0xfd4 ordinal: 0x6e
  ULONG LockCount;                   // offset: 0xfd8 ordinal: 0x6f
  LONG WowTebOffset;                 // offset: 0xfdc ordinal: 0x70
  VOID *ResourceRetValue;            // offset: 0xfe0 ordinal: 0x71
  VOID *ReservedForWdf;              // offset: 0xfe4 ordinal: 0x72
  ULONGLONG ReservedForCrt;          // offset: 0xfe8 ordinal: 0x73
  struct _GUID EffectiveContainerId; // offset: 0xff0 ordinal: 0x74
} _TEB;

// 0x338 bytes (sizeof)
typedef struct _XSTATE_CONFIGURATION {
  ULONGLONG EnabledFeatures;         // offset: 0x0 ordinal: 0x0
  ULONGLONG EnabledVolatileFeatures; // offset: 0x8 ordinal: 0x1
  ULONG Size;                        // offset: 0x10 ordinal: 0x2
  union {
    ULONG ControlFlags;      // offset: 0x14 ordinal: 0x3
    ULONG OptimizedSave : 1; // offset: 0x14 ordinal: 0x4
  };
  ULONG CompactionEnabled : 1;                    // offset: 0x14 ordinal: 0x5
  struct _XSTATE_FEATURE Features[64];            // offset: 0x18 ordinal: 0x6
  ULONGLONG EnabledSupervisorFeatures;            // offset: 0x218 ordinal: 0x7
  ULONGLONG AlignedFeatures;                      // offset: 0x220 ordinal: 0x8
  ULONG AllFeatureSize;                           // offset: 0x228 ordinal: 0x9
  ULONG AllFeatures[64];                          // offset: 0x22c ordinal: 0xa
  ULONGLONG EnabledUserVisibleSupervisorFeatures; // offset: 0x330 ordinal: 0xb
} _XSTATE_CONFIGURATION;

// 0x70 bytes (sizeof)
typedef struct _POP_PER_PROCESSOR_CONTEXT {
  UCHAR *UncompressedData;              // offset: 0x0 ordinal: 0x0
  VOID *MappingVa;                      // offset: 0x4 ordinal: 0x1
  VOID *XpressEncodeWorkspace;          // offset: 0x8 ordinal: 0x2
  UCHAR *CompressedDataBuffer;          // offset: 0xc ordinal: 0x3
  ULONGLONG CopyTicks;                  // offset: 0x10 ordinal: 0x4
  ULONGLONG CompressTicks;              // offset: 0x18 ordinal: 0x5
  ULONGLONG BytesCopied;                // offset: 0x20 ordinal: 0x6
  ULONGLONG PagesProcessed;             // offset: 0x28 ordinal: 0x7
  ULONGLONG DecompressTicks;            // offset: 0x30 ordinal: 0x8
  ULONGLONG ResumeCopyTicks;            // offset: 0x38 ordinal: 0x9
  ULONGLONG SharedBufferTicks;          // offset: 0x40 ordinal: 0xa
  ULONGLONG DecompressTicksByMethod[2]; // offset: 0x48 ordinal: 0xb
  ULONGLONG DecompressSizeByMethod[2];  // offset: 0x58 ordinal: 0xc
  ULONG CompressCount;                  // offset: 0x68 ordinal: 0xd
  ULONG HuffCompressCount;              // offset: 0x6c ordinal: 0xe
} _POP_PER_PROCESSOR_CONTEXT;

// 0x138 bytes (sizeof)
typedef struct _POP_HIBER_CONTEXT {
  UCHAR Reset;                         // offset: 0x0 ordinal: 0x0
  UCHAR HiberFlags;                    // offset: 0x1 ordinal: 0x1
  UCHAR WroteHiberFile;                // offset: 0x2 ordinal: 0x2
  UCHAR KernelPhaseVerificationActive; // offset: 0x3 ordinal: 0x3
  UCHAR InitializationFinished;        // offset: 0x4 ordinal: 0x4
  LONG NextTableLockHeld;              // offset: 0x8 ordinal: 0x5
  LONG BootPhaseFinishedBarrier;       // offset: 0xc ordinal: 0x6
  LONG KernelResumeFinishedBarrier;    // offset: 0x10 ordinal: 0x7
  LONG HvCaptureReadyBarrier;          // offset: 0x14 ordinal: 0x8
  LONG HvCaptureCompletedBarrier;      // offset: 0x18 ordinal: 0x9
  UCHAR MapFrozen;                     // offset: 0x1c ordinal: 0xa
  union {
    struct _RTL_BITMAP DiscardMap;     // offset: 0x20 ordinal: 0xb
    struct _RTL_BITMAP KernelPhaseMap; // offset: 0x20 ordinal: 0xc
  };
  struct _RTL_BITMAP BootPhaseMap;            // offset: 0x28 ordinal: 0xd
  struct _LIST_ENTRY ClonedRanges;            // offset: 0x30 ordinal: 0xe
  ULONG ClonedRangeCount;                     // offset: 0x38 ordinal: 0xf
  ULONGLONG ClonedPageCount;                  // offset: 0x40 ordinal: 0x10
  struct _RTL_BITMAP *CurrentMap;             // offset: 0x48 ordinal: 0x11
  struct _LIST_ENTRY *NextCloneRange;         // offset: 0x4c ordinal: 0x12
  ULONG NextPreserve;                         // offset: 0x50 ordinal: 0x13
  struct _MDL *LoaderMdl;                     // offset: 0x54 ordinal: 0x14
  struct _MDL *AllocatedMdl;                  // offset: 0x58 ordinal: 0x15
  ULONGLONG PagesOut;                         // offset: 0x60 ordinal: 0x16
  VOID *IoPages;                              // offset: 0x68 ordinal: 0x17
  ULONG IoPagesCount;                         // offset: 0x6c ordinal: 0x18
  VOID *CurrentMcb;                           // offset: 0x70 ordinal: 0x19
  struct _DUMP_STACK_CONTEXT *DumpStack;      // offset: 0x74 ordinal: 0x1a
  struct _KPROCESSOR_STATE *WakeState;        // offset: 0x78 ordinal: 0x1b
  ULONG IoProgress;                           // offset: 0x7c ordinal: 0x1c
  LONG Status;                                // offset: 0x80 ordinal: 0x1d
  ULONG GraphicsProc;                         // offset: 0x84 ordinal: 0x1e
  struct PO_MEMORY_IMAGE *MemoryImage;        // offset: 0x88 ordinal: 0x1f
  ULONG *PerformanceStats;                    // offset: 0x8c ordinal: 0x20
  struct _MDL *BootLoaderLogMdl;              // offset: 0x90 ordinal: 0x21
  struct _MDL *FirmwareRuntimeInformationMdl; // offset: 0x94 ordinal: 0x22
  VOID *FirmwareRuntimeInformationVa;         // offset: 0x98 ordinal: 0x23
  VOID *ResumeContext;                        // offset: 0x9c ordinal: 0x24
  ULONG ResumeContextPages;                   // offset: 0xa0 ordinal: 0x25
  ULONG ProcessorCount;                       // offset: 0xa4 ordinal: 0x26
  struct _POP_PER_PROCESSOR_CONTEXT
      *ProcessorContext;                // offset: 0xa8 ordinal: 0x27
  CHAR *ProdConsBuffer;                 // offset: 0xac ordinal: 0x28
  ULONG ProdConsSize;                   // offset: 0xb0 ordinal: 0x29
  ULONG MaxDataPages;                   // offset: 0xb4 ordinal: 0x2a
  VOID *ExtraBuffer;                    // offset: 0xb8 ordinal: 0x2b
  ULONG ExtraBufferSize;                // offset: 0xbc ordinal: 0x2c
  VOID *ExtraMapVa;                     // offset: 0xc0 ordinal: 0x2d
  ULONG BitlockerKeyPFN;                // offset: 0xc4 ordinal: 0x2e
  struct _POP_IO_INFO IoInfo;           // offset: 0xc8 ordinal: 0x2f
  WCHAR *IoChecksums;                   // offset: 0x128 ordinal: 0x30
  ULONG IoChecksumsSize;                // offset: 0x12c ordinal: 0x31
  ULONG HardwareConfigurationSignature; // offset: 0x130 ordinal: 0x32
  UCHAR SecureBoot;                     // offset: 0x134 ordinal: 0x33
} _POP_HIBER_CONTEXT;

// 0x178 bytes (sizeof)
typedef struct _POP_POWER_ACTION {
  UCHAR Updates;                                   // offset: 0x0 ordinal: 0x0
  UCHAR State;                                     // offset: 0x1 ordinal: 0x1
  UCHAR Shutdown;                                  // offset: 0x2 ordinal: 0x2
  enum POWER_ACTION Action;                        // offset: 0x4 ordinal: 0x3
  enum _SYSTEM_POWER_STATE LightestState;          // offset: 0x8 ordinal: 0x4
  ULONG Flags;                                     // offset: 0xc ordinal: 0x5
  LONG Status;                                     // offset: 0x10 ordinal: 0x6
  enum POWER_POLICY_DEVICE_TYPE DeviceType;        // offset: 0x14 ordinal: 0x7
  ULONG DeviceTypeFlags;                           // offset: 0x18 ordinal: 0x8
  UCHAR IrpMinor;                                  // offset: 0x1c ordinal: 0x9
  UCHAR Waking;                                    // offset: 0x1d ordinal: 0xa
  enum _SYSTEM_POWER_STATE SystemState;            // offset: 0x20 ordinal: 0xb
  enum _SYSTEM_POWER_STATE NextSystemState;        // offset: 0x24 ordinal: 0xc
  enum _SYSTEM_POWER_STATE EffectiveSystemState;   // offset: 0x28 ordinal: 0xd
  enum _SYSTEM_POWER_STATE CurrentSystemState;     // offset: 0x2c ordinal: 0xe
  struct _POP_SHUTDOWN_BUG_CHECK *ShutdownBugCode; // offset: 0x30 ordinal: 0xf
  struct _POP_DEVICE_SYS_STATE *DevState;          // offset: 0x34 ordinal: 0x10
  struct _POP_HIBER_CONTEXT *HiberContext;         // offset: 0x38 ordinal: 0x11
  ULONGLONG WakeTime;                              // offset: 0x40 ordinal: 0x12
  ULONGLONG SleepTime;                             // offset: 0x48 ordinal: 0x13
  ULONGLONG WakeFirstUnattendedTime;               // offset: 0x50 ordinal: 0x14
  enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;   // offset: 0x58 ordinal: 0x15
  struct __anon_3137 WakeAlarm[3];                 // offset: 0x60 ordinal: 0x16
  UCHAR WakeAlarmPaused;                           // offset: 0xa8 ordinal: 0x17
  ULONGLONG WakeAlarmLastTime;                     // offset: 0xb0 ordinal: 0x18
  ULONGLONG DozeDeferralStartTime;                 // offset: 0xb8 ordinal: 0x19
  struct SYSTEM_POWER_CAPABILITIES
      FilteredCapabilities;     // offset: 0xc0 ordinal: 0x1a
  struct _KDPC WatchdogDpc;     // offset: 0x10c ordinal: 0x1b
  struct _KTIMER WatchdogTimer; // offset: 0x130 ordinal: 0x1c
  UCHAR WatchdogInitialized;    // offset: 0x158 ordinal: 0x1d
  enum _POP_POWER_ACTION_WATCHDOG_STATE
      WatchdogState;                             // offset: 0x15c ordinal: 0x1e
  ULONGLONG WatchdogStartTime;                   // offset: 0x160 ordinal: 0x1f
  struct _KTHREAD *ActionWorkerThread;           // offset: 0x168 ordinal: 0x20
  struct _KTHREAD *PromoteActionWorkerThread;    // offset: 0x16c ordinal: 0x21
  struct _KTHREAD *UnlockAfterSleepWorkerThread; // offset: 0x170 ordinal: 0x22
} _POP_POWER_ACTION;

// 0x58 bytes (sizeof)
typedef struct _KTIMER2 {
  struct _DISPATCHER_HEADER Header; // offset: 0x0 ordinal: 0x0
  union {
    struct _RTL_BALANCED_NODE RbNodes[2]; // offset: 0x10 ordinal: 0x1
    struct _LIST_ENTRY ListEntry;         // offset: 0x10 ordinal: 0x2
  };
  ULONGLONG DueTime[2];                        // offset: 0x28 ordinal: 0x3
  LONGLONG Period;                             // offset: 0x38 ordinal: 0x4
  VOID (*Callback)(struct _KTIMER2 *, VOID *); // offset: 0x40 ordinal: 0x5
  VOID *CallbackContext;                       // offset: 0x44 ordinal: 0x6
  VOID (*DisableCallback)(VOID *);             // offset: 0x48 ordinal: 0x7
  VOID *DisableContext;                        // offset: 0x4c ordinal: 0x8
  UCHAR AbsoluteSystemTime;                    // offset: 0x50 ordinal: 0x9
  union {
    UCHAR TypeFlags;  // offset: 0x51 ordinal: 0xa
    UCHAR Unused : 1; // offset: 0x51 ordinal: 0xb
  };
  UCHAR IdleResilient : 1;  // offset: 0x51 ordinal: 0xc
  UCHAR HighResolution : 1; // offset: 0x51 ordinal: 0xd
  UCHAR NoWake : 1;         // offset: 0x51 ordinal: 0xe
  UCHAR Unused1 : 4;        // offset: 0x51 ordinal: 0xf
  UCHAR CollectionIndex[2]; // offset: 0x52 ordinal: 0x10
} _KTIMER2;

// 0xb8 bytes (sizeof)
typedef struct _EX_WORK_QUEUE_MANAGER {
  struct _EX_PARTITION *Partition; // offset: 0x0 ordinal: 0x0
  struct _ENODE *Node;             // offset: 0x4 ordinal: 0x1
  struct _KEVENT Event;            // offset: 0x8 ordinal: 0x2
  struct _KTIMER DeadlockTimer;    // offset: 0x18 ordinal: 0x3
  struct _KEVENT ReaperEvent;      // offset: 0x40 ordinal: 0x4
  struct _KTIMER2 ReaperTimer;     // offset: 0x50 ordinal: 0x5
  VOID *ThreadHandle;              // offset: 0xa8 ordinal: 0x6
  ULONG ExitThread;                // offset: 0xac ordinal: 0x7
  USHORT ThreadSeed;               // offset: 0xb0 ordinal: 0x8
} _EX_WORK_QUEUE_MANAGER;

// 0x10 bytes (sizeof)
typedef struct _EX_PARTITION {
  struct _EPARTITION *PartitionObject;               // offset: 0x0 ordinal: 0x0
  struct _EX_WORK_QUEUE ***WorkQueues;               // offset: 0x4 ordinal: 0x1
  struct _EX_WORK_QUEUE_MANAGER **WorkQueueManagers; // offset: 0x8 ordinal: 0x2
  LONG QueueAllocationMask;                          // offset: 0xc ordinal: 0x3
} _EX_PARTITION;

typedef VOID (*__anon_3011)(struct _KTIMER2 *, VOID *);

// 0x3a0 bytes (sizeof)
typedef struct _POP_THERMAL_ZONE {
  union {
    struct _POP_POLICY_DEVICE PolicyDevice; // offset: 0x0 ordinal: 0x0
    struct _LIST_ENTRY Link;                // offset: 0x0 ordinal: 0x1
  };
  enum POWER_POLICY_DEVICE_TYPE DeviceType; // offset: 0x8 ordinal: 0x2
  VOID *Notification;                       // offset: 0xc ordinal: 0x3
  struct _UNICODE_STRING Name;              // offset: 0x10 ordinal: 0x4
  struct _DEVICE_OBJECT *Device;            // offset: 0x18 ordinal: 0x5
  struct _IRP *Irp;                         // offset: 0x1c ordinal: 0x6
  UCHAR State;                              // offset: 0x20 ordinal: 0x7
  UCHAR Flags;                              // offset: 0x21 ordinal: 0x8
  UCHAR Removing;                           // offset: 0x22 ordinal: 0x9
  UCHAR Mode;                               // offset: 0x23 ordinal: 0xa
  UCHAR PendingMode;                        // offset: 0x24 ordinal: 0xb
  UCHAR ActivePoint;                        // offset: 0x25 ordinal: 0xc
  UCHAR PendingActivePoint;                 // offset: 0x26 ordinal: 0xd
  UCHAR Critical;                           // offset: 0x27 ordinal: 0xe
  UCHAR ThermalStandby;                     // offset: 0x28 ordinal: 0xf
  UCHAR OverThrottled;                      // offset: 0x29 ordinal: 0x10
  LONG HighPrecisionThrottle;               // offset: 0x2c ordinal: 0x11
  LONG Throttle;                            // offset: 0x30 ordinal: 0x12
  LONG PendingThrottle;                     // offset: 0x34 ordinal: 0x13
  ULONG ThrottleReasons;                    // offset: 0x38 ordinal: 0x14
  ULONGLONG LastPassiveTime;                // offset: 0x40 ordinal: 0x15
  ULONG SampleRate;                         // offset: 0x48 ordinal: 0x16
  ULONG LastTemp;                           // offset: 0x4c ordinal: 0x17
  struct _THERMAL_INFORMATION_EX Info;      // offset: 0x50 ordinal: 0x18
  struct _THERMAL_POLICY Policy;            // offset: 0xac ordinal: 0x19
  UCHAR PolicyDriver;                       // offset: 0xc4 ordinal: 0x1a
  ULONG PollingRate;                        // offset: 0xc8 ordinal: 0x1b
  ULONGLONG LastTemperatureTime;            // offset: 0xd0 ordinal: 0x1c
  ULONGLONG LastActiveStartTime;            // offset: 0xd8 ordinal: 0x1d
  ULONGLONG LastPassiveStartTime;           // offset: 0xe0 ordinal: 0x1e
  struct _WORK_QUEUE_ITEM WorkItem;         // offset: 0xe8 ordinal: 0x1f
  struct _KTIMER2 ZoneUpdateTimer;          // offset: 0xf8 ordinal: 0x20
  struct _POP_RW_LOCK Lock;                 // offset: 0x150 ordinal: 0x21
  struct _KEVENT ZoneStopped;               // offset: 0x158 ordinal: 0x22
  struct _KEVENT TemperatureUpdated;        // offset: 0x168 ordinal: 0x23
  ULONG InstanceId;                         // offset: 0x178 ordinal: 0x24
  struct _POP_THERMAL_TELEMETRY_TRACKER
      TelemetryTracker;               // offset: 0x180 ordinal: 0x25
  struct _UNICODE_STRING Description; // offset: 0x398 ordinal: 0x26
} _POP_THERMAL_ZONE;

// 0x28 bytes (sizeof)
typedef struct _MCUPDATE_INFO {
  struct _LIST_ENTRY List;    // offset: 0x0 ordinal: 0x0
  ULONG Status;               // offset: 0x8 ordinal: 0x1
  ULONGLONG Id;               // offset: 0x10 ordinal: 0x2
  ULONGLONG VendorScratch[2]; // offset: 0x18 ordinal: 0x3
} _MCUPDATE_INFO;

// 0x10 bytes (sizeof)
typedef struct _TRUSTLET_COLLABORATION_ID {
  ULONGLONG Value[2]; // offset: 0x0 ordinal: 0x0
} _TRUSTLET_COLLABORATION_ID;

// 0x10 bytes (sizeof)
typedef struct _TRUSTLET_MAILBOX_KEY {
  ULONGLONG SecretValue[2]; // offset: 0x0 ordinal: 0x0
} _TRUSTLET_MAILBOX_KEY;

// 0x18 bytes (sizeof)
typedef struct _EVENT_PAYLOAD_PREDICATE {
  USHORT FieldIndex;  // offset: 0x0 ordinal: 0x0
  USHORT CompareOp;   // offset: 0x2 ordinal: 0x1
  ULONGLONG Value[2]; // offset: 0x8 ordinal: 0x2
} _EVENT_PAYLOAD_PREDICATE;

// 0x50 bytes (sizeof)
typedef struct _AGGREGATED_PAYLOAD_FILTER {
  USHORT MagicValue : 12;           // offset: 0x0 ordinal: 0x0
  USHORT DescriptorVersion : 4;     // offset: 0x0 ordinal: 0x1
  USHORT Size;                      // offset: 0x2 ordinal: 0x2
  USHORT PredicateCount;            // offset: 0x4 ordinal: 0x3
  USHORT Reserved;                  // offset: 0x6 ordinal: 0x4
  ULONGLONG HashedEventIdBitmap;    // offset: 0x8 ordinal: 0x5
  struct _GUID ProviderGuid;        // offset: 0x10 ordinal: 0x6
  USHORT EachEventTableOffset;      // offset: 0x20 ordinal: 0x7
  USHORT EachEventTableLength;      // offset: 0x22 ordinal: 0x8
  USHORT PayloadDecoderTableOffset; // offset: 0x24 ordinal: 0x9
  USHORT PayloadDecoderTableLength; // offset: 0x26 ordinal: 0xa
  USHORT EventFilterTableOffset;    // offset: 0x28 ordinal: 0xb
  USHORT EventFilterTableLength;    // offset: 0x2a ordinal: 0xc
  USHORT UNICODEStringTableOffset;  // offset: 0x2c ordinal: 0xd
  USHORT UNICODEStringTableLength;  // offset: 0x2e ordinal: 0xe
  USHORT ANSIStringTableOffset;     // offset: 0x30 ordinal: 0xf
  USHORT ANSIStringTableLength;     // offset: 0x32 ordinal: 0x10
  struct _EVENT_PAYLOAD_PREDICATE
      PredicateTable[1]; // offset: 0x38 ordinal: 0x11
} _AGGREGATED_PAYLOAD_FILTER;

// 0x58 bytes (sizeof)
typedef struct _ETW_PAYLOAD_FILTER {
  LONG RefCount;                                   // offset: 0x0 ordinal: 0x0
  struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter; // offset: 0x8 ordinal: 0x1
} _ETW_PAYLOAD_FILTER;

// 0x30 bytes (sizeof)
typedef struct _ETW_FILTER_HEADER {
  LONG FilterFlags;                                // offset: 0x0 ordinal: 0x0
  struct _ETW_FILTER_PID *PidFilter;               // offset: 0x4 ordinal: 0x1
  struct _ETW_FILTER_STRING_TOKEN *ExeFilter;      // offset: 0x8 ordinal: 0x2
  struct _ETW_FILTER_STRING_TOKEN *PkgIdFilter;    // offset: 0xc ordinal: 0x3
  struct _ETW_FILTER_STRING_TOKEN *PkgAppIdFilter; // offset: 0x10 ordinal: 0x4
  struct _ETW_PERFECT_HASH_FUNCTION
      *StackWalkIdFilter; // offset: 0x14 ordinal: 0x5
  struct _ETW_FILTER_EVENT_NAME_DATA
      *StackWalkNameFilter; // offset: 0x18 ordinal: 0x6
  struct _EVENT_FILTER_LEVEL_KW
      *StackWalkLevelKwFilter;                      // offset: 0x1c ordinal: 0x7
  struct _ETW_PERFECT_HASH_FUNCTION *EventIdFilter; // offset: 0x20 ordinal: 0x8
  struct _ETW_PAYLOAD_FILTER *PayloadFilter;        // offset: 0x24 ordinal: 0x9
  struct _EVENT_FILTER_HEADER *ProviderSideFilter;  // offset: 0x28 ordinal: 0xa
  struct _ETW_FILTER_EVENT_NAME_DATA
      *EventNameFilter; // offset: 0x2c ordinal: 0xb
} _ETW_FILTER_HEADER;

// 0x168 bytes (sizeof)
typedef struct _ETW_GUID_ENTRY {
  struct _LIST_ENTRY GuidList;    // offset: 0x0 ordinal: 0x0
  LONG RefCount;                  // offset: 0x8 ordinal: 0x1
  struct _GUID Guid;              // offset: 0xc ordinal: 0x2
  struct _LIST_ENTRY RegListHead; // offset: 0x1c ordinal: 0x3
  VOID *SecurityDescriptor;       // offset: 0x24 ordinal: 0x4
  union {
    struct _ETW_LAST_ENABLE_INFO LastEnable; // offset: 0x28 ordinal: 0x5
    ULONGLONG MatchId;                       // offset: 0x28 ordinal: 0x6
  };
  struct _TRACE_ENABLE_INFO ProviderEnableInfo; // offset: 0x38 ordinal: 0x7
  struct _TRACE_ENABLE_INFO EnableInfo[8];      // offset: 0x58 ordinal: 0x8
  struct _ETW_FILTER_HEADER *FilterData;        // offset: 0x158 ordinal: 0x9
  struct _ETW_SILODRIVERSTATE *SiloState;       // offset: 0x15c ordinal: 0xa
  struct _EX_PUSH_LOCK Lock;                    // offset: 0x160 ordinal: 0xb
  struct _ETHREAD *LockOwner;                   // offset: 0x164 ordinal: 0xc
} _ETW_GUID_ENTRY;

// 0x3c bytes (sizeof)
typedef struct _ETW_REG_ENTRY {
  struct _LIST_ENTRY RegList;         // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY GroupRegList;    // offset: 0x8 ordinal: 0x1
  struct _ETW_GUID_ENTRY *GuidEntry;  // offset: 0x10 ordinal: 0x2
  struct _ETW_GUID_ENTRY *GroupEntry; // offset: 0x14 ordinal: 0x3
  union {
    struct _ETW_REPLY_QUEUE *ReplyQueue;   // offset: 0x18 ordinal: 0x4
    struct _ETW_QUEUE_ENTRY *ReplySlot[4]; // offset: 0x18 ordinal: 0x5
    VOID *Caller;                          // offset: 0x18 ordinal: 0x6
  };
  ULONG SessionId; // offset: 0x1c ordinal: 0x7
  union {
    struct _EPROCESS *Process; // offset: 0x28 ordinal: 0x8
    VOID *CallbackContext;     // offset: 0x28 ordinal: 0x9
  };
  VOID *Callback; // offset: 0x2c ordinal: 0xa
  USHORT Index;   // offset: 0x30 ordinal: 0xb
  union {
    USHORT Flags;                     // offset: 0x32 ordinal: 0xc
    USHORT DbgKernelRegistration : 1; // offset: 0x32 ordinal: 0xd
  };
  USHORT DbgUserRegistration : 1;         // offset: 0x32 ordinal: 0xe
  USHORT DbgReplyRegistration : 1;        // offset: 0x32 ordinal: 0xf
  USHORT DbgClassicRegistration : 1;      // offset: 0x32 ordinal: 0x10
  USHORT DbgSessionSpaceRegistration : 1; // offset: 0x32 ordinal: 0x11
  USHORT DbgModernRegistration : 1;       // offset: 0x32 ordinal: 0x12
  USHORT DbgClosed : 1;                   // offset: 0x32 ordinal: 0x13
  USHORT DbgInserted : 1;                 // offset: 0x32 ordinal: 0x14
  USHORT DbgWow64 : 1;                    // offset: 0x32 ordinal: 0x15
  USHORT DbgUseDescriptorType : 1;        // offset: 0x32 ordinal: 0x16
  USHORT DbgDropProviderTraits : 1;       // offset: 0x32 ordinal: 0x17
  UCHAR EnableMask;                       // offset: 0x34 ordinal: 0x18
  UCHAR GroupEnableMask;                  // offset: 0x35 ordinal: 0x19
  struct _ETW_PROVIDER_TRAITS *Traits;    // offset: 0x38 ordinal: 0x1a
} _ETW_REG_ENTRY;

// 0x20 bytes (sizeof)
typedef struct _ETW_QUEUE_ENTRY {
  struct _LIST_ENTRY ListEntry;                // offset: 0x0 ordinal: 0x0
  struct _ETWP_NOTIFICATION_HEADER *DataBlock; // offset: 0x8 ordinal: 0x1
  struct _ETW_REG_ENTRY *RegEntry;             // offset: 0xc ordinal: 0x2
  struct _ETW_REG_ENTRY *ReplyObject;          // offset: 0x10 ordinal: 0x3
  VOID *WakeReference;                         // offset: 0x14 ordinal: 0x4
  USHORT RegIndex;                             // offset: 0x18 ordinal: 0x5
  USHORT ReplyIndex;                           // offset: 0x1a ordinal: 0x6
  ULONG Flags;                                 // offset: 0x1c ordinal: 0x7
} _ETW_QUEUE_ENTRY;

// 0xa90 bytes (sizeof)
typedef struct _ETW_SILODRIVERSTATE {
  struct _EJOB *Silo;                       // offset: 0x0 ordinal: 0x0
  struct _ESERVERSILO_GLOBALS *SiloGlobals; // offset: 0x4 ordinal: 0x1
  ULONG MaxLoggers;                         // offset: 0x8 ordinal: 0x2
  struct _ETW_GUID_ENTRY
      EtwpSecurityProviderGuidEntry; // offset: 0x10 ordinal: 0x3
  struct _EX_RUNDOWN_REF_CACHE_AWARE *
      *EtwpLoggerRundown;                         // offset: 0x178 ordinal: 0x4
  struct _WMI_LOGGER_CONTEXT **EtwpLoggerContext; // offset: 0x17c ordinal: 0x5
  struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];  // offset: 0x180 ordinal: 0x6
  USHORT EtwpSecurityLoggers[8];                  // offset: 0x880 ordinal: 0x7
  UCHAR EtwpSecurityProviderEnableMask;           // offset: 0x890 ordinal: 0x8
  LONG EtwpShutdownInProgress;                    // offset: 0x894 ordinal: 0x9
  ULONG EtwpSecurityProviderPID;                  // offset: 0x898 ordinal: 0xa
  struct _ETW_PRIV_HANDLE_DEMUX_TABLE
      PrivHandleDemuxTable;                        // offset: 0x89c ordinal: 0xb
  struct _ETW_COUNTERS EtwpCounters;               // offset: 0x8ac ordinal: 0xc
  union _LARGE_INTEGER LogfileBytesWritten;        // offset: 0x8c0 ordinal: 0xd
  struct _ETW_SILO_TRACING_BLOCK *ProcessorBlocks; // offset: 0x8c8 ordinal: 0xe
  struct _EX_WNF_SUBSCRIPTION
      *ContainerRestoreWnfSubscription;   // offset: 0x8cc ordinal: 0xf
  struct _GUID PartitionId;               // offset: 0x8d0 ordinal: 0x10
  struct _GUID ParentId;                  // offset: 0x8e0 ordinal: 0x11
  union _LARGE_INTEGER QpcOffsetFromRoot; // offset: 0x8f0 ordinal: 0x12
  ULONG PartitionType;                    // offset: 0x8f8 ordinal: 0x13
  struct _ETW_SYSTEM_LOGGER_SETTINGS
      SystemLoggerSettings;            // offset: 0x8fc ordinal: 0x14
  struct _KMUTANT EtwpStartTraceMutex; // offset: 0xa70 ordinal: 0x15
} _ETW_SILODRIVERSTATE;

// 0x58 bytes (sizeof)
typedef struct _PROC_PERF_CHECK_SNAP {
  ULONGLONG Time;                          // offset: 0x0 ordinal: 0x0
  ULONGLONG Active;                        // offset: 0x8 ordinal: 0x1
  ULONGLONG Stall;                         // offset: 0x10 ordinal: 0x2
  ULONGLONG FrequencyScaledActive;         // offset: 0x18 ordinal: 0x3
  ULONGLONG PerformanceScaledActive;       // offset: 0x20 ordinal: 0x4
  ULONGLONG PerformanceScaledKernelActive; // offset: 0x28 ordinal: 0x5
  ULONGLONG CyclesActive;                  // offset: 0x30 ordinal: 0x6
  ULONGLONG CyclesAffinitized;             // offset: 0x38 ordinal: 0x7
  ULONGLONG TaggedThreadCycles[2];         // offset: 0x40 ordinal: 0x8
  ULONG ResponsivenessEvents;              // offset: 0x50 ordinal: 0x9
} _PROC_PERF_CHECK_SNAP;

// 0x138 bytes (sizeof)
typedef struct _PROC_PERF_CHECK {
  ULONGLONG LastActive;                           // offset: 0x0 ordinal: 0x0
  ULONGLONG LastTime;                             // offset: 0x8 ordinal: 0x1
  ULONGLONG LastStall;                            // offset: 0x10 ordinal: 0x2
  ULONG LastResponsivenessEvents;                 // offset: 0x18 ordinal: 0x3
  struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap; // offset: 0x20 ordinal: 0x4
  struct _PROC_PERF_CHECK_SNAP CurrentSnap;       // offset: 0x78 ordinal: 0x5
  struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap; // offset: 0xd0 ordinal: 0x6
  ULONG LastDeliveredPerformance;                 // offset: 0x128 ordinal: 0x7
  ULONG LastDeliveredFrequency;                   // offset: 0x12c ordinal: 0x8
  UCHAR TaggedThreadPercent[2];                   // offset: 0x130 ordinal: 0x9
  UCHAR Class0FloorPerfSelection;                 // offset: 0x132 ordinal: 0xa
  UCHAR Class1MinimumPerfSelection;               // offset: 0x133 ordinal: 0xb
  ULONG CurrentResponsivenessEvents;              // offset: 0x134 ordinal: 0xc
} _PROC_PERF_CHECK;

// 0x88 bytes (sizeof)
typedef struct _PROC_FEEDBACK {
  ULONG Lock;                                 // offset: 0x0 ordinal: 0x0
  ULONGLONG CyclesLast;                       // offset: 0x8 ordinal: 0x1
  ULONGLONG CyclesActive;                     // offset: 0x10 ordinal: 0x2
  struct _PROC_FEEDBACK_COUNTER *Counters[2]; // offset: 0x18 ordinal: 0x3
  ULONGLONG LastUpdateTime;                   // offset: 0x20 ordinal: 0x4
  ULONGLONG UnscaledTime;                     // offset: 0x28 ordinal: 0x5
  LONGLONG UnaccountedTime;                   // offset: 0x30 ordinal: 0x6
  ULONGLONG ScaledTime[2];                    // offset: 0x38 ordinal: 0x7
  ULONGLONG UnaccountedKernelTime;            // offset: 0x48 ordinal: 0x8
  ULONGLONG PerformanceScaledKernelTime;      // offset: 0x50 ordinal: 0x9
  ULONG UserTimeLast;                         // offset: 0x58 ordinal: 0xa
  ULONG KernelTimeLast;                       // offset: 0x5c ordinal: 0xb
  ULONGLONG IdleGenerationNumberLast;         // offset: 0x60 ordinal: 0xc
  ULONGLONG HvActiveTimeLast;                 // offset: 0x68 ordinal: 0xd
  ULONGLONG StallCyclesLast;                  // offset: 0x70 ordinal: 0xe
  ULONGLONG StallTime;                        // offset: 0x78 ordinal: 0xf
  UCHAR KernelTimesIndex;                     // offset: 0x80 ordinal: 0x10
  UCHAR CounterDiscardsIdleTime;              // offset: 0x81 ordinal: 0x11
} _PROC_FEEDBACK;

// 0x1a8 bytes (sizeof)
typedef struct _PROCESSOR_POWER_STATE {
  struct _PPM_IDLE_STATES *IdleStates;          // offset: 0x0 ordinal: 0x0
  struct _PROC_IDLE_ACCOUNTING *IdleAccounting; // offset: 0x4 ordinal: 0x1
  ULONGLONG IdleTimeLast;                       // offset: 0x8 ordinal: 0x2
  ULONGLONG IdleTimeTotal;                      // offset: 0x10 ordinal: 0x3
  ULONGLONG IdleTimeEntry;                      // offset: 0x18 ordinal: 0x4
  ULONGLONG IdleTimeExpiration;                 // offset: 0x20 ordinal: 0x5
  UCHAR NonInterruptibleTransition;             // offset: 0x28 ordinal: 0x6
  UCHAR PepWokenTransition;                     // offset: 0x29 ordinal: 0x7
  UCHAR HvTargetState;                          // offset: 0x2a ordinal: 0x8
  UCHAR Reserved;                               // offset: 0x2b ordinal: 0x9
  ULONG TargetIdleState;                        // offset: 0x2c ordinal: 0xa
  struct _PROC_IDLE_POLICY IdlePolicy;          // offset: 0x30 ordinal: 0xb
  union _PPM_IDLE_SYNCHRONIZATION_STATE
      Synchronization;                    // offset: 0x38 ordinal: 0xc
  struct _PROC_FEEDBACK PerfFeedback;     // offset: 0x40 ordinal: 0xd
  enum _PROC_HYPERVISOR_STATE Hypervisor; // offset: 0xc8 ordinal: 0xe
  ULONG LastSysTime;                      // offset: 0xcc ordinal: 0xf
  ULONG WmiDispatchPtr;                   // offset: 0xd0 ordinal: 0x10
  LONG WmiInterfaceEnabled;               // offset: 0xd4 ordinal: 0x11
  struct _PPM_FFH_THROTTLE_STATE_INFO
      FFHThrottleStateInfo;                     // offset: 0xd8 ordinal: 0x12
  struct _KDPC PerfActionDpc;                   // offset: 0xf8 ordinal: 0x13
  LONG PerfActionMask;                          // offset: 0x118 ordinal: 0x14
  struct _PROC_IDLE_SNAP HvIdleCheck;           // offset: 0x120 ordinal: 0x15
  struct _PROC_PERF_CHECK *PerfCheck;           // offset: 0x130 ordinal: 0x16
  struct _PROC_PERF_DOMAIN *Domain;             // offset: 0x134 ordinal: 0x17
  struct _PROC_PERF_CONSTRAINT *PerfConstraint; // offset: 0x138 ordinal: 0x18
  struct _PPM_CONCURRENCY_ACCOUNTING
      *Concurrency; // offset: 0x13c ordinal: 0x19
  struct _PPM_CONCURRENCY_ACCOUNTING
      *ClassConcurrency;                  // offset: 0x140 ordinal: 0x1a
  struct _PROC_PERF_LOAD *Load;           // offset: 0x144 ordinal: 0x1b
  struct _PROC_PERF_HISTORY *PerfHistory; // offset: 0x148 ordinal: 0x1c
  UCHAR ArchitecturalEfficiencyClass;     // offset: 0x14c ordinal: 0x1d
  UCHAR PerformanceSchedulingClass;       // offset: 0x14d ordinal: 0x1e
  UCHAR EfficiencySchedulingClass;        // offset: 0x14e ordinal: 0x1f
  UCHAR GuaranteedPerformancePercent;     // offset: 0x14f ordinal: 0x20
  UCHAR Parked;                           // offset: 0x150 ordinal: 0x21
  UCHAR LongPriorQosPeriod;               // offset: 0x151 ordinal: 0x22
  USHORT LatestAffinitizedPercent;        // offset: 0x152 ordinal: 0x23
  ULONG LatestPerformancePercent;         // offset: 0x154 ordinal: 0x24
  ULONG AveragePerformancePercent;        // offset: 0x158 ordinal: 0x25
  ULONG RelativePerformance;              // offset: 0x15c ordinal: 0x26
  ULONG Utility;                          // offset: 0x160 ordinal: 0x27
  ULONG AffinitizedUtility;               // offset: 0x164 ordinal: 0x28
  union {
    ULONGLONG SnapTimeLast;   // offset: 0x168 ordinal: 0x29
    ULONGLONG EnergyConsumed; // offset: 0x168 ordinal: 0x2a
  };
  ULONGLONG ActiveTime;                    // offset: 0x170 ordinal: 0x2b
  ULONGLONG TotalTime;                     // offset: 0x178 ordinal: 0x2c
  struct _POP_FX_DEVICE *FxDevice;         // offset: 0x180 ordinal: 0x2d
  ULONGLONG LastQosTranstionTsc;           // offset: 0x188 ordinal: 0x2e
  ULONGLONG QosTransitionHysteresis;       // offset: 0x190 ordinal: 0x2f
  enum _KHETERO_CPU_QOS RequestedQosClass; // offset: 0x198 ordinal: 0x30
  enum _KHETERO_CPU_QOS ResolvedQosClass;  // offset: 0x19c ordinal: 0x31
  USHORT QosEquivalencyMask;               // offset: 0x1a0 ordinal: 0x32
  USHORT HwFeedbackTableIndex;             // offset: 0x1a2 ordinal: 0x33
  UCHAR HwFeedbackParkHint;                // offset: 0x1a4 ordinal: 0x34
  UCHAR HwFeedbackPerformanceClass;        // offset: 0x1a5 ordinal: 0x35
  UCHAR HwFeedbackEfficiencyClass;         // offset: 0x1a6 ordinal: 0x36
  UCHAR HeteroCoreType;                    // offset: 0x1a7 ordinal: 0x37
} _PROCESSOR_POWER_STATE;

// 0x110 bytes (sizeof)
typedef struct _PROCESS_ENERGY_VALUES {
  ULONGLONG Cycles[4][2];      // offset: 0x0 ordinal: 0x0
  ULONGLONG DiskEnergy;        // offset: 0x40 ordinal: 0x1
  ULONGLONG NetworkTailEnergy; // offset: 0x48 ordinal: 0x2
  ULONGLONG MBBTailEnergy;     // offset: 0x50 ordinal: 0x3
  ULONGLONG NetworkTxRxBytes;  // offset: 0x58 ordinal: 0x4
  ULONGLONG MBBTxRxBytes;      // offset: 0x60 ordinal: 0x5
  union {
    union _ENERGY_STATE_DURATION Durations[3]; // offset: 0x68 ordinal: 0x6
    union _ENERGY_STATE_DURATION
        ForegroundDuration; // offset: 0x68 ordinal: 0x7
  };
  union _ENERGY_STATE_DURATION
      DesktopVisibleDuration; // offset: 0x70 ordinal: 0x8
  union _ENERGY_STATE_DURATION
      PSMForegroundDuration;          // offset: 0x78 ordinal: 0x9
  ULONG CompositionRendered;          // offset: 0x80 ordinal: 0xa
  ULONG CompositionDirtyGenerated;    // offset: 0x84 ordinal: 0xb
  ULONG CompositionDirtyPropagated;   // offset: 0x88 ordinal: 0xc
  ULONG Reserved1;                    // offset: 0x8c ordinal: 0xd
  ULONGLONG AttributedCycles[4][2];   // offset: 0x90 ordinal: 0xe
  ULONGLONG WorkOnBehalfCycles[4][2]; // offset: 0xd0 ordinal: 0xf
} _PROCESS_ENERGY_VALUES;

// 0x1b0 bytes (sizeof)
typedef struct _PROCESS_EXTENDED_ENERGY_VALUES {
  struct _PROCESS_ENERGY_VALUES Base; // offset: 0x0 ordinal: 0x0
  struct _PROCESS_ENERGY_VALUES_EXTENSION
      Extension; // offset: 0x110 ordinal: 0x1
} _PROCESS_EXTENDED_ENERGY_VALUES;

// 0x3a0 bytes (sizeof)
typedef struct _EJOB {
  struct _KEVENT Event;                           // offset: 0x0 ordinal: 0x0
  struct _LIST_ENTRY JobLinks;                    // offset: 0x10 ordinal: 0x1
  struct _LIST_ENTRY ProcessListHead;             // offset: 0x18 ordinal: 0x2
  struct _ERESOURCE JobLock;                      // offset: 0x20 ordinal: 0x3
  union _LARGE_INTEGER TotalUserTime;             // offset: 0x58 ordinal: 0x4
  union _LARGE_INTEGER TotalKernelTime;           // offset: 0x60 ordinal: 0x5
  union _LARGE_INTEGER TotalCycleTime;            // offset: 0x68 ordinal: 0x6
  union _LARGE_INTEGER ThisPeriodTotalUserTime;   // offset: 0x70 ordinal: 0x7
  union _LARGE_INTEGER ThisPeriodTotalKernelTime; // offset: 0x78 ordinal: 0x8
  ULONGLONG TotalContextSwitches;                 // offset: 0x80 ordinal: 0x9
  ULONG TotalPageFaultCount;                      // offset: 0x88 ordinal: 0xa
  ULONG TotalProcesses;                           // offset: 0x8c ordinal: 0xb
  ULONG ActiveProcesses;                          // offset: 0x90 ordinal: 0xc
  ULONG TotalTerminatedProcesses;                 // offset: 0x94 ordinal: 0xd
  union _LARGE_INTEGER PerProcessUserTimeLimit;   // offset: 0x98 ordinal: 0xe
  union _LARGE_INTEGER PerJobUserTimeLimit;       // offset: 0xa0 ordinal: 0xf
  ULONG MinimumWorkingSetSize;                    // offset: 0xa8 ordinal: 0x10
  ULONG MaximumWorkingSetSize;                    // offset: 0xac ordinal: 0x11
  ULONG LimitFlags;                               // offset: 0xb0 ordinal: 0x12
  ULONG ActiveProcessLimit;                       // offset: 0xb4 ordinal: 0x13
  struct _KAFFINITY_EX Affinity;                  // offset: 0xb8 ordinal: 0x14
  struct _JOB_ACCESS_STATE *AccessState;          // offset: 0xc4 ordinal: 0x15
  VOID *AccessStateQuotaReference;                // offset: 0xc8 ordinal: 0x16
  ULONG UIRestrictionsClass;                      // offset: 0xcc ordinal: 0x17
  ULONG EndOfJobTimeAction;                       // offset: 0xd0 ordinal: 0x18
  VOID *CompletionPort;                           // offset: 0xd4 ordinal: 0x19
  VOID *CompletionKey;                            // offset: 0xd8 ordinal: 0x1a
  ULONGLONG CompletionCount;                      // offset: 0xe0 ordinal: 0x1b
  ULONG SessionId;                                // offset: 0xe8 ordinal: 0x1c
  ULONG SchedulingClass;                          // offset: 0xec ordinal: 0x1d
  ULONGLONG ReadOperationCount;                   // offset: 0xf0 ordinal: 0x1e
  ULONGLONG WriteOperationCount;                  // offset: 0xf8 ordinal: 0x1f
  ULONGLONG OtherOperationCount;                  // offset: 0x100 ordinal: 0x20
  ULONGLONG ReadTransferCount;                    // offset: 0x108 ordinal: 0x21
  ULONGLONG WriteTransferCount;                   // offset: 0x110 ordinal: 0x22
  ULONGLONG OtherTransferCount;                   // offset: 0x118 ordinal: 0x23
  struct _PROCESS_DISK_COUNTERS DiskIoInfo;       // offset: 0x120 ordinal: 0x24
  ULONG ProcessMemoryLimit;                       // offset: 0x148 ordinal: 0x25
  ULONG JobMemoryLimit;                           // offset: 0x14c ordinal: 0x26
  ULONG JobTotalMemoryLimit;                      // offset: 0x150 ordinal: 0x27
  ULONG PeakProcessMemoryUsed;                    // offset: 0x154 ordinal: 0x28
  ULONG PeakJobMemoryUsed;                        // offset: 0x158 ordinal: 0x29
  struct _KAFFINITY_EX EffectiveAffinity;         // offset: 0x15c ordinal: 0x2a
  union _LARGE_INTEGER
      EffectivePerProcessUserTimeLimit;         // offset: 0x168 ordinal: 0x2b
  ULONG EffectiveMinimumWorkingSetSize;         // offset: 0x170 ordinal: 0x2c
  ULONG EffectiveMaximumWorkingSetSize;         // offset: 0x174 ordinal: 0x2d
  ULONG EffectiveProcessMemoryLimit;            // offset: 0x178 ordinal: 0x2e
  struct _EJOB *EffectiveProcessMemoryLimitJob; // offset: 0x17c ordinal: 0x2f
  struct _EJOB
      *EffectivePerProcessUserTimeLimitJob;  // offset: 0x180 ordinal: 0x30
  struct _EJOB *EffectiveNetIoRateLimitJob;  // offset: 0x184 ordinal: 0x31
  struct _EJOB *EffectiveHeapAttributionJob; // offset: 0x188 ordinal: 0x32
  ULONG EffectiveLimitFlags;                 // offset: 0x18c ordinal: 0x33
  ULONG EffectiveSchedulingClass;            // offset: 0x190 ordinal: 0x34
  ULONG EffectiveFreezeCount;                // offset: 0x194 ordinal: 0x35
  ULONG EffectiveBackgroundCount;            // offset: 0x198 ordinal: 0x36
  ULONG EffectiveSwapCount;                  // offset: 0x19c ordinal: 0x37
  ULONG EffectiveNotificationLimitCount;     // offset: 0x1a0 ordinal: 0x38
  UCHAR EffectivePriorityClass;              // offset: 0x1a4 ordinal: 0x39
  UCHAR PriorityClass;                       // offset: 0x1a5 ordinal: 0x3a
  UCHAR NestingDepth;                        // offset: 0x1a6 ordinal: 0x3b
  UCHAR Reserved1[1];                        // offset: 0x1a7 ordinal: 0x3c
  ULONG CompletionFilter;                    // offset: 0x1a8 ordinal: 0x3d
  union {
    struct _WNF_STATE_NAME WakeChannel;       // offset: 0x1b0 ordinal: 0x3e
    struct _PS_JOB_WAKE_INFORMATION WakeInfo; // offset: 0x1b0 ordinal: 0x3f
  };
  struct _JOBOBJECT_WAKE_FILTER WakeFilter; // offset: 0x1f8 ordinal: 0x40
  ULONG LowEdgeLatchFilter;                 // offset: 0x200 ordinal: 0x41
  struct _EJOB *NotificationLink;           // offset: 0x204 ordinal: 0x42
  ULONGLONG CurrentJobMemoryUsed;           // offset: 0x208 ordinal: 0x43
  struct _JOB_NOTIFICATION_INFORMATION
      *NotificationInfo;                // offset: 0x210 ordinal: 0x44
  VOID *NotificationInfoQuotaReference; // offset: 0x214 ordinal: 0x45
  struct _IO_MINI_COMPLETION_PACKET_USER
      *NotificationPacket;                      // offset: 0x218 ordinal: 0x46
  struct _JOB_CPU_RATE_CONTROL *CpuRateControl; // offset: 0x21c ordinal: 0x47
  VOID *EffectiveSchedulingGroup;               // offset: 0x220 ordinal: 0x48
  ULONGLONG ReadyTime;                          // offset: 0x228 ordinal: 0x49
  struct _EX_PUSH_LOCK MemoryLimitsLock;        // offset: 0x230 ordinal: 0x4a
  struct _LIST_ENTRY SiblingJobLinks;           // offset: 0x234 ordinal: 0x4b
  struct _LIST_ENTRY ChildJobListHead;          // offset: 0x23c ordinal: 0x4c
  struct _EJOB *ParentJob;                      // offset: 0x244 ordinal: 0x4d
  struct _EJOB *RootJob;                        // offset: 0x248 ordinal: 0x4e
  struct _LIST_ENTRY IteratorListHead;          // offset: 0x24c ordinal: 0x4f
  ULONG AncestorCount;                          // offset: 0x254 ordinal: 0x50
  union {
    struct _EJOB **Ancestors; // offset: 0x258 ordinal: 0x51
    VOID *SessionObject;      // offset: 0x258 ordinal: 0x52
  };
  struct _EPROCESS_VALUES Accounting;             // offset: 0x260 ordinal: 0x53
  ULONG ShadowActiveProcessCount;                 // offset: 0x2b8 ordinal: 0x54
  ULONG ActiveAuxiliaryProcessCount;              // offset: 0x2bc ordinal: 0x55
  ULONG SequenceNumber;                           // offset: 0x2c0 ordinal: 0x56
  ULONG JobId;                                    // offset: 0x2c4 ordinal: 0x57
  struct _GUID ContainerId;                       // offset: 0x2c8 ordinal: 0x58
  struct _GUID ContainerTelemetryId;              // offset: 0x2d8 ordinal: 0x59
  struct _ESERVERSILO_GLOBALS *ServerSiloGlobals; // offset: 0x2e8 ordinal: 0x5a
  struct _PS_PROPERTY_SET PropertySet;            // offset: 0x2ec ordinal: 0x5b
  struct _PSP_STORAGE *Storage;                   // offset: 0x2f8 ordinal: 0x5c
  struct _JOB_NET_RATE_CONTROL *NetRateControl;   // offset: 0x2fc ordinal: 0x5d
  union {
    ULONG JobFlags;      // offset: 0x300 ordinal: 0x5e
    ULONG CloseDone : 1; // offset: 0x300 ordinal: 0x5f
  };
  ULONG MultiGroup : 1;                    // offset: 0x300 ordinal: 0x60
  ULONG OutstandingNotification : 1;       // offset: 0x300 ordinal: 0x61
  ULONG NotificationInProgress : 1;        // offset: 0x300 ordinal: 0x62
  ULONG UILimits : 1;                      // offset: 0x300 ordinal: 0x63
  ULONG CpuRateControlActive : 1;          // offset: 0x300 ordinal: 0x64
  ULONG OwnCpuRateControl : 1;             // offset: 0x300 ordinal: 0x65
  ULONG Terminating : 1;                   // offset: 0x300 ordinal: 0x66
  ULONG WorkingSetLock : 1;                // offset: 0x300 ordinal: 0x67
  ULONG JobFrozen : 1;                     // offset: 0x300 ordinal: 0x68
  ULONG Background : 1;                    // offset: 0x300 ordinal: 0x69
  ULONG WakeNotificationAllocated : 1;     // offset: 0x300 ordinal: 0x6a
  ULONG WakeNotificationEnabled : 1;       // offset: 0x300 ordinal: 0x6b
  ULONG WakeNotificationPending : 1;       // offset: 0x300 ordinal: 0x6c
  ULONG LimitNotificationRequired : 1;     // offset: 0x300 ordinal: 0x6d
  ULONG ZeroCountNotificationRequired : 1; // offset: 0x300 ordinal: 0x6e
  ULONG CycleTimeNotificationRequired : 1; // offset: 0x300 ordinal: 0x6f
  ULONG CycleTimeNotificationPending : 1;  // offset: 0x300 ordinal: 0x70
  ULONG TimersVirtualized : 1;             // offset: 0x300 ordinal: 0x71
  ULONG JobSwapped : 1;                    // offset: 0x300 ordinal: 0x72
  ULONG ViolationDetected : 1;             // offset: 0x300 ordinal: 0x73
  ULONG EmptyJobNotified : 1;              // offset: 0x300 ordinal: 0x74
  ULONG NoSystemCharge : 1;                // offset: 0x300 ordinal: 0x75
  ULONG DropNoWakeCharges : 1;             // offset: 0x300 ordinal: 0x76
  ULONG NoWakeChargePolicyDecided : 1;     // offset: 0x300 ordinal: 0x77
  ULONG NetRateControlActive : 1;          // offset: 0x300 ordinal: 0x78
  ULONG OwnNetRateControl : 1;             // offset: 0x300 ordinal: 0x79
  ULONG IoRateControlActive : 1;           // offset: 0x300 ordinal: 0x7a
  ULONG OwnIoRateControl : 1;              // offset: 0x300 ordinal: 0x7b
  ULONG DisallowNewProcesses : 1;          // offset: 0x300 ordinal: 0x7c
  ULONG Silo : 1;                          // offset: 0x300 ordinal: 0x7d
  ULONG ContainerTelemetryIdSet : 1;       // offset: 0x300 ordinal: 0x7e
  union {
    ULONG JobFlags2;        // offset: 0x304 ordinal: 0x7f
    ULONG ParentLocked : 1; // offset: 0x304 ordinal: 0x80
  };
  ULONG
  EnableUsermodeSiloThreadImpersonation : 1; // offset: 0x304 ordinal: 0x81
  ULONG DisallowUsermodeSiloThreadImpersonation : 1; // offset: 0x304 ordinal:
                                                     // 0x82
  struct _PROCESS_EXTENDED_ENERGY_VALUES
      *EnergyValues;                   // offset: 0x308 ordinal: 0x83
  ULONG SharedCommitCharge;            // offset: 0x30c ordinal: 0x84
  ULONG DiskIoAttributionUserRefCount; // offset: 0x310 ordinal: 0x85
  ULONG DiskIoAttributionRefCount;     // offset: 0x314 ordinal: 0x86
  union {
    VOID *DiskIoAttributionContext;          // offset: 0x318 ordinal: 0x87
    struct _EJOB *DiskIoAttributionOwnerJob; // offset: 0x318 ordinal: 0x88
  };
  struct _JOB_RATE_CONTROL_HEADER
      IoRateControlHeader;                     // offset: 0x31c ordinal: 0x89
  struct _PS_IO_CONTROL_ENTRY GlobalIoControl; // offset: 0x330 ordinal: 0x8a
  LONG IoControlStateLock;                     // offset: 0x34c ordinal: 0x8b
  struct _RTL_RB_TREE VolumeIoControlTree;     // offset: 0x350 ordinal: 0x8c
  ULONGLONG IoRateOverQuotaHistory;            // offset: 0x358 ordinal: 0x8d
  ULONG IoRateCurrentGeneration;               // offset: 0x360 ordinal: 0x8e
  ULONG IoRateLastQueryGeneration;             // offset: 0x364 ordinal: 0x8f
  ULONG IoRateGenerationLength;                // offset: 0x368 ordinal: 0x90
  ULONG IoRateOverQuotaNotifySequenceId;       // offset: 0x36c ordinal: 0x91
  ULONGLONG LastThrottledIoTime;               // offset: 0x370 ordinal: 0x92
  struct _EX_PUSH_LOCK IoControlLock;          // offset: 0x378 ordinal: 0x93
  ULONG SiloHardReferenceCount;                // offset: 0x37c ordinal: 0x94
  struct _WORK_QUEUE_ITEM RundownWorkItem;     // offset: 0x380 ordinal: 0x95
  VOID *PartitionObject;                       // offset: 0x390 ordinal: 0x96
  struct _EJOB *PartitionOwnerJob;             // offset: 0x394 ordinal: 0x97
  union _JOBOBJECT_ENERGY_TRACKING_STATE
      EnergyTrackingState; // offset: 0x398 ordinal: 0x98
} _EJOB;

// 0xc8 bytes (sizeof)
typedef struct _THREAD_ENERGY_VALUES {
  ULONGLONG Cycles[4][2];             // offset: 0x0 ordinal: 0x0
  ULONGLONG AttributedCycles[4][2];   // offset: 0x40 ordinal: 0x1
  ULONGLONG WorkOnBehalfCycles[4][2]; // offset: 0x80 ordinal: 0x2
  union _TIMELINE_BITMAP CpuTimeline; // offset: 0xc0 ordinal: 0x3
} _THREAD_ENERGY_VALUES;

// 0x5f00 bytes (sizeof)
typedef struct _KPRCB {
  USHORT MinorVersion;            // offset: 0x0 ordinal: 0x0
  USHORT MajorVersion;            // offset: 0x2 ordinal: 0x1
  struct _KTHREAD *CurrentThread; // offset: 0x4 ordinal: 0x2
  struct _KTHREAD *NextThread;    // offset: 0x8 ordinal: 0x3
  struct _KTHREAD *IdleThread;    // offset: 0xc ordinal: 0x4
  UCHAR LegacyNumber;             // offset: 0x10 ordinal: 0x5
  UCHAR NestingLevel;             // offset: 0x11 ordinal: 0x6
  USHORT BuildType;               // offset: 0x12 ordinal: 0x7
  CHAR CpuType;                   // offset: 0x14 ordinal: 0x8
  CHAR CpuID;                     // offset: 0x15 ordinal: 0x9
  union {
    USHORT CpuStep;    // offset: 0x16 ordinal: 0xa
    UCHAR CpuStepping; // offset: 0x16 ordinal: 0xb
  };
  UCHAR CpuModel;                          // offset: 0x17 ordinal: 0xc
  struct _KPROCESSOR_STATE ProcessorState; // offset: 0x18 ordinal: 0xd
  struct _KNODE *ParentNode;               // offset: 0x338 ordinal: 0xe
  CHAR *PriorityState;                     // offset: 0x33c ordinal: 0xf
  ULONG KernelReserved[14];                // offset: 0x340 ordinal: 0x10
  ULONG HalReserved[16];                   // offset: 0x378 ordinal: 0x11
  ULONG CFlushSize;                        // offset: 0x3b8 ordinal: 0x12
  UCHAR CoresPerPhysicalProcessor;         // offset: 0x3bc ordinal: 0x13
  UCHAR LogicalProcessorsPerCore;          // offset: 0x3bd ordinal: 0x14
  UCHAR CpuVendor;                         // offset: 0x3be ordinal: 0x15
  UCHAR PrcbPad0[1];                       // offset: 0x3bf ordinal: 0x16
  ULONG MHz;                               // offset: 0x3c0 ordinal: 0x17
  UCHAR GroupIndex;                        // offset: 0x3c4 ordinal: 0x18
  UCHAR Group;                             // offset: 0x3c5 ordinal: 0x19
  UCHAR PrcbPad05[2];                      // offset: 0x3c6 ordinal: 0x1a
  ULONG GroupSetMember;                    // offset: 0x3c8 ordinal: 0x1b
  ULONG Number;                            // offset: 0x3cc ordinal: 0x1c
  UCHAR ClockOwner;                        // offset: 0x3d0 ordinal: 0x1d
  union {
    UCHAR PendingTickFlags; // offset: 0x3d1 ordinal: 0x1e
    UCHAR PendingTick : 1;  // offset: 0x3d1 ordinal: 0x1f
  };
  UCHAR PendingBackupTick : 1;                   // offset: 0x3d1 ordinal: 0x20
  UCHAR PrcbPad10[70];                           // offset: 0x3d2 ordinal: 0x21
  struct _KSPIN_LOCK_QUEUE LockQueue[17];        // offset: 0x418 ordinal: 0x22
  ULONG InterruptCount;                          // offset: 0x4a0 ordinal: 0x23
  ULONG KernelTime;                              // offset: 0x4a4 ordinal: 0x24
  ULONG UserTime;                                // offset: 0x4a8 ordinal: 0x25
  ULONG DpcTime;                                 // offset: 0x4ac ordinal: 0x26
  ULONG DpcTimeCount;                            // offset: 0x4b0 ordinal: 0x27
  ULONG InterruptTime;                           // offset: 0x4b4 ordinal: 0x28
  ULONG AdjustDpcThreshold;                      // offset: 0x4b8 ordinal: 0x29
  ULONG PageColor;                               // offset: 0x4bc ordinal: 0x2a
  UCHAR DebuggerSavedIRQL;                       // offset: 0x4c0 ordinal: 0x2b
  UCHAR NodeColor;                               // offset: 0x4c1 ordinal: 0x2c
  UCHAR DeepSleep;                               // offset: 0x4c2 ordinal: 0x2d
  UCHAR TbFlushListActive;                       // offset: 0x4c3 ordinal: 0x2e
  VOID *CachedStack;                             // offset: 0x4c4 ordinal: 0x2f
  ULONG NodeShiftedColor;                        // offset: 0x4c8 ordinal: 0x30
  ULONG SecondaryColorMask;                      // offset: 0x4cc ordinal: 0x31
  ULONG DpcTimeLimit;                            // offset: 0x4d0 ordinal: 0x32
  VOID *MmInternal;                              // offset: 0x4d4 ordinal: 0x33
  union _KPRCBFLAG PrcbFlags;                    // offset: 0x4d8 ordinal: 0x34
  VOID *SchedulerAssist;                         // offset: 0x4dc ordinal: 0x35
  ULONG CcFastReadNoWait;                        // offset: 0x4e0 ordinal: 0x36
  ULONG CcFastReadWait;                          // offset: 0x4e4 ordinal: 0x37
  ULONG CcFastReadNotPossible;                   // offset: 0x4e8 ordinal: 0x38
  ULONG CcCopyReadNoWait;                        // offset: 0x4ec ordinal: 0x39
  ULONG CcCopyReadWait;                          // offset: 0x4f0 ordinal: 0x3a
  ULONG CcCopyReadNoWaitMiss;                    // offset: 0x4f4 ordinal: 0x3b
  LONG MmSpinLockOrdering;                       // offset: 0x4f8 ordinal: 0x3c
  LONG IoReadOperationCount;                     // offset: 0x4fc ordinal: 0x3d
  LONG IoWriteOperationCount;                    // offset: 0x500 ordinal: 0x3e
  LONG IoOtherOperationCount;                    // offset: 0x504 ordinal: 0x3f
  union _LARGE_INTEGER IoReadTransferCount;      // offset: 0x508 ordinal: 0x40
  union _LARGE_INTEGER IoWriteTransferCount;     // offset: 0x510 ordinal: 0x41
  union _LARGE_INTEGER IoOtherTransferCount;     // offset: 0x518 ordinal: 0x42
  ULONG CcFastMdlReadNoWait;                     // offset: 0x520 ordinal: 0x43
  ULONG CcFastMdlReadWait;                       // offset: 0x524 ordinal: 0x44
  ULONG CcFastMdlReadNotPossible;                // offset: 0x528 ordinal: 0x45
  ULONG CcMapDataNoWait;                         // offset: 0x52c ordinal: 0x46
  ULONG CcMapDataWait;                           // offset: 0x530 ordinal: 0x47
  ULONG CcPinMappedDataCount;                    // offset: 0x534 ordinal: 0x48
  ULONG CcPinReadNoWait;                         // offset: 0x538 ordinal: 0x49
  ULONG CcPinReadWait;                           // offset: 0x53c ordinal: 0x4a
  ULONG CcMdlReadNoWait;                         // offset: 0x540 ordinal: 0x4b
  ULONG CcMdlReadWait;                           // offset: 0x544 ordinal: 0x4c
  ULONG CcLazyWriteHotSpots;                     // offset: 0x548 ordinal: 0x4d
  ULONG CcLazyWriteIos;                          // offset: 0x54c ordinal: 0x4e
  ULONG CcLazyWritePages;                        // offset: 0x550 ordinal: 0x4f
  ULONG CcDataFlushes;                           // offset: 0x554 ordinal: 0x50
  ULONG CcDataPages;                             // offset: 0x558 ordinal: 0x51
  ULONG CcLostDelayedWrites;                     // offset: 0x55c ordinal: 0x52
  ULONG CcFastReadResourceMiss;                  // offset: 0x560 ordinal: 0x53
  ULONG CcCopyReadWaitMiss;                      // offset: 0x564 ordinal: 0x54
  ULONG CcFastMdlReadResourceMiss;               // offset: 0x568 ordinal: 0x55
  ULONG CcMapDataNoWaitMiss;                     // offset: 0x56c ordinal: 0x56
  ULONG CcMapDataWaitMiss;                       // offset: 0x570 ordinal: 0x57
  ULONG CcPinReadNoWaitMiss;                     // offset: 0x574 ordinal: 0x58
  ULONG CcPinReadWaitMiss;                       // offset: 0x578 ordinal: 0x59
  ULONG CcMdlReadNoWaitMiss;                     // offset: 0x57c ordinal: 0x5a
  ULONG CcMdlReadWaitMiss;                       // offset: 0x580 ordinal: 0x5b
  ULONG CcReadAheadIos;                          // offset: 0x584 ordinal: 0x5c
  ULONG KeAlignmentFixupCount;                   // offset: 0x588 ordinal: 0x5d
  ULONG KeExceptionDispatchCount;                // offset: 0x58c ordinal: 0x5e
  ULONG KeSystemCalls;                           // offset: 0x590 ordinal: 0x5f
  ULONG AvailableTime;                           // offset: 0x594 ordinal: 0x60
  ULONG PrcbPad22[2];                            // offset: 0x598 ordinal: 0x61
  struct _PP_LOOKASIDE_LIST PPLookasideList[16]; // offset: 0x5a0 ordinal: 0x62
  struct _GENERAL_LOOKASIDE_POOL
      PPNxPagedLookasideList[32]; // offset: 0x620 ordinal: 0x63
  struct _GENERAL_LOOKASIDE_POOL
      PPNPagedLookasideList[32]; // offset: 0xf20 ordinal: 0x64
  struct _GENERAL_LOOKASIDE_POOL
      PPPagedLookasideList[32]; // offset: 0x1820 ordinal: 0x65
  LONG PacketBarrier;           // offset: 0x2120 ordinal: 0x66
  LONG ReverseStall;            // offset: 0x2124 ordinal: 0x67
  VOID *IpiFrame;               // offset: 0x2128 ordinal: 0x68
  UCHAR PrcbPad3[52];           // offset: 0x212c ordinal: 0x69
  VOID *CurrentPacket[3];       // offset: 0x2160 ordinal: 0x6a
  ULONG TargetSet;              // offset: 0x216c ordinal: 0x6b
  VOID(*WorkerRoutine)
  (VOID *, VOID *, VOID *, VOID *);   // offset: 0x2170 ordinal: 0x6c
  ULONG IpiFrozen;                    // offset: 0x2174 ordinal: 0x6d
  UCHAR PrcbPad4[40];                 // offset: 0x2178 ordinal: 0x6e
  ULONG RequestSummary;               // offset: 0x21a0 ordinal: 0x6f
  LONG TargetCount;                   // offset: 0x21a4 ordinal: 0x70
  ULONGLONG LastNonHrTimerExpiration; // offset: 0x21a8 ordinal: 0x71
  ULONGLONG TrappedSecurityDomain;    // offset: 0x21b0 ordinal: 0x72
  union {
    UCHAR BpbState;       // offset: 0x21b8 ordinal: 0x73
    UCHAR BpbCpuIdle : 1; // offset: 0x21b8 ordinal: 0x74
  };
  UCHAR BpbFlushRsbOnTrap : 1; // offset: 0x21b8 ordinal: 0x75
  UCHAR BpbIbpbOnReturn : 1;   // offset: 0x21b8 ordinal: 0x76
  UCHAR BpbIbpbOnTrap : 1;     // offset: 0x21b8 ordinal: 0x77
  UCHAR BpbReserved : 4;       // offset: 0x21b8 ordinal: 0x78
  union {
    UCHAR BpbFeatures;        // offset: 0x21b9 ordinal: 0x79
    UCHAR BpbClearOnIdle : 1; // offset: 0x21b9 ordinal: 0x7a
  };
  UCHAR BpbEnabled : 1;          // offset: 0x21b9 ordinal: 0x7b
  UCHAR BpbSmep : 1;             // offset: 0x21b9 ordinal: 0x7c
  UCHAR BpbFeaturesReserved : 5; // offset: 0x21b9 ordinal: 0x7d
  UCHAR BpbCurrentSpecCtrl;      // offset: 0x21ba ordinal: 0x7e
  UCHAR BpbKernelSpecCtrl;       // offset: 0x21bb ordinal: 0x7f
  UCHAR BpbNmiSpecCtrl;          // offset: 0x21bc ordinal: 0x80
  UCHAR BpbUserSpecCtrl;         // offset: 0x21bd ordinal: 0x81
  UCHAR PrcbPad49[2];            // offset: 0x21be ordinal: 0x82
  ULONG ProcessorSignature;      // offset: 0x21c0 ordinal: 0x83
  ULONG ProcessorFlags;          // offset: 0x21c4 ordinal: 0x84
  UCHAR PrcbPad50[8];            // offset: 0x21c8 ordinal: 0x85
  ULONG InterruptLastCount;      // offset: 0x21d0 ordinal: 0x86
  ULONG InterruptRate;           // offset: 0x21d4 ordinal: 0x87
  ULONG DeviceInterrupts;        // offset: 0x21d8 ordinal: 0x88
  VOID *IsrDpcStats;             // offset: 0x21dc ordinal: 0x89
  struct _KDPC_DATA DpcData[2];  // offset: 0x21e0 ordinal: 0x8a
  VOID *DpcStack;                // offset: 0x2210 ordinal: 0x8b
  LONG MaximumDpcQueueDepth;     // offset: 0x2214 ordinal: 0x8c
  ULONG DpcRequestRate;          // offset: 0x2218 ordinal: 0x8d
  ULONG MinimumDpcRate;          // offset: 0x221c ordinal: 0x8e
  ULONG DpcLastCount;            // offset: 0x2220 ordinal: 0x8f
  ULONG PrcbLock;                // offset: 0x2224 ordinal: 0x90
  struct _KGATE DpcGate;         // offset: 0x2228 ordinal: 0x91
  UCHAR IdleState;               // offset: 0x2238 ordinal: 0x92
  UCHAR QuantumEnd;              // offset: 0x2239 ordinal: 0x93
  UCHAR DpcRoutineActive;        // offset: 0x223a ordinal: 0x94
  UCHAR IdleSchedule;            // offset: 0x223b ordinal: 0x95
  union {
    LONG DpcRequestSummary;  // offset: 0x223c ordinal: 0x96
    SHORT DpcRequestSlot[2]; // offset: 0x223c ordinal: 0x97
    SHORT NormalDpcState;    // offset: 0x223c ordinal: 0x98
  };
  SHORT ThreadDpcState;                   // offset: 0x223e ordinal: 0x99
  ULONG DpcNormalProcessingActive : 1;    // offset: 0x223c ordinal: 0x9a
  ULONG DpcNormalProcessingRequested : 1; // offset: 0x223c ordinal: 0x9b
  ULONG DpcNormalThreadSignal : 1;        // offset: 0x223c ordinal: 0x9c
  ULONG DpcNormalTimerExpiration : 1;     // offset: 0x223c ordinal: 0x9d
  ULONG DpcNormalDpcPresent : 1;          // offset: 0x223c ordinal: 0x9e
  ULONG DpcNormalLocalInterrupt : 1;      // offset: 0x223c ordinal: 0x9f
  ULONG DpcNormalSpare : 10;              // offset: 0x223c ordinal: 0xa0
  ULONG DpcThreadActive : 1;              // offset: 0x223c ordinal: 0xa1
  ULONG DpcThreadRequested : 1;           // offset: 0x223c ordinal: 0xa2
  ULONG DpcThreadSpare : 14;              // offset: 0x223c ordinal: 0xa3
  ULONG LastTimerHand;                    // offset: 0x2240 ordinal: 0xa4
  ULONG LastTick;                         // offset: 0x2244 ordinal: 0xa5
  ULONG PeriodicCount;                    // offset: 0x2248 ordinal: 0xa6
  ULONG PeriodicBias;                     // offset: 0x224c ordinal: 0xa7
  ULONG ClockInterrupts;                  // offset: 0x2250 ordinal: 0xa8
  ULONG ReadyScanTick;                    // offset: 0x2254 ordinal: 0xa9
  UCHAR GroupSchedulingOverQuota;         // offset: 0x2258 ordinal: 0xaa
  UCHAR ThreadDpcEnable;                  // offset: 0x2259 ordinal: 0xab
  UCHAR PrcbPad41[2];                     // offset: 0x225a ordinal: 0xac
  struct _KTIMER_TABLE TimerTable;        // offset: 0x2260 ordinal: 0xad
  struct _KDPC CallDpc;                   // offset: 0x3aa0 ordinal: 0xae
  LONG ClockKeepAlive;                    // offset: 0x3ac0 ordinal: 0xaf
  UCHAR PrcbPad6[4];                      // offset: 0x3ac4 ordinal: 0xb0
  LONG DpcWatchdogPeriod;                 // offset: 0x3ac8 ordinal: 0xb1
  LONG DpcWatchdogCount;                  // offset: 0x3acc ordinal: 0xb2
  LONG KeSpinLockOrdering;                // offset: 0x3ad0 ordinal: 0xb3
  ULONG
  DpcWatchdogProfileCumulativeDpcThreshold; // offset: 0x3ad4 ordinal: 0xb4
  ULONG QueueIndex;                         // offset: 0x3ad8 ordinal: 0xb5
  struct _SINGLE_LIST_ENTRY
      DeferredReadyListHead;           // offset: 0x3adc ordinal: 0xb6
  ULONG ReadySummary;                  // offset: 0x3ae0 ordinal: 0xb7
  LONG AffinitizedSelectionMask;       // offset: 0x3ae4 ordinal: 0xb8
  ULONG WaitLock;                      // offset: 0x3ae8 ordinal: 0xb9
  struct _LIST_ENTRY WaitListHead;     // offset: 0x3aec ordinal: 0xba
  ULONG ScbOffset;                     // offset: 0x3af4 ordinal: 0xbb
  ULONG ReadyThreadCount;              // offset: 0x3af8 ordinal: 0xbc
  ULONGLONG StartCycles;               // offset: 0x3b00 ordinal: 0xbd
  ULONGLONG TaggedCyclesStart;         // offset: 0x3b08 ordinal: 0xbe
  ULONGLONG TaggedCycles[2];           // offset: 0x3b10 ordinal: 0xbf
  ULONGLONG GenerationTarget;          // offset: 0x3b20 ordinal: 0xc0
  ULONGLONG CycleTime;                 // offset: 0x3b28 ordinal: 0xc1
  ULONGLONG AffinitizedCycles;         // offset: 0x3b30 ordinal: 0xc2
  ULONGLONG ImportantCycles;           // offset: 0x3b38 ordinal: 0xc3
  ULONGLONG UnimportantCycles;         // offset: 0x3b40 ordinal: 0xc4
  ULONGLONG ReadyQueueExpectedRunTime; // offset: 0x3b48 ordinal: 0xc5
  ULONG HighCycleTime;                 // offset: 0x3b50 ordinal: 0xc6
  ULONGLONG Cycles[4][2];              // offset: 0x3b58 ordinal: 0xc7
  ULONG PrcbPad71[2];                  // offset: 0x3b98 ordinal: 0xc8
  struct _LIST_ENTRY
      DispatcherReadyListHead[32];               // offset: 0x3ba0 ordinal: 0xc9
  VOID *ChainedInterruptList;                    // offset: 0x3ca0 ordinal: 0xca
  LONG LookasideIrpFloat;                        // offset: 0x3ca4 ordinal: 0xcb
  struct _RTL_RB_TREE ScbQueue;                  // offset: 0x3ca8 ordinal: 0xcc
  struct _LIST_ENTRY ScbList;                    // offset: 0x3cb0 ordinal: 0xcd
  LONG MmPageFaultCount;                         // offset: 0x3cb8 ordinal: 0xce
  LONG MmCopyOnWriteCount;                       // offset: 0x3cbc ordinal: 0xcf
  LONG MmTransitionCount;                        // offset: 0x3cc0 ordinal: 0xd0
  LONG MmCacheTransitionCount;                   // offset: 0x3cc4 ordinal: 0xd1
  LONG MmDemandZeroCount;                        // offset: 0x3cc8 ordinal: 0xd2
  LONG MmPageReadCount;                          // offset: 0x3ccc ordinal: 0xd3
  LONG MmPageReadIoCount;                        // offset: 0x3cd0 ordinal: 0xd4
  LONG MmCacheReadCount;                         // offset: 0x3cd4 ordinal: 0xd5
  LONG MmCacheIoCount;                           // offset: 0x3cd8 ordinal: 0xd6
  LONG MmDirtyPagesWriteCount;                   // offset: 0x3cdc ordinal: 0xd7
  LONG MmDirtyWriteIoCount;                      // offset: 0x3ce0 ordinal: 0xd8
  LONG MmMappedPagesWriteCount;                  // offset: 0x3ce4 ordinal: 0xd9
  LONG MmMappedWriteIoCount;                     // offset: 0x3ce8 ordinal: 0xda
  ULONG CachedCommit;                            // offset: 0x3cec ordinal: 0xdb
  ULONG CachedResidentAvailable;                 // offset: 0x3cf0 ordinal: 0xdc
  VOID *HyperPte;                                // offset: 0x3cf4 ordinal: 0xdd
  UCHAR PrcbPad8[4];                             // offset: 0x3cf8 ordinal: 0xde
  UCHAR VendorString[13];                        // offset: 0x3cfc ordinal: 0xdf
  UCHAR InitialApicId;                           // offset: 0x3d09 ordinal: 0xe0
  UCHAR LogicalProcessorsPerPhysicalProcessor;   // offset: 0x3d0a ordinal: 0xe1
  UCHAR PrcbPad9[1];                             // offset: 0x3d0b ordinal: 0xe2
  ULONGLONG FeatureBits;                         // offset: 0x3d10 ordinal: 0xe3
  union _LARGE_INTEGER UpdateSignature;          // offset: 0x3d18 ordinal: 0xe4
  ULONGLONG IsrTime;                             // offset: 0x3d20 ordinal: 0xe5
  ULONG PrcbPad90[2];                            // offset: 0x3d28 ordinal: 0xe6
  struct _PROCESSOR_POWER_STATE PowerState;      // offset: 0x3d30 ordinal: 0xe7
  struct _KDPC ForceIdleDpc;                     // offset: 0x3ed8 ordinal: 0xe8
  ULONG PrcbPad91[14];                           // offset: 0x3ef8 ordinal: 0xe9
  ULONG DpcWatchdogProfileSingleDpcThreshold;    // offset: 0x3f30 ordinal: 0xea
  struct _KDPC DpcWatchdogDpc;                   // offset: 0x3f34 ordinal: 0xeb
  struct _KTIMER DpcWatchdogTimer;               // offset: 0x3f58 ordinal: 0xec
  union _SLIST_HEADER HypercallPageList;         // offset: 0x3f80 ordinal: 0xed
  VOID *HypercallCachedPages;                    // offset: 0x3f88 ordinal: 0xee
  VOID *VirtualApicAssist;                       // offset: 0x3f8c ordinal: 0xef
  ULONGLONG *StatisticsPage;                     // offset: 0x3f90 ordinal: 0xf0
  struct _CACHE_DESCRIPTOR Cache[5];             // offset: 0x3f94 ordinal: 0xf1
  ULONG CacheCount;                              // offset: 0x3fd0 ordinal: 0xf2
  struct _KAFFINITY_EX PackageProcessorSet;      // offset: 0x3fd4 ordinal: 0xf3
  ULONG SharedReadyQueueMask;                    // offset: 0x3fe0 ordinal: 0xf4
  struct _KSHARED_READY_QUEUE *SharedReadyQueue; // offset: 0x3fe4 ordinal: 0xf5
  ULONG SharedQueueScanOwner;                    // offset: 0x3fe8 ordinal: 0xf6
  ULONG CoreProcessorSet;                        // offset: 0x3fec ordinal: 0xf7
  ULONG ScanSiblingMask;                         // offset: 0x3ff0 ordinal: 0xf8
  ULONG LLCMask;                                 // offset: 0x3ff4 ordinal: 0xf9
  ULONG CacheProcessorMask[5];                   // offset: 0x3ff8 ordinal: 0xfa
  ULONG ScanSiblingIndex;                        // offset: 0x400c ordinal: 0xfb
  VOID *WheaInfo;                                // offset: 0x4010 ordinal: 0xfc
  VOID *EtwSupport;                              // offset: 0x4014 ordinal: 0xfd
  union _SLIST_HEADER InterruptObjectPool;       // offset: 0x4018 ordinal: 0xfe
  VOID **DpcWatchdogProfile;                     // offset: 0x4020 ordinal: 0xff
  VOID **DpcWatchdogProfileCurrentEmptyCapture; // offset: 0x4024 ordinal: 0x100
  ULONG PackageId;                              // offset: 0x4028 ordinal: 0x101
  ULONG PteBitCache;                            // offset: 0x402c ordinal: 0x102
  ULONG PteBitOffset;                           // offset: 0x4030 ordinal: 0x103
  ULONG PrcbPad93;                              // offset: 0x4034 ordinal: 0x104
  struct _PROCESSOR_PROFILE_CONTROL_AREA
      *ProcessorProfileControlArea;            // offset: 0x4038 ordinal: 0x105
  VOID *ProfileEventIndexAddress;              // offset: 0x403c ordinal: 0x106
  struct _KDPC TimerExpirationDpc;             // offset: 0x4040 ordinal: 0x107
  struct _SYNCH_COUNTERS SynchCounters;        // offset: 0x4060 ordinal: 0x108
  struct _FILESYSTEM_DISK_COUNTERS FsCounters; // offset: 0x4118 ordinal: 0x109
  struct _CONTEXT *Context;                    // offset: 0x4128 ordinal: 0x10a
  ULONG ContextFlagsInit;                      // offset: 0x412c ordinal: 0x10b
  struct _XSAVE_AREA *ExtendedState;           // offset: 0x4130 ordinal: 0x10c
  struct _KENTROPY_TIMING_STATE
      EntropyTimingState; // offset: 0x4134 ordinal: 0x10d
  VOID *IsrStack;         // offset: 0x425c ordinal: 0x10e
  struct _KINTERRUPT
      *VectorToInterruptObject[208];            // offset: 0x4260 ordinal: 0x10f
  struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList; // offset: 0x45a0 ordinal: 0x110
  struct _SINGLE_LIST_ENTRY
      AbPropagateBoostsList; // offset: 0x45a4 ordinal: 0x111
  struct _KDPC AbDpc;        // offset: 0x45a8 ordinal: 0x112
  struct _IOP_IRP_STACK_PROFILER
      IoIrpStackProfilerCurrent; // offset: 0x45c8 ordinal: 0x113
  struct _IOP_IRP_STACK_PROFILER
      IoIrpStackProfilerPrevious; // offset: 0x461c ordinal: 0x114
  struct _KTIMER_EXPIRATION_TRACE
      TimerExpirationTrace[16];    // offset: 0x4670 ordinal: 0x115
  ULONG TimerExpirationTraceCount; // offset: 0x4770 ordinal: 0x116
  VOID *ExSaPageArray;             // offset: 0x4774 ordinal: 0x117
  struct _XSAVE_AREA_HEADER
      *ExtendedSupervisorState; // offset: 0x4778 ordinal: 0x118
  ULONG PrcbPad100[9];          // offset: 0x477c ordinal: 0x119
  struct _KSHARED_READY_QUEUE
      LocalSharedReadyQueue;                 // offset: 0x47a0 ordinal: 0x11a
  struct _REQUEST_MAILBOX *Mailbox;          // offset: 0x48e0 ordinal: 0x11b
  UCHAR PrcbPad[1532];                       // offset: 0x48e4 ordinal: 0x11c
  ULONG KernelDirectoryTableBase;            // offset: 0x4ee0 ordinal: 0x11d
  ULONG EspBaseShadow;                       // offset: 0x4ee4 ordinal: 0x11e
  ULONG UserEspShadow;                       // offset: 0x4ee8 ordinal: 0x11f
  ULONG ShadowFlags;                         // offset: 0x4eec ordinal: 0x120
  ULONG UserDS;                              // offset: 0x4ef0 ordinal: 0x121
  ULONG UserES;                              // offset: 0x4ef4 ordinal: 0x122
  ULONG UserFS;                              // offset: 0x4ef8 ordinal: 0x123
  VOID *EspIretd;                            // offset: 0x4efc ordinal: 0x124
  ULONG RestoreSegOption;                    // offset: 0x4f00 ordinal: 0x125
  ULONG SavedEsi;                            // offset: 0x4f04 ordinal: 0x126
  ULONG DbgLogs[512];                        // offset: 0x4f08 ordinal: 0x127
  ULONG DbgCount;                            // offset: 0x5708 ordinal: 0x128
  ULONG PrcbPadRemaingPage[501];             // offset: 0x570c ordinal: 0x129
  struct _REQUEST_MAILBOX RequestMailbox[1]; // offset: 0x5ee0 ordinal: 0x12a
} _KPRCB;

// 0x358 bytes (sizeof)
typedef struct _KTHREAD {
  struct _DISPATCHER_HEADER Header;           // offset: 0x0 ordinal: 0x0
  VOID *SListFaultAddress;                    // offset: 0x10 ordinal: 0x1
  ULONGLONG QuantumTarget;                    // offset: 0x18 ordinal: 0x2
  VOID *InitialStack;                         // offset: 0x20 ordinal: 0x3
  VOID *StackLimit;                           // offset: 0x24 ordinal: 0x4
  VOID *StackBase;                            // offset: 0x28 ordinal: 0x5
  ULONG ThreadLock;                           // offset: 0x2c ordinal: 0x6
  ULONGLONG CycleTime;                        // offset: 0x30 ordinal: 0x7
  ULONG HighCycleTime;                        // offset: 0x38 ordinal: 0x8
  VOID *ServiceTable;                         // offset: 0x3c ordinal: 0x9
  ULONG CurrentRunTime;                       // offset: 0x40 ordinal: 0xa
  ULONG ExpectedRunTime;                      // offset: 0x44 ordinal: 0xb
  VOID *KernelStack;                          // offset: 0x48 ordinal: 0xc
  struct _XSAVE_FORMAT *StateSaveArea;        // offset: 0x4c ordinal: 0xd
  struct _KSCHEDULING_GROUP *SchedulingGroup; // offset: 0x50 ordinal: 0xe
  union _KWAIT_STATUS_REGISTER WaitRegister;  // offset: 0x54 ordinal: 0xf
  UCHAR Running;                              // offset: 0x55 ordinal: 0x10
  UCHAR Alerted[2];                           // offset: 0x56 ordinal: 0x11
  ULONG AutoBoostActive : 1;                  // offset: 0x58 ordinal: 0x12
  ULONG ReadyTransition : 1;                  // offset: 0x58 ordinal: 0x13
  ULONG WaitNext : 1;                         // offset: 0x58 ordinal: 0x14
  ULONG SystemAffinityActive : 1;             // offset: 0x58 ordinal: 0x15
  ULONG Alertable : 1;                        // offset: 0x58 ordinal: 0x16
  ULONG UserStackWalkActive : 1;              // offset: 0x58 ordinal: 0x17
  ULONG ApcInterruptRequest : 1;              // offset: 0x58 ordinal: 0x18
  ULONG QuantumEndMigrate : 1;                // offset: 0x58 ordinal: 0x19
  ULONG UmsDirectedSwitchEnable : 1;          // offset: 0x58 ordinal: 0x1a
  ULONG TimerActive : 1;                      // offset: 0x58 ordinal: 0x1b
  ULONG SystemThread : 1;                     // offset: 0x58 ordinal: 0x1c
  ULONG ProcessDetachActive : 1;              // offset: 0x58 ordinal: 0x1d
  ULONG CalloutActive : 1;                    // offset: 0x58 ordinal: 0x1e
  ULONG ScbReadyQueue : 1;                    // offset: 0x58 ordinal: 0x1f
  ULONG ApcQueueable : 1;                     // offset: 0x58 ordinal: 0x20
  ULONG ReservedStackInUse : 1;               // offset: 0x58 ordinal: 0x21
  ULONG UmsPerformingSyscall : 1;             // offset: 0x58 ordinal: 0x22
  ULONG TimerSuspended : 1;                   // offset: 0x58 ordinal: 0x23
  ULONG SuspendedWaitMode : 1;                // offset: 0x58 ordinal: 0x24
  ULONG SuspendSchedulerApcWait : 1;          // offset: 0x58 ordinal: 0x25
  ULONG CetUserShadowStack : 1;               // offset: 0x58 ordinal: 0x26
  ULONG BypassProcessFreeze : 1;              // offset: 0x58 ordinal: 0x27
  ULONG Reserved : 10;                        // offset: 0x58 ordinal: 0x28
  LONG MiscFlags;                             // offset: 0x58 ordinal: 0x29
  ULONG BamQosLevel : 2;                      // offset: 0x5c ordinal: 0x2a
  ULONG AutoAlignment : 1;                    // offset: 0x5c ordinal: 0x2b
  ULONG DisableBoost : 1;                     // offset: 0x5c ordinal: 0x2c
  ULONG AlertedByThreadId : 1;                // offset: 0x5c ordinal: 0x2d
  ULONG QuantumDonation : 1;                  // offset: 0x5c ordinal: 0x2e
  ULONG EnableStackSwap : 1;                  // offset: 0x5c ordinal: 0x2f
  ULONG GuiThread : 1;                        // offset: 0x5c ordinal: 0x30
  ULONG DisableQuantum : 1;                   // offset: 0x5c ordinal: 0x31
  ULONG ChargeOnlySchedulingGroup : 1;        // offset: 0x5c ordinal: 0x32
  ULONG DeferPreemption : 1;                  // offset: 0x5c ordinal: 0x33
  ULONG QueueDeferPreemption : 1;             // offset: 0x5c ordinal: 0x34
  ULONG ForceDeferSchedule : 1;               // offset: 0x5c ordinal: 0x35
  ULONG SharedReadyQueueAffinity : 1;         // offset: 0x5c ordinal: 0x36
  ULONG FreezeCount : 1;                      // offset: 0x5c ordinal: 0x37
  ULONG TerminationApcRequest : 1;            // offset: 0x5c ordinal: 0x38
  ULONG AutoBoostEntriesExhausted : 1;        // offset: 0x5c ordinal: 0x39
  ULONG KernelStackResident : 1;              // offset: 0x5c ordinal: 0x3a
  ULONG TerminateRequestReason : 2;           // offset: 0x5c ordinal: 0x3b
  ULONG ProcessStackCountDecremented : 1;     // offset: 0x5c ordinal: 0x3c
  ULONG RestrictedGuiThread : 1;              // offset: 0x5c ordinal: 0x3d
  ULONG VpBackingThread : 1;                  // offset: 0x5c ordinal: 0x3e
  ULONG ThreadFlagsSpare : 1;                 // offset: 0x5c ordinal: 0x3f
  ULONG EtwStackTraceApcInserted : 8;         // offset: 0x5c ordinal: 0x40
  LONG ThreadFlags;                           // offset: 0x5c ordinal: 0x41
  UCHAR Tag;                                  // offset: 0x60 ordinal: 0x42
  UCHAR SystemHeteroCpuPolicy;                // offset: 0x61 ordinal: 0x43
  UCHAR UserHeteroCpuPolicy : 7;              // offset: 0x62 ordinal: 0x44
  UCHAR ExplicitSystemHeteroCpuPolicy : 1;    // offset: 0x62 ordinal: 0x45
  UCHAR Spare0;                               // offset: 0x63 ordinal: 0x46
  ULONG SystemCallNumber;                     // offset: 0x64 ordinal: 0x47
  VOID *FirstArgument;                        // offset: 0x68 ordinal: 0x48
  struct _KTRAP_FRAME *TrapFrame;             // offset: 0x6c ordinal: 0x49
  union {
    struct _KAPC_STATE ApcState; // offset: 0x70 ordinal: 0x4a
    UCHAR ApcStateFill[23];      // offset: 0x70 ordinal: 0x4b
  };
  CHAR Priority;                      // offset: 0x87 ordinal: 0x4c
  ULONG UserIdealProcessor;           // offset: 0x88 ordinal: 0x4d
  ULONG ContextSwitches;              // offset: 0x8c ordinal: 0x4e
  UCHAR State;                        // offset: 0x90 ordinal: 0x4f
  CHAR Spare12;                       // offset: 0x91 ordinal: 0x50
  UCHAR WaitIrql;                     // offset: 0x92 ordinal: 0x51
  CHAR WaitMode;                      // offset: 0x93 ordinal: 0x52
  LONG WaitStatus;                    // offset: 0x94 ordinal: 0x53
  struct _KWAIT_BLOCK *WaitBlockList; // offset: 0x98 ordinal: 0x54
  union {
    struct _LIST_ENTRY WaitListEntry;        // offset: 0x9c ordinal: 0x55
    struct _SINGLE_LIST_ENTRY SwapListEntry; // offset: 0x9c ordinal: 0x56
  };
  struct _DISPATCHER_HEADER *Queue; // offset: 0xa4 ordinal: 0x57
  VOID *Teb;                        // offset: 0xa8 ordinal: 0x58
  ULONGLONG RelativeTimerBias;      // offset: 0xb0 ordinal: 0x59
  struct _KTIMER Timer;             // offset: 0xb8 ordinal: 0x5a
  union {
    struct _KWAIT_BLOCK WaitBlock[4]; // offset: 0xe0 ordinal: 0x5b
    UCHAR WaitBlockFill8[20];         // offset: 0xe0 ordinal: 0x5c
  };
  struct _KTHREAD_COUNTERS *ThreadCounters; // offset: 0xf4 ordinal: 0x5d
  UCHAR WaitBlockFill9[44];                 // offset: 0xe0 ordinal: 0x5e
  struct _XSTATE_SAVE *XStateSave;          // offset: 0x10c ordinal: 0x5f
  UCHAR WaitBlockFill10[68];                // offset: 0xe0 ordinal: 0x60
  VOID *Win32Thread;                        // offset: 0x124 ordinal: 0x61
  UCHAR WaitBlockFill11[88];                // offset: 0xe0 ordinal: 0x62
  ULONG WaitTime;                           // offset: 0x138 ordinal: 0x63
  SHORT KernelApcDisable;                   // offset: 0x13c ordinal: 0x64
  SHORT SpecialApcDisable;                  // offset: 0x13e ordinal: 0x65
  ULONG CombinedApcDisable;                 // offset: 0x13c ordinal: 0x66
  struct _LIST_ENTRY QueueListEntry;        // offset: 0x140 ordinal: 0x67
  union {
    ULONG NextProcessor;            // offset: 0x148 ordinal: 0x68
    ULONG NextProcessorNumber : 31; // offset: 0x148 ordinal: 0x69
  };
  ULONG SharedReadyQueue : 1; // offset: 0x148 ordinal: 0x6a
  LONG QueuePriority;         // offset: 0x14c ordinal: 0x6b
  struct _KPROCESS *Process;  // offset: 0x150 ordinal: 0x6c
  union {
    struct _GROUP_AFFINITY UserAffinity; // offset: 0x154 ordinal: 0x6d
    UCHAR UserAffinityFill[6];           // offset: 0x154 ordinal: 0x6e
  };
  CHAR PreviousMode; // offset: 0x15a ordinal: 0x6f
  CHAR BasePriority; // offset: 0x15b ordinal: 0x70
  union {
    CHAR PriorityDecrement;    // offset: 0x15c ordinal: 0x71
    UCHAR ForegroundBoost : 4; // offset: 0x15c ordinal: 0x72
  };
  UCHAR UnusualBoost : 4; // offset: 0x15c ordinal: 0x73
  UCHAR Preempted;        // offset: 0x15d ordinal: 0x74
  UCHAR AdjustReason;     // offset: 0x15e ordinal: 0x75
  CHAR AdjustIncrement;   // offset: 0x15f ordinal: 0x76
  ULONG AffinityVersion;  // offset: 0x160 ordinal: 0x77
  union {
    struct _GROUP_AFFINITY Affinity; // offset: 0x164 ordinal: 0x78
    UCHAR AffinityFill[6];           // offset: 0x164 ordinal: 0x79
  };
  UCHAR ApcStateIndex;  // offset: 0x16a ordinal: 0x7a
  UCHAR WaitBlockCount; // offset: 0x16b ordinal: 0x7b
  ULONG IdealProcessor; // offset: 0x16c ordinal: 0x7c
  ULONG ReadyTime;      // offset: 0x170 ordinal: 0x7d
  union {
    struct _KAPC_STATE SavedApcState; // offset: 0x174 ordinal: 0x7e
    UCHAR SavedApcStateFill[23];      // offset: 0x174 ordinal: 0x7f
  };
  UCHAR WaitReason;       // offset: 0x18b ordinal: 0x80
  CHAR SuspendCount;      // offset: 0x18c ordinal: 0x81
  CHAR Saturation;        // offset: 0x18d ordinal: 0x82
  USHORT SListFaultCount; // offset: 0x18e ordinal: 0x83
  union {
    struct _KAPC SchedulerApc;  // offset: 0x190 ordinal: 0x84
    UCHAR SchedulerApcFill0[1]; // offset: 0x190 ordinal: 0x85
  };
  UCHAR ResourceIndex;                            // offset: 0x191 ordinal: 0x86
  UCHAR SchedulerApcFill1[3];                     // offset: 0x190 ordinal: 0x87
  UCHAR QuantumReset;                             // offset: 0x193 ordinal: 0x88
  UCHAR SchedulerApcFill2[4];                     // offset: 0x190 ordinal: 0x89
  ULONG KernelTime;                               // offset: 0x194 ordinal: 0x8a
  UCHAR SchedulerApcFill3[36];                    // offset: 0x190 ordinal: 0x8b
  struct _KPRCB *WaitPrcb;                        // offset: 0x1b4 ordinal: 0x8c
  UCHAR SchedulerApcFill4[40];                    // offset: 0x190 ordinal: 0x8d
  VOID *LegoData;                                 // offset: 0x1b8 ordinal: 0x8e
  UCHAR SchedulerApcFill5[47];                    // offset: 0x190 ordinal: 0x8f
  UCHAR CallbackNestingLevel;                     // offset: 0x1bf ordinal: 0x90
  ULONG UserTime;                                 // offset: 0x1c0 ordinal: 0x91
  struct _KEVENT SuspendEvent;                    // offset: 0x1c4 ordinal: 0x92
  struct _LIST_ENTRY ThreadListEntry;             // offset: 0x1d4 ordinal: 0x93
  struct _LIST_ENTRY MutantListHead;              // offset: 0x1dc ordinal: 0x94
  UCHAR AbEntrySummary;                           // offset: 0x1e4 ordinal: 0x95
  UCHAR AbWaitEntryCount;                         // offset: 0x1e5 ordinal: 0x96
  UCHAR AbAllocationRegionCount;                  // offset: 0x1e6 ordinal: 0x97
  CHAR SystemPriority;                            // offset: 0x1e7 ordinal: 0x98
  struct _KLOCK_ENTRY LockEntries[6];             // offset: 0x1e8 ordinal: 0x99
  struct _SINGLE_LIST_ENTRY PropagateBoostsEntry; // offset: 0x308 ordinal: 0x9a
  struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;    // offset: 0x30c ordinal: 0x9b
  UCHAR PriorityFloorCounts[16];                  // offset: 0x310 ordinal: 0x9c
  ULONG PriorityFloorSummary;                     // offset: 0x320 ordinal: 0x9d
  LONG AbCompletedIoBoostCount;                   // offset: 0x324 ordinal: 0x9e
  LONG AbCompletedIoQoSBoostCount;                // offset: 0x328 ordinal: 0x9f
  SHORT KeReferenceCount;                         // offset: 0x32c ordinal: 0xa0
  UCHAR AbOrphanedEntrySummary;                   // offset: 0x32e ordinal: 0xa1
  UCHAR AbOwnedEntryCount;                        // offset: 0x32f ordinal: 0xa2
  ULONG ForegroundLossTime;                       // offset: 0x330 ordinal: 0xa3
  union {
    struct _LIST_ENTRY GlobalForegroundListEntry; // offset: 0x334 ordinal: 0xa4
    struct _SINGLE_LIST_ENTRY
        ForegroundDpcStackListEntry; // offset: 0x334 ordinal: 0xa5
  };
  ULONG InGlobalForegroundList; // offset: 0x338 ordinal: 0xa6
  struct _KSCB *QueuedScb;      // offset: 0x33c ordinal: 0xa7
  ULONGLONG NpxState;           // offset: 0x340 ordinal: 0xa8
  ULONG ThreadTimerDelay;       // offset: 0x348 ordinal: 0xa9
  union {
    LONG ThreadFlags2;   // offset: 0x34c ordinal: 0xaa
    ULONG PpmPolicy : 2; // offset: 0x34c ordinal: 0xab
  };
  ULONG ThreadFlags2Reserved : 30; // offset: 0x34c ordinal: 0xac
  VOID *AbWaitObject;              // offset: 0x350 ordinal: 0xad
} _KTHREAD;

// 0x488 bytes (sizeof)
typedef struct _ETHREAD {
  struct _KTHREAD Tcb;             // offset: 0x0 ordinal: 0x0
  union _LARGE_INTEGER CreateTime; // offset: 0x358 ordinal: 0x1
  union {
    union _LARGE_INTEGER ExitTime;     // offset: 0x360 ordinal: 0x2
    struct _LIST_ENTRY KeyedWaitChain; // offset: 0x360 ordinal: 0x3
  };
  VOID *ChargeOnlySession; // offset: 0x368 ordinal: 0x4
  union {
    struct _LIST_ENTRY PostBlockList; // offset: 0x36c ordinal: 0x5
    VOID *ForwardLinkShadow;          // offset: 0x36c ordinal: 0x6
  };
  VOID *StartAddress; // offset: 0x370 ordinal: 0x7
  union {
    struct _TERMINATION_PORT *TerminationPort; // offset: 0x374 ordinal: 0x8
    struct _ETHREAD *ReaperLink;               // offset: 0x374 ordinal: 0x9
    VOID *KeyedWaitValue;                      // offset: 0x374 ordinal: 0xa
  };
  ULONG ActiveTimerListLock;              // offset: 0x378 ordinal: 0xb
  struct _LIST_ENTRY ActiveTimerListHead; // offset: 0x37c ordinal: 0xc
  struct _CLIENT_ID Cid;                  // offset: 0x384 ordinal: 0xd
  union {
    struct _KSEMAPHORE KeyedWaitSemaphore; // offset: 0x38c ordinal: 0xe
    struct _KSEMAPHORE AlpcWaitSemaphore;  // offset: 0x38c ordinal: 0xf
  };
  union _PS_CLIENT_SECURITY_CONTEXT
      ClientSecurity;                    // offset: 0x3a0 ordinal: 0x10
  struct _LIST_ENTRY IrpList;            // offset: 0x3a4 ordinal: 0x11
  ULONG TopLevelIrp;                     // offset: 0x3ac ordinal: 0x12
  struct _DEVICE_OBJECT *DeviceToVerify; // offset: 0x3b0 ordinal: 0x13
  VOID *Win32StartAddress;               // offset: 0x3b4 ordinal: 0x14
  VOID *LegacyPowerObject;               // offset: 0x3b8 ordinal: 0x15
  struct _LIST_ENTRY ThreadListEntry;    // offset: 0x3bc ordinal: 0x16
  struct _EX_RUNDOWN_REF RundownProtect; // offset: 0x3c4 ordinal: 0x17
  struct _EX_PUSH_LOCK ThreadLock;       // offset: 0x3c8 ordinal: 0x18
  ULONG ReadClusterSize;                 // offset: 0x3cc ordinal: 0x19
  LONG MmLockOrdering;                   // offset: 0x3d0 ordinal: 0x1a
  union {
    ULONG CrossThreadFlags; // offset: 0x3d4 ordinal: 0x1b
    ULONG Terminated : 1;   // offset: 0x3d4 ordinal: 0x1c
  };
  ULONG ThreadInserted : 1;           // offset: 0x3d4 ordinal: 0x1d
  ULONG HideFromDebugger : 1;         // offset: 0x3d4 ordinal: 0x1e
  ULONG ActiveImpersonationInfo : 1;  // offset: 0x3d4 ordinal: 0x1f
  ULONG HardErrorsAreDisabled : 1;    // offset: 0x3d4 ordinal: 0x20
  ULONG BreakOnTermination : 1;       // offset: 0x3d4 ordinal: 0x21
  ULONG SkipCreationMsg : 1;          // offset: 0x3d4 ordinal: 0x22
  ULONG SkipTerminationMsg : 1;       // offset: 0x3d4 ordinal: 0x23
  ULONG CopyTokenOnOpen : 1;          // offset: 0x3d4 ordinal: 0x24
  ULONG ThreadIoPriority : 3;         // offset: 0x3d4 ordinal: 0x25
  ULONG ThreadPagePriority : 3;       // offset: 0x3d4 ordinal: 0x26
  ULONG RundownFail : 1;              // offset: 0x3d4 ordinal: 0x27
  ULONG UmsForceQueueTermination : 1; // offset: 0x3d4 ordinal: 0x28
  ULONG IndirectCpuSets : 1;          // offset: 0x3d4 ordinal: 0x29
  ULONG DisableDynamicCodeOptOut : 1; // offset: 0x3d4 ordinal: 0x2a
  ULONG ExplicitCaseSensitivity : 1;  // offset: 0x3d4 ordinal: 0x2b
  ULONG PicoNotifyExit : 1;           // offset: 0x3d4 ordinal: 0x2c
  ULONG DbgWerUserReportActive : 1;   // offset: 0x3d4 ordinal: 0x2d
  ULONG ForcedSelfTrimActive : 1;     // offset: 0x3d4 ordinal: 0x2e
  ULONG SamplingCoverage : 1;         // offset: 0x3d4 ordinal: 0x2f
  ULONG ReservedCrossThreadFlags : 8; // offset: 0x3d4 ordinal: 0x30
  union {
    ULONG SameThreadPassiveFlags; // offset: 0x3d8 ordinal: 0x31
    ULONG ActiveExWorker : 1;     // offset: 0x3d8 ordinal: 0x32
  };
  ULONG MemoryMaker : 1;                     // offset: 0x3d8 ordinal: 0x33
  ULONG StoreLockThread : 2;                 // offset: 0x3d8 ordinal: 0x34
  ULONG ClonedThread : 1;                    // offset: 0x3d8 ordinal: 0x35
  ULONG KeyedEventInUse : 1;                 // offset: 0x3d8 ordinal: 0x36
  ULONG SelfTerminate : 1;                   // offset: 0x3d8 ordinal: 0x37
  ULONG RespectIoPriority : 1;               // offset: 0x3d8 ordinal: 0x38
  ULONG ActivePageLists : 1;                 // offset: 0x3d8 ordinal: 0x39
  ULONG SecureContext : 1;                   // offset: 0x3d8 ordinal: 0x3a
  ULONG ZeroPageThread : 1;                  // offset: 0x3d8 ordinal: 0x3b
  ULONG WorkloadClass : 1;                   // offset: 0x3d8 ordinal: 0x3c
  ULONG ReservedSameThreadPassiveFlags : 20; // offset: 0x3d8 ordinal: 0x3d
  union {
    ULONG SameThreadApcFlags;                   // offset: 0x3dc ordinal: 0x3e
    UCHAR OwnsProcessAddressSpaceExclusive : 1; // offset: 0x3dc ordinal: 0x3f
  };
  UCHAR OwnsProcessAddressSpaceShared : 1;       // offset: 0x3dc ordinal: 0x40
  UCHAR HardFaultBehavior : 1;                   // offset: 0x3dc ordinal: 0x41
  UCHAR StartAddressInvalid : 1;                 // offset: 0x3dc ordinal: 0x42
  UCHAR EtwCalloutActive : 1;                    // offset: 0x3dc ordinal: 0x43
  UCHAR SuppressSymbolLoad : 1;                  // offset: 0x3dc ordinal: 0x44
  UCHAR Prefetching : 1;                         // offset: 0x3dc ordinal: 0x45
  UCHAR OwnsVadExclusive : 1;                    // offset: 0x3dc ordinal: 0x46
  UCHAR SystemPagePriorityActive : 1;            // offset: 0x3dd ordinal: 0x47
  UCHAR SystemPagePriority : 3;                  // offset: 0x3dd ordinal: 0x48
  UCHAR AllowUserWritesToExecutableMemory : 1;   // offset: 0x3dd ordinal: 0x49
  UCHAR AllowKernelWritesToExecutableMemory : 1; // offset: 0x3dd ordinal: 0x4a
  UCHAR OwnsVadShared : 1;                       // offset: 0x3dd ordinal: 0x4b
  UCHAR CacheManagerActive;                      // offset: 0x3e0 ordinal: 0x4c
  UCHAR DisablePageFaultClustering;              // offset: 0x3e1 ordinal: 0x4d
  UCHAR ActiveFaultCount;                        // offset: 0x3e2 ordinal: 0x4e
  UCHAR LockOrderState;                          // offset: 0x3e3 ordinal: 0x4f
  ULONG AlpcMessageId;                           // offset: 0x3e4 ordinal: 0x50
  union {
    VOID *AlpcMessage;             // offset: 0x3e8 ordinal: 0x51
    ULONG AlpcReceiveAttributeSet; // offset: 0x3e8 ordinal: 0x52
  };
  struct _LIST_ENTRY AlpcWaitListEntry;         // offset: 0x3ec ordinal: 0x53
  LONG ExitStatus;                              // offset: 0x3f4 ordinal: 0x54
  ULONG CacheManagerCount;                      // offset: 0x3f8 ordinal: 0x55
  ULONG IoBoostCount;                           // offset: 0x3fc ordinal: 0x56
  ULONG IoQoSBoostCount;                        // offset: 0x400 ordinal: 0x57
  ULONG IoQoSThrottleCount;                     // offset: 0x404 ordinal: 0x58
  ULONG KernelStackReference;                   // offset: 0x408 ordinal: 0x59
  struct _LIST_ENTRY BoostList;                 // offset: 0x40c ordinal: 0x5a
  struct _LIST_ENTRY DeboostList;               // offset: 0x414 ordinal: 0x5b
  ULONG BoostListLock;                          // offset: 0x41c ordinal: 0x5c
  ULONG IrpListLock;                            // offset: 0x420 ordinal: 0x5d
  VOID *ReservedForSynchTracking;               // offset: 0x424 ordinal: 0x5e
  struct _SINGLE_LIST_ENTRY CmCallbackListHead; // offset: 0x428 ordinal: 0x5f
  struct _GUID *ActivityId;                     // offset: 0x42c ordinal: 0x60
  struct _SINGLE_LIST_ENTRY
      SeLearningModeListHead;                 // offset: 0x430 ordinal: 0x61
  VOID *VerifierContext;                      // offset: 0x434 ordinal: 0x62
  VOID *AdjustedClientToken;                  // offset: 0x438 ordinal: 0x63
  VOID *WorkOnBehalfThread;                   // offset: 0x43c ordinal: 0x64
  struct _PS_PROPERTY_SET PropertySet;        // offset: 0x440 ordinal: 0x65
  VOID *PicoContext;                          // offset: 0x44c ordinal: 0x66
  ULONG UserFsBase;                           // offset: 0x450 ordinal: 0x67
  ULONG UserGsBase;                           // offset: 0x454 ordinal: 0x68
  struct _THREAD_ENERGY_VALUES *EnergyValues; // offset: 0x458 ordinal: 0x69
  VOID *CmDbgInfo;                            // offset: 0x45c ordinal: 0x6a
  union {
    ULONG SelectedCpuSets;          // offset: 0x460 ordinal: 0x6b
    ULONG *SelectedCpuSetsIndirect; // offset: 0x460 ordinal: 0x6c
  };
  struct _EJOB *Silo;                            // offset: 0x464 ordinal: 0x6d
  struct _UNICODE_STRING *ThreadName;            // offset: 0x468 ordinal: 0x6e
  ULONG LastExpectedRunTime;                     // offset: 0x46c ordinal: 0x6f
  ULONG HeapData;                                // offset: 0x470 ordinal: 0x70
  struct _LIST_ENTRY OwnerEntryListHead;         // offset: 0x474 ordinal: 0x71
  ULONG DisownedOwnerEntryListLock;              // offset: 0x47c ordinal: 0x72
  struct _LIST_ENTRY DisownedOwnerEntryListHead; // offset: 0x480 ordinal: 0x73
} _ETHREAD;

// 0xb0 bytes (sizeof)
typedef struct _KINTERRUPT {
  SHORT Type;                            // offset: 0x0 ordinal: 0x0
  SHORT Size;                            // offset: 0x2 ordinal: 0x1
  struct _LIST_ENTRY InterruptListEntry; // offset: 0x4 ordinal: 0x2
  UCHAR(*ServiceRoutine)
  (struct _KINTERRUPT *, VOID *); // offset: 0xc ordinal: 0x3
  UCHAR(*MessageServiceRoutine)
  (struct _KINTERRUPT *, VOID *, ULONG); // offset: 0x10 ordinal: 0x4
  ULONG MessageIndex;                    // offset: 0x14 ordinal: 0x5
  VOID *ServiceContext;                  // offset: 0x18 ordinal: 0x6
  ULONG SpinLock;                        // offset: 0x1c ordinal: 0x7
  ULONG TickCount;                       // offset: 0x20 ordinal: 0x8
  ULONG *ActualLock;                     // offset: 0x24 ordinal: 0x9
  VOID (*DispatchAddress)();             // offset: 0x28 ordinal: 0xa
  ULONG Vector;                          // offset: 0x2c ordinal: 0xb
  UCHAR Irql;                            // offset: 0x30 ordinal: 0xc
  UCHAR SynchronizeIrql;                 // offset: 0x31 ordinal: 0xd
  UCHAR FloatingSave;                    // offset: 0x32 ordinal: 0xe
  UCHAR Connected;                       // offset: 0x33 ordinal: 0xf
  ULONG Number;                          // offset: 0x34 ordinal: 0x10
  UCHAR ShareVector;                     // offset: 0x38 ordinal: 0x11
  UCHAR EmulateActiveBoth;               // offset: 0x39 ordinal: 0x12
  USHORT ActiveCount;                    // offset: 0x3a ordinal: 0x13
  LONG InternalState;                    // offset: 0x3c ordinal: 0x14
  enum _KINTERRUPT_MODE Mode;            // offset: 0x40 ordinal: 0x15
  enum _KINTERRUPT_POLARITY Polarity;    // offset: 0x44 ordinal: 0x16
  ULONG ServiceCount;                    // offset: 0x48 ordinal: 0x17
  ULONG DispatchCount;                   // offset: 0x4c ordinal: 0x18
  struct _KEVENT *PassiveEvent;          // offset: 0x50 ordinal: 0x19
  struct _KTRAP_FRAME *TrapFrame;        // offset: 0x54 ordinal: 0x1a
  VOID *DisconnectData;                  // offset: 0x58 ordinal: 0x1b
  struct _KTHREAD *ServiceThread;        // offset: 0x5c ordinal: 0x1c
  struct _INTERRUPT_CONNECTION_DATA
      *ConnectionData;             // offset: 0x60 ordinal: 0x1d
  VOID *IntTrackEntry;             // offset: 0x64 ordinal: 0x1e
  struct _ISRDPCSTATS IsrDpcStats; // offset: 0x68 ordinal: 0x1f
  VOID *RedirectObject;            // offset: 0xa8 ordinal: 0x20
} _KINTERRUPT;

// 0x1c bytes (sizeof)
typedef struct _KSECONDARY_IDT_ENTRY {
  ULONG SpinLock;                    // offset: 0x0 ordinal: 0x0
  struct _KEVENT ConnectLock;        // offset: 0x4 ordinal: 0x1
  UCHAR LineMasked;                  // offset: 0x14 ordinal: 0x2
  struct _KINTERRUPT *InterruptList; // offset: 0x18 ordinal: 0x3
} _KSECONDARY_IDT_ENTRY;

typedef UCHAR (*__anon_485)(struct _KINTERRUPT *, VOID *, ULONG);

typedef UCHAR (*__anon_484)(struct _KINTERRUPT *, VOID *);

// 0x70 bytes (sizeof)
typedef struct _PROC_PERF_CONSTRAINT {
  struct _KPRCB *Prcb;                            // offset: 0x0 ordinal: 0x0
  ULONG PerfContext;                              // offset: 0x4 ordinal: 0x1
  ULONG PlatformCap;                              // offset: 0x8 ordinal: 0x2
  ULONG ThermalCap;                               // offset: 0xc ordinal: 0x3
  ULONG LimitReasons;                             // offset: 0x10 ordinal: 0x4
  ULONGLONG PlatformCapStartTime;                 // offset: 0x18 ordinal: 0x5
  ULONG ProcCap;                                  // offset: 0x20 ordinal: 0x6
  ULONG ProcFloor;                                // offset: 0x24 ordinal: 0x7
  ULONG TargetPercent;                            // offset: 0x28 ordinal: 0x8
  UCHAR EngageResponsivenessOverrides;            // offset: 0x2c ordinal: 0x9
  UCHAR ResponsivenessChangeCount;                // offset: 0x2d ordinal: 0xa
  struct _PERF_CONTROL_STATE_SELECTION Selection; // offset: 0x30 ordinal: 0xb
  ULONG DomainSelectionGeneration;                // offset: 0x58 ordinal: 0xc
  ULONG PreviousFrequency;                        // offset: 0x5c ordinal: 0xd
  ULONG PreviousPercent;                          // offset: 0x60 ordinal: 0xe
  ULONG LatestFrequencyPercent;                   // offset: 0x64 ordinal: 0xf
  UCHAR Force;                                    // offset: 0x68 ordinal: 0x10
  UCHAR UseQosUpdateLock;                         // offset: 0x69 ordinal: 0x11
  ULONG QosUpdateLock;                            // offset: 0x6c ordinal: 0x12
} _PROC_PERF_CONSTRAINT;

// 0x1d0 bytes (sizeof)
typedef struct _PROC_PERF_DOMAIN {
  struct _LIST_ENTRY Link;                  // offset: 0x0 ordinal: 0x0
  struct _KPRCB *Master;                    // offset: 0x8 ordinal: 0x1
  struct _KAFFINITY_EX Members;             // offset: 0xc ordinal: 0x2
  ULONG DomainContext;                      // offset: 0x18 ordinal: 0x3
  ULONG ProcessorCount;                     // offset: 0x1c ordinal: 0x4
  UCHAR EfficiencyClass;                    // offset: 0x20 ordinal: 0x5
  UCHAR NominalPerformanceClass;            // offset: 0x21 ordinal: 0x6
  UCHAR HighestPerformanceClass;            // offset: 0x22 ordinal: 0x7
  struct _PROC_PERF_CONSTRAINT *Processors; // offset: 0x24 ordinal: 0x8
  VOID (*GetFFHThrottleState)(ULONGLONG *); // offset: 0x28 ordinal: 0x9
  VOID (*TimeWindowHandler)(ULONG, ULONG);  // offset: 0x2c ordinal: 0xa
  VOID (*BoostPolicyHandler)(ULONG, ULONG); // offset: 0x30 ordinal: 0xb
  VOID (*BoostModeHandler)(ULONG, ULONG);   // offset: 0x34 ordinal: 0xc
  VOID(*AutonomousActivityWindowHandler)
  (ULONG, ULONG);                              // offset: 0x38 ordinal: 0xd
  VOID (*AutonomousModeHandler)(ULONG, ULONG); // offset: 0x3c ordinal: 0xe
  VOID (*ReinitializeHandler)(ULONG);          // offset: 0x40 ordinal: 0xf
  ULONG(*PerfSelectionHandler)
  (ULONG, ULONG, ULONG, ULONG, ULONG, ULONG, ULONG, ULONG *,
   ULONGLONG *); // offset: 0x44 ordinal: 0x10
  VOID(*PerfControlHandler)
  (ULONG, struct _PERF_CONTROL_STATE_SELECTION *, UCHAR,
   UCHAR); // offset: 0x48 ordinal: 0x11
  VOID(*DomainPerfControlHandler)
  (ULONG, struct _PERF_CONTROL_STATE_SELECTION *, UCHAR,
   UCHAR);                                 // offset: 0x4c ordinal: 0x12
  ULONG MaxFrequency;                      // offset: 0x50 ordinal: 0x13
  ULONG NominalFrequency;                  // offset: 0x54 ordinal: 0x14
  ULONG MaxPercent;                        // offset: 0x58 ordinal: 0x15
  ULONG MinPerfPercent;                    // offset: 0x5c ordinal: 0x16
  ULONG MinThrottlePercent;                // offset: 0x60 ordinal: 0x17
  ULONG AdvertizedMaximumFrequency;        // offset: 0x64 ordinal: 0x18
  ULONGLONG MinimumRelativePerformance;    // offset: 0x68 ordinal: 0x19
  ULONGLONG NominalRelativePerformance;    // offset: 0x70 ordinal: 0x1a
  UCHAR NominalRelativePerformancePercent; // offset: 0x78 ordinal: 0x1b
  UCHAR Coordination;                      // offset: 0x79 ordinal: 0x1c
  UCHAR HardPlatformCap;                   // offset: 0x7a ordinal: 0x1d
  UCHAR AffinitizeControl;                 // offset: 0x7b ordinal: 0x1e
  UCHAR EfficientThrottle;                 // offset: 0x7c ordinal: 0x1f
  UCHAR AllowSchedulerDirectedPerfStates;  // offset: 0x7d ordinal: 0x20
  UCHAR InitiateAllProcessors;             // offset: 0x7e ordinal: 0x21
  UCHAR AutonomousMode;                    // offset: 0x7f ordinal: 0x22
  UCHAR ProvideGuidance;                   // offset: 0x80 ordinal: 0x23
  ULONG DesiredPercent;                    // offset: 0x84 ordinal: 0x24
  ULONG GuaranteedPercent;                 // offset: 0x88 ordinal: 0x25
  UCHAR EngageResponsivenessOverrides;     // offset: 0x8c ordinal: 0x26
  struct _PROC_PERF_QOS_CLASS_POLICY
      QosPolicies[4];            // offset: 0x90 ordinal: 0x27
  ULONG QosDisableReasons[4];    // offset: 0x100 ordinal: 0x28
  USHORT QosEquivalencyMasks[4]; // offset: 0x110 ordinal: 0x29
  UCHAR QosSupported;            // offset: 0x118 ordinal: 0x2a
  ULONG SelectionGeneration;     // offset: 0x11c ordinal: 0x2b
  struct _PERF_CONTROL_STATE_SELECTION
      QosSelection[4];           // offset: 0x120 ordinal: 0x2c
  ULONGLONG PerfChangeTime;      // offset: 0x1c0 ordinal: 0x2d
  ULONG PerfChangeIntervalCount; // offset: 0x1c8 ordinal: 0x2e
  UCHAR Force;                   // offset: 0x1cc ordinal: 0x2f
  UCHAR Update;                  // offset: 0x1cd ordinal: 0x30
  UCHAR Apply;                   // offset: 0x1ce ordinal: 0x31
} _PROC_PERF_DOMAIN;

// 0x6020 bytes (sizeof)
typedef struct _KPCR {
  union {
    struct _NT_TIB NtTib; // offset: 0x0 ordinal: 0x0
    struct _EXCEPTION_REGISTRATION_RECORD
        *Used_ExceptionList; // offset: 0x0 ordinal: 0x1
  };
  VOID *Used_StackBase;                // offset: 0x4 ordinal: 0x2
  ULONG MxCsr;                         // offset: 0x8 ordinal: 0x3
  VOID *TssCopy;                       // offset: 0xc ordinal: 0x4
  ULONG ContextSwitches;               // offset: 0x10 ordinal: 0x5
  ULONG SetMemberCopy;                 // offset: 0x14 ordinal: 0x6
  VOID *Used_Self;                     // offset: 0x18 ordinal: 0x7
  struct _KPCR *SelfPcr;               // offset: 0x1c ordinal: 0x8
  struct _KPRCB *Prcb;                 // offset: 0x20 ordinal: 0x9
  UCHAR Irql;                          // offset: 0x24 ordinal: 0xa
  ULONG IRR;                           // offset: 0x28 ordinal: 0xb
  ULONG IrrActive;                     // offset: 0x2c ordinal: 0xc
  ULONG IDR;                           // offset: 0x30 ordinal: 0xd
  VOID *KdVersionBlock;                // offset: 0x34 ordinal: 0xe
  struct _KIDTENTRY *IDT;              // offset: 0x38 ordinal: 0xf
  struct _KGDTENTRY *GDT;              // offset: 0x3c ordinal: 0x10
  struct _KTSS *TSS;                   // offset: 0x40 ordinal: 0x11
  USHORT MajorVersion;                 // offset: 0x44 ordinal: 0x12
  USHORT MinorVersion;                 // offset: 0x46 ordinal: 0x13
  ULONG SetMember;                     // offset: 0x48 ordinal: 0x14
  ULONG StallScaleFactor;              // offset: 0x4c ordinal: 0x15
  UCHAR SpareUnused;                   // offset: 0x50 ordinal: 0x16
  UCHAR Number;                        // offset: 0x51 ordinal: 0x17
  UCHAR Spare0;                        // offset: 0x52 ordinal: 0x18
  UCHAR SecondLevelCacheAssociativity; // offset: 0x53 ordinal: 0x19
  ULONG VdmAlert;                      // offset: 0x54 ordinal: 0x1a
  ULONG KernelReserved[14];            // offset: 0x58 ordinal: 0x1b
  ULONG SecondLevelCacheSize;          // offset: 0x90 ordinal: 0x1c
  ULONG HalReserved[16];               // offset: 0x94 ordinal: 0x1d
  ULONG InterruptMode;                 // offset: 0xd4 ordinal: 0x1e
  UCHAR Spare1;                        // offset: 0xd8 ordinal: 0x1f
  ULONG KernelReserved2[17];           // offset: 0xdc ordinal: 0x20
  struct _KPRCB PrcbData;              // offset: 0x120 ordinal: 0x21
} _KPCR;

// 0x710 bytes (sizeof)
typedef struct _KUSER_SHARED_DATA {
  ULONG TickCountLowDeprecated;        // offset: 0x0 ordinal: 0x0
  ULONG TickCountMultiplier;           // offset: 0x4 ordinal: 0x1
  struct _KSYSTEM_TIME InterruptTime;  // offset: 0x8 ordinal: 0x2
  struct _KSYSTEM_TIME SystemTime;     // offset: 0x14 ordinal: 0x3
  struct _KSYSTEM_TIME TimeZoneBias;   // offset: 0x20 ordinal: 0x4
  USHORT ImageNumberLow;               // offset: 0x2c ordinal: 0x5
  USHORT ImageNumberHigh;              // offset: 0x2e ordinal: 0x6
  WCHAR NtSystemRoot[260];             // offset: 0x30 ordinal: 0x7
  ULONG MaxStackTraceDepth;            // offset: 0x238 ordinal: 0x8
  ULONG CryptoExponent;                // offset: 0x23c ordinal: 0x9
  ULONG TimeZoneId;                    // offset: 0x240 ordinal: 0xa
  ULONG LargePageMinimum;              // offset: 0x244 ordinal: 0xb
  ULONG AitSamplingValue;              // offset: 0x248 ordinal: 0xc
  ULONG AppCompatFlag;                 // offset: 0x24c ordinal: 0xd
  ULONGLONG RNGSeedVersion;            // offset: 0x250 ordinal: 0xe
  ULONG GlobalValidationRunlevel;      // offset: 0x258 ordinal: 0xf
  LONG TimeZoneBiasStamp;              // offset: 0x25c ordinal: 0x10
  ULONG NtBuildNumber;                 // offset: 0x260 ordinal: 0x11
  enum _NT_PRODUCT_TYPE NtProductType; // offset: 0x264 ordinal: 0x12
  UCHAR ProductTypeIsValid;            // offset: 0x268 ordinal: 0x13
  UCHAR Reserved0[1];                  // offset: 0x269 ordinal: 0x14
  USHORT NativeProcessorArchitecture;  // offset: 0x26a ordinal: 0x15
  ULONG NtMajorVersion;                // offset: 0x26c ordinal: 0x16
  ULONG NtMinorVersion;                // offset: 0x270 ordinal: 0x17
  UCHAR ProcessorFeatures[64];         // offset: 0x274 ordinal: 0x18
  ULONG Reserved1;                     // offset: 0x2b4 ordinal: 0x19
  ULONG Reserved3;                     // offset: 0x2b8 ordinal: 0x1a
  ULONG TimeSlip;                      // offset: 0x2bc ordinal: 0x1b
  enum _ALTERNATIVE_ARCHITECTURE_TYPE
      AlternativeArchitecture;               // offset: 0x2c0 ordinal: 0x1c
  ULONG BootId;                              // offset: 0x2c4 ordinal: 0x1d
  union _LARGE_INTEGER SystemExpirationDate; // offset: 0x2c8 ordinal: 0x1e
  ULONG SuiteMask;                           // offset: 0x2d0 ordinal: 0x1f
  UCHAR KdDebuggerEnabled;                   // offset: 0x2d4 ordinal: 0x20
  union {
    UCHAR MitigationPolicies;  // offset: 0x2d5 ordinal: 0x21
    UCHAR NXSupportPolicy : 2; // offset: 0x2d5 ordinal: 0x22
  };
  UCHAR SEHValidationPolicy : 2;         // offset: 0x2d5 ordinal: 0x23
  UCHAR CurDirDevicesSkippedForDlls : 2; // offset: 0x2d5 ordinal: 0x24
  UCHAR Reserved : 2;                    // offset: 0x2d5 ordinal: 0x25
  USHORT CyclesPerYield;                 // offset: 0x2d6 ordinal: 0x26
  ULONG ActiveConsoleId;                 // offset: 0x2d8 ordinal: 0x27
  ULONG DismountCount;                   // offset: 0x2dc ordinal: 0x28
  ULONG ComPlusPackage;                  // offset: 0x2e0 ordinal: 0x29
  ULONG LastSystemRITEventTickCount;     // offset: 0x2e4 ordinal: 0x2a
  ULONG NumberOfPhysicalPages;           // offset: 0x2e8 ordinal: 0x2b
  UCHAR SafeBootMode;                    // offset: 0x2ec ordinal: 0x2c
  UCHAR VirtualizationFlags;             // offset: 0x2ed ordinal: 0x2d
  UCHAR Reserved12[2];                   // offset: 0x2ee ordinal: 0x2e
  union {
    ULONG SharedDataFlags;         // offset: 0x2f0 ordinal: 0x2f
    ULONG DbgErrorPortPresent : 1; // offset: 0x2f0 ordinal: 0x30
  };
  ULONG DbgElevationEnabled : 1;       // offset: 0x2f0 ordinal: 0x31
  ULONG DbgVirtEnabled : 1;            // offset: 0x2f0 ordinal: 0x32
  ULONG DbgInstallerDetectEnabled : 1; // offset: 0x2f0 ordinal: 0x33
  ULONG DbgLkgEnabled : 1;             // offset: 0x2f0 ordinal: 0x34
  ULONG DbgDynProcessorEnabled : 1;    // offset: 0x2f0 ordinal: 0x35
  ULONG DbgConsoleBrokerEnabled : 1;   // offset: 0x2f0 ordinal: 0x36
  ULONG DbgSecureBootEnabled : 1;      // offset: 0x2f0 ordinal: 0x37
  ULONG DbgMultiSessionSku : 1;        // offset: 0x2f0 ordinal: 0x38
  ULONG DbgMultiUsersInSessionSku : 1; // offset: 0x2f0 ordinal: 0x39
  ULONG DbgStateSeparationEnabled : 1; // offset: 0x2f0 ordinal: 0x3a
  ULONG SpareBits : 21;                // offset: 0x2f0 ordinal: 0x3b
  ULONG DataFlagsPad[1];               // offset: 0x2f4 ordinal: 0x3c
  ULONGLONG TestRetInstruction;        // offset: 0x2f8 ordinal: 0x3d
  LONGLONG QpcFrequency;               // offset: 0x300 ordinal: 0x3e
  ULONG SystemCall;                    // offset: 0x308 ordinal: 0x3f
  ULONG SystemCallPad0;                // offset: 0x30c ordinal: 0x40
  ULONGLONG SystemCallPad[2];          // offset: 0x310 ordinal: 0x41
  union {
    struct _KSYSTEM_TIME TickCount;    // offset: 0x320 ordinal: 0x42
    ULONGLONG TickCountQuad;           // offset: 0x320 ordinal: 0x43
    ULONG ReservedTickCountOverlay[3]; // offset: 0x320 ordinal: 0x44
  };
  ULONG TickCountPad[1];                      // offset: 0x32c ordinal: 0x45
  ULONG Cookie;                               // offset: 0x330 ordinal: 0x46
  ULONG CookiePad[1];                         // offset: 0x334 ordinal: 0x47
  LONGLONG ConsoleSessionForegroundProcessId; // offset: 0x338 ordinal: 0x48
  ULONGLONG TimeUpdateLock;                   // offset: 0x340 ordinal: 0x49
  ULONGLONG BaselineSystemTimeQpc;            // offset: 0x348 ordinal: 0x4a
  ULONGLONG BaselineInterruptTimeQpc;         // offset: 0x350 ordinal: 0x4b
  ULONGLONG QpcSystemTimeIncrement;           // offset: 0x358 ordinal: 0x4c
  ULONGLONG QpcInterruptTimeIncrement;        // offset: 0x360 ordinal: 0x4d
  UCHAR QpcSystemTimeIncrementShift;          // offset: 0x368 ordinal: 0x4e
  UCHAR QpcInterruptTimeIncrementShift;       // offset: 0x369 ordinal: 0x4f
  USHORT UnparkedProcessorCount;              // offset: 0x36a ordinal: 0x50
  ULONG EnclaveFeatureMask[4];                // offset: 0x36c ordinal: 0x51
  ULONG TelemetryCoverageRound;               // offset: 0x37c ordinal: 0x52
  USHORT UserModeGlobalLogger[16];            // offset: 0x380 ordinal: 0x53
  ULONG ImageFileExecutionOptions;            // offset: 0x3a0 ordinal: 0x54
  ULONG LangGenerationCount;                  // offset: 0x3a4 ordinal: 0x55
  ULONGLONG Reserved4;                        // offset: 0x3a8 ordinal: 0x56
  ULONGLONG InterruptTimeBias;                // offset: 0x3b0 ordinal: 0x57
  ULONGLONG QpcBias;                          // offset: 0x3b8 ordinal: 0x58
  ULONG ActiveProcessorCount;                 // offset: 0x3c0 ordinal: 0x59
  UCHAR ActiveGroupCount;                     // offset: 0x3c4 ordinal: 0x5a
  UCHAR Reserved9;                            // offset: 0x3c5 ordinal: 0x5b
  union {
    USHORT QpcData;         // offset: 0x3c6 ordinal: 0x5c
    UCHAR QpcBypassEnabled; // offset: 0x3c6 ordinal: 0x5d
  };
  UCHAR QpcShift; // offset: 0x3c7 ordinal: 0x5e
  union _LARGE_INTEGER
      TimeZoneBiasEffectiveStart;                // offset: 0x3c8 ordinal: 0x5f
  union _LARGE_INTEGER TimeZoneBiasEffectiveEnd; // offset: 0x3d0 ordinal: 0x60
  struct _XSTATE_CONFIGURATION XState;           // offset: 0x3d8 ordinal: 0x61
} _KUSER_SHARED_DATA;

// 0x10 bytes (sizeof)
typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
  ULONGLONG Map[2]; // offset: 0x0 ordinal: 0x0
} _PS_MITIGATION_AUDIT_OPTIONS_MAP;

// 0x10 bytes (sizeof)
typedef struct _PS_MITIGATION_OPTIONS_MAP {
  ULONGLONG Map[2]; // offset: 0x0 ordinal: 0x0
} _PS_MITIGATION_OPTIONS_MAP;

// 0x10 bytes (sizeof)
typedef struct LIST_ENTRY64 {
  ULONGLONG Flink; // offset: 0x0 ordinal: 0x0
  ULONGLONG Blink; // offset: 0x8 ordinal: 0x1
} LIST_ENTRY64;

// 0x28 bytes (sizeof)
typedef struct _ACTIVATION_CONTEXT_STACK64 {
  ULONGLONG ActiveFrame;              // offset: 0x0 ordinal: 0x0
  struct LIST_ENTRY64 FrameListCache; // offset: 0x8 ordinal: 0x1
  ULONG Flags;                        // offset: 0x18 ordinal: 0x2
  ULONG NextCookieSequenceNumber;     // offset: 0x1c ordinal: 0x3
  ULONG StackId;                      // offset: 0x20 ordinal: 0x4
} _ACTIVATION_CONTEXT_STACK64;

// 0x1838 bytes (sizeof)
typedef struct _TEB64 {
  struct _NT_TIB64 NtTib;              // offset: 0x0 ordinal: 0x0
  ULONGLONG EnvironmentPointer;        // offset: 0x38 ordinal: 0x1
  struct _CLIENT_ID64 ClientId;        // offset: 0x40 ordinal: 0x2
  ULONGLONG ActiveRpcHandle;           // offset: 0x50 ordinal: 0x3
  ULONGLONG ThreadLocalStoragePointer; // offset: 0x58 ordinal: 0x4
  ULONGLONG ProcessEnvironmentBlock;   // offset: 0x60 ordinal: 0x5
  ULONG LastErrorValue;                // offset: 0x68 ordinal: 0x6
  ULONG CountOfOwnedCriticalSections;  // offset: 0x6c ordinal: 0x7
  ULONGLONG CsrClientThread;           // offset: 0x70 ordinal: 0x8
  ULONGLONG Win32ThreadInfo;           // offset: 0x78 ordinal: 0x9
  ULONG User32Reserved[26];            // offset: 0x80 ordinal: 0xa
  ULONG UserReserved[5];               // offset: 0xe8 ordinal: 0xb
  ULONGLONG WOW32Reserved;             // offset: 0x100 ordinal: 0xc
  ULONG CurrentLocale;                 // offset: 0x108 ordinal: 0xd
  ULONG FpSoftwareStatusRegister;      // offset: 0x10c ordinal: 0xe
  ULONGLONG
  ReservedForDebuggerInstrumentation[16];   // offset: 0x110 ordinal: 0xf
  ULONGLONG SystemReserved1[30];            // offset: 0x190 ordinal: 0x10
  CHAR PlaceholderCompatibilityMode;        // offset: 0x280 ordinal: 0x11
  UCHAR PlaceholderHydrationAlwaysExplicit; // offset: 0x281 ordinal: 0x12
  CHAR PlaceholderReserved[10];             // offset: 0x282 ordinal: 0x13
  ULONG ProxiedProcessId;                   // offset: 0x28c ordinal: 0x14
  struct _ACTIVATION_CONTEXT_STACK64
      _ActivationStack;                        // offset: 0x290 ordinal: 0x15
  UCHAR WorkingOnBehalfTicket[8];              // offset: 0x2b8 ordinal: 0x16
  LONG ExceptionCode;                          // offset: 0x2c0 ordinal: 0x17
  UCHAR Padding0[4];                           // offset: 0x2c4 ordinal: 0x18
  ULONGLONG ActivationContextStackPointer;     // offset: 0x2c8 ordinal: 0x19
  ULONGLONG InstrumentationCallbackSp;         // offset: 0x2d0 ordinal: 0x1a
  ULONGLONG InstrumentationCallbackPreviousPc; // offset: 0x2d8 ordinal: 0x1b
  ULONGLONG InstrumentationCallbackPreviousSp; // offset: 0x2e0 ordinal: 0x1c
  ULONG TxFsContext;                           // offset: 0x2e8 ordinal: 0x1d
  UCHAR InstrumentationCallbackDisabled;       // offset: 0x2ec ordinal: 0x1e
  UCHAR UnalignedLoadStoreExceptions;          // offset: 0x2ed ordinal: 0x1f
  UCHAR Padding1[2];                           // offset: 0x2ee ordinal: 0x20
  struct _GDI_TEB_BATCH64 GdiTebBatch;         // offset: 0x2f0 ordinal: 0x21
  struct _CLIENT_ID64 RealClientId;            // offset: 0x7d8 ordinal: 0x22
  ULONGLONG GdiCachedProcessHandle;            // offset: 0x7e8 ordinal: 0x23
  ULONG GdiClientPID;                          // offset: 0x7f0 ordinal: 0x24
  ULONG GdiClientTID;                          // offset: 0x7f4 ordinal: 0x25
  ULONGLONG GdiThreadLocalInfo;                // offset: 0x7f8 ordinal: 0x26
  ULONGLONG Win32ClientInfo[62];               // offset: 0x800 ordinal: 0x27
  ULONGLONG glDispatchTable[233];              // offset: 0x9f0 ordinal: 0x28
  ULONGLONG glReserved1[29];                   // offset: 0x1138 ordinal: 0x29
  ULONGLONG glReserved2;                       // offset: 0x1220 ordinal: 0x2a
  ULONGLONG glSectionInfo;                     // offset: 0x1228 ordinal: 0x2b
  ULONGLONG glSection;                         // offset: 0x1230 ordinal: 0x2c
  ULONGLONG glTable;                           // offset: 0x1238 ordinal: 0x2d
  ULONGLONG glCurrentRC;                       // offset: 0x1240 ordinal: 0x2e
  ULONGLONG glContext;                         // offset: 0x1248 ordinal: 0x2f
  ULONG LastStatusValue;                       // offset: 0x1250 ordinal: 0x30
  UCHAR Padding2[4];                           // offset: 0x1254 ordinal: 0x31
  struct _STRING64 StaticUnicodeString;        // offset: 0x1258 ordinal: 0x32
  WCHAR StaticUnicodeBuffer[261];              // offset: 0x1268 ordinal: 0x33
  UCHAR Padding3[6];                           // offset: 0x1472 ordinal: 0x34
  ULONGLONG DeallocationStack;                 // offset: 0x1478 ordinal: 0x35
  ULONGLONG TlsSlots[64];                      // offset: 0x1480 ordinal: 0x36
  struct LIST_ENTRY64 TlsLinks;                // offset: 0x1680 ordinal: 0x37
  ULONGLONG Vdm;                               // offset: 0x1690 ordinal: 0x38
  ULONGLONG ReservedForNtRpc;                  // offset: 0x1698 ordinal: 0x39
  ULONGLONG DbgSsReserved[2];                  // offset: 0x16a0 ordinal: 0x3a
  ULONG HardErrorMode;                         // offset: 0x16b0 ordinal: 0x3b
  UCHAR Padding4[4];                           // offset: 0x16b4 ordinal: 0x3c
  ULONGLONG Instrumentation[11];               // offset: 0x16b8 ordinal: 0x3d
  struct _GUID ActivityId;                     // offset: 0x1710 ordinal: 0x3e
  ULONGLONG SubProcessTag;                     // offset: 0x1720 ordinal: 0x3f
  ULONGLONG PerflibData;                       // offset: 0x1728 ordinal: 0x40
  ULONGLONG EtwTraceData;                      // offset: 0x1730 ordinal: 0x41
  ULONGLONG WinSockData;                       // offset: 0x1738 ordinal: 0x42
  ULONG GdiBatchCount;                         // offset: 0x1740 ordinal: 0x43
  union {
    struct _PROCESSOR_NUMBER
        CurrentIdealProcessor; // offset: 0x1744 ordinal: 0x44
    ULONG IdealProcessorValue; // offset: 0x1744 ordinal: 0x45
    UCHAR ReservedPad0;        // offset: 0x1744 ordinal: 0x46
  };
  UCHAR ReservedPad1;                 // offset: 0x1745 ordinal: 0x47
  UCHAR ReservedPad2;                 // offset: 0x1746 ordinal: 0x48
  UCHAR IdealProcessor;               // offset: 0x1747 ordinal: 0x49
  ULONG GuaranteedStackBytes;         // offset: 0x1748 ordinal: 0x4a
  UCHAR Padding5[4];                  // offset: 0x174c ordinal: 0x4b
  ULONGLONG ReservedForPerf;          // offset: 0x1750 ordinal: 0x4c
  ULONGLONG ReservedForOle;           // offset: 0x1758 ordinal: 0x4d
  ULONG WaitingOnLoaderLock;          // offset: 0x1760 ordinal: 0x4e
  UCHAR Padding6[4];                  // offset: 0x1764 ordinal: 0x4f
  ULONGLONG SavedPriorityState;       // offset: 0x1768 ordinal: 0x50
  ULONGLONG ReservedForCodeCoverage;  // offset: 0x1770 ordinal: 0x51
  ULONGLONG ThreadPoolData;           // offset: 0x1778 ordinal: 0x52
  ULONGLONG TlsExpansionSlots;        // offset: 0x1780 ordinal: 0x53
  ULONGLONG DeallocationBStore;       // offset: 0x1788 ordinal: 0x54
  ULONGLONG BStoreLimit;              // offset: 0x1790 ordinal: 0x55
  ULONG MuiGeneration;                // offset: 0x1798 ordinal: 0x56
  ULONG IsImpersonating;              // offset: 0x179c ordinal: 0x57
  ULONGLONG NlsCache;                 // offset: 0x17a0 ordinal: 0x58
  ULONGLONG pShimData;                // offset: 0x17a8 ordinal: 0x59
  ULONG HeapData;                     // offset: 0x17b0 ordinal: 0x5a
  UCHAR Padding7[4];                  // offset: 0x17b4 ordinal: 0x5b
  ULONGLONG CurrentTransactionHandle; // offset: 0x17b8 ordinal: 0x5c
  ULONGLONG ActiveFrame;              // offset: 0x17c0 ordinal: 0x5d
  ULONGLONG FlsData;                  // offset: 0x17c8 ordinal: 0x5e
  ULONGLONG PreferredLanguages;       // offset: 0x17d0 ordinal: 0x5f
  ULONGLONG UserPrefLanguages;        // offset: 0x17d8 ordinal: 0x60
  ULONGLONG MergedPrefLanguages;      // offset: 0x17e0 ordinal: 0x61
  ULONG MuiImpersonation;             // offset: 0x17e8 ordinal: 0x62
  union {
    USHORT CrossTebFlags;          // offset: 0x17ec ordinal: 0x63
    USHORT SpareCrossTebBits : 16; // offset: 0x17ec ordinal: 0x64
  };
  union {
    USHORT SameTebFlags;      // offset: 0x17ee ordinal: 0x65
    USHORT SafeThunkCall : 1; // offset: 0x17ee ordinal: 0x66
  };
  USHORT InDebugPrint : 1;           // offset: 0x17ee ordinal: 0x67
  USHORT HasFiberData : 1;           // offset: 0x17ee ordinal: 0x68
  USHORT SkipThreadAttach : 1;       // offset: 0x17ee ordinal: 0x69
  USHORT WerInShipAssertCode : 1;    // offset: 0x17ee ordinal: 0x6a
  USHORT RanProcessInit : 1;         // offset: 0x17ee ordinal: 0x6b
  USHORT ClonedThread : 1;           // offset: 0x17ee ordinal: 0x6c
  USHORT SuppressDebugMsg : 1;       // offset: 0x17ee ordinal: 0x6d
  USHORT DisableUserStackWalk : 1;   // offset: 0x17ee ordinal: 0x6e
  USHORT RtlExceptionAttached : 1;   // offset: 0x17ee ordinal: 0x6f
  USHORT InitialThread : 1;          // offset: 0x17ee ordinal: 0x70
  USHORT SessionAware : 1;           // offset: 0x17ee ordinal: 0x71
  USHORT LoadOwner : 1;              // offset: 0x17ee ordinal: 0x72
  USHORT LoaderWorker : 1;           // offset: 0x17ee ordinal: 0x73
  USHORT SkipLoaderInit : 1;         // offset: 0x17ee ordinal: 0x74
  USHORT SpareSameTebBits : 1;       // offset: 0x17ee ordinal: 0x75
  ULONGLONG TxnScopeEnterCallback;   // offset: 0x17f0 ordinal: 0x76
  ULONGLONG TxnScopeExitCallback;    // offset: 0x17f8 ordinal: 0x77
  ULONGLONG TxnScopeContext;         // offset: 0x1800 ordinal: 0x78
  ULONG LockCount;                   // offset: 0x1808 ordinal: 0x79
  LONG WowTebOffset;                 // offset: 0x180c ordinal: 0x7a
  ULONGLONG ResourceRetValue;        // offset: 0x1810 ordinal: 0x7b
  ULONGLONG ReservedForWdf;          // offset: 0x1818 ordinal: 0x7c
  ULONGLONG ReservedForCrt;          // offset: 0x1820 ordinal: 0x7d
  struct _GUID EffectiveContainerId; // offset: 0x1828 ordinal: 0x7e
} _TEB64;
